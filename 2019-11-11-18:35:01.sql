-- MySQL dump 10.13  Distrib 5.7.25, for Linux (x86_64)
--
-- Host: localhost    Database: dbblog
-- ------------------------------------------------------
-- Server version	5.7.25

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(50) NOT NULL COMMENT '文章标题',
  `description` varchar(255) DEFAULT NULL COMMENT '文章描述',
  `author` varchar(50) DEFAULT NULL COMMENT '文章作者',
  `content` longtext COMMENT '文章内容',
  `content_format` longtext COMMENT 'html的content',
  `read_num` int(11) DEFAULT '0' COMMENT '阅读量',
  `like_num` int(11) DEFAULT '0' COMMENT '点赞量',
  `cover_type` int(11) DEFAULT NULL COMMENT '文章展示类别,0:普通，1：大图片，2：无图片',
  `cover` text COMMENT '封面',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `recommend` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否推荐文章',
  `category_id` varchar(50) DEFAULT NULL COMMENT '分类类别存在多级分类，用逗号隔开',
  `publish` tinyint(4) DEFAULT '0' COMMENT '发布状态',
  `top` tinyint(1) DEFAULT '0' COMMENT '是否置顶',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=56 DEFAULT CHARSET=utf8mb4 COMMENT='文章';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (1,'关于本站和博主','关于本站和博主','Bobbi','# 关于我\n氧化钡，英文名Bobbi，是一名努力成长中的Java爱好者  \n以下是微信，欢迎互相交流\n![weixin.jpg](http://oss.dblearn.cn/dbblog/20190524/507c44753cb8437d8bb0cadb08d1c4fa.jpg)\n# 关于本站\ngithub地址是[https://github.com/llldddbbb/dbblog](https://github.com/llldddbbb/dbblog)，开源不易，一定要给我*Star*哦！！\n[>>点击进入](https://github.com/llldddbbb/dbblog)\n\n\n','<h1 id=\"-\">关于我</h1>\n<p>氧化钡，英文名Bobbi，是一名努力成长中的Java爱好者<br>以下是微信，欢迎互相交流\n<img src=\"http://oss.dblearn.cn/dbblog/20190524/507c44753cb8437d8bb0cadb08d1c4fa.jpg\" alt=\"weixin.jpg\"></p>\n<h1 id=\"-\">关于本站</h1>\n<p>github地址是<a href=\"https://github.com/llldddbbb/dbblog\">https://github.com/llldddbbb/dbblog</a>，开源不易，一定要给我<em>Star</em>哦！！\n<a href=\"https://github.com/llldddbbb/dbblog\">&gt;&gt;点击进入</a></p>\n',3348,749,1,'http://oss.dblearn.cn/dbblog/20190303/18a6c1d2ed47494396462901ffe02f30.jpg','2019-03-09 09:09:38','2019-08-04 06:04:16',1,'1,2,3',1,1),(3,'2019Java最新面试题——Java基础（持续更新）','网上找的面试题大多比较老旧，很多还是Java6以前的。现在都更新到Java11了，面试题也应该与时俱进。本文搜罗各大厂的Java面试题，力求题目从简到难，分类明确，答案详细！也借此来巩固自己的知识。','Bobbi','### Java基础\n#### 1. 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？两个对象用equals方法比较为true，它们的hashcode值相同吗？\n不对，两个对象的hashCode相同，equals()不一定true，equals()方法为true，他们的hashcode也不一定相同。\n代码实例:\n```java\nString str1 = \"通话\";\nString str2 = \"重地\";\nSystem.out.println(String.format(\"str1：%d | str2：%d\",  str1.hashCode(),str2.hashCode()));\nSystem.out.println(str1.equals(str2));\n```\n执行的结果： \n\nstr1：1179395 | str2：1179395\n\nfalse\n\n很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。\n\n此外，两个对象用equals方法比较为true，它们的hashcode值也不一定相同\n下面的话来自JDK：\n> public int hashCode()返回该对象的哈希码值。支持此方法是为了==提高哈希表的性能==。\nhashCode 的常规协定是： \n&emsp;&emsp;在 Java 应用程序执行期间，在对同一对象多次调用hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行equals比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。\n\n&emsp;&emsp;如果根据 equals(Object) 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。如果根据 equals(java.lang.Object) 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。\n\n**总的来说：重写equals方法时请必须重写hashcode，以保证equals方法相等时两个对象hashcode返回相同的值。如果你不按照规范来，就不一定相同了。**','<h3 id=\"java-\">Java基础</h3>\n<h4 id=\"1-hashcode-equals-true-equals-true-hashcode-\">1. 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？两个对象用equals方法比较为true，它们的hashcode值相同吗？</h4>\n<p>不对，两个对象的hashCode相同，equals()不一定true，equals()方法为true，他们的hashcode也不一定相同。\n代码实例:</p>\n<pre><code class=\"language-java\">String str1 = &quot;通话&quot;;\nString str2 = &quot;重地&quot;;\nSystem.out.println(String.format(&quot;str1：%d | str2：%d&quot;,  str1.hashCode(),str2.hashCode()));\nSystem.out.println(str1.equals(str2));</code></pre>\n<p>执行的结果： </p>\n<p>str1：1179395 | str2：1179395</p>\n<p>false</p>\n<p>很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p>\n<p>此外，两个对象用equals方法比较为true，它们的hashcode值也不一定相同\n下面的话来自JDK：</p>\n<blockquote>\n<p>public int hashCode()返回该对象的哈希码值。支持此方法是为了==提高哈希表的性能==。\nhashCode 的常规协定是： \n&emsp;&emsp;在 Java 应用程序执行期间，在对同一对象多次调用hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行equals比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。</p>\n</blockquote>\n<p>&emsp;&emsp;如果根据 equals(Object) 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。如果根据 equals(java.lang.Object) 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。</p>\n<p><strong>总的来说：重写equals方法时请必须重写hashcode，以保证equals方法相等时两个对象hashcode返回相同的值。如果你不按照规范来，就不一定相同了。</strong></p>\n',265,65,2,'http://oss.dblearn.cn/dbblog/20190304/b00399e2664b4c42a3e2b4b23fcf128b.jpeg','2019-03-09 09:09:38','2019-03-19 05:04:35',0,'9,11,12',1,0),(4,'用最简单的话告诉你什么是ElasticSearch','Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎,一个建立在全文搜索引擎 Apache Lucene(TM) 基础上的搜索引擎.当然 Elasticsearch 并不仅仅是 Lucene 那么简单，下面就介绍ElasticSearch为什么是分布式的，可扩展，高性能，高可用。\n\n\n作者：fallinjava\n链接：https://juejin.im/post/5c790b4b51882545194f84f0\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。','Bobbi','\n> 转载:https://juejin.im/post/5c790b4b51882545194f84f0\n\n## 1.什么是搜索\n在我们想知道一些信息时，就会使用一些搜索引擎来获取我们想要的数据，比如搜索我们喜欢的一款游戏，或者喜欢的一本书等等，这就是提到搜索的的第一印象，说直白点就是在任何场景下找寻你想要知道的信息，这就是搜索。\n- 现在的搜索也称为垂直搜索 垂直搜索引针对某一个行业的专业搜索引擎，比如说电商网站，新闻网站，各种app内部等等，他们都是搜索引擎的细分和延伸，在抽取出需要的数据进行处理后再以某种形式返回给用户。\n\n## 2.如果用数据库来做搜索会怎么样\n例如我们这里有一张商品表，现在我们要搜索\"衣服\"这个关键字，，执行了 select * from products where product_name like %衣服%，（假设这里没有其他任何提升效率的设置）来进行搜索，或者进行其他字段的匹配，可以分析一下这个方式的缺点。\n\n1. 比如说，每条记录的指定字段的数据会很长，比如说“商品介绍”这个字段，可能会有几千或者几万个字符，那么搜索的时候就会去这些字符里面进行匹配是否包含要搜索的关键词。\n2. 这种方式只能搜索到完全包含“衣服”这个两个字符的记录，但是可能会有一些特殊的情况，某几条记录里面的“衣服”关键词并不是连续的，可能衣服中间会插入某些字符，这个时候就搜索不出来这些记录了，但是这个商品又是我们希望搜索出来的，这个时候这种方式的弊端就十分明显了。\n\n总的来说用数据库来实现搜索是不太靠谱的，性能会很差。\n\n## 3.什么是全文检索\n首先需要了解什么是倒排索引？我们这里先上一幅图，里面有4条记录。\n![1.jpg](http://oss.dblearn.cn/dbblog/20190305/fb6809d46e7744e78c5a686bbd096506.jpg)\n现在将这4条记录的内容进行拆分成一些词条，这个过程叫做分词\n![2.jpg](http://oss.dblearn.cn/dbblog/20190305/0271f31d280f49b68ae9e942f286a3e4.jpg)\n现在我们得到了这4条记录拆分出来词语，然后将这写词语放到一个列表中，并记录他们的ID，这个分析出来的就是 倒排索引\n![3.jpg](http://oss.dblearn.cn/dbblog/20190305/567fa7ca43d34eab886a5b8dc4c83b4f.jpg)\n\n现在我们输入 生化电影 这个关键词，这个时候搜素引擎将我们输入的内容分词为 生化 和 电影 这两个关键词，然后使用这个两个关键词去倒排索引里面匹配，发现包含 生化 这个关键词的记录有ID为 1,2,3,4这四条记录，包含 电影 这个关键词的有ID为1这条记录，由于ID为1这条记录已经被录入了，所以就被排除在外了， 这时候我们就得到了想要ID为1234这4条记录，同理，如果我们只输入 电影 这个关键词，那么符合条件的只有ID为1这条记录了。  \n\n全文检索就是从拆分词语，存入倒排索引，然后分析用户输入的内容，在倒排索引里面进行匹配，这个过程就是全文检索。\n\n## 4.什么是ElasticSearch\n&emsp;&emsp;首先需要知道什么是Lucence，Lucence它就是一个Java的jar包，里面实现了倒排索引的算法和其他的全文检索相关的东西，ElasticSearch就是对Lunence进行了封装，为什么有Lucence了还要ElasticSeaearch来干什么呢？  \n\n&emsp;当数据量很大的时候，比如有1PB的数据，这个时候数据放在同一台机器上基本就不行了，那么把数据分开来放在多台机器上呢？那就变成分布式了，这个时候数据前端获取数据的时候到底去那一台机器上面去获取数据呢？这个时候就很麻烦了，如果某一台机器宕机了，那么这个机器上的数据就获取不到了，这也就无法保证高可用性了，还有数据存储的时候怎么到底存入那台机器等等，这些都需要人为的处理和维护。这个时候ElasticSearch就应运而生了，它就将Lucence这些弊端给完全解决了。  \n\n举例一些优点：\n\n1. 高性能，自动维护数据分布到多个节点进行索引的建立，还有搜索请求分布到多个节点的执行。\n2. 高可用，自动维护数据的冗余副本，保证说，一些机器宕机了，不会造成数据的丢失。\n3. 封装了更多的高级功能，以给我们提供更多的高级支持，让我们快速的开发应用，开发更加复杂的应用，复杂的搜索功能，聚合分析的功能，基于地理位置的搜索(比如周围一公里内有几家咖啡厅)等等。\n4. 动态扩容，当我们数据量急剧提升的时候，我们只需要增加机器就行了，比如两台机器存放1.2T数据，那么没台机器存放就是600G，但是如果600G对于服务器的压力太大了，这个时候就需要增加第三台机器，让他们每人负责400G的数据，这个过程不需要人为的去分配，只需要将汲取加入集群中就自动完成。\n\n\n','<blockquote>\n<p>转载:<a href=\"https://juejin.im/post/5c790b4b51882545194f84f0\">https://juejin.im/post/5c790b4b51882545194f84f0</a></p>\n</blockquote>\n<h2 id=\"1-\">1.什么是搜索</h2>\n<p>在我们想知道一些信息时，就会使用一些搜索引擎来获取我们想要的数据，比如搜索我们喜欢的一款游戏，或者喜欢的一本书等等，这就是提到搜索的的第一印象，说直白点就是在任何场景下找寻你想要知道的信息，这就是搜索。</p>\n<ul>\n<li>现在的搜索也称为垂直搜索 垂直搜索引针对某一个行业的专业搜索引擎，比如说电商网站，新闻网站，各种app内部等等，他们都是搜索引擎的细分和延伸，在抽取出需要的数据进行处理后再以某种形式返回给用户。</li>\n</ul>\n<h2 id=\"2-\">2.如果用数据库来做搜索会怎么样</h2>\n<p>例如我们这里有一张商品表，现在我们要搜索&quot;衣服&quot;这个关键字，，执行了 select * from products where product_name like %衣服%，（假设这里没有其他任何提升效率的设置）来进行搜索，或者进行其他字段的匹配，可以分析一下这个方式的缺点。</p>\n<ol>\n<li>比如说，每条记录的指定字段的数据会很长，比如说“商品介绍”这个字段，可能会有几千或者几万个字符，那么搜索的时候就会去这些字符里面进行匹配是否包含要搜索的关键词。</li>\n<li>这种方式只能搜索到完全包含“衣服”这个两个字符的记录，但是可能会有一些特殊的情况，某几条记录里面的“衣服”关键词并不是连续的，可能衣服中间会插入某些字符，这个时候就搜索不出来这些记录了，但是这个商品又是我们希望搜索出来的，这个时候这种方式的弊端就十分明显了。</li>\n</ol>\n<p>总的来说用数据库来实现搜索是不太靠谱的，性能会很差。</p>\n<h2 id=\"3-\">3.什么是全文检索</h2>\n<p>首先需要了解什么是倒排索引？我们这里先上一幅图，里面有4条记录。\n<img src=\"http://oss.dblearn.cn/dbblog/20190305/fb6809d46e7744e78c5a686bbd096506.jpg\" alt=\"1.jpg\">\n现在将这4条记录的内容进行拆分成一些词条，这个过程叫做分词\n<img src=\"http://oss.dblearn.cn/dbblog/20190305/0271f31d280f49b68ae9e942f286a3e4.jpg\" alt=\"2.jpg\">\n现在我们得到了这4条记录拆分出来词语，然后将这写词语放到一个列表中，并记录他们的ID，这个分析出来的就是 倒排索引\n<img src=\"http://oss.dblearn.cn/dbblog/20190305/567fa7ca43d34eab886a5b8dc4c83b4f.jpg\" alt=\"3.jpg\"></p>\n<p>现在我们输入 生化电影 这个关键词，这个时候搜素引擎将我们输入的内容分词为 生化 和 电影 这两个关键词，然后使用这个两个关键词去倒排索引里面匹配，发现包含 生化 这个关键词的记录有ID为 1,2,3,4这四条记录，包含 电影 这个关键词的有ID为1这条记录，由于ID为1这条记录已经被录入了，所以就被排除在外了， 这时候我们就得到了想要ID为1234这4条记录，同理，如果我们只输入 电影 这个关键词，那么符合条件的只有ID为1这条记录了。  </p>\n<p>全文检索就是从拆分词语，存入倒排索引，然后分析用户输入的内容，在倒排索引里面进行匹配，这个过程就是全文检索。</p>\n<h2 id=\"4-elasticsearch\">4.什么是ElasticSearch</h2>\n<p>&emsp;&emsp;首先需要知道什么是Lucence，Lucence它就是一个Java的jar包，里面实现了倒排索引的算法和其他的全文检索相关的东西，ElasticSearch就是对Lunence进行了封装，为什么有Lucence了还要ElasticSeaearch来干什么呢？  </p>\n<p>&emsp;当数据量很大的时候，比如有1PB的数据，这个时候数据放在同一台机器上基本就不行了，那么把数据分开来放在多台机器上呢？那就变成分布式了，这个时候数据前端获取数据的时候到底去那一台机器上面去获取数据呢？这个时候就很麻烦了，如果某一台机器宕机了，那么这个机器上的数据就获取不到了，这也就无法保证高可用性了，还有数据存储的时候怎么到底存入那台机器等等，这些都需要人为的处理和维护。这个时候ElasticSearch就应运而生了，它就将Lucence这些弊端给完全解决了。  </p>\n<p>举例一些优点：</p>\n<ol>\n<li>高性能，自动维护数据分布到多个节点进行索引的建立，还有搜索请求分布到多个节点的执行。</li>\n<li>高可用，自动维护数据的冗余副本，保证说，一些机器宕机了，不会造成数据的丢失。</li>\n<li>封装了更多的高级功能，以给我们提供更多的高级支持，让我们快速的开发应用，开发更加复杂的应用，复杂的搜索功能，聚合分析的功能，基于地理位置的搜索(比如周围一公里内有几家咖啡厅)等等。</li>\n<li>动态扩容，当我们数据量急剧提升的时候，我们只需要增加机器就行了，比如两台机器存放1.2T数据，那么没台机器存放就是600G，但是如果600G对于服务器的压力太大了，这个时候就需要增加第三台机器，让他们每人负责400G的数据，这个过程不需要人为的去分配，只需要将汲取加入集群中就自动完成。</li>\n</ol>\n',234,56,0,'http://oss.dblearn.cn/dbblog/20190305/d991537084cf42b2889b41838b59df0f.png','2019-03-09 09:09:38','2019-03-30 07:24:31',0,'18,19,20',1,0),(5,'性能分析利器《Arthas》总结','Arthas 是Alibaba开源的Java诊断工具，为什么要介绍这个工具呢？先来看看你是否都遇到这样的场景：当你线上项目出了问题，但是一打开日志发现，有些地方忘记打了日志，于是你马上补上日志，然后重新上线。当你的项目某个接口执行速度较慢，为了排查问题，于是你四处加上每个方法运行时间。当你发现某个类有冲突，好像在线上运行的结果和你预期的不符合，手动把线上编译出的class文件下载下来然后反编译，看看究竟class内容是什么。','Bobbi','## 性能分析利器《Arthas》总结\nArthas 是Alibaba开源的Java诊断工具，为什么要介绍这个工具呢？先来看看你是否都遇到这样的场景：\n\n- 当你线上项目出了问题，但是一打开日志发现，有些地方忘记打了日志，于是你马上补上日志，然后重新上线。\n- 当你的项目某个接口执行速度较慢，为了排查问题，于是你四处加上每个方法运行时间。\n- 当你发现某个类有冲突，好像在线上运行的结果和你预期的不符合，手动把线上编译出的class文件下载下来然后反编译，看看究竟class内容是什么。\n- 当你发现系统突然报出某个类的Exception，却无法找到这个类是从哪个Jar包加载的。\n- 当你发现有时候排查一个问题需要上游重复调用这个方法，于是你只能想尽办法利用postman等工具重现这个请求。\n\n\n下面我将会介绍一下Arthas的一些常用的命令和用法，看看是如何解决我们实际中的问题的，至于安装教程可以参考Arthas的github。\n> https://github.com/alibaba/arthas\n\n## 常用命令\ndashboard 当前系统的实时数据面板  \n\njvm 查看当前JVM信息  \n\nthread 可直接查看线程的cpu占用比  \n\nsc sm 快速搜索类和方法信息  \n\ngetstatic 查看类静态变量  \n\njad 反编译class文件  \n\nmc 编译.java文件生成.class  \n\nredefine 加载外部class文件到应用程序中  \n\nmonitor 监测方法调用次数、成功次数、失败次数、平均RT等  \n\nwatch tt 观测方法执行的前、后、结束、异常、耗时过大时，入参（入参属性深度可调）、返回值、异常，支持实时监测每次方法执行和方法的所有调用执行。  \n\ntrace 查看方法调用树耗时  \n\nstack 查看方法的所有调用树路径\n\n## 1.奇怪的类加载错误\n&emsp;&emsp;相信大家都遇到过NoSuchMethodError这个错误，一般老司机看见这个错误第一反应就是jar包版本号冲突，这种问题一般来说使用maven的一些插件就能轻松解决。  \n\n&emsp;&emsp;之前遇到个奇怪的问题，我们有两个服务的client-jar包，有个类的包名和类名均是一致，在编写代码的时候没有注意到这个问题，在编译阶段由于包名和类名都是一致，所有编译阶段并没有报错，在线下的运行阶段没有问题，但是测试环境的机器中的运行阶段缺报出了问题。这个和之前的jar包版本号冲突有点不同，因为在排查的时候我们想使用A服务的client-jar包的这个类，但是这个jar包的版本号在Maven中的确是唯一的。\n这个时候Arthas就可以大显神通了。\n### 1.1 sc命令\n找到对应的类，然后输出下面的命令(用例使用的是官方提供的用例):\n``` shell\n$ sc -d demo.MathGame\nclass-info        demo.MathGame\ncode-source       /private/tmp/arthas-demo.jar\nname              demo.MathGame\nisInterface       false\nisAnnotation      false\nisEnum            false\nisAnonymousClass  false\nisArray           false\nisLocalClass      false\nisMemberClass     false\nisPrimitive       false\nisSynthetic       false\nsimple-name       MathGame\nmodifier          public\nannotation\ninterfaces\nsuper-class       +-java.lang.Object\nclass-loader      +-sun.misc.Launcher$AppClassLoader@3d4eac69\n                    +-sun.misc.Launcher$ExtClassLoader@66350f69\nclassLoaderHash   3d4eac69\n \nAffect(row-cnt:1) cost in 875 ms.\n\n```\n可以看见打印出了code-source,当时发现了code-source并不是从对应的Jar包取出来的，于是发现了两个服务对于同一个类使用了同样的包名和类名，导致了这个奇怪的问题，后续通过修改包名和类名进行解决。\n\n### 1.2 jad\nArthas还提供了一个命令jad用来反编译,对于解决类冲突错误很有用，比如我们想知道这个类里面的代码到底是什么，直接一个jad命令就能搞定:\n```shell\n$ jad java.lang.String\n \nClassLoader:\n \nLocation:\n \n/*\n* Decompiled with CFR 0_132.\n*/\npackage java.lang;\n \nimport java.io.ObjectStreamField;\n...\npublic final class String\nimplements Serializable,\nComparable<String>,\nCharSequence {\n    private final char[] value;\n    private int hash;\n    private static final long serialVersionUID = -6849794470754667710L;\n    private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];\n    public static final Comparator<String> CASE_INSENSITIVE_ORDER = new CaseInsensitiveComparator();\n \n    public String(byte[] arrby, int n, int n2) {\n        String.checkBounds(arrby, n, n2);\n        this.value = StringCoding.decode(arrby, n, n2);\n    }\n...\n```\n\n一般通过这个命令我们就能发现和你所期待的类是否缺少了某些方法，或者某些方法有些改变，从而确定jar包冲突。\n\n## 2.动态修改日志级别\n有很多同学可能会觉得动态修改日志有什么用呢？好像自己也没怎么用过呢？\n一般来说下面这几个场景可以需要:  \n\n一般大家日志级别默认是info，有时候需要查看debug的日志可能需要重新上线。\n当线上某个应用流量比较大的时候，如何业务出现问题，可能会短时间之内产生大量日志，由于日志会写盘，会消耗大量的内存和磁盘IO进一步加重我们的问题严重性，进而引起雪崩。\n我们可以使用动态修改日志解决我们上面两个问题\n\n### 2.1 ognl\nognl是一门表达式语言，在Arthas中你可以利用这个表达式语言做很多事，比如执行某个方法，获取某个信息。再这里我们可以通过下面的命令来动态的修改日志级别:\n``` shell\n$ ognl \'@com.lz.test@LOGGER.logger.privateConfig\'\n@PrivateConfig[\n    loggerConfig=@LoggerConfig[root],\n    loggerConfigLevel=@Level[INFO],\n    intLevel=@Integer[400],\n]\n$ ognl \'@com.lz.test@LOGGER.logger.setLevel(@org.apache.logging.log4j.Level@ERROR)\'\nnull\n$ ognl \'@com.lz.test@LOGGER.logger.privateConfig\'\n@PrivateConfig[\n    loggerConfig=@LoggerConfig[root],\n    loggerConfigLevel=@Level[ERROR],\n    intLevel=@Integer[200],\n  \n]\n\n```\n\n\n## 3.如何知道某个方法是否调用\n很多时候我们方法执行的情况和我们预期不符合，但是我们又不知道到底哪里不符合，Arthas的watch命令就能帮助我们解决这个问题。\n\n### 3.1 watch\nwatch命令顾名思义观察，他可以观察指定方法调用情况，定义了4个观察事件点， -b 方法调用前，-e 方法异常后，-s 方法返回后，-f 方法结束后。默认是-f\n比如我们想知道某个方法执行的时候，参数和返回值到底是什么。注意这里的参数是方法执行完成的时候的参数，和入参不同有可能会发生变化。\n``` shell\n$ watch demo.MathGame primeFactors \"{params,returnObj}\" -x 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 44 ms.\nts=2018-12-03 19:16:51; [cost=1.280502ms] result=@ArrayList[\n    @Object[][\n        @Integer[535629513],\n    ],\n    @ArrayList[\n        @Integer[3],\n        @Integer[19],\n        @Integer[191],\n        @Integer[49199],\n    ],\n]\n```\n\n你能得到参数和返回值的情况，以及方法时间消耗的等信息。\n\n## 4.如何知道某个方法耗时较多\n当某个方法耗时较长，这个时候你需要排查到底是某一处发生了长时间的耗时，一般这种问题比较难排查，都是通过全链路追踪trace图去进行排查，但是在本地的应用中没有trace图，这个时候需要Arthas的trace命令来进行排查问题。\n### 4.1 trace\ntrace 命令能主动搜索 class-pattern／method-pattern 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。\n但是trace只能追踪一层的调用链路，如果一层的链路信息不够用，可以把该链路上有问题的方法再次进行trace。\ntrace使用例子如下。\n``` shell\n$ trace demo.MathGame run\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 42 ms.\n`---ts=2018-12-04 00:44:17;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    `---[10.611029ms] demo.MathGame:run()\n        +---[0.05638ms] java.util.Random:nextInt()\n        +---[10.036885ms] demo.MathGame:primeFactors()\n        `---[0.170316ms] demo.MathGame:print()\n\n```\n\n可以看见上述耗时最多的方法是primeFactors，所以我们可以对其进行trace进行再一步的排查。\n\n## 5.如何使用命令重发请求？\n有时候排查一个问题需要上游再次调用这个方法，比如使用postMan等工具，当然Arthas提供了一个命令让替代我们来回手动请求。\n### 5.1 tt\ntt官方介绍: 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。可以看见tt可以用于录制请求，当然也支持我们重放。\n如果要录制某个方法，可以用下面命令:\n```shell\n$ tt -t demo.MathGame primeFactors\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 66 ms.\n INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD\n-------------------------------------------------------------------------------------------------------------------------------------\n 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors\n\n```\n\n上面录制了5个调用环境现场，也可以看做是录制了5个请求返回信息。比如我们想选择index为1004个的请求来重放，可以输入下面的命令。\n```shell\n$ tt -i 1004 -p\n RE-INDEX       1004\n GMT-REPLAY     2018-12-04 11:26:00\n OBJECT         0x4b67cf4d\n CLASS          demo.MathGame\n METHOD         primeFactors\n PARAMETERS[0]  @Integer[946738738]\n IS-RETURN      true\n IS-EXCEPTION   false\n RETURN-OBJ     @ArrayList[\n                    @Integer[2],\n                    @Integer[11],\n                    @Integer[17],\n                    @Integer[2531387],\n                ]\nTime fragment[1004] successfully replayed.\nAffect(row-cnt:1) cost in 14 ms.\n```\n\n注意重放请求需要关注两点:\n\nThreadLocal 信息丢失:由于使用的是Arthas线程调用，会让threadLocal信息丢失，比如一些TraceId信息可能会丢失\n引用的对象:保存的入参是保存的引用，而不是拷贝，所以如果参数中的内容被修改，那么入参其实也是被修改的。\n\n## 6.一些耗时的方法，经常被触发，如何知道谁调用的?\n有时候有些方法非常耗时或者非常重要，需要知道到底是谁发起的调用，比如System.gc(),有时候如果你发现fullgc频繁是因为System.gc()引起的，你需要查看到底是什么应用调用的，那么你就可以使用下面的命令\n我们可以输入下面的命令:\n```shell\n$ options unsafe true\n NAME    BEFORE-VALUE  AFTER-VALUE                                                                                                                                                                        \n-----------------------------------                                                                                                                                                                       \n unsafe  false         true                                                                                                                                                                               \n$ stack java.lang.System gc\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 50 ms.\nts=2019-01-20 21:14:05;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@14dad5dc\n    @java.lang.System.gc()\n        at com.lz.test.Test.main(Test.java:322)\n\n```\n\n首先输入options unsafe true允许我们对jdk增强，然后对System.gc进行进行监视，然后记录当前的堆栈来获取是什么位置进行的调用。\n## 7.如何重定义某个类?\n有些时候我们找了所有的命令，发现和我们的需求并不符合的时候，那么这个时候我们可以重新定义这个类，我们可以用使用下面的命令。\n### 7.1 redefine\nredefine命令提供了我们可以重新定义jvm中的class，但是使用这个命令之后class不可恢复。我们首先需要把重写的class编译出来，然后上传到我们指定的目录，进行下面的操作:\n```shell\n redefine -p /tmp/Test.class\n```\n\n可以重定义我们的Test.class。从而修改逻辑，完成我们自定义的需求。\n','<h2 id=\"-arthas-\">性能分析利器《Arthas》总结</h2>\n<p>Arthas 是Alibaba开源的Java诊断工具，为什么要介绍这个工具呢？先来看看你是否都遇到这样的场景：</p>\n<ul>\n<li>当你线上项目出了问题，但是一打开日志发现，有些地方忘记打了日志，于是你马上补上日志，然后重新上线。</li>\n<li>当你的项目某个接口执行速度较慢，为了排查问题，于是你四处加上每个方法运行时间。</li>\n<li>当你发现某个类有冲突，好像在线上运行的结果和你预期的不符合，手动把线上编译出的class文件下载下来然后反编译，看看究竟class内容是什么。</li>\n<li>当你发现系统突然报出某个类的Exception，却无法找到这个类是从哪个Jar包加载的。</li>\n<li>当你发现有时候排查一个问题需要上游重复调用这个方法，于是你只能想尽办法利用postman等工具重现这个请求。</li>\n</ul>\n<p>下面我将会介绍一下Arthas的一些常用的命令和用法，看看是如何解决我们实际中的问题的，至于安装教程可以参考Arthas的github。</p>\n<blockquote>\n<p><a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></p>\n</blockquote>\n<h2 id=\"-\">常用命令</h2>\n<p>dashboard 当前系统的实时数据面板  </p>\n<p>jvm 查看当前JVM信息  </p>\n<p>thread 可直接查看线程的cpu占用比  </p>\n<p>sc sm 快速搜索类和方法信息  </p>\n<p>getstatic 查看类静态变量  </p>\n<p>jad 反编译class文件  </p>\n<p>mc 编译.java文件生成.class  </p>\n<p>redefine 加载外部class文件到应用程序中  </p>\n<p>monitor 监测方法调用次数、成功次数、失败次数、平均RT等  </p>\n<p>watch tt 观测方法执行的前、后、结束、异常、耗时过大时，入参（入参属性深度可调）、返回值、异常，支持实时监测每次方法执行和方法的所有调用执行。  </p>\n<p>trace 查看方法调用树耗时  </p>\n<p>stack 查看方法的所有调用树路径</p>\n<h2 id=\"1-\">1.奇怪的类加载错误</h2>\n<p>&emsp;&emsp;相信大家都遇到过NoSuchMethodError这个错误，一般老司机看见这个错误第一反应就是jar包版本号冲突，这种问题一般来说使用maven的一些插件就能轻松解决。  </p>\n<p>&emsp;&emsp;之前遇到个奇怪的问题，我们有两个服务的client-jar包，有个类的包名和类名均是一致，在编写代码的时候没有注意到这个问题，在编译阶段由于包名和类名都是一致，所有编译阶段并没有报错，在线下的运行阶段没有问题，但是测试环境的机器中的运行阶段缺报出了问题。这个和之前的jar包版本号冲突有点不同，因为在排查的时候我们想使用A服务的client-jar包的这个类，但是这个jar包的版本号在Maven中的确是唯一的。\n这个时候Arthas就可以大显神通了。</p>\n<h3 id=\"1-1-sc-\">1.1 sc命令</h3>\n<p>找到对应的类，然后输出下面的命令(用例使用的是官方提供的用例):</p>\n<pre><code class=\"language-shell\">$ sc -d demo.MathGame\nclass-info        demo.MathGame\ncode-source       /private/tmp/arthas-demo.jar\nname              demo.MathGame\nisInterface       false\nisAnnotation      false\nisEnum            false\nisAnonymousClass  false\nisArray           false\nisLocalClass      false\nisMemberClass     false\nisPrimitive       false\nisSynthetic       false\nsimple-name       MathGame\nmodifier          public\nannotation\ninterfaces\nsuper-class       +-java.lang.Object\nclass-loader      +-sun.misc.Launcher$AppClassLoader@3d4eac69\n                    +-sun.misc.Launcher$ExtClassLoader@66350f69\nclassLoaderHash   3d4eac69\n\nAffect(row-cnt:1) cost in 875 ms.\n</code></pre>\n<p>可以看见打印出了code-source,当时发现了code-source并不是从对应的Jar包取出来的，于是发现了两个服务对于同一个类使用了同样的包名和类名，导致了这个奇怪的问题，后续通过修改包名和类名进行解决。</p>\n<h3 id=\"1-2-jad\">1.2 jad</h3>\n<p>Arthas还提供了一个命令jad用来反编译,对于解决类冲突错误很有用，比如我们想知道这个类里面的代码到底是什么，直接一个jad命令就能搞定:</p>\n<pre><code class=\"language-shell\">$ jad java.lang.String\n\nClassLoader:\n\nLocation:\n\n/*\n* Decompiled with CFR 0_132.\n*/\npackage java.lang;\n\nimport java.io.ObjectStreamField;\n...\npublic final class String\nimplements Serializable,\nComparable&lt;String&gt;,\nCharSequence {\n    private final char[] value;\n    private int hash;\n    private static final long serialVersionUID = -6849794470754667710L;\n    private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];\n    public static final Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER = new CaseInsensitiveComparator();\n\n    public String(byte[] arrby, int n, int n2) {\n        String.checkBounds(arrby, n, n2);\n        this.value = StringCoding.decode(arrby, n, n2);\n    }\n...</code></pre>\n<p>一般通过这个命令我们就能发现和你所期待的类是否缺少了某些方法，或者某些方法有些改变，从而确定jar包冲突。</p>\n<h2 id=\"2-\">2.动态修改日志级别</h2>\n<p>有很多同学可能会觉得动态修改日志有什么用呢？好像自己也没怎么用过呢？\n一般来说下面这几个场景可以需要:  </p>\n<p>一般大家日志级别默认是info，有时候需要查看debug的日志可能需要重新上线。\n当线上某个应用流量比较大的时候，如何业务出现问题，可能会短时间之内产生大量日志，由于日志会写盘，会消耗大量的内存和磁盘IO进一步加重我们的问题严重性，进而引起雪崩。\n我们可以使用动态修改日志解决我们上面两个问题</p>\n<h3 id=\"2-1-ognl\">2.1 ognl</h3>\n<p>ognl是一门表达式语言，在Arthas中你可以利用这个表达式语言做很多事，比如执行某个方法，获取某个信息。再这里我们可以通过下面的命令来动态的修改日志级别:</p>\n<pre><code class=\"language-shell\">$ ognl &#39;@com.lz.test@LOGGER.logger.privateConfig&#39;\n@PrivateConfig[\n    loggerConfig=@LoggerConfig[root],\n    loggerConfigLevel=@Level[INFO],\n    intLevel=@Integer[400],\n]\n$ ognl &#39;@com.lz.test@LOGGER.logger.setLevel(@org.apache.logging.log4j.Level@ERROR)&#39;\nnull\n$ ognl &#39;@com.lz.test@LOGGER.logger.privateConfig&#39;\n@PrivateConfig[\n    loggerConfig=@LoggerConfig[root],\n    loggerConfigLevel=@Level[ERROR],\n    intLevel=@Integer[200],\n\n]\n</code></pre>\n<h2 id=\"3-\">3.如何知道某个方法是否调用</h2>\n<p>很多时候我们方法执行的情况和我们预期不符合，但是我们又不知道到底哪里不符合，Arthas的watch命令就能帮助我们解决这个问题。</p>\n<h3 id=\"3-1-watch\">3.1 watch</h3>\n<p>watch命令顾名思义观察，他可以观察指定方法调用情况，定义了4个观察事件点， -b 方法调用前，-e 方法异常后，-s 方法返回后，-f 方法结束后。默认是-f\n比如我们想知道某个方法执行的时候，参数和返回值到底是什么。注意这里的参数是方法执行完成的时候的参数，和入参不同有可能会发生变化。</p>\n<pre><code class=\"language-shell\">$ watch demo.MathGame primeFactors &quot;{params,returnObj}&quot; -x 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 44 ms.\nts=2018-12-03 19:16:51; [cost=1.280502ms] result=@ArrayList[\n    @Object[][\n        @Integer[535629513],\n    ],\n    @ArrayList[\n        @Integer[3],\n        @Integer[19],\n        @Integer[191],\n        @Integer[49199],\n    ],\n]</code></pre>\n<p>你能得到参数和返回值的情况，以及方法时间消耗的等信息。</p>\n<h2 id=\"4-\">4.如何知道某个方法耗时较多</h2>\n<p>当某个方法耗时较长，这个时候你需要排查到底是某一处发生了长时间的耗时，一般这种问题比较难排查，都是通过全链路追踪trace图去进行排查，但是在本地的应用中没有trace图，这个时候需要Arthas的trace命令来进行排查问题。</p>\n<h3 id=\"4-1-trace\">4.1 trace</h3>\n<p>trace 命令能主动搜索 class-pattern／method-pattern 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。\n但是trace只能追踪一层的调用链路，如果一层的链路信息不够用，可以把该链路上有问题的方法再次进行trace。\ntrace使用例子如下。</p>\n<pre><code class=\"language-shell\">$ trace demo.MathGame run\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 42 ms.\n`---ts=2018-12-04 00:44:17;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    `---[10.611029ms] demo.MathGame:run()\n        +---[0.05638ms] java.util.Random:nextInt()\n        +---[10.036885ms] demo.MathGame:primeFactors()\n        `---[0.170316ms] demo.MathGame:print()\n</code></pre>\n<p>可以看见上述耗时最多的方法是primeFactors，所以我们可以对其进行trace进行再一步的排查。</p>\n<h2 id=\"5-\">5.如何使用命令重发请求？</h2>\n<p>有时候排查一个问题需要上游再次调用这个方法，比如使用postMan等工具，当然Arthas提供了一个命令让替代我们来回手动请求。</p>\n<h3 id=\"5-1-tt\">5.1 tt</h3>\n<p>tt官方介绍: 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。可以看见tt可以用于录制请求，当然也支持我们重放。\n如果要录制某个方法，可以用下面命令:</p>\n<pre><code class=\"language-shell\">$ tt -t demo.MathGame primeFactors\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 66 ms.\n INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD\n-------------------------------------------------------------------------------------------------------------------------------------\n 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors\n</code></pre>\n<p>上面录制了5个调用环境现场，也可以看做是录制了5个请求返回信息。比如我们想选择index为1004个的请求来重放，可以输入下面的命令。</p>\n<pre><code class=\"language-shell\">$ tt -i 1004 -p\n RE-INDEX       1004\n GMT-REPLAY     2018-12-04 11:26:00\n OBJECT         0x4b67cf4d\n CLASS          demo.MathGame\n METHOD         primeFactors\n PARAMETERS[0]  @Integer[946738738]\n IS-RETURN      true\n IS-EXCEPTION   false\n RETURN-OBJ     @ArrayList[\n                    @Integer[2],\n                    @Integer[11],\n                    @Integer[17],\n                    @Integer[2531387],\n                ]\nTime fragment[1004] successfully replayed.\nAffect(row-cnt:1) cost in 14 ms.</code></pre>\n<p>注意重放请求需要关注两点:</p>\n<p>ThreadLocal 信息丢失:由于使用的是Arthas线程调用，会让threadLocal信息丢失，比如一些TraceId信息可能会丢失\n引用的对象:保存的入参是保存的引用，而不是拷贝，所以如果参数中的内容被修改，那么入参其实也是被修改的。</p>\n<h2 id=\"6-\">6.一些耗时的方法，经常被触发，如何知道谁调用的?</h2>\n<p>有时候有些方法非常耗时或者非常重要，需要知道到底是谁发起的调用，比如System.gc(),有时候如果你发现fullgc频繁是因为System.gc()引起的，你需要查看到底是什么应用调用的，那么你就可以使用下面的命令\n我们可以输入下面的命令:</p>\n<pre><code class=\"language-shell\">$ options unsafe true\n NAME    BEFORE-VALUE  AFTER-VALUE                                                                                                                                                                        \n-----------------------------------                                                                                                                                                                       \n unsafe  false         true                                                                                                                                                                               \n$ stack java.lang.System gc\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 50 ms.\nts=2019-01-20 21:14:05;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@14dad5dc\n    @java.lang.System.gc()\n        at com.lz.test.Test.main(Test.java:322)\n</code></pre>\n<p>首先输入options unsafe true允许我们对jdk增强，然后对System.gc进行进行监视，然后记录当前的堆栈来获取是什么位置进行的调用。</p>\n<h2 id=\"7-\">7.如何重定义某个类?</h2>\n<p>有些时候我们找了所有的命令，发现和我们的需求并不符合的时候，那么这个时候我们可以重新定义这个类，我们可以用使用下面的命令。</p>\n<h3 id=\"7-1-redefine\">7.1 redefine</h3>\n<p>redefine命令提供了我们可以重新定义jvm中的class，但是使用这个命令之后class不可恢复。我们首先需要把重写的class编译出来，然后上传到我们指定的目录，进行下面的操作:</p>\n<pre><code class=\"language-shell\"> redefine -p /tmp/Test.class</code></pre>\n<p>可以重定义我们的Test.class。从而修改逻辑，完成我们自定义的需求。</p>\n',202,37,2,NULL,'2019-03-09 09:09:38','2019-03-30 07:26:12',0,'9,21,22',1,0),(7,'如何撰写精彩的技术博客文章','--- 从创意到精致结果的五个步骤','Bobbi','> 转自 https://juejin.im/post/5c336723f265da61117a7812 \n\n在本文中，我们将介绍撰写帖子的过程的五个主要步骤：\n\n- 全力找一个好主题\n- 明确目标和受众\n- 有一个好的开头结尾并且内容翔实\n- 获得反馈并进行迭代\n- 添加最后润色：包装，发布和宣传\n\n让我们进入第一步吧！\n### 1.全力找一个好主题\n&emsp;&emsp;你需要先有一些想法才能开始写作。 那些想要开始写博客的人跟我说，没有想法通常是他们的主要阻碍问题。\n\n&emsp;&emsp;最简单的策略是写你所知道的。 如果你花了很多时间学习某些东西，并且你认为你可以在几分钟内解释它，那么你将为读者提供很多价值。 \n\n&emsp;&emsp;另一个想法是写一个某个区域没有的内容。 例如，目前关于如何申请技术会议的帖子不多，因此有关这方面的内容可填补社区空白。以下是可以使用的一些特定类型的帖子。 示例来自 Apollo 博客上与 GraphQL 相关的帖子：\n1. 实现特定目标的分步指南：“使用 FlatList 在 React Native 中构建一个出色的可滚动列表”或“使用 Apollo 和 Recompose 简化您的 React 组件”。 这些对于那些想要快速做一个 demo 的读者来说非常棒。\n2. 对特定主题的深入调查：“使用 GraphQL 中的可空性”或“GraphQL 查询的剖析”。 如果你的目标受众是对此感兴趣并且想要用一杯咖啡的时间来了解更多知识的话，这些内容会非常有用。\n3. 围绕一个常用主题较为有用的清单：“调用 GraphQL API 的 4 种简单方法”或“静态 GraphQL 查询的 5 种好处”。 这是一个有趣，轻量级的阅读，因为你不必阅读整体，是很容易利用碎片时间来完成的。\n\n还有一些共同关注的问题，现在来打消这些疑虑：\n\n1. 关于这个话题已经被讨论过了。\n不要担心。 即使这个想法以前被写过，你也可以用自己的视角，来阐述在你这种特定环境下的不同做法。\n2. 我的想法不够有趣。 我的很多朋友和同事都不写，因为他们担心他们的结论可能很无聊或显而易见。 这很正常啊！ 如果你是某一方面的专家，那么理所当然你所写的结论对你来说会很无聊。关键是你的观众还不知道那些东西呢。\n\n即使说了这么多，在最后也很难预测什么样的主题能成为一个精彩（火）的文章，哪样的不会，并且往往是坚持写或换个文章，而不是一个精彩的主题。 我的主要建议是尝试写几个不同的东西，看看哪些有用。\n![201903111.png](http://oss.dblearn.cn/dbblog/20190311/e5f53de93a444d879e75700535a31855.png)\n\n> 灯泡 - 通常用来代表想法\n\n### 2.明确目标和受众\n&emsp;&emsp;既然你已了解自己的主题，那么需要为自己的帖子提供受众群体和目标。 谁会阅读它，他们将从中获得什么？\n\n你的目标需要具体，以便你可以将所有精力集中在一个主要想法上。 对于这篇文章，目标不能只是“写博客”。 我需要一个更具体的目标：\n\n- 受众：想要开始撰写博客的人，特别是有关技术主题的人，但还没有做到。\n- 目标：为人们提供一套具体的步骤和指示，以便他们可以开始。\n\n&emsp;&emsp;一旦有了这些，通过删除任何没有用的东西来保证你的文章主旨，避免添加额外的细节，因为他们需要有关联。 我发现相对简洁的帖子，阅读时间在 5-10 分钟时是成功概率最大的。\n\n&emsp;&emsp;了解观众的知识背景能够根据他们现有的知识提炼文章，有助于确定如何发布和宣传文章的内容。 例如，我希望在 LeetCode 上发布这个，因为目标受众中的很多人可能已经阅读过该出版物。\n\n### 3.有一个好的开头结尾并且内容翔实\n&emsp;&emsp;当文章结构走向奇怪时，会让人迷惑。 剧情曲折在虚构的短篇小说中可能是一个很大的好处。但如果能让读者获得想要的知识，那么这会是一篇更容易被阅读完的技术文章。 良好的文章结构，可以让读者顺利完成阅读。\n#### 介绍\n&emsp;&emsp;文章的第一段或第二段一般既不能吸引读者的注意也不会让他们失去兴趣。开篇可以用一小段话和一副大图来帮助读者理解文章的主旨。然后，告诉读者他们阅读此文会知道什么。提前揭秘可能很诱人，但要注意：如果你没有好的提示，读者就不会围绕这个点去阅读。\n#### 中间\n&emsp;&emsp;现在已经告诉读者会阅读什么，请满足他们的期待！你可以根据自己的需要随意添加详细信息，并在途中留下标志性文章以引导他们。多多使用标题，编号列表等来帮助读者了解他们阅读到文章的哪个部分，使他们能够跳读到他们最感兴趣的部分。\n#### 结论\n&emsp;&emsp;不要在文章末尾一下子就结束。如果你的读者已经读完了所有的内容，他们仍然会关注最后还有什么。给他们一个所学东西的快速总结，一篇文章的最后也可能只是告诉他们如果感兴趣就快行动起来吧。\n关于结构部分，我所建议的也许不是最有创意的，应该还有其他方法可以做到更好。 但简单的结构是与读者沟通的最直接方式。\n![201903112.png](http://oss.dblearn.cn/dbblog/20190311/fc002a1f7b91418b81502d58f29e574a.png)\n> 就像路标一样 文章的结构样应该能指引读者\n\n### 4.获得反馈并进行迭代\n&emsp;&emsp;在你阅读之前，你不会知道人们会从你的写作中得到什么。这才是你所设想的主题，目标，文章细节和结构真正受到考验的地方。如果想获得好结果，则不能跳过此步骤。\n\n&emsp;&emsp;当你想要获得反馈意见时，你可能觉得自己有点强势，或者你可能会担心这会产生负面影响，但是人们比你期望的更愿意提供帮助。在将文章发布到外面之前，最好先了解一下如何发布文章效果会更好。当我把这些都考虑进去时，我得到了一些非常有价值的反馈，使得文章内容更好，更有针对性。\n\n&emsp;&emsp;你应该向你的读者问些什么呢？我的主要建议是尽可能保持开放性。尽量不要事先解释你的意图。按原样移交草案，并询问您的审稿人他们从中得到了什么或应该更改什么。当互联网上有人遇到您的文章时，他们是没有任何额外的（和读者认识啊这种的）背景的独立个体。\n\n&emsp;&emsp;从反馈中验证的主要内容是：此帖子是否会实现您在第 2 步中确定的目标？保持迭代，直到你确定能明确目标和受众。\n\n### 5.添加最后润色：包装，发布和宣传\n&emsp;&emsp;既然你已经有了这个想法，目标，结构和一些反馈，那么现在是时候对所有东西进行润色并发布它了。\n#### 包装\n&emsp;&emsp;想出一个好的标题和副标题，并确保你的文章至少有一张图。这是人们在 Twitter 或 Facebook 上分享文章时会看到的内容，也是让人们对阅读此文感兴趣的机会。\n\n&emsp;&emsp;文章看起来和感觉起来都要很专业，这十分重要，这样才能够让内容真正有意义。最低目标应该是在文章中没有拼写错误，语法错误或奇怪的格式。如果您有一位非常善于发现小细节的朋友，请让他们在发布前仔细阅读。\n\n&emsp;&emsp;在 github 上发布文章也有一些关于编写样式和格式的好建议。既然你已经在你的文章中投入了太多的精力，那么额外增加一点努力来真正地完善它使之受众更广泛是非常值得的。\n\n&emsp;&emsp;最后，请备注上引用的作品或帮助审核和修改帖子的人来表达谢意。\n#### 发布\n&emsp;&emsp;终于到了这一步！选择你计划发布文章的网站，以便最有可能覆盖你的受众群体。Medium 通常是技术文章的汇集地，让人们很容易看到你的文章。\n\n&emsp;&emsp;关于奖励，尝试将你的文章发布到相关的技术网站中，以便于他们帮助分享你的文章 - 由此考虑，我选择了 freeCodeCamp，因为我认为这篇文章与他们的读者有关。如果你也想这样做，请按以下方式提交你的文章。你感兴趣的领域的技术网站也可能正在寻找文章，所以不要害怕联系！\n#### 宣传\n&emsp;&emsp;虽然你已经发布了文章，但是还没完事！如果你希望人们看到你撰写的内容并从中获取价值，请务必在读者可能会浏览的地方分享。这可能包括 Facebook 群组，Reddit，黑客新闻，LinkedIn 或任何其他平台。此外，请务必在你自己的社交媒体帐户（如 Twitter）上分享你的创作。你的朋友会很高兴阅读，分享和赞成你写的东西！\n\n&emsp;&emsp;现在，你已经完成了。去喝咖啡或散步 - 从开始到结束一篇博文都是不小的壮举。阅读社区的任何反馈和回复，以便你可以不断改进。当你有另一个想法时，就再去写一篇吧！\n![201903113.png](http://oss.dblearn.cn/dbblog/20190311/31751d686ce04dcc8b6a5d088ad31899.png)\n\n> 精美的图片能够锦上添花\n\n### 练习没有替代品\n&emsp;&emsp;在写作时，我们只是介绍了五个最重要的事情，从提出想法到发布。 现在你已经阅读过了，你尝试应用这个建议，看看哪些对你有用。\n\n&emsp;&emsp;我会留下最后一点建议。 我在过去 3 年中从博客中学到的主要内容是，我绝对无法预测哪些文章会无人问津，哪些文章最终会成为一个完整的系列。 有时候，我会花费好几天的时间来打磨一篇文章的每个细节，不允许一点错误。 也有时候，只是在深夜花了几个小时写的“GraphQL vs. REST”，成为了我有史以来最热门的文章。\n\n&emsp;&emsp;因此，即使你的第一篇，第二篇或第三篇文章没有成功，也要继续尝试新的东西，把你的想法写出来，并随着时间的推移而改进。 世界想要听到你要说的话。 去告诉他们！\n','<blockquote>\n<p>转自 <a href=\"https://juejin.im/post/5c336723f265da61117a7812\">https://juejin.im/post/5c336723f265da61117a7812</a> </p>\n</blockquote>\n<p>在本文中，我们将介绍撰写帖子的过程的五个主要步骤：</p>\n<ul>\n<li>全力找一个好主题</li>\n<li>明确目标和受众</li>\n<li>有一个好的开头结尾并且内容翔实</li>\n<li>获得反馈并进行迭代</li>\n<li>添加最后润色：包装，发布和宣传</li>\n</ul>\n<p>让我们进入第一步吧！</p>\n<h3 id=\"1-\">1.全力找一个好主题</h3>\n<p>&emsp;&emsp;你需要先有一些想法才能开始写作。 那些想要开始写博客的人跟我说，没有想法通常是他们的主要阻碍问题。</p>\n<p>&emsp;&emsp;最简单的策略是写你所知道的。 如果你花了很多时间学习某些东西，并且你认为你可以在几分钟内解释它，那么你将为读者提供很多价值。 </p>\n<p>&emsp;&emsp;另一个想法是写一个某个区域没有的内容。 例如，目前关于如何申请技术会议的帖子不多，因此有关这方面的内容可填补社区空白。以下是可以使用的一些特定类型的帖子。 示例来自 Apollo 博客上与 GraphQL 相关的帖子：</p>\n<ol>\n<li>实现特定目标的分步指南：“使用 FlatList 在 React Native 中构建一个出色的可滚动列表”或“使用 Apollo 和 Recompose 简化您的 React 组件”。 这些对于那些想要快速做一个 demo 的读者来说非常棒。</li>\n<li>对特定主题的深入调查：“使用 GraphQL 中的可空性”或“GraphQL 查询的剖析”。 如果你的目标受众是对此感兴趣并且想要用一杯咖啡的时间来了解更多知识的话，这些内容会非常有用。</li>\n<li>围绕一个常用主题较为有用的清单：“调用 GraphQL API 的 4 种简单方法”或“静态 GraphQL 查询的 5 种好处”。 这是一个有趣，轻量级的阅读，因为你不必阅读整体，是很容易利用碎片时间来完成的。</li>\n</ol>\n<p>还有一些共同关注的问题，现在来打消这些疑虑：</p>\n<ol>\n<li>关于这个话题已经被讨论过了。\n不要担心。 即使这个想法以前被写过，你也可以用自己的视角，来阐述在你这种特定环境下的不同做法。</li>\n<li>我的想法不够有趣。 我的很多朋友和同事都不写，因为他们担心他们的结论可能很无聊或显而易见。 这很正常啊！ 如果你是某一方面的专家，那么理所当然你所写的结论对你来说会很无聊。关键是你的观众还不知道那些东西呢。</li>\n</ol>\n<p>即使说了这么多，在最后也很难预测什么样的主题能成为一个精彩（火）的文章，哪样的不会，并且往往是坚持写或换个文章，而不是一个精彩的主题。 我的主要建议是尝试写几个不同的东西，看看哪些有用。\n<img src=\"http://oss.dblearn.cn/dbblog/20190311/e5f53de93a444d879e75700535a31855.png\" alt=\"201903111.png\"></p>\n<blockquote>\n<p>灯泡 - 通常用来代表想法</p>\n</blockquote>\n<h3 id=\"2-\">2.明确目标和受众</h3>\n<p>&emsp;&emsp;既然你已了解自己的主题，那么需要为自己的帖子提供受众群体和目标。 谁会阅读它，他们将从中获得什么？</p>\n<p>你的目标需要具体，以便你可以将所有精力集中在一个主要想法上。 对于这篇文章，目标不能只是“写博客”。 我需要一个更具体的目标：</p>\n<ul>\n<li>受众：想要开始撰写博客的人，特别是有关技术主题的人，但还没有做到。</li>\n<li>目标：为人们提供一套具体的步骤和指示，以便他们可以开始。</li>\n</ul>\n<p>&emsp;&emsp;一旦有了这些，通过删除任何没有用的东西来保证你的文章主旨，避免添加额外的细节，因为他们需要有关联。 我发现相对简洁的帖子，阅读时间在 5-10 分钟时是成功概率最大的。</p>\n<p>&emsp;&emsp;了解观众的知识背景能够根据他们现有的知识提炼文章，有助于确定如何发布和宣传文章的内容。 例如，我希望在 LeetCode 上发布这个，因为目标受众中的很多人可能已经阅读过该出版物。</p>\n<h3 id=\"3-\">3.有一个好的开头结尾并且内容翔实</h3>\n<p>&emsp;&emsp;当文章结构走向奇怪时，会让人迷惑。 剧情曲折在虚构的短篇小说中可能是一个很大的好处。但如果能让读者获得想要的知识，那么这会是一篇更容易被阅读完的技术文章。 良好的文章结构，可以让读者顺利完成阅读。</p>\n<h4 id=\"-\">介绍</h4>\n<p>&emsp;&emsp;文章的第一段或第二段一般既不能吸引读者的注意也不会让他们失去兴趣。开篇可以用一小段话和一副大图来帮助读者理解文章的主旨。然后，告诉读者他们阅读此文会知道什么。提前揭秘可能很诱人，但要注意：如果你没有好的提示，读者就不会围绕这个点去阅读。</p>\n<h4 id=\"-\">中间</h4>\n<p>&emsp;&emsp;现在已经告诉读者会阅读什么，请满足他们的期待！你可以根据自己的需要随意添加详细信息，并在途中留下标志性文章以引导他们。多多使用标题，编号列表等来帮助读者了解他们阅读到文章的哪个部分，使他们能够跳读到他们最感兴趣的部分。</p>\n<h4 id=\"-\">结论</h4>\n<p>&emsp;&emsp;不要在文章末尾一下子就结束。如果你的读者已经读完了所有的内容，他们仍然会关注最后还有什么。给他们一个所学东西的快速总结，一篇文章的最后也可能只是告诉他们如果感兴趣就快行动起来吧。\n关于结构部分，我所建议的也许不是最有创意的，应该还有其他方法可以做到更好。 但简单的结构是与读者沟通的最直接方式。\n<img src=\"http://oss.dblearn.cn/dbblog/20190311/fc002a1f7b91418b81502d58f29e574a.png\" alt=\"201903112.png\"></p>\n<blockquote>\n<p>就像路标一样 文章的结构样应该能指引读者</p>\n</blockquote>\n<h3 id=\"4-\">4.获得反馈并进行迭代</h3>\n<p>&emsp;&emsp;在你阅读之前，你不会知道人们会从你的写作中得到什么。这才是你所设想的主题，目标，文章细节和结构真正受到考验的地方。如果想获得好结果，则不能跳过此步骤。</p>\n<p>&emsp;&emsp;当你想要获得反馈意见时，你可能觉得自己有点强势，或者你可能会担心这会产生负面影响，但是人们比你期望的更愿意提供帮助。在将文章发布到外面之前，最好先了解一下如何发布文章效果会更好。当我把这些都考虑进去时，我得到了一些非常有价值的反馈，使得文章内容更好，更有针对性。</p>\n<p>&emsp;&emsp;你应该向你的读者问些什么呢？我的主要建议是尽可能保持开放性。尽量不要事先解释你的意图。按原样移交草案，并询问您的审稿人他们从中得到了什么或应该更改什么。当互联网上有人遇到您的文章时，他们是没有任何额外的（和读者认识啊这种的）背景的独立个体。</p>\n<p>&emsp;&emsp;从反馈中验证的主要内容是：此帖子是否会实现您在第 2 步中确定的目标？保持迭代，直到你确定能明确目标和受众。</p>\n<h3 id=\"5-\">5.添加最后润色：包装，发布和宣传</h3>\n<p>&emsp;&emsp;既然你已经有了这个想法，目标，结构和一些反馈，那么现在是时候对所有东西进行润色并发布它了。</p>\n<h4 id=\"-\">包装</h4>\n<p>&emsp;&emsp;想出一个好的标题和副标题，并确保你的文章至少有一张图。这是人们在 Twitter 或 Facebook 上分享文章时会看到的内容，也是让人们对阅读此文感兴趣的机会。</p>\n<p>&emsp;&emsp;文章看起来和感觉起来都要很专业，这十分重要，这样才能够让内容真正有意义。最低目标应该是在文章中没有拼写错误，语法错误或奇怪的格式。如果您有一位非常善于发现小细节的朋友，请让他们在发布前仔细阅读。</p>\n<p>&emsp;&emsp;在 github 上发布文章也有一些关于编写样式和格式的好建议。既然你已经在你的文章中投入了太多的精力，那么额外增加一点努力来真正地完善它使之受众更广泛是非常值得的。</p>\n<p>&emsp;&emsp;最后，请备注上引用的作品或帮助审核和修改帖子的人来表达谢意。</p>\n<h4 id=\"-\">发布</h4>\n<p>&emsp;&emsp;终于到了这一步！选择你计划发布文章的网站，以便最有可能覆盖你的受众群体。Medium 通常是技术文章的汇集地，让人们很容易看到你的文章。</p>\n<p>&emsp;&emsp;关于奖励，尝试将你的文章发布到相关的技术网站中，以便于他们帮助分享你的文章 - 由此考虑，我选择了 freeCodeCamp，因为我认为这篇文章与他们的读者有关。如果你也想这样做，请按以下方式提交你的文章。你感兴趣的领域的技术网站也可能正在寻找文章，所以不要害怕联系！</p>\n<h4 id=\"-\">宣传</h4>\n<p>&emsp;&emsp;虽然你已经发布了文章，但是还没完事！如果你希望人们看到你撰写的内容并从中获取价值，请务必在读者可能会浏览的地方分享。这可能包括 Facebook 群组，Reddit，黑客新闻，LinkedIn 或任何其他平台。此外，请务必在你自己的社交媒体帐户（如 Twitter）上分享你的创作。你的朋友会很高兴阅读，分享和赞成你写的东西！</p>\n<p>&emsp;&emsp;现在，你已经完成了。去喝咖啡或散步 - 从开始到结束一篇博文都是不小的壮举。阅读社区的任何反馈和回复，以便你可以不断改进。当你有另一个想法时，就再去写一篇吧！\n<img src=\"http://oss.dblearn.cn/dbblog/20190311/31751d686ce04dcc8b6a5d088ad31899.png\" alt=\"201903113.png\"></p>\n<blockquote>\n<p>精美的图片能够锦上添花</p>\n</blockquote>\n<h3 id=\"-\">练习没有替代品</h3>\n<p>&emsp;&emsp;在写作时，我们只是介绍了五个最重要的事情，从提出想法到发布。 现在你已经阅读过了，你尝试应用这个建议，看看哪些对你有用。</p>\n<p>&emsp;&emsp;我会留下最后一点建议。 我在过去 3 年中从博客中学到的主要内容是，我绝对无法预测哪些文章会无人问津，哪些文章最终会成为一个完整的系列。 有时候，我会花费好几天的时间来打磨一篇文章的每个细节，不允许一点错误。 也有时候，只是在深夜花了几个小时写的“GraphQL vs. REST”，成为了我有史以来最热门的文章。</p>\n<p>&emsp;&emsp;因此，即使你的第一篇，第二篇或第三篇文章没有成功，也要继续尝试新的东西，把你的想法写出来，并随着时间的推移而改进。 世界想要听到你要说的话。 去告诉他们！</p>\n',110,0,0,'http://oss.dblearn.cn/dbblog/20190311/64096a8d1b6a44e7959ed69da0c5182d.jpeg','2019-03-11 05:00:45','2019-03-30 07:27:14',1,'1,2,23',1,0),(8,'leetCode刷题笔记','leetCode刷题的笔记，用来提升自己的算法能力','Bobbi','## 前言\n> 听说金三银四能找到好工作，但博主工作经验还不满一年（惭愧），不过我相信机会总是留给有准备的人的，BATJ等的面试题第一关无疑是算法题，因此，我要立贴为证，先刷100题。\n#### 1. Two Sum\n> Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nexample\n```C++\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\n```\n\n解答：\n这是我的答案：很挫哈\n```java\n public int[] twoSum(int[] nums, int target) {\n        int[] result = new int[2];\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = 0;j<nums.length;j++) {\n                if(nums[i]+nums[j] == target) {\n                    result[0] = i;\n                    result[1] = j;\n                    return result;\n                }\n            }\n        }\n        return result; \n    }\n\n```\n让我们来看看点赞最高的答案：\n```java\npublic int[] twoSum(int[] numbers, int target) {\n    int[] result = new int[2];\n    Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n    for (int i = 0; i < numbers.length; i++) {\n        if (map.containsKey(target - numbers[i])) {\n            result[1] = i + 1;\n            result[0] = map.get(target - numbers[i]);\n            return result;\n        }\n        map.put(numbers[i], i + 1);\n    }\n    return result;\n}\n```\n恰到好处的使用到了Map，以后遇到对一个数组双重遍历，可以考虑用Map！\n\n#### 1. Add Two Numbers\n> You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\n\n```java\n   public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode result = new ListNode(0);\n        ListNode curr = result;\n        int carry = 0;\n        while (l1!=null||l2!=null) {\n            int x = l1==null?0:l1.val;\n            int y = l2==null?0:l2.val;\n            int sum = x + y + carry;\n            curr.next = new ListNode(sum%10);\n            carry = sum/10;\n            if(l1 !=null) {\n                l1= l1.next;\n            }\n            if(l2 !=null) {\n                l2 = l2.next;\n            }\n            curr = curr.next;\n        }\n        if(carry > 0) {\n            curr.next = new ListNode(carry);\n        }\n        return result.next;\n    }\n```\n思路描述：模拟小学学的竖式计算\n![image.png](http://oss.dblearn.cn/dbblog/20190403/de18361d03f24aedbf612d382e6826ce.png)','<h2 id=\"-\">前言</h2>\n<blockquote>\n<p>听说金三银四能找到好工作，但博主工作经验还不满一年（惭愧），不过我相信机会总是留给有准备的人的，BATJ等的面试题第一关无疑是算法题，因此，我要立贴为证，先刷100题。</p>\n</blockquote>\n<h4 id=\"1-two-sum\">1. Two Sum</h4>\n<blockquote>\n<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n</blockquote>\n<p>example</p>\n<pre><code class=\"language-C++\">Given nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n</code></pre>\n<p>解答：\n这是我的答案：很挫哈</p>\n<pre><code class=\"language-java\"> public int[] twoSum(int[] nums, int target) {\n        int[] result = new int[2];\n        for (int i = 0; i &lt; nums.length; i++) {\n            for (int j = 0;j&lt;nums.length;j++) {\n                if(nums[i]+nums[j] == target) {\n                    result[0] = i;\n                    result[1] = j;\n                    return result;\n                }\n            }\n        }\n        return result; \n    }\n</code></pre>\n<p>让我们来看看点赞最高的答案：</p>\n<pre><code class=\"language-java\">public int[] twoSum(int[] numbers, int target) {\n    int[] result = new int[2];\n    Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();\n    for (int i = 0; i &lt; numbers.length; i++) {\n        if (map.containsKey(target - numbers[i])) {\n            result[1] = i + 1;\n            result[0] = map.get(target - numbers[i]);\n            return result;\n        }\n        map.put(numbers[i], i + 1);\n    }\n    return result;\n}</code></pre>\n<p>恰到好处的使用到了Map，以后遇到对一个数组双重遍历，可以考虑用Map！</p>\n<h4 id=\"1-add-two-numbers\">1. Add Two Numbers</h4>\n<blockquote>\n<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n</blockquote>\n<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\nOutput: 7 -&gt; 0 -&gt; 8</p>\n<pre><code class=\"language-java\">   public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode result = new ListNode(0);\n        ListNode curr = result;\n        int carry = 0;\n        while (l1!=null||l2!=null) {\n            int x = l1==null?0:l1.val;\n            int y = l2==null?0:l2.val;\n            int sum = x + y + carry;\n            curr.next = new ListNode(sum%10);\n            carry = sum/10;\n            if(l1 !=null) {\n                l1= l1.next;\n            }\n            if(l2 !=null) {\n                l2 = l2.next;\n            }\n            curr = curr.next;\n        }\n        if(carry &gt; 0) {\n            curr.next = new ListNode(carry);\n        }\n        return result.next;\n    }</code></pre>\n<p>思路描述：模拟小学学的竖式计算\n<img src=\"http://oss.dblearn.cn/dbblog/20190403/de18361d03f24aedbf612d382e6826ce.png\" alt=\"image.png\"></p>\n',80,2,2,NULL,'2019-03-11 23:37:05','2019-04-03 12:29:42',0,'9,11,12',1,0),(10,'天天用Spring IOC，那它有什么好处呢？','要了解控制反转( Inversion of Control ), 我觉得有必要先了解软件设计的一个重要思想：依赖倒置原则（Dependency Inversion Principle ）...','Bobbi','\n&emsp;&emsp;要了解**控制反转( Inversion of Control )**, 我觉得有必要先了解软件设计的一个重要思想：**依赖倒置原则（Dependency Inversion Principle ）**。\n\n&emsp;&emsp;**什么是依赖倒置原则**？ 假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计车身，最后根据车身设计好整个汽车。这里就出现了一个“依赖”关系：汽车依赖车身，车身依赖底盘，底盘依赖轮子。\n\n![1.jpg](http://oss.dblearn.cn/dbblog/20190319/95a32db5d5434c8c9158cec1394874fa.jpg)\n\n&emsp;&emsp;这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改；同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改——整个设计几乎都得改！\n\n&emsp;&emsp;我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。\n![2.jpg](http://oss.dblearn.cn/dbblog/20190319/b757bd2336f147ce95ab71d14d813341.jpg)\n\n&emsp;&emsp;这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘，车身，汽车的设计了。这就是依赖倒置原则——把原本的高层建筑依赖底层建筑“倒置”过来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是高层并不用管底层是怎么实现的。这样就不会出现前面的“牵一发动全身”的情况。 \n\n---\n\n&emsp;&emsp;**控制反转（Inversion of Control）** 就是依赖倒置原则的一种代码设计的思路。具体采用的方法就是所谓的**依赖注入（Dependency Injection）**。其实这些概念初次接触都会感到云里雾里的。说穿了，这几种概念的关系大概如下：\n![3.jpg](http://oss.dblearn.cn/dbblog/20190319/38ee480f33ec44c688f08f2d99105811.jpg)\n\n&emsp;&emsp;为了理解这几个概念，我们还是用上面汽车的例子。只不过这次换成代码。我们先定义四个Class，车，车身，底盘，轮胎。然后初始化这辆车，最后跑这辆车。代码结构如下：\n![4.jpg](http://oss.dblearn.cn/dbblog/20190319/7013adcf9bd1467e94139f5a0aba08df.jpg)\n\n&emsp;&emsp;这样，就相当于上面第一个例子，上层建筑依赖下层建筑——每一个类的构造函数都直接调用了底层代码的构造函数。假设我们需要改动一下轮胎（Tire）类，把它的尺寸变成动态的，而不是一直都是30。我们需要这样改：\n\n![5.jpg](http://oss.dblearn.cn/dbblog/20190319/e870ab41cc7b46999aac3f66bea281c5.jpg)\n\n&emsp;&emsp;由于我们修改了轮胎的定义，为了让整个程序正常运行，我们需要做以下改动：\n![6.jpg](http://oss.dblearn.cn/dbblog/20190319/78a27daf66054ffb98080cb28d230b43.jpg)\n\n&emsp;&emsp;由此我们可以看到，仅仅是为了修改轮胎的构造函数，这种设计却需要修改**整个上层所有类的构造函数**！在软件工程中，**这样的设计几乎是不可维护的**——在实际工程项目中，有的类可能会是几千个类的底层，如果每次修改这个类，我们都要修改所有以它作为依赖的类，那软件的维护成本就太高了。\n&emsp;&emsp;所以我们需要进行**控制反转（IoC）**，及上层控制下层，而不是下层控制着上层。我们用依赖注入（Dependency Injection）这种方式来实现控制反转。**所谓依赖注入，就是把底层类作为参数传入上层类，实现上层类对下层类的“控制”**。这里我们用构造方法传递的依赖注入方式重新写车类的定义：\n![7.jpg](http://oss.dblearn.cn/dbblog/20190319/bca30874d819460eba01dffa1cbfc81d.jpg)\n\n这里我们再把轮胎尺寸变成动态的，同样为了让整个系统顺利运行，我们需要做如下修改：\n![8.jpg](http://oss.dblearn.cn/dbblog/20190319/3351cf96dd204fb2a300f0ac8b5069d2.jpg)\n\n&emsp;&emsp;看到没？这里我**只需要修改轮胎类就行了，不用修改其他任何上层类**。这显然是更容易维护的代码。不仅如此，在实际的工程中，这种设计模式还有利于**不同组的协同合作和单元测试**：比如开发这四个类的分别是四个不同的组，那么只要定义好了接口，四个不同的组可以同时进行开发而不相互受限制；而对于单元测试，如果我们要写Car类的单元测试，就只需要Mock一下Framework类传入Car就行了，而不用把Framework, Bottom, Tire全部new一遍再来构造Car。\n\n&emsp;&emsp;这里我们是采用的构造函数传入的方式进行的依赖注入。其实还有另外两种方法：Setter传递和接口传递。这里就不多讲了，核心思路都是一样的，都是为了实现控制反转。\n![9.jpg](http://oss.dblearn.cn/dbblog/20190319/b3fdd4016bc1442fbc8e1c3d1c41a321.jpg)\n\n--- \n\n&emsp;&emsp;看到这里你应该能理解什么控制反转和依赖注入了。那什么是控制反转容器(IoC Container)呢？其实上面的例子中，对车类进行初始化的那段代码发生的地方，就是控制反转容器。\n\n![10.jpg](http://oss.dblearn.cn/dbblog/20190319/7ef98d7632ac4fa6a5db2cb801e5885f.jpg)\n\n&emsp;&emsp;显然你也应该观察到了，因为采用了依赖注入，在初始化的过程中就不可避免的会写大量的new。这里IoC容器就解决了这个问题。**这个容器可以自动对你的代码进行初始化，你只需要维护一个Configuration（可以是xml可以是一段代码），而不用每次初始化一辆车都要亲手去写那一大段初始化的代码**。这是引入IoC Container的第一个好处。\n\n&emsp;&emsp;IoC Container的第二个好处是：我们**在创建实例的时候不需要了解其中的细节**。在上面的例子中，我们自己手动创建一个车instance时候，是从底层往上层new的：\n\n![11.jpg](http://oss.dblearn.cn/dbblog/20190319/c3d23494a7ac42b3a52c75d8715762d5.jpg)\n\n&emsp;&emsp;这个过程中，我们需要了解整个Car/Framework/Bottom/Tire类构造函数是怎么定义的，才能一步一步new注入。\n\n而IoC Container在进行这个工作的时候是反过来的，它先从最上层开始往下找依赖关系，到达最底层之后再往上一步一步new（有点像深度优先遍历）：\n\n![13.jpg](http://oss.dblearn.cn/dbblog/20190319/303f8ea595c64143beddba59c0d4203a.jpg)\n\n这里IoC Container可以直接隐藏具体的创建实例的细节，在我们来看它就像一个工厂：\n\n![12.jpg](http://oss.dblearn.cn/dbblog/20190319/092f63e45b004c98b9866eff0c1e536a.jpg)\n\n&emsp;&emsp;我们就像是工厂的客户。我们只需要向工厂请求一个Car实例，然后它就给我们按照Config创建了一个Car实例。我们完全不用管这个Car实例是怎么一步一步被创建出来。\n\n&emsp;&emsp;实际项目中，有的Service Class可能是十年前写的，有几百个类作为它的底层。假设我们新写的一个API需要实例化这个Service，我们总不可能回头去搞清楚这几百个类的构造函数吧？IoC Container的这个特性就很完美的解决了这类问题——**因为这个架构要求你在写class的时候需要写相应的Config文件，所以你要初始化很久以前的Service类的时候，前人都已经写好了Config文件，你直接在需要用的地方注入这个Service就可以了**。这大大增加了项目的可维护性且降低了开发难度。 \n\n---  \n\n作者：Mingqi\n链接：https://www.zhihu.com/question/23277575/answer/169698662\n来源：知乎\n','<p>&emsp;&emsp;要了解<strong>控制反转( Inversion of Control )</strong>, 我觉得有必要先了解软件设计的一个重要思想：<strong>依赖倒置原则（Dependency Inversion Principle ）</strong>。</p>\n<p>&emsp;&emsp;<strong>什么是依赖倒置原则</strong>？ 假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计车身，最后根据车身设计好整个汽车。这里就出现了一个“依赖”关系：汽车依赖车身，车身依赖底盘，底盘依赖轮子。</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190319/95a32db5d5434c8c9158cec1394874fa.jpg\" alt=\"1.jpg\"></p>\n<p>&emsp;&emsp;这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改；同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改——整个设计几乎都得改！</p>\n<p>&emsp;&emsp;我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。\n<img src=\"http://oss.dblearn.cn/dbblog/20190319/b757bd2336f147ce95ab71d14d813341.jpg\" alt=\"2.jpg\"></p>\n<p>&emsp;&emsp;这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘，车身，汽车的设计了。这就是依赖倒置原则——把原本的高层建筑依赖底层建筑“倒置”过来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是高层并不用管底层是怎么实现的。这样就不会出现前面的“牵一发动全身”的情况。 </p>\n<hr>\n<p>&emsp;&emsp;<strong>控制反转（Inversion of Control）</strong> 就是依赖倒置原则的一种代码设计的思路。具体采用的方法就是所谓的<strong>依赖注入（Dependency Injection）</strong>。其实这些概念初次接触都会感到云里雾里的。说穿了，这几种概念的关系大概如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190319/38ee480f33ec44c688f08f2d99105811.jpg\" alt=\"3.jpg\"></p>\n<p>&emsp;&emsp;为了理解这几个概念，我们还是用上面汽车的例子。只不过这次换成代码。我们先定义四个Class，车，车身，底盘，轮胎。然后初始化这辆车，最后跑这辆车。代码结构如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190319/7013adcf9bd1467e94139f5a0aba08df.jpg\" alt=\"4.jpg\"></p>\n<p>&emsp;&emsp;这样，就相当于上面第一个例子，上层建筑依赖下层建筑——每一个类的构造函数都直接调用了底层代码的构造函数。假设我们需要改动一下轮胎（Tire）类，把它的尺寸变成动态的，而不是一直都是30。我们需要这样改：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190319/e870ab41cc7b46999aac3f66bea281c5.jpg\" alt=\"5.jpg\"></p>\n<p>&emsp;&emsp;由于我们修改了轮胎的定义，为了让整个程序正常运行，我们需要做以下改动：\n<img src=\"http://oss.dblearn.cn/dbblog/20190319/78a27daf66054ffb98080cb28d230b43.jpg\" alt=\"6.jpg\"></p>\n<p>&emsp;&emsp;由此我们可以看到，仅仅是为了修改轮胎的构造函数，这种设计却需要修改<strong>整个上层所有类的构造函数</strong>！在软件工程中，<strong>这样的设计几乎是不可维护的</strong>——在实际工程项目中，有的类可能会是几千个类的底层，如果每次修改这个类，我们都要修改所有以它作为依赖的类，那软件的维护成本就太高了。\n&emsp;&emsp;所以我们需要进行<strong>控制反转（IoC）</strong>，及上层控制下层，而不是下层控制着上层。我们用依赖注入（Dependency Injection）这种方式来实现控制反转。<strong>所谓依赖注入，就是把底层类作为参数传入上层类，实现上层类对下层类的“控制”</strong>。这里我们用构造方法传递的依赖注入方式重新写车类的定义：\n<img src=\"http://oss.dblearn.cn/dbblog/20190319/bca30874d819460eba01dffa1cbfc81d.jpg\" alt=\"7.jpg\"></p>\n<p>这里我们再把轮胎尺寸变成动态的，同样为了让整个系统顺利运行，我们需要做如下修改：\n<img src=\"http://oss.dblearn.cn/dbblog/20190319/3351cf96dd204fb2a300f0ac8b5069d2.jpg\" alt=\"8.jpg\"></p>\n<p>&emsp;&emsp;看到没？这里我<strong>只需要修改轮胎类就行了，不用修改其他任何上层类</strong>。这显然是更容易维护的代码。不仅如此，在实际的工程中，这种设计模式还有利于<strong>不同组的协同合作和单元测试</strong>：比如开发这四个类的分别是四个不同的组，那么只要定义好了接口，四个不同的组可以同时进行开发而不相互受限制；而对于单元测试，如果我们要写Car类的单元测试，就只需要Mock一下Framework类传入Car就行了，而不用把Framework, Bottom, Tire全部new一遍再来构造Car。</p>\n<p>&emsp;&emsp;这里我们是采用的构造函数传入的方式进行的依赖注入。其实还有另外两种方法：Setter传递和接口传递。这里就不多讲了，核心思路都是一样的，都是为了实现控制反转。\n<img src=\"http://oss.dblearn.cn/dbblog/20190319/b3fdd4016bc1442fbc8e1c3d1c41a321.jpg\" alt=\"9.jpg\"></p>\n<hr>\n<p>&emsp;&emsp;看到这里你应该能理解什么控制反转和依赖注入了。那什么是控制反转容器(IoC Container)呢？其实上面的例子中，对车类进行初始化的那段代码发生的地方，就是控制反转容器。</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190319/7ef98d7632ac4fa6a5db2cb801e5885f.jpg\" alt=\"10.jpg\"></p>\n<p>&emsp;&emsp;显然你也应该观察到了，因为采用了依赖注入，在初始化的过程中就不可避免的会写大量的new。这里IoC容器就解决了这个问题。<strong>这个容器可以自动对你的代码进行初始化，你只需要维护一个Configuration（可以是xml可以是一段代码），而不用每次初始化一辆车都要亲手去写那一大段初始化的代码</strong>。这是引入IoC Container的第一个好处。</p>\n<p>&emsp;&emsp;IoC Container的第二个好处是：我们<strong>在创建实例的时候不需要了解其中的细节</strong>。在上面的例子中，我们自己手动创建一个车instance时候，是从底层往上层new的：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190319/c3d23494a7ac42b3a52c75d8715762d5.jpg\" alt=\"11.jpg\"></p>\n<p>&emsp;&emsp;这个过程中，我们需要了解整个Car/Framework/Bottom/Tire类构造函数是怎么定义的，才能一步一步new注入。</p>\n<p>而IoC Container在进行这个工作的时候是反过来的，它先从最上层开始往下找依赖关系，到达最底层之后再往上一步一步new（有点像深度优先遍历）：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190319/303f8ea595c64143beddba59c0d4203a.jpg\" alt=\"13.jpg\"></p>\n<p>这里IoC Container可以直接隐藏具体的创建实例的细节，在我们来看它就像一个工厂：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190319/092f63e45b004c98b9866eff0c1e536a.jpg\" alt=\"12.jpg\"></p>\n<p>&emsp;&emsp;我们就像是工厂的客户。我们只需要向工厂请求一个Car实例，然后它就给我们按照Config创建了一个Car实例。我们完全不用管这个Car实例是怎么一步一步被创建出来。</p>\n<p>&emsp;&emsp;实际项目中，有的Service Class可能是十年前写的，有几百个类作为它的底层。假设我们新写的一个API需要实例化这个Service，我们总不可能回头去搞清楚这几百个类的构造函数吧？IoC Container的这个特性就很完美的解决了这类问题——<strong>因为这个架构要求你在写class的时候需要写相应的Config文件，所以你要初始化很久以前的Service类的时候，前人都已经写好了Config文件，你直接在需要用的地方注入这个Service就可以了</strong>。这大大增加了项目的可维护性且降低了开发难度。 </p>\n<hr>\n<p>作者：Mingqi\n链接：<a href=\"https://www.zhihu.com/question/23277575/answer/169698662\">https://www.zhihu.com/question/23277575/answer/169698662</a>\n来源：知乎</p>\n',130,41,0,'http://oss.dblearn.cn/dbblog/20190319/69b03291246c4538a763de8c9dd146f8.jpg','2019-03-19 04:55:20','2019-03-30 07:29:12',1,'9,24,25',1,0),(11,'别再用懒汉模式了——从JVM的角度看单例模式','从JVM的角度看单例模式，总结得出懒汉模式的缺点','Bobbi','## 网上结论：\n我们先来看看网上普遍的结论：\n> 所谓“懒汉式”与“饿汉式”的区别，是在与建立单例对象的时间的不同。<br/>\n> “懒汉式”是在你真正用到的时候才去建这个单例对象\n<br/>\n> “饿汉式是在类创建的同时就已经创建好一个静态的对象，不管你用的用不上，一开始就建立这个单例对象\n\n先不说结论，看看下文\n\n## 代码实现：\n\n#### 饿汉式\n```java\npublic class Singleton1 {\n\n    private final static Singleton1 singleton = new Singleton();\n\n    private Singleton1() {\n        System.out.println(\"饿汉式单例初始化！\");\n    }\n    public static Singleton1 getSingleton () {\n        return singleton;\n    }\n\n}\n```\n> 在类静态变量里直接new一个单例\n\n#### 懒汉式\n\n```java\npublic class Singleton2 {\n    \n    private volatile static Singleton2 singleton; // 5\n\n    private Singleton2() {\n        System.out.println(\"懒汉式单例初始化！\");\n    }\n    public  static Singleton2 getInstance () {\n        if(singleton ==null) {  // 1\n            synchronized(Singleton2.class) {  // 2\n                if(singleton == null) {  // 3\n                    singleton =  new Singleton2(); //4\n                }\n            }\n        }\n        return singleton;\n    }\n\n}\n\n```\n\n> 代码1 处的判空是为了减少同步方法的使用，提高效率\n<br/>\n> 代码2，3 处的加锁和判空是为了防止多线程下重复实例化单例。\n<br/>\n> 代码5 处的volatile是为了防止多线程下代码4 的指令重排序\n\n#### 测试方法\n创建一个Test测试类\n\n```java\n public class Test {\n    public static void main(String[] args) throws IOException {\n        // 懒汉式\n        Singleton1 singleton1 = Singleton1.getInstance();\n        // 饿汉式\n        Singleton2 singleton2 = Singleton2.getInstance();\n    }\n}\n```\n### 运行结果\n![image.png](http://oss.dblearn.cn/dbblog/20190322/ce553a37832f42c9843bd5b3774d3601.png)\n\n从结果上看没啥毛病，那我们来加个断点试试。按照以往的认知，饿汉单例是在类加载的时候的实例化，那么运行main方法应该会输出饿汉单例的初始化，我们来看看结果：\n```java\npublic static void main(String[] args) throws IOException {\n        System.in.read();\n        // 饿汉式\n        Singleton1 singleton1 = Singleton1.getInstance();\n        // 懒汉式\n        Singleton2 singleton2 = Singleton2.getInstance();\n}\n```\n此时运行结果:\n\n![image.png](http://oss.dblearn.cn/dbblog/20190322/19930afba06f4accb8a32f5b9fd3041c.png)\n\n如图是没有结果的，饿汉单例怎么没有实例化呢？原来饿汉单例是在本类加载的时候才实例化的，在断点的时候还没有加载饿汉单例。\n我们来详细复习一下类加载：\n\n类的加载分为5个步骤：加载、验证、准备、解析、初始化\n\n初始化就是执行编译后的<cinit>()方法，而<cinit>()方法就是在编译时将静态变量赋值和静态块合并到一起生成的。\n\n所以说，“饿汉模式”的创建对象是在类加载的初始化阶段进行的，那么类加载的初始化阶段在什么时候进行呢？jvm规范规定有且只有以下7种情况下会进行类加载的初始化阶段：\n\n- 使用new关键字实例化对象的时候\n- 设置或读取一个类的静态字段（被final修饰，已在编译器把结果放入常量池的静态字段除外）的时候\n- 调用一个类的静态方法的时候\n- 使用java.lang.reflect包的方法对类进行反射调用的时候\n- 初始化一个类的子类（会首先初始化父类）\n- 当虚拟机启动的时候，初始化包含main方法的主类\n- 当使用jdk1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。\n\n&emsp;&emsp;综上，基本来说就是只有当你以某种方式调用了这个类的时候，它才会进行初始化，而不是jvm启动的时候就初始化，而jvm本身会确保类的初始化只执行一次。那如果不使用这个单例对象的话，内存中根本没有Singleton实例对象，也就是和“懒汉模式”是一样的效果。\n\n&emsp;&emsp;当然，也有一种可能就是单例类里除了getInstance()方法还有一些其他静态方法，这样当调用其他静态方法的时候，也会初始化实例，但是这个很容易解决，只要加个内部类就行了：\n\n```java\npublic class Singleton {\n    private static class LazyHolder {\n       private static final Singleton INSTANCE = new Singleton();\n    }\n\n    public static Singleton getInstance () {\n        return LazyHolder.INSTANCE;\n    }\n}\n```\n### 总结\n&emsp;&emsp;网上的结论普遍说单例过早占用资源，而推荐使用“懒汉模式”，但他们忽略了单例何时进行类加载，经过以上分析，“懒汉模式”实现复杂而且没有任何独占优点，“饿汉模式”完胜。“饿汉模式”使用场景推荐：\n- 当单例类里有其他静态方法的时候，推荐使用静态内部类的形式。\n- 当单例类里只有getInstance()方法的时候，推荐直接new一个静态的单例对象。\n\n','<h2 id=\"-\">网上结论：</h2>\n<p>我们先来看看网上普遍的结论：</p>\n<blockquote>\n<p>所谓“懒汉式”与“饿汉式”的区别，是在与建立单例对象的时间的不同。<br/>\n“懒汉式”是在你真正用到的时候才去建这个单例对象\n<br/>\n“饿汉式是在类创建的同时就已经创建好一个静态的对象，不管你用的用不上，一开始就建立这个单例对象</p>\n</blockquote>\n<p>先不说结论，看看下文</p>\n<h2 id=\"-\">代码实现：</h2>\n<h4 id=\"-\">饿汉式</h4>\n<pre><code class=\"language-java\">public class Singleton1 {\n\n    private final static Singleton1 singleton = new Singleton();\n\n    private Singleton1() {\n        System.out.println(&quot;饿汉式单例初始化！&quot;);\n    }\n    public static Singleton1 getSingleton () {\n        return singleton;\n    }\n\n}</code></pre>\n<blockquote>\n<p>在类静态变量里直接new一个单例</p>\n</blockquote>\n<h4 id=\"-\">懒汉式</h4>\n<pre><code class=\"language-java\">public class Singleton2 {\n\n    private volatile static Singleton2 singleton; // 5\n\n    private Singleton2() {\n        System.out.println(&quot;懒汉式单例初始化！&quot;);\n    }\n    public  static Singleton2 getInstance () {\n        if(singleton ==null) {  // 1\n            synchronized(Singleton2.class) {  // 2\n                if(singleton == null) {  // 3\n                    singleton =  new Singleton2(); //4\n                }\n            }\n        }\n        return singleton;\n    }\n\n}\n</code></pre>\n<blockquote>\n<p>代码1 处的判空是为了减少同步方法的使用，提高效率\n<br/>\n代码2，3 处的加锁和判空是为了防止多线程下重复实例化单例。\n<br/>\n代码5 处的volatile是为了防止多线程下代码4 的指令重排序</p>\n</blockquote>\n<h4 id=\"-\">测试方法</h4>\n<p>创建一个Test测试类</p>\n<pre><code class=\"language-java\"> public class Test {\n    public static void main(String[] args) throws IOException {\n        // 懒汉式\n        Singleton1 singleton1 = Singleton1.getInstance();\n        // 饿汉式\n        Singleton2 singleton2 = Singleton2.getInstance();\n    }\n}</code></pre>\n<h3 id=\"-\">运行结果</h3>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190322/ce553a37832f42c9843bd5b3774d3601.png\" alt=\"image.png\"></p>\n<p>从结果上看没啥毛病，那我们来加个断点试试。按照以往的认知，饿汉单例是在类加载的时候的实例化，那么运行main方法应该会输出饿汉单例的初始化，我们来看看结果：</p>\n<pre><code class=\"language-java\">public static void main(String[] args) throws IOException {\n        System.in.read();\n        // 饿汉式\n        Singleton1 singleton1 = Singleton1.getInstance();\n        // 懒汉式\n        Singleton2 singleton2 = Singleton2.getInstance();\n}</code></pre>\n<p>此时运行结果:</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190322/19930afba06f4accb8a32f5b9fd3041c.png\" alt=\"image.png\"></p>\n<p>如图是没有结果的，饿汉单例怎么没有实例化呢？原来饿汉单例是在本类加载的时候才实例化的，在断点的时候还没有加载饿汉单例。\n我们来详细复习一下类加载：</p>\n<p>类的加载分为5个步骤：加载、验证、准备、解析、初始化</p>\n<p>初始化就是执行编译后的<cinit>()方法，而<cinit>()方法就是在编译时将静态变量赋值和静态块合并到一起生成的。</p>\n<p>所以说，“饿汉模式”的创建对象是在类加载的初始化阶段进行的，那么类加载的初始化阶段在什么时候进行呢？jvm规范规定有且只有以下7种情况下会进行类加载的初始化阶段：</p>\n<ul>\n<li>使用new关键字实例化对象的时候</li>\n<li>设置或读取一个类的静态字段（被final修饰，已在编译器把结果放入常量池的静态字段除外）的时候</li>\n<li>调用一个类的静态方法的时候</li>\n<li>使用java.lang.reflect包的方法对类进行反射调用的时候</li>\n<li>初始化一个类的子类（会首先初始化父类）</li>\n<li>当虚拟机启动的时候，初始化包含main方法的主类</li>\n<li>当使用jdk1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li>\n</ul>\n<p>&emsp;&emsp;综上，基本来说就是只有当你以某种方式调用了这个类的时候，它才会进行初始化，而不是jvm启动的时候就初始化，而jvm本身会确保类的初始化只执行一次。那如果不使用这个单例对象的话，内存中根本没有Singleton实例对象，也就是和“懒汉模式”是一样的效果。</p>\n<p>&emsp;&emsp;当然，也有一种可能就是单例类里除了getInstance()方法还有一些其他静态方法，这样当调用其他静态方法的时候，也会初始化实例，但是这个很容易解决，只要加个内部类就行了：</p>\n<pre><code class=\"language-java\">public class Singleton {\n    private static class LazyHolder {\n       private static final Singleton INSTANCE = new Singleton();\n    }\n\n    public static Singleton getInstance () {\n        return LazyHolder.INSTANCE;\n    }\n}</code></pre>\n<h3 id=\"-\">总结</h3>\n<p>&emsp;&emsp;网上的结论普遍说单例过早占用资源，而推荐使用“懒汉模式”，但他们忽略了单例何时进行类加载，经过以上分析，“懒汉模式”实现复杂而且没有任何独占优点，“饿汉模式”完胜。“饿汉模式”使用场景推荐：</p>\n<ul>\n<li>当单例类里有其他静态方法的时候，推荐使用静态内部类的形式。</li>\n<li>当单例类里只有getInstance()方法的时候，推荐直接new一个静态的单例对象。</li>\n</ul>\n',261,8,2,NULL,'2019-03-22 03:42:56','2019-03-30 07:30:07',1,'9,11,26',1,0),(12,'你还在看《深入理解Java虚拟机》的运行时数据模型吗？','JDK8已经更新了运行时数据区，你知道吗？','Bobbi','学习JVM必看的书籍无疑是《深入理解Java虚拟机》这本书了，在书中，关于运行时数据区域模型是这样描述的：\n![image.png](http://oss.dblearn.cn/dbblog/20190330/d98c21f38f8c43d0893d72b9a500afbb.png)\n\n在这里我们只针对HotSpot VM来说，它是OracleJDK和OpenJDK中所带的虚拟机，也是目前使用范围最广的Java虚拟机。在JDK7之前，这样的模型是正确的。但是到了JDK8，如图标红的部分，做了一些优化。\n\n### 什么是方法区，什么是永久代，运行时常量池又是什么\n- “方法区”（Method Area），是线程共享的区域，用于存储已被虚拟机加载的类信息，常量，静态变量等数据。首先我们要知道，方法区是JVM的一种规范，是一个概念，而这个方法区的具体实现由各个虚拟机厂商去实现。\n- “永久代”（Permanent Generation）就是HotSpot虚拟机对于方法区的实现，也仅仅是针HotSpot才有的。\n- “运行时常量池”是方法区的一部分。用于存放编译期生成的各种字面量和符号引用。其特性是具备动态性。\n\n###  优化一：字符串常量池从永久代划到Java堆\n由于常量池具备动态性，在程序运行过程中会有大量的字符串常量在运行时常量池里产生，此时如果放在永久代，则无法恰当的设定永久代的大小，容易出现性能问题和内存溢出。下面一个例子证明在JDK8中，字符串常量池已经放在堆中：\n> String.intern()方法的作用是返回一个字符串引用，引用的是字符串常量池中的字符串（字面量），我们先来验证一下这个方法：\n\n```java\npublic class StringConstantsPoolTest {\n    public static void main(String[] args) {\n        String str = \"abc\"; //  str存储在常量池\n        String str2 = new String(\"abc\");  // str2 存储在堆中\n        System.out.println(str == str2); //  结果为false ，堆中的引用并不等于常量池中的引用\n        str2 = str2.intern(); // 获取str2在常量池中的引用\n        System.out.println(str == str2); \n    }\n}\n```\n结果如下：\n![image.png](http://oss.dblearn.cn/dbblog/20190330/3b120bc955f5436a93db3f834fcff948.png)\n\n证明 String.intern()方法返回了一个在常量池中的引用。\n下面验证字符串常量池在堆中：\n设置JVM参数\n> -Xms10m -Xmx10m -XX:-UseGCOverheadLimit \n\n```java\npublic static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<>();\n        for (int i = 0; i < 100000000; i++) {\n            for (int j = 0; j < 1000000; j++) {\n                list.add(String.valueOf(i + j / 1000000).intern());\n            }\n        }\n    }\n```\n结果如下：\n![image.png](http://oss.dblearn.cn/dbblog/20190331/999242519f8c42b8800ff626ea3a51c2.png)\n\n　我们看到这时报的是Java堆空间内存溢出，说明字符串常量池是在堆中，注意，此时仅仅是字符串常量池转移到了堆中，但是**运行时常量池依旧还是在方法区里**\n\n### 优化二：移除了永久代，引入“元空间”(Metaspace)\n#### 为什么移除永久代？\n1. **方法区大小难以设定，容易发生内存溢出**。永久代会存放Class的相关信息，一般这些信息在编译期间就能确定大小。但是如果是在一些需要动态生成大量Class的应用中，如：Spring的动态代理、大量的JSP页面或动态生成JSP页面等，由于方法区的大小在一开始就要分配好，因此就能难确定大小，容易出现内存溢出\n2. **GC复杂且效率低**。方法区存储了类的元数据信息和各种常量，它的内存回收目标理应当是对这些类型的卸载和常量的回收。但由于这些数据被类的实例引用，卸载条件变得复杂且严格，回收不当会导致堆中的类实例失去元数据信息和常量信息。因此，回收方法区内存不是一件简单高效的事情。\n3. **促进HotSpot JVM与JRockit VM的融合**。JRockit没有方法区，移除永久代可以促进HotSpot JVM与JRockit VM的融合。\n\n#### 什么是元空间（Metaspace），为什么引入元空间\n元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小**仅受本地内存限制**。\n\n元空间的特点：\n1. 每个加载器有专门的存储空间。\n2. 不会单独回收某个类。\n3. 元空间里的对象的位置是固定的。\n4. 如果发现某个加载器不再存活了，会把相关的空间整个回收。\n\n### 总结\n最终JVM（HotSpot）运行时数据区域模型如下：\n![image.png](http://oss.dblearn.cn/dbblog/20190330/2f1a17c6e68148dc9c101d7f4c74939b.png)','<p>学习JVM必看的书籍无疑是《深入理解Java虚拟机》这本书了，在书中，关于运行时数据区域模型是这样描述的：\n<img src=\"http://oss.dblearn.cn/dbblog/20190330/d98c21f38f8c43d0893d72b9a500afbb.png\" alt=\"image.png\"></p>\n<p>在这里我们只针对HotSpot VM来说，它是OracleJDK和OpenJDK中所带的虚拟机，也是目前使用范围最广的Java虚拟机。在JDK7之前，这样的模型是正确的。但是到了JDK8，如图标红的部分，做了一些优化。</p>\n<h3 id=\"-\">什么是方法区，什么是永久代，运行时常量池又是什么</h3>\n<ul>\n<li>“方法区”（Method Area），是线程共享的区域，用于存储已被虚拟机加载的类信息，常量，静态变量等数据。首先我们要知道，方法区是JVM的一种规范，是一个概念，而这个方法区的具体实现由各个虚拟机厂商去实现。</li>\n<li>“永久代”（Permanent Generation）就是HotSpot虚拟机对于方法区的实现，也仅仅是针HotSpot才有的。</li>\n<li>“运行时常量池”是方法区的一部分。用于存放编译期生成的各种字面量和符号引用。其特性是具备动态性。</li>\n</ul>\n<h3 id=\"-java-\">优化一：字符串常量池从永久代划到Java堆</h3>\n<p>由于常量池具备动态性，在程序运行过程中会有大量的字符串常量在运行时常量池里产生，此时如果放在永久代，则无法恰当的设定永久代的大小，容易出现性能问题和内存溢出。下面一个例子证明在JDK8中，字符串常量池已经放在堆中：</p>\n<blockquote>\n<p>String.intern()方法的作用是返回一个字符串引用，引用的是字符串常量池中的字符串（字面量），我们先来验证一下这个方法：</p>\n</blockquote>\n<pre><code class=\"language-java\">public class StringConstantsPoolTest {\n    public static void main(String[] args) {\n        String str = &quot;abc&quot;; //  str存储在常量池\n        String str2 = new String(&quot;abc&quot;);  // str2 存储在堆中\n        System.out.println(str == str2); //  结果为false ，堆中的引用并不等于常量池中的引用\n        str2 = str2.intern(); // 获取str2在常量池中的引用\n        System.out.println(str == str2); \n    }\n}</code></pre>\n<p>结果如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190330/3b120bc955f5436a93db3f834fcff948.png\" alt=\"image.png\"></p>\n<p>证明 String.intern()方法返回了一个在常量池中的引用。\n下面验证字符串常量池在堆中：\n设置JVM参数</p>\n<blockquote>\n<p>-Xms10m -Xmx10m -XX:-UseGCOverheadLimit </p>\n</blockquote>\n<pre><code class=\"language-java\">public static void main(String[] args) {\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; 100000000; i++) {\n            for (int j = 0; j &lt; 1000000; j++) {\n                list.add(String.valueOf(i + j / 1000000).intern());\n            }\n        }\n    }</code></pre>\n<p>结果如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190331/999242519f8c42b8800ff626ea3a51c2.png\" alt=\"image.png\"></p>\n<p>　我们看到这时报的是Java堆空间内存溢出，说明字符串常量池是在堆中，注意，此时仅仅是字符串常量池转移到了堆中，但是<strong>运行时常量池依旧还是在方法区里</strong></p>\n<h3 id=\"-metaspace-\">优化二：移除了永久代，引入“元空间”(Metaspace)</h3>\n<h4 id=\"-\">为什么移除永久代？</h4>\n<ol>\n<li><strong>方法区大小难以设定，容易发生内存溢出</strong>。永久代会存放Class的相关信息，一般这些信息在编译期间就能确定大小。但是如果是在一些需要动态生成大量Class的应用中，如：Spring的动态代理、大量的JSP页面或动态生成JSP页面等，由于方法区的大小在一开始就要分配好，因此就能难确定大小，容易出现内存溢出</li>\n<li><strong>GC复杂且效率低</strong>。方法区存储了类的元数据信息和各种常量，它的内存回收目标理应当是对这些类型的卸载和常量的回收。但由于这些数据被类的实例引用，卸载条件变得复杂且严格，回收不当会导致堆中的类实例失去元数据信息和常量信息。因此，回收方法区内存不是一件简单高效的事情。</li>\n<li><strong>促进HotSpot JVM与JRockit VM的融合</strong>。JRockit没有方法区，移除永久代可以促进HotSpot JVM与JRockit VM的融合。</li>\n</ol>\n<h4 id=\"-metaspace-\">什么是元空间（Metaspace），为什么引入元空间</h4>\n<p>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小<strong>仅受本地内存限制</strong>。</p>\n<p>元空间的特点：</p>\n<ol>\n<li>每个加载器有专门的存储空间。</li>\n<li>不会单独回收某个类。</li>\n<li>元空间里的对象的位置是固定的。</li>\n<li>如果发现某个加载器不再存活了，会把相关的空间整个回收。</li>\n</ol>\n<h3 id=\"-\">总结</h3>\n<p>最终JVM（HotSpot）运行时数据区域模型如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190330/2f1a17c6e68148dc9c101d7f4c74939b.png\" alt=\"image.png\"></p>\n',123,2,2,NULL,'2019-03-30 11:07:28','2019-03-31 09:51:32',1,'9,14,15',1,0),(13,'学习SpringAOP前必知的三种代理模式','只有掌握了这三种代理模式，才能进军AOP哦！','Bobbi','## 代理模式定义\n首先我们来看看代理模式：\n![image.png](http://oss.dblearn.cn/dbblog/20190401/81fd97a5c90a4a2c887cab367aca71e5.png)\n所谓代理模式，是指客户端(Client)并不直接调用实际的对象(下图右下角的RealSubject)，而是通过调用代理(ProxySubject)，来间接的调用实际的对象。\n\n代理模式的使用场合，一般是由于客户端不想直接访问实际对象，或者访问实际的对象存在技术上的障碍，因而通过代理对象作为桥梁，来完成间接访问。\n## 业务场景\n首先有个UserService接口,接口里有一个添加用户的方法\n``` java\npublic interface UserService {\n    void addUser();\n}\n```\n这是它的实现类\n``` java \npublic class UserServiceImpl implements UserService {\n    @Override\n    public void addUser() {\n        System.out.println(\"添加一个用户\");\n    }\n}\n```\n\n现在需要在添加用户的时候记录一下日志。当然，你可以直接在addUser里面直接写添加日志的代码，\n```java\n    public void addUser() {\n        System.out.println(\"添加一个用户\");\n	System.out.println(\"拿个小本本记一下\");\n    }\n```\n但是Java推崇**单一职责**原则，如果这样写就违背了这个原则，我们需要将添加日志的代码解耦出来，让addUser()方法专注写自己的业务逻辑。\n\n## 静态代理\n根据类图，创建一个静态代理类\n```java\npublic class UserStaticProxy implements UserService{\n    private UserService userService;\n    public UserStaticProxy(UserService userService) {\n        this.userService = userService;\n    }\n\n    @Override\n    public void addUser() {\n        userService.addUser();\n        System.out.println(\"拿个小本本记录一下\");\n    }\n}\n```\n我们建立一个测试类来测试静态代理：\n```java\npublic class Test {\n\n    public static void main(String[] args) {\n        UserStaticProxy userStaticProxy = new UserStaticProxy(new UserServiceImpl());\n        userStaticProxy.addUser();\n    }\n}\n```\n\n运行结果：\n![image.png](http://oss.dblearn.cn/dbblog/20190401/04d90f98dc7f4fe6839ea4b5c4d15875.png)\n如此，一个静态代理类就创建好了，我们可以专注在Service写业务逻辑，添加日志等非业务逻辑交给这个静态代理类来完成。\n\n### 静态代理的缺点\n#### 缺点一：接口增加方法，代理类需要同步维护\n随着业务扩大，UserService类里不知有addUser方法，还有updateUser、deleteUser、batchUpdateUser、batchDeleteUser等方法，这些方法都需要记录日志。\n\nUserServiceImpl类如下：\n```java \npublic class UserServiceImpl implements UserService {\n    @Override\n    public void addUser() {\n        System.out.println(\"添加一个用户\");\n    }\n\n    @Override\n    public void updateUser() {\n        System.out.println(\"更新一个用户\");\n    }\n\n    @Override\n    public void deleteUser() {\n        System.out.println(\"删除一个用户\");\n    }\n\n    @Override\n    public void batchUpdateUser() {\n        System.out.println(\"批量更新用户\");\n    }\n\n    @Override\n    public void batchDeleteUser() {\n        System.out.println(\"批量删除用户\");\n    }\n}\n```\n\n那么对应的静态代理类如下：\n```java\npublic class UserStaticProxy implements UserService{\n    private UserService userService;\n    public UserStaticProxy(UserService userService) {\n        this.userService = userService;\n    }\n\n    @Override\n    public void addUser() {\n        userService.addUser();\n        System.out.println(\"拿个小本本记录一下\");\n    }\n\n    @Override\n    public void updateUser() {\n        userService.updateUser();\n        System.out.println(\"拿个小本本记录一下\");\n    }\n\n    @Override\n    public void deleteUser() {\n        userService.deleteUser();\n        System.out.println(\"拿个小本本记录一下\");\n    }\n\n    @Override\n    public void batchUpdateUser() {\n        userService.batchUpdateUser();\n        System.out.println(\"拿个小本本记录一下\");\n    }\n\n    @Override\n    public void batchDeleteUser() {\n        userService.batchDeleteUser();\n        System.out.println(\"拿个小本本记录一下\");\n    }\n}\n```\n\n从上面我们可以看到，代理类里有很多重复的日志代码。因为代理类和目标对象实现同一个接口，一旦接口增加方法，代理类也得同步增加方法并且得同步增加重复的额外功能代码，增大了代码量\n\n#### 缺点二：接口越多，导致代理类繁多\n如果需要增加业务类，如StudentService，TeacherService等等，这些类里的方法也都需要实现增加日志的方法，那么就需要同步创建对应的代理类。此外静态代理类不是自动生成的，需要在编译之前就编写好的，如果业务越来越庞大，那么创建的代理类越来越多，这样又增大了代码量\n\n如何解决这些缺点呢？这时候就需要动态代理方法了\n\n## JDK动态代理\n其实动态代理和静态代理的本质是一样的，最终程序运行时都需要生成一个代理对象实例，通过它来完成相关增强以及业务逻辑，只不过静态代理需要硬编码的方式指定，而动态代理支持运行时动态生成这种实现方式。\n\nJDK本身帮我们实现了动态代理，只需要使用newProxyInstance方法:\n```java \n public static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h)\n```\n\n注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:\n\n- ClassLoader loader,:指定当前目标对象使用类加载器\n- Class<?>[] interfaces,:代理类需要实现的接口列表\n- InvocationHandler h:调用处理程序,将目标对象的方法分派到该调用处理程序\n\n代码示例：\n\n```java \npublic class DynamicProxy implements InvocationHandler {\n\n    private Object target; // 目标对象\n\n    public Object bind(Object target) {\n        this.target = target;\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),this);\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        Object result = method.invoke(target, args);\n        System.out.println(\"拿个小本本记录一下\");\n        return result;\n    }\n\n}\n```\n上文的invoke方法，负责增强目标对象的方法，接口类的所有方法都会走这个invoke方法。另外bind方法简单封装了JDK的代理方法newProxyInstance，负责返回接口类。\n\n测试类：\n\n```java \n public static void main(String[] args) {\n        DynamicProxy dynamicProxy = new DynamicProxy();\n        UserService userService = (UserService)dynamicProxy.bind(new UserServiceImpl());\n        userService.addUser();\n        userService.updateUser();\n    }\n```\n\n运行结果如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190401/fd6b3c05a775453b8a815cd8181b4d62.png)\n\n如图UserService接口里的所有方法都已经加上了日志逻辑了，此外，我们看一下UserDynamicProxy这个类里的target属性是Object类型的。所以，这个动态代理的方法同样可以给其他Service复用。可以这样调用：\n\n```java \nDynamicProxy dynamicProxy = new DynamicProxy();\nTeacherService teacherService = (TeacherService)dynamicProxy.bind(new TeacherServiceImpl());\n```\n综上，动态代理解决了静态代理的缺点\n\n#### 用arthas查看JDK动态代理生成的类\n动态代理是运行时候动态生成代理类的，这个类放在内存中，我们要怎么才能看到这个类呢？\n\nartias是阿里开源的一个牛逼闪闪的Java诊断工具，不懂的可以看看这篇文章http://www.dblearn.cn/article/5，用它就可以线上反编译代码。\n\n这里我们添加一个断点：\n```java \npublic static void main(String[] args) throws IOException {\n        DynamicProxy dynamicProxy = new DynamicProxy();\n        UserService userService = (UserService)dynamicProxy.bind(new UserServiceImpl());\n        userService.addUser();\n        userService.updateUser();\n        System.in.read();\n    }\n```\n运行 arthas\n![image.png](http://oss.dblearn.cn/dbblog/20190402/0a2ce4a657674be799b2dbbaea258c3e.png)\n\n用*jad*命令反编译，java生成的代理类都在com.sun.proxy目录下。因此反编译命令如下\n> jad com.sun.proxy.$Proxy0\n\n```java \npackage com.sun.proxy;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.UndeclaredThrowableException;\nimport proxy.UserService;\n\npublic final class $Proxy0\nextends Proxy\nimplements UserService {\n    private static Method m1;\n    private static Method m6;\n    private static Method m2;\n    private static Method m7;\n    private static Method m0;\n    private static Method m3;\n    private static Method m4;\n    private static Method m5;\n\n    public final void addUser() {\n        try {\n            this.h.invoke(this, m3, null);\n            return;\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final void updateUser() {\n        try {\n            this.h.invoke(this, m4, null);\n            return;\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final void deleteUser() {\n        try {\n            this.h.invoke(this, m5, null);\n            return;\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final void batchUpdateUser() {\n        try {\n            this.h.invoke(this, m6, null);\n            return;\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final void batchDeleteUser() {\n        try {\n            this.h.invoke(this, m7, null);\n            return;\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public $Proxy0(InvocationHandler invocationHandler) {\n        super(invocationHandler);\n    }\n\n    static {\n        try {\n            m1 = Class.forName(\"java.lang.Object\").getMethod(\"equals\", Class.forName(\"java.lang.Object\"));\n            m6 = Class.forName(\"proxy.UserService\").getMethod(\"batchUpdateUser\", new Class[0]);\n            m2 = Class.forName(\"java.lang.Object\").getMethod(\"toString\", new Class[0]);\n            m7 = Class.forName(\"proxy.UserService\").getMethod(\"batchDeleteUser\", new Class[0]);\n            m0 = Class.forName(\"java.lang.Object\").getMethod(\"hashCode\", new Class[0]);\n            m3 = Class.forName(\"proxy.UserService\").getMethod(\"addUser\", new Class[0]);\n            m4 = Class.forName(\"proxy.UserService\").getMethod(\"updateUser\", new Class[0]);\n            m5 = Class.forName(\"proxy.UserService\").getMethod(\"deleteUser\", new Class[0]);\n            return;\n        }\n        catch (NoSuchMethodException noSuchMethodException) {\n            throw new NoSuchMethodError(noSuchMethodException.getMessage());\n        }\n        catch (ClassNotFoundException classNotFoundException) {\n            throw new NoClassDefFoundError(classNotFoundException.getMessage());\n        }\n    }\n\n    public final boolean equals(Object object) {\n        try {\n            return (Boolean)this.h.invoke(this, m1, new Object[]{object});\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final String toString() {\n        try {\n            return (String)this.h.invoke(this, m2, null);\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final int hashCode() {\n        try {\n            return (Integer)this.h.invoke(this, m0, null);\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n}\n\n```\n\n由上面的代码可以看到我们的代理类已经生成好了，没当我们调用方法如 addUser(),实际分派到h变量的invoke方法上执行：\n\n> this.h.invoke(this, m3, null);\n\nh变量是什么呢？其实就是我们实现了InvocationHandler的DynamicProxy类。\n\n## cglib动态代理\n通过观察上面的静态代理和JDK动态代理模式，发现要求目标对象*实现一个接口*，但是有时候目标对象只是一个单独的对象,并没有实现任何的接口。这时候要怎么处理呢？下面引出大名鼎鼎的CGlib动态代理\n\ncglib代理,也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展。\n\n要用cglib需要引入它的jar包，因为spring已经集成了它，因此引入spring包即可\n\n编写代理类：\n\n```java \npublic class CGLibProxy implements MethodInterceptor {\n    private Object target; // 目标对象\n    public Object bind(Object target) {\n        this.target = target;\n        Enhancer enhancer = new Enhancer();\n        //设置父类\n        enhancer.setSuperclass(this.target.getClass());\n        //设置回调函数\n        enhancer.setCallback(this);\n        //创建子类(代理对象)\n        return enhancer.create();\n    }\n    @Override\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        Object result = methodProxy.invokeSuper(obj, args);\n        System.out.println(\"拿个小本本记录一下\");\n        return result;\n    }\n}\n```\n其中，Enhancer需要设置目标对象为父类（因为生成的代理类需要继承目标对象）\n\n测试类：\n```java\n public static void main(String[] args) throws IOException {\n        CGLibProxy cgLibProxy = new CGLibProxy();\n        UserServiceImpl userService = (UserServiceImpl)cgLibProxy.bind(new UserServiceImpl());\n        userService.addUser();\n        userService.updateUser();\n        System.in.read();\n    }\n```\n运行结果：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190402/25da9d1d50424256b588f6751428411e.png)\n\n我们看到已经成功代理了。但是结果有乱码出现，此处设置一个// TODO，我猜测是Spring对CGlib再封装导致的，也请知道的大大回答一下。\n\n#### 用arthas查看cglib动态代理生成的类\n步骤和JDK代理类雷同，只不过cglib的代理类生成在和测试类同一个包下,由于代码太多，只上部分代码\n```java \npackage com.example.demo.proxy;\n\nimport com.example.demo.proxy.UserServiceImpl;\nimport java.lang.reflect.Method;\nimport org.springframework.cglib.core.ReflectUtils;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.proxy.Callback;\nimport org.springframework.cglib.proxy.Factory;\nimport org.springframework.cglib.proxy.MethodInterceptor;\nimport org.springframework.cglib.proxy.MethodProxy;\n\npublic class UserServiceImpl$$EnhancerByCGLIB$$3ca8cfc3\nextends UserServiceImpl\nimplements Factory {\n    private boolean CGLIB$BOUND;\n    public static Object CGLIB$FACTORY_DATA;\n    private static final ThreadLocal CGLIB$THREAD_CALLBACKS;\n    private static final Callback[] CGLIB$STATIC_CALLBACKS;\n    private MethodInterceptor CGLIB$CALLBACK_0;\n    private static Object CGLIB$CALLBACK_FILTER;\n    private static final Method CGLIB$deleteUser$0$Method;\n    private static final MethodProxy CGLIB$deleteUser$0$Proxy;\n    private static final Object[] CGLIB$emptyArgs;\n    private static final Method CGLIB$addUser$1$Method;\n    private static final MethodProxy CGLIB$addUser$1$Proxy;\n    private static final Method CGLIB$updateUser$2$Method;\n    private static final MethodProxy CGLIB$updateUser$2$Proxy;\n    private static final Method CGLIB$batchUpdateUser$3$Method;\n    private static final MethodProxy CGLIB$batchUpdateUser$3$Proxy;\n    private static final Method CGLIB$batchDeleteUser$4$Method;\n    private static final MethodProxy CGLIB$batchDeleteUser$4$Proxy;\n    private static final Method CGLIB$equals$5$Method;\n    private static final MethodProxy CGLIB$equals$5$Proxy;\n    private static final Method CGLIB$toString$6$Method;\n    private static final MethodProxy CGLIB$toString$6$Proxy;\n    private static final Method CGLIB$hashCode$7$Method;\n    private static final MethodProxy CGLIB$hashCode$7$Proxy;\n    private static final Method CGLIB$clone$8$Method;\n    private static final MethodProxy CGLIB$clone$8$Proxy;\n\n    public final void deleteUser() {\n        MethodInterceptor methodInterceptor = this.CGLIB$CALLBACK_0;\n        if (methodInterceptor == null) {\n            UserServiceImpl$$EnhancerByCGLIB$$3ca8cfc3.CGLIB$BIND_CALLBACKS(this);\n            methodInterceptor = this.CGLIB$CALLBACK_0;\n        }\n        if (methodInterceptor != null) {\n            Object object = methodInterceptor.intercept(this, CGLIB$deleteUser$0$Method, CGLIB$emptyArgs, CGLIB$deleteUser$0$Proxy);\n            return;\n        }\n        super.deleteUser();\n    }\n\n    public final void addUser() {\n        MethodInterceptor methodInterceptor = this.CGLIB$CALLBACK_0;\n        if (methodInterceptor == null) {\n            UserServiceImpl$$EnhancerByCGLIB$$3ca8cfc3.CGLIB$BIND_CALLBACKS(this);\n            methodInterceptor = this.CGLIB$CALLBACK_0;\n        }\n        if (methodInterceptor != null) {\n            Object object = methodInterceptor.intercept(this, CGLIB$addUser$1$Method, CGLIB$emptyArgs, CGLIB$addUser$1$Proxy);\n            return;\n        }\n        super.addUser();\n    }\n\n    public final void updateUser() {\n        MethodInterceptor methodInterceptor = this.CGLIB$CALLBACK_0;\n        if (methodInterceptor == null) {\n            UserServiceImpl$$EnhancerByCGLIB$$3ca8cfc3.CGLIB$BIND_CALLBACKS(this);\n            methodInterceptor = this.CGLIB$CALLBACK_0;\n        }\n        if (methodInterceptor != null) {\n            Object object = methodInterceptor.intercept(this, CGLIB$updateUser$2$Method, CGLIB$emptyArgs, CGLIB$updateUser$2$Proxy);\n            return;\n        }\n        super.updateUser();\n    }\n\n```\n\n其中\n> public class UserServiceImpl$$EnhancerByCGLIB$$3ca8cfc3\nextends UserServiceImpl\n\n可以看到生成的代理类继承了目标对象，因此有两个注意点：\n1. 目标对象不能处理被final关键字修饰，因为被final修饰的对象是不可继承的。\n2. 目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法.\n\n','<h2 id=\"-\">代理模式定义</h2>\n<p>首先我们来看看代理模式：\n<img src=\"http://oss.dblearn.cn/dbblog/20190401/81fd97a5c90a4a2c887cab367aca71e5.png\" alt=\"image.png\">\n所谓代理模式，是指客户端(Client)并不直接调用实际的对象(下图右下角的RealSubject)，而是通过调用代理(ProxySubject)，来间接的调用实际的对象。</p>\n<p>代理模式的使用场合，一般是由于客户端不想直接访问实际对象，或者访问实际的对象存在技术上的障碍，因而通过代理对象作为桥梁，来完成间接访问。</p>\n<h2 id=\"-\">业务场景</h2>\n<p>首先有个UserService接口,接口里有一个添加用户的方法</p>\n<pre><code class=\"language-java\">public interface UserService {\n    void addUser();\n}</code></pre>\n<p>这是它的实现类</p>\n<pre><code class=\"language-java\">public class UserServiceImpl implements UserService {\n    @Override\n    public void addUser() {\n        System.out.println(&quot;添加一个用户&quot;);\n    }\n}</code></pre>\n<p>现在需要在添加用户的时候记录一下日志。当然，你可以直接在addUser里面直接写添加日志的代码，</p>\n<pre><code class=\"language-java\">    public void addUser() {\n        System.out.println(&quot;添加一个用户&quot;);\n    System.out.println(&quot;拿个小本本记一下&quot;);\n    }</code></pre>\n<p>但是Java推崇<strong>单一职责</strong>原则，如果这样写就违背了这个原则，我们需要将添加日志的代码解耦出来，让addUser()方法专注写自己的业务逻辑。</p>\n<h2 id=\"-\">静态代理</h2>\n<p>根据类图，创建一个静态代理类</p>\n<pre><code class=\"language-java\">public class UserStaticProxy implements UserService{\n    private UserService userService;\n    public UserStaticProxy(UserService userService) {\n        this.userService = userService;\n    }\n\n    @Override\n    public void addUser() {\n        userService.addUser();\n        System.out.println(&quot;拿个小本本记录一下&quot;);\n    }\n}</code></pre>\n<p>我们建立一个测试类来测试静态代理：</p>\n<pre><code class=\"language-java\">public class Test {\n\n    public static void main(String[] args) {\n        UserStaticProxy userStaticProxy = new UserStaticProxy(new UserServiceImpl());\n        userStaticProxy.addUser();\n    }\n}</code></pre>\n<p>运行结果：\n<img src=\"http://oss.dblearn.cn/dbblog/20190401/04d90f98dc7f4fe6839ea4b5c4d15875.png\" alt=\"image.png\">\n如此，一个静态代理类就创建好了，我们可以专注在Service写业务逻辑，添加日志等非业务逻辑交给这个静态代理类来完成。</p>\n<h3 id=\"-\">静态代理的缺点</h3>\n<h4 id=\"-\">缺点一：接口增加方法，代理类需要同步维护</h4>\n<p>随着业务扩大，UserService类里不知有addUser方法，还有updateUser、deleteUser、batchUpdateUser、batchDeleteUser等方法，这些方法都需要记录日志。</p>\n<p>UserServiceImpl类如下：</p>\n<pre><code class=\"language-java\">public class UserServiceImpl implements UserService {\n    @Override\n    public void addUser() {\n        System.out.println(&quot;添加一个用户&quot;);\n    }\n\n    @Override\n    public void updateUser() {\n        System.out.println(&quot;更新一个用户&quot;);\n    }\n\n    @Override\n    public void deleteUser() {\n        System.out.println(&quot;删除一个用户&quot;);\n    }\n\n    @Override\n    public void batchUpdateUser() {\n        System.out.println(&quot;批量更新用户&quot;);\n    }\n\n    @Override\n    public void batchDeleteUser() {\n        System.out.println(&quot;批量删除用户&quot;);\n    }\n}</code></pre>\n<p>那么对应的静态代理类如下：</p>\n<pre><code class=\"language-java\">public class UserStaticProxy implements UserService{\n    private UserService userService;\n    public UserStaticProxy(UserService userService) {\n        this.userService = userService;\n    }\n\n    @Override\n    public void addUser() {\n        userService.addUser();\n        System.out.println(&quot;拿个小本本记录一下&quot;);\n    }\n\n    @Override\n    public void updateUser() {\n        userService.updateUser();\n        System.out.println(&quot;拿个小本本记录一下&quot;);\n    }\n\n    @Override\n    public void deleteUser() {\n        userService.deleteUser();\n        System.out.println(&quot;拿个小本本记录一下&quot;);\n    }\n\n    @Override\n    public void batchUpdateUser() {\n        userService.batchUpdateUser();\n        System.out.println(&quot;拿个小本本记录一下&quot;);\n    }\n\n    @Override\n    public void batchDeleteUser() {\n        userService.batchDeleteUser();\n        System.out.println(&quot;拿个小本本记录一下&quot;);\n    }\n}</code></pre>\n<p>从上面我们可以看到，代理类里有很多重复的日志代码。因为代理类和目标对象实现同一个接口，一旦接口增加方法，代理类也得同步增加方法并且得同步增加重复的额外功能代码，增大了代码量</p>\n<h4 id=\"-\">缺点二：接口越多，导致代理类繁多</h4>\n<p>如果需要增加业务类，如StudentService，TeacherService等等，这些类里的方法也都需要实现增加日志的方法，那么就需要同步创建对应的代理类。此外静态代理类不是自动生成的，需要在编译之前就编写好的，如果业务越来越庞大，那么创建的代理类越来越多，这样又增大了代码量</p>\n<p>如何解决这些缺点呢？这时候就需要动态代理方法了</p>\n<h2 id=\"jdk-\">JDK动态代理</h2>\n<p>其实动态代理和静态代理的本质是一样的，最终程序运行时都需要生成一个代理对象实例，通过它来完成相关增强以及业务逻辑，只不过静态代理需要硬编码的方式指定，而动态代理支持运行时动态生成这种实现方式。</p>\n<p>JDK本身帮我们实现了动态代理，只需要使用newProxyInstance方法:</p>\n<pre><code class=\"language-java\"> public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code></pre>\n<p>注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:</p>\n<ul>\n<li>ClassLoader loader,:指定当前目标对象使用类加载器</li>\n<li>Class&lt;?&gt;[] interfaces,:代理类需要实现的接口列表</li>\n<li>InvocationHandler h:调用处理程序,将目标对象的方法分派到该调用处理程序</li>\n</ul>\n<p>代码示例：</p>\n<pre><code class=\"language-java\">public class DynamicProxy implements InvocationHandler {\n\n    private Object target; // 目标对象\n\n    public Object bind(Object target) {\n        this.target = target;\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),this);\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        Object result = method.invoke(target, args);\n        System.out.println(&quot;拿个小本本记录一下&quot;);\n        return result;\n    }\n\n}</code></pre>\n<p>上文的invoke方法，负责增强目标对象的方法，接口类的所有方法都会走这个invoke方法。另外bind方法简单封装了JDK的代理方法newProxyInstance，负责返回接口类。</p>\n<p>测试类：</p>\n<pre><code class=\"language-java\"> public static void main(String[] args) {\n        DynamicProxy dynamicProxy = new DynamicProxy();\n        UserService userService = (UserService)dynamicProxy.bind(new UserServiceImpl());\n        userService.addUser();\n        userService.updateUser();\n    }</code></pre>\n<p>运行结果如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190401/fd6b3c05a775453b8a815cd8181b4d62.png\" alt=\"image.png\"></p>\n<p>如图UserService接口里的所有方法都已经加上了日志逻辑了，此外，我们看一下UserDynamicProxy这个类里的target属性是Object类型的。所以，这个动态代理的方法同样可以给其他Service复用。可以这样调用：</p>\n<pre><code class=\"language-java\">DynamicProxy dynamicProxy = new DynamicProxy();\nTeacherService teacherService = (TeacherService)dynamicProxy.bind(new TeacherServiceImpl());</code></pre>\n<p>综上，动态代理解决了静态代理的缺点</p>\n<h4 id=\"-arthas-jdk-\">用arthas查看JDK动态代理生成的类</h4>\n<p>动态代理是运行时候动态生成代理类的，这个类放在内存中，我们要怎么才能看到这个类呢？</p>\n<p>artias是阿里开源的一个牛逼闪闪的Java诊断工具，不懂的可以看看这篇文章<a href=\"http://www.dblearn.cn/article/5%EF%BC%8C%E7%94%A8%E5%AE%83%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%BA%BF%E4%B8%8A%E5%8F%8D%E7%BC%96%E8%AF%91%E4%BB%A3%E7%A0%81%E3%80%82\">http://www.dblearn.cn/article/5，用它就可以线上反编译代码。</a></p>\n<p>这里我们添加一个断点：</p>\n<pre><code class=\"language-java\">public static void main(String[] args) throws IOException {\n        DynamicProxy dynamicProxy = new DynamicProxy();\n        UserService userService = (UserService)dynamicProxy.bind(new UserServiceImpl());\n        userService.addUser();\n        userService.updateUser();\n        System.in.read();\n    }</code></pre>\n<p>运行 arthas\n<img src=\"http://oss.dblearn.cn/dbblog/20190402/0a2ce4a657674be799b2dbbaea258c3e.png\" alt=\"image.png\"></p>\n<p>用<em>jad</em>命令反编译，java生成的代理类都在com.sun.proxy目录下。因此反编译命令如下</p>\n<blockquote>\n<p>jad com.sun.proxy.$Proxy0</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.sun.proxy;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.UndeclaredThrowableException;\nimport proxy.UserService;\n\npublic final class $Proxy0\nextends Proxy\nimplements UserService {\n    private static Method m1;\n    private static Method m6;\n    private static Method m2;\n    private static Method m7;\n    private static Method m0;\n    private static Method m3;\n    private static Method m4;\n    private static Method m5;\n\n    public final void addUser() {\n        try {\n            this.h.invoke(this, m3, null);\n            return;\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final void updateUser() {\n        try {\n            this.h.invoke(this, m4, null);\n            return;\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final void deleteUser() {\n        try {\n            this.h.invoke(this, m5, null);\n            return;\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final void batchUpdateUser() {\n        try {\n            this.h.invoke(this, m6, null);\n            return;\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final void batchDeleteUser() {\n        try {\n            this.h.invoke(this, m7, null);\n            return;\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public $Proxy0(InvocationHandler invocationHandler) {\n        super(invocationHandler);\n    }\n\n    static {\n        try {\n            m1 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, Class.forName(&quot;java.lang.Object&quot;));\n            m6 = Class.forName(&quot;proxy.UserService&quot;).getMethod(&quot;batchUpdateUser&quot;, new Class[0]);\n            m2 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;, new Class[0]);\n            m7 = Class.forName(&quot;proxy.UserService&quot;).getMethod(&quot;batchDeleteUser&quot;, new Class[0]);\n            m0 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;, new Class[0]);\n            m3 = Class.forName(&quot;proxy.UserService&quot;).getMethod(&quot;addUser&quot;, new Class[0]);\n            m4 = Class.forName(&quot;proxy.UserService&quot;).getMethod(&quot;updateUser&quot;, new Class[0]);\n            m5 = Class.forName(&quot;proxy.UserService&quot;).getMethod(&quot;deleteUser&quot;, new Class[0]);\n            return;\n        }\n        catch (NoSuchMethodException noSuchMethodException) {\n            throw new NoSuchMethodError(noSuchMethodException.getMessage());\n        }\n        catch (ClassNotFoundException classNotFoundException) {\n            throw new NoClassDefFoundError(classNotFoundException.getMessage());\n        }\n    }\n\n    public final boolean equals(Object object) {\n        try {\n            return (Boolean)this.h.invoke(this, m1, new Object[]{object});\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final String toString() {\n        try {\n            return (String)this.h.invoke(this, m2, null);\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n\n    public final int hashCode() {\n        try {\n            return (Integer)this.h.invoke(this, m0, null);\n        }\n        catch (Error | RuntimeException throwable) {\n            throw throwable;\n        }\n        catch (Throwable throwable) {\n            throw new UndeclaredThrowableException(throwable);\n        }\n    }\n}\n</code></pre>\n<p>由上面的代码可以看到我们的代理类已经生成好了，没当我们调用方法如 addUser(),实际分派到h变量的invoke方法上执行：</p>\n<blockquote>\n<p>this.h.invoke(this, m3, null);</p>\n</blockquote>\n<p>h变量是什么呢？其实就是我们实现了InvocationHandler的DynamicProxy类。</p>\n<h2 id=\"cglib-\">cglib动态代理</h2>\n<p>通过观察上面的静态代理和JDK动态代理模式，发现要求目标对象<em>实现一个接口</em>，但是有时候目标对象只是一个单独的对象,并没有实现任何的接口。这时候要怎么处理呢？下面引出大名鼎鼎的CGlib动态代理</p>\n<p>cglib代理,也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展。</p>\n<p>要用cglib需要引入它的jar包，因为spring已经集成了它，因此引入spring包即可</p>\n<p>编写代理类：</p>\n<pre><code class=\"language-java\">public class CGLibProxy implements MethodInterceptor {\n    private Object target; // 目标对象\n    public Object bind(Object target) {\n        this.target = target;\n        Enhancer enhancer = new Enhancer();\n        //设置父类\n        enhancer.setSuperclass(this.target.getClass());\n        //设置回调函数\n        enhancer.setCallback(this);\n        //创建子类(代理对象)\n        return enhancer.create();\n    }\n    @Override\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        Object result = methodProxy.invokeSuper(obj, args);\n        System.out.println(&quot;拿个小本本记录一下&quot;);\n        return result;\n    }\n}</code></pre>\n<p>其中，Enhancer需要设置目标对象为父类（因为生成的代理类需要继承目标对象）</p>\n<p>测试类：</p>\n<pre><code class=\"language-java\"> public static void main(String[] args) throws IOException {\n        CGLibProxy cgLibProxy = new CGLibProxy();\n        UserServiceImpl userService = (UserServiceImpl)cgLibProxy.bind(new UserServiceImpl());\n        userService.addUser();\n        userService.updateUser();\n        System.in.read();\n    }</code></pre>\n<p>运行结果：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190402/25da9d1d50424256b588f6751428411e.png\" alt=\"image.png\"></p>\n<p>我们看到已经成功代理了。但是结果有乱码出现，此处设置一个// TODO，我猜测是Spring对CGlib再封装导致的，也请知道的大大回答一下。</p>\n<h4 id=\"-arthas-cglib-\">用arthas查看cglib动态代理生成的类</h4>\n<p>步骤和JDK代理类雷同，只不过cglib的代理类生成在和测试类同一个包下,由于代码太多，只上部分代码</p>\n<pre><code class=\"language-java\">package com.example.demo.proxy;\n\nimport com.example.demo.proxy.UserServiceImpl;\nimport java.lang.reflect.Method;\nimport org.springframework.cglib.core.ReflectUtils;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.proxy.Callback;\nimport org.springframework.cglib.proxy.Factory;\nimport org.springframework.cglib.proxy.MethodInterceptor;\nimport org.springframework.cglib.proxy.MethodProxy;\n\npublic class UserServiceImpl$$EnhancerByCGLIB$$3ca8cfc3\nextends UserServiceImpl\nimplements Factory {\n    private boolean CGLIB$BOUND;\n    public static Object CGLIB$FACTORY_DATA;\n    private static final ThreadLocal CGLIB$THREAD_CALLBACKS;\n    private static final Callback[] CGLIB$STATIC_CALLBACKS;\n    private MethodInterceptor CGLIB$CALLBACK_0;\n    private static Object CGLIB$CALLBACK_FILTER;\n    private static final Method CGLIB$deleteUser$0$Method;\n    private static final MethodProxy CGLIB$deleteUser$0$Proxy;\n    private static final Object[] CGLIB$emptyArgs;\n    private static final Method CGLIB$addUser$1$Method;\n    private static final MethodProxy CGLIB$addUser$1$Proxy;\n    private static final Method CGLIB$updateUser$2$Method;\n    private static final MethodProxy CGLIB$updateUser$2$Proxy;\n    private static final Method CGLIB$batchUpdateUser$3$Method;\n    private static final MethodProxy CGLIB$batchUpdateUser$3$Proxy;\n    private static final Method CGLIB$batchDeleteUser$4$Method;\n    private static final MethodProxy CGLIB$batchDeleteUser$4$Proxy;\n    private static final Method CGLIB$equals$5$Method;\n    private static final MethodProxy CGLIB$equals$5$Proxy;\n    private static final Method CGLIB$toString$6$Method;\n    private static final MethodProxy CGLIB$toString$6$Proxy;\n    private static final Method CGLIB$hashCode$7$Method;\n    private static final MethodProxy CGLIB$hashCode$7$Proxy;\n    private static final Method CGLIB$clone$8$Method;\n    private static final MethodProxy CGLIB$clone$8$Proxy;\n\n    public final void deleteUser() {\n        MethodInterceptor methodInterceptor = this.CGLIB$CALLBACK_0;\n        if (methodInterceptor == null) {\n            UserServiceImpl$$EnhancerByCGLIB$$3ca8cfc3.CGLIB$BIND_CALLBACKS(this);\n            methodInterceptor = this.CGLIB$CALLBACK_0;\n        }\n        if (methodInterceptor != null) {\n            Object object = methodInterceptor.intercept(this, CGLIB$deleteUser$0$Method, CGLIB$emptyArgs, CGLIB$deleteUser$0$Proxy);\n            return;\n        }\n        super.deleteUser();\n    }\n\n    public final void addUser() {\n        MethodInterceptor methodInterceptor = this.CGLIB$CALLBACK_0;\n        if (methodInterceptor == null) {\n            UserServiceImpl$$EnhancerByCGLIB$$3ca8cfc3.CGLIB$BIND_CALLBACKS(this);\n            methodInterceptor = this.CGLIB$CALLBACK_0;\n        }\n        if (methodInterceptor != null) {\n            Object object = methodInterceptor.intercept(this, CGLIB$addUser$1$Method, CGLIB$emptyArgs, CGLIB$addUser$1$Proxy);\n            return;\n        }\n        super.addUser();\n    }\n\n    public final void updateUser() {\n        MethodInterceptor methodInterceptor = this.CGLIB$CALLBACK_0;\n        if (methodInterceptor == null) {\n            UserServiceImpl$$EnhancerByCGLIB$$3ca8cfc3.CGLIB$BIND_CALLBACKS(this);\n            methodInterceptor = this.CGLIB$CALLBACK_0;\n        }\n        if (methodInterceptor != null) {\n            Object object = methodInterceptor.intercept(this, CGLIB$updateUser$2$Method, CGLIB$emptyArgs, CGLIB$updateUser$2$Proxy);\n            return;\n        }\n        super.updateUser();\n    }\n</code></pre>\n<p>其中</p>\n<blockquote>\n<p>public class UserServiceImpl$$EnhancerByCGLIB$$3ca8cfc3\nextends UserServiceImpl</p>\n</blockquote>\n<p>可以看到生成的代理类继承了目标对象，因此有两个注意点：</p>\n<ol>\n<li>目标对象不能处理被final关键字修饰，因为被final修饰的对象是不可继承的。</li>\n<li>目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法.</li>\n</ol>\n',396,462,2,NULL,'2019-04-01 10:31:47','2019-04-02 09:27:48',1,'9,24,25',1,0),(14,'笔记',NULL,'Bobbi','## TC 计划 3 个月\n### 知识掌握\n高并发：《Java并发编程的艺术》笔记\nJVM：总结JVM面试题\n数据库：高性能MySQL\n中间件：掌握netty\n设计模式：总结\n算法\n\n### 项目积累\n完善博客\n完成SpringCloud权限管理系统\n计划实现SpringBoot整合Activiti学生请假项目\n\n### 我的时间\n早上地铁：30分钟\n中午：20分钟\n\n\nDisqus 这个拿来做评论插件\n\n搜索页面 评论图标\n管理页面：评论，新增读后感，修改分类出错\n\n\ncompletableFuture学习','<h2 id=\"tc-3-\">TC 计划 3 个月</h2>\n<h3 id=\"-\">知识掌握</h3>\n<p>高并发：《Java并发编程的艺术》笔记\nJVM：总结JVM面试题\n数据库：高性能MySQL\n中间件：掌握netty\n设计模式：总结\n算法</p>\n<h3 id=\"-\">项目积累</h3>\n<p>完善博客\n完成SpringCloud权限管理系统\n计划实现SpringBoot整合Activiti学生请假项目</p>\n<h3 id=\"-\">我的时间</h3>\n<p>早上地铁：30分钟\n中午：20分钟</p>\n<p>Disqus 这个拿来做评论插件</p>\n<p>搜索页面 评论图标\n管理页面：评论，新增读后感，修改分类出错</p>\n<p>completableFuture学习</p>\n',2,0,2,NULL,'2019-07-03 02:54:48','2019-08-08 06:32:40',0,'9,11,12',0,0),(15,'日志疯打印导致服务器磁盘占满的问题','服务器50G的磁盘竟然被占满了！！！','Bobbi','## 问题发现\n好久没有登录自己的博客了,打开后台管理系统竟然无法登录了。于是我赶紧登录服务器看下，发现我的磁盘空间竟然满了！\n\n![image.png](http://oss.dblearn.cn/dbblog/20190714/461d517127104211aee31ba887474800.png)\n\n服务器磁盘共50G，这货竟然占用了46.4G。这么大的日志文件，我要怎么打开来查看问题呢？google一下，linux有个文件拆分的命令\n### split命令\n> split命令可以将一个大文件分割成很多个小文件，有时需要将文件分割成更小的片段，比如为提高可读性，生成日志等。\n\n#### 选项\n-b：值为每一输出档案的大小，单位为 byte。<br>\n-C：每一输出档中，单行的最大 byte 数。<br>\n-d：使用数字作为后缀。<br>\n-l：值为每一输出档的列数大小。<br>\n\n#### 例子\n使用split命令将date.file文件分割成大小为10KB的小文件：\n> split -b 10k date.file \n\n> date.file  xaa  xab  xac  xad  xae  xaf  xag  xah  xai  xaj\n\n文件被分割成多个带有字母的后缀文件，如果想用数字后缀可使用 **-d** 参数，同时可以使用 **-a length** 来指定后缀的长度：\n> split -b 10k date.file -d -a 3\n\n> date.file  x000  x001  x002  x003  x004  x005  x006  x007  x008  x009\n\n为分割后的文件指定文件名的前缀：\n> split -b 10k date.file -d -a 3 split_file\n\n> date.file  split_file000  split_file001  split_file002  split_file003  split_file004  split_file005  split_file006  split_file007  split_file008  split_file009\n\n但是，，，我的服务器已经没有其他空间来做分割了，难道要下载到本地再分割查看吗？46G以我家龟速网络得下到什么时候啊！没办法了，只能先下载部分到本地来查看了。\n\n日志如下：\n```shell\n\n2019-07-12 10:43:12.106  WARN 26214 --- [cTaskExecutor-1] s.a.r.l.ConditionalRejectingErrorHandler : Execution of Rabbit message listener failed.\n\norg.springframework.amqp.rabbit.listener.exception.ListenerExecutionFailedException: Listener method \'public void cn.dblearn.blog.search.controller.ArticleEsController.refresh(java.lang.String)\' threw exception\n	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:198)\n	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:127)\n	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1514)\n	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1440)\n	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1428)\n	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1423)\n	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1372)\n	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:870)\n	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:854)\n	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:78)\n	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1137)\n	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1043)\n	at java.lang.Thread.run(Thread.java:748)\nCaused by: org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [{#transport#-1}{ot6jkx37RoO46990sU8JJw}{127.0.0.1}{127.0.0.1:9300}]\n	at org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:349)\n	at org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:247)\n	at org.elasticsearch.client.transport.TransportProxyClient.execute(TransportProxyClient.java:60)\n	at org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:381)\n	at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:407)\n	at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:396)\n	at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:46)\n	at org.springframework.data.elasticsearch.core.ElasticsearchTemplate.getSearchResponse(ElasticsearchTemplate.java:946)\n	at org.springframework.data.elasticsearch.core.ElasticsearchTemplate.doScroll(ElasticsearchTemplate.java:808)\n	at org.springframework.data.elasticsearch.core.ElasticsearchTemplate.startScroll(ElasticsearchTemplate.java:822)\n	at org.springframework.data.elasticsearch.core.ElasticsearchTemplate.delete(ElasticsearchTemplate.java:719)\n	at org.springframework.data.elasticsearch.repository.support.AbstractElasticsearchRepository.deleteAll(AbstractElasticsearchRepository.java:257)\n	at sun.reflect.GeneratedMethodAccessor524.invoke(Unknown Source)\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n	at java.lang.reflect.Method.invoke(Method.java:498)\n	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)\n	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)\n	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)\n	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)\n	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)\n	at com.sun.proxy.$Proxy112.deleteAll(Unknown Source)\n	at cn.dblearn.blog.search.controller.ArticleEsController.refresh(ArticleEsController.java:60)\n	at sun.reflect.GeneratedMethodAccessor523.invoke(Unknown Source)\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n	at java.lang.reflect.Method.invoke(Method.java:498)\n	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:170)\n	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)\n	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:49)\n	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:190)\n	... 12 common frames omitted\n\n```\n\n一直是ListenerExecutionFailedException以及NoNodeAvailableException的错误日志\n\n## 问题解决\n稍稍google了下得知：在Spring AMQP中ACK是自动完成的, 如果报错了, 消息不会丢失, 但是会无限循环消费, 一直报错, 如果开启了错误日志很容易就把磁盘空间耗完。\n\n于是猜测服务器的ElasticSearch挂了，导致消息消费不成功，陷入无限循环消费。登录上服务器查看，果然ElasticSearch挂了（只能怪我可怜的服务器配置1核2G）。\n\n好吧，修改代码为手动确认消息消费\n\n```java\n    @RabbitListener(queues=RabbitMqConstants.REFRESH_ES_INDEX_QUEUE)\n    public void refresh(Message message, Channel channel) throws IOException {\n        //手动确认消息已经被消费\n        channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);\n        articleRepository.deleteAll();\n        List<Article> list = articleService.list(new QueryWrapper<Article>().lambda().eq(Article::getPublish,true));\n        articleRepository.saveAll(list);\n        log.info(message.toString());\n    }\n```\n\nok了，打包上去，清空日志，重新部署，其中使用的linux命令\n### echo\n用于字符串的输出\n#### 清空文件\n> echo \"\" > dbblog.log\n\n\n查看正在输出的日志\n### tail\n用于查看文件的内容\n#### 查阅正在改变的日志文件\n>tail -f dbblog.log\n\n\nfinally，经过测试，即使elasticsearch没有启动也只会消费一次，不会重复循环消费了。\n\n## 经验总结\n学会查看日志，善用Google！\n\n','<h2 id=\"-\">问题发现</h2>\n<p>好久没有登录自己的博客了,打开后台管理系统竟然无法登录了。于是我赶紧登录服务器看下，发现我的磁盘空间竟然满了！</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190714/461d517127104211aee31ba887474800.png\" alt=\"image.png\"></p>\n<p>服务器磁盘共50G，这货竟然占用了46.4G。这么大的日志文件，我要怎么打开来查看问题呢？google一下，linux有个文件拆分的命令</p>\n<h3 id=\"split-\">split命令</h3>\n<blockquote>\n<p>split命令可以将一个大文件分割成很多个小文件，有时需要将文件分割成更小的片段，比如为提高可读性，生成日志等。</p>\n</blockquote>\n<h4 id=\"-\">选项</h4>\n<p>-b：值为每一输出档案的大小，单位为 byte。<br>\n-C：每一输出档中，单行的最大 byte 数。<br>\n-d：使用数字作为后缀。<br>\n-l：值为每一输出档的列数大小。<br></p>\n<h4 id=\"-\">例子</h4>\n<p>使用split命令将date.file文件分割成大小为10KB的小文件：</p>\n<blockquote>\n<p>split -b 10k date.file </p>\n</blockquote>\n<blockquote>\n<p>date.file  xaa  xab  xac  xad  xae  xaf  xag  xah  xai  xaj</p>\n</blockquote>\n<p>文件被分割成多个带有字母的后缀文件，如果想用数字后缀可使用 <strong>-d</strong> 参数，同时可以使用 <strong>-a length</strong> 来指定后缀的长度：</p>\n<blockquote>\n<p>split -b 10k date.file -d -a 3</p>\n</blockquote>\n<blockquote>\n<p>date.file  x000  x001  x002  x003  x004  x005  x006  x007  x008  x009</p>\n</blockquote>\n<p>为分割后的文件指定文件名的前缀：</p>\n<blockquote>\n<p>split -b 10k date.file -d -a 3 split_file</p>\n</blockquote>\n<blockquote>\n<p>date.file  split_file000  split_file001  split_file002  split_file003  split_file004  split_file005  split_file006  split_file007  split_file008  split_file009</p>\n</blockquote>\n<p>但是，，，我的服务器已经没有其他空间来做分割了，难道要下载到本地再分割查看吗？46G以我家龟速网络得下到什么时候啊！没办法了，只能先下载部分到本地来查看了。</p>\n<p>日志如下：</p>\n<pre><code class=\"language-shell\">\n2019-07-12 10:43:12.106  WARN 26214 --- [cTaskExecutor-1] s.a.r.l.ConditionalRejectingErrorHandler : Execution of Rabbit message listener failed.\n\norg.springframework.amqp.rabbit.listener.exception.ListenerExecutionFailedException: Listener method &#39;public void cn.dblearn.blog.search.controller.ArticleEsController.refresh(java.lang.String)&#39; threw exception\n    at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:198)\n    at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:127)\n    at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1514)\n    at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1440)\n    at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1428)\n    at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1423)\n    at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1372)\n    at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:870)\n    at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:854)\n    at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:78)\n    at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1137)\n    at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1043)\n    at java.lang.Thread.run(Thread.java:748)\nCaused by: org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [{#transport#-1}{ot6jkx37RoO46990sU8JJw}{127.0.0.1}{127.0.0.1:9300}]\n    at org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:349)\n    at org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:247)\n    at org.elasticsearch.client.transport.TransportProxyClient.execute(TransportProxyClient.java:60)\n    at org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:381)\n    at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:407)\n    at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:396)\n    at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:46)\n    at org.springframework.data.elasticsearch.core.ElasticsearchTemplate.getSearchResponse(ElasticsearchTemplate.java:946)\n    at org.springframework.data.elasticsearch.core.ElasticsearchTemplate.doScroll(ElasticsearchTemplate.java:808)\n    at org.springframework.data.elasticsearch.core.ElasticsearchTemplate.startScroll(ElasticsearchTemplate.java:822)\n    at org.springframework.data.elasticsearch.core.ElasticsearchTemplate.delete(ElasticsearchTemplate.java:719)\n    at org.springframework.data.elasticsearch.repository.support.AbstractElasticsearchRepository.deleteAll(AbstractElasticsearchRepository.java:257)\n    at sun.reflect.GeneratedMethodAccessor524.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)\n    at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)\n    at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n    at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)\n    at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)\n    at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n    at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n    at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n    at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)\n    at com.sun.proxy.$Proxy112.deleteAll(Unknown Source)\n    at cn.dblearn.blog.search.controller.ArticleEsController.refresh(ArticleEsController.java:60)\n    at sun.reflect.GeneratedMethodAccessor523.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:170)\n    at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)\n    at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:49)\n    at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:190)\n    ... 12 common frames omitted\n</code></pre>\n<p>一直是ListenerExecutionFailedException以及NoNodeAvailableException的错误日志</p>\n<h2 id=\"-\">问题解决</h2>\n<p>稍稍google了下得知：在Spring AMQP中ACK是自动完成的, 如果报错了, 消息不会丢失, 但是会无限循环消费, 一直报错, 如果开启了错误日志很容易就把磁盘空间耗完。</p>\n<p>于是猜测服务器的ElasticSearch挂了，导致消息消费不成功，陷入无限循环消费。登录上服务器查看，果然ElasticSearch挂了（只能怪我可怜的服务器配置1核2G）。</p>\n<p>好吧，修改代码为手动确认消息消费</p>\n<pre><code class=\"language-java\">    @RabbitListener(queues=RabbitMqConstants.REFRESH_ES_INDEX_QUEUE)\n    public void refresh(Message message, Channel channel) throws IOException {\n        //手动确认消息已经被消费\n        channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);\n        articleRepository.deleteAll();\n        List&lt;Article&gt; list = articleService.list(new QueryWrapper&lt;Article&gt;().lambda().eq(Article::getPublish,true));\n        articleRepository.saveAll(list);\n        log.info(message.toString());\n    }</code></pre>\n<p>ok了，打包上去，清空日志，重新部署，其中使用的linux命令</p>\n<h3 id=\"echo\">echo</h3>\n<p>用于字符串的输出</p>\n<h4 id=\"-\">清空文件</h4>\n<blockquote>\n<p>echo &quot;&quot; &gt; dbblog.log</p>\n</blockquote>\n<p>查看正在输出的日志</p>\n<h3 id=\"tail\">tail</h3>\n<p>用于查看文件的内容</p>\n<h4 id=\"-\">查阅正在改变的日志文件</h4>\n<blockquote>\n<p>tail -f dbblog.log</p>\n</blockquote>\n<p>finally，经过测试，即使elasticsearch没有启动也只会消费一次，不会重复循环消费了。</p>\n<h2 id=\"-\">经验总结</h2>\n<p>学会查看日志，善用Google！</p>\n',110,6,2,NULL,'2019-07-14 07:50:55','2019-07-14 08:25:28',0,'9,11,12',1,0),(16,'博客评论插件Gitalk','畅言太多广告了，怒换gitalk！','Bobbi','# Gitalk\n用过一段时间畅言，不冲会员的话广告实在是太多了!!!,于是看到了[Gitalk](https://github.com/gitalk/gitalk/blob/master/readme-cn.md) 插件。我感觉十分好用，支持github登录，支持markdown语法，且评论数据存在自己的github仓库，后续也不担心数据丢失了，赞\n\n## 原理\nGitalk 是一个利用 Github API,基于 Github issue 和 Preact 开发的评论插件，在 gitalk 的评论框进行评论时，其实就是在对应的 issue 上提问题。\n\n## 安装教程\n1. 引入js和css\n```html\n<link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\">\n<script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n```\n\n\n2. 添加一个容器：\n```html\n<div id=\"gitalk-container\"></div>\n```\n\n3. 用下面的 Javascript 代码来生成 gitalk 插件：\n```javascript\nvar gitalk = new Gitalk({\n  clientID: \'GitHub Application Client ID\',\n  clientSecret: \'GitHub Application Client Secret\',\n  repo: \'GitHub repo\',\n  owner: \'GitHub repo owner\',\n  admin: [\'GitHub repo owner and collaborators, only these guys can initialize github issues\'],\n  id: location.pathname,      // Ensure uniqueness and length less than 50\n  distractionFreeMode: false  // Facebook-like distraction free mode\n})\ngitalk.render(\'gitalk-container\')\n```\n\n其中的参数获取如下：\nclientID 和 clientSecret 需要申请 GitHub Application，如果没有 [点击这里申请](https://github.com/settings/applications/new)，实例填写的域名是插件页面的域名。\n示例如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190720/0799661323f4470e94354bf90531e0ac.png)\n\nrepo参数需要你新建一个仓库，作为评论容器\n\nowner和admin都是你的github账号\n\n## 演示\n评论插件展示如下（[点击此处查看](http://www.dblearn.cn/article/1)）：\n![image.png](http://oss.dblearn.cn/dbblog/20190720/a0f49334beaf4b55a18e935277ac9c7b.png)\n\n## 注意事项\n当你用 github 帐号登录（管理员）时，第一次加载会比较慢，因为第一次加载会自动在你 repo 的仓库下创建对应 issue。\n\n因此，你需要在每篇文章发表后都点进去开启评论（创建issue），此处应该可以后端解决一下 // TODO\n\n另外，参数里的id长度不能大于50，否则会创建issue失败\n<br>\n更多参数信息，请查看 [官方文档>>](https://github.com/gitalk/gitalk/blob/master/readme-cn.md) \n\n\n','<h1 id=\"gitalk\">Gitalk</h1>\n<p>用过一段时间畅言，不冲会员的话广告实在是太多了!!!,于是看到了<a href=\"https://github.com/gitalk/gitalk/blob/master/readme-cn.md\">Gitalk</a> 插件。我感觉十分好用，支持github登录，支持markdown语法，且评论数据存在自己的github仓库，后续也不担心数据丢失了，赞</p>\n<h2 id=\"-\">原理</h2>\n<p>Gitalk 是一个利用 Github API,基于 Github issue 和 Preact 开发的评论插件，在 gitalk 的评论框进行评论时，其实就是在对应的 issue 上提问题。</p>\n<h2 id=\"-\">安装教程</h2>\n<ol>\n<li>引入js和css<pre><code class=\"language-html\">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;\n&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</code></pre>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>添加一个容器：</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</code></pre>\n</li>\n<li><p>用下面的 Javascript 代码来生成 gitalk 插件：</p>\n<pre><code class=\"language-javascript\">var gitalk = new Gitalk({\nclientID: &#39;GitHub Application Client ID&#39;,\nclientSecret: &#39;GitHub Application Client Secret&#39;,\nrepo: &#39;GitHub repo&#39;,\nowner: &#39;GitHub repo owner&#39;,\nadmin: [&#39;GitHub repo owner and collaborators, only these guys can initialize github issues&#39;],\nid: location.pathname,      // Ensure uniqueness and length less than 50\ndistractionFreeMode: false  // Facebook-like distraction free mode\n})\ngitalk.render(&#39;gitalk-container&#39;)</code></pre>\n</li>\n</ol>\n<p>其中的参数获取如下：\nclientID 和 clientSecret 需要申请 GitHub Application，如果没有 <a href=\"https://github.com/settings/applications/new\">点击这里申请</a>，实例填写的域名是插件页面的域名。\n示例如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190720/0799661323f4470e94354bf90531e0ac.png\" alt=\"image.png\"></p>\n<p>repo参数需要你新建一个仓库，作为评论容器</p>\n<p>owner和admin都是你的github账号</p>\n<h2 id=\"-\">演示</h2>\n<p>评论插件展示如下（<a href=\"http://www.dblearn.cn/article/1\">点击此处查看</a>）：\n<img src=\"http://oss.dblearn.cn/dbblog/20190720/a0f49334beaf4b55a18e935277ac9c7b.png\" alt=\"image.png\"></p>\n<h2 id=\"-\">注意事项</h2>\n<p>当你用 github 帐号登录（管理员）时，第一次加载会比较慢，因为第一次加载会自动在你 repo 的仓库下创建对应 issue。</p>\n<p>因此，你需要在每篇文章发表后都点进去开启评论（创建issue），此处应该可以后端解决一下 // TODO</p>\n<p>另外，参数里的id长度不能大于50，否则会创建issue失败\n<br>\n更多参数信息，请查看 <a href=\"https://github.com/gitalk/gitalk/blob/master/readme-cn.md\">官方文档&gt;&gt;</a> </p>\n',67,9,2,NULL,'2019-07-20 05:29:51','2019-07-20 05:37:02',0,'1,2,31',1,0),(17,'Java多线程基础01——线程的创建','现代操作系统调度的最小单元是线程，也叫轻量级进程（Light Weight Process），在一个进程里可以创建多个线程，这些线程都有各自的计数器、堆栈和局部变量等属性，并且能构访问共享的内存变量。','Bobbi','## 什么是线程\n现代操作系统在运行一个程序时，会为其创建一个进程。例如，启动一个Java程序，操作系统就会创建一个Java进程。现代操作系统调度的最小单元是线程，也叫轻量级进程（Light Weight Process），在一个进程里可以创建多个线程，这些线程都有各自的计数器、堆栈和局部变量等属性，并且能构访问共享的内存变量。\n\n一个Java程序从main()方法开始，执行main()方法的是一个main的线程。下面使用JMX来查看一个普通的Java程序包含哪些线程\n```java\npublic class MultiThread {\n\n    public static void main(String[] args) {\n        // 获取Java线程管理MXBean\n        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n        // 仅获取线程和线程的堆栈信息\n        ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(false, false);\n        for (ThreadInfo threadInfo : threadInfos) {\n            System.out.println(\"[\"+threadInfo.getThreadId()+\"]  \"+threadInfo.getThreadName());\n        }\n        // 当前活动线程数\n        System.out.println(\"当前活动的线程数: \"+Thread.activeCount());\n    }\n}\n```\n\n结果如下：\n\n```shell\n[5]  Monitor Ctrl-Break  \n[4]  Signal Dispatcher \n[3]  Finalizer  \n[2]  Reference Handler\n[1]  main\n当前活动的线程数: 2\n```\n可以看到，一个Java程序的运行不仅仅是main()方法的运行，而是main线程和多个其他线程的同时运行\n> 注意：当前活动线程数为2，解释如下：windows下这个Monitor Ctrl-Break是不算在活动线程的，所以这样大于1是可以执行的，但是linux下应该是大于2\n\n## 多线程的状态\n线程的状态\n1. 新建状态（New）：线程对象被创建后，就进入了新建状态。例如Thread thread = new Thread()。\n2. 就绪状态（Runnable）：也被称为“可执行状态”。线程对象被创建后，其它线程调用了该对象的start()方法，从而来启动该线程。例如thread.start()。处于就绪状态的线程，随时可能被CPU调度执行。\n3. 运行状态（Running）：线程获取CPU权限进行执行。需要注意的是，线程只能从就绪状态进入到运行状态。\n4. 阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<br>(1) 等待阻塞：通过调用线程的wait()方法，让线程等待某工作的完成。<br>(2) 同步阻塞：线程在获取synchronized同步锁失败（因为锁被其它线程所占用），它会进入同步阻塞状态。<br>(3) 其他阻塞：通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\n6. 死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。\n\n![image.png](http://oss.dblearn.cn/dbblog/20190722/0b3ca476bec8468096283f4834bd2cf1.png)\n\n## 多线程的实现方式\n### Thread和Runnable简介\nRunnable是一个接口，该接口中只包含了一个run()方法。它的定义如下：\n```java\npublic interface Runnable {\n    public abstract void run();\n}\n```\nThread 是一个类。Thread本身就实现了Runnable接口。它的声明如下：\n```java\npublic class Thread implements Runnable {}\n```\n\nThread是类，Runnable是接口；Thread本身是实现了Runnable接口的类。因为“一个类只能有一个父类，但却能实现多个接口”，因此Runnable具有更好的扩展性。\n此外，Runnable还可以用于“资源的共享”。即，多个线程都是基于某一个Runnable对象建立的，它们会**共享Runnable对象上的资源**。通常，建议通过“Runnable”实现多线程！\n\n### 使用Thread实现多线程\n```java\npublic class MyThread extends Thread {\n\n    private int ticket=5;\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 20; i++) {\n            if(ticket>0) {\n                System.out.println(Thread.currentThread().getName()+\"剩余票数\"+this.ticket--);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread thread1 = new MyThread();\n        thread1.setName(\"线程1\");\n        MyThread thread2 = new MyThread();\n        thread2.setName(\"线程2\");\n        MyThread thread3 = new MyThread();\n        thread3.setName(\"线程3\");\n        thread1.start();\n        thread2.start();\n        thread3.start();\n    }\n}\n\n```\n结果如下\n\n```shell\n线程1剩余票数5\n线程1剩余票数4\n线程1剩余票数3\n线程1剩余票数2\n线程1剩余票数1\n线程3剩余票数5\n线程3剩余票数4\n线程3剩余票数3\n线程3剩余票数2\n线程3剩余票数1\n线程2剩余票数5\n线程2剩余票数4\n线程2剩余票数3\n线程2剩余票数2\n线程2剩余票数1\n```\n结果说明：\n(1) MyThread继承于Thread，它是自定义个线程。每个MyThread都会卖出5张票。\n(2) 主线程main创建并启动3个MyThread子线程。每个子线程都各自卖出了5张票。\n(3) 线程的启动顺序具有不确定性\n\n### 使用Runnable实现多线程\n```java\npublic class MyThreadRunnable implements Runnable {\n    \n    private int ticket=10;\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 10; i++) {\n            if(this.ticket>0) {\n                System.out.println(Thread.currentThread().getName()+\" 卖票：ticket \"+this.ticket--);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThreadRunnable myThreadRunnable = new MyThreadRunnable();\n	// 启动3个线程（它们公用一个Runnable对象），这三个线程共卖10张票\n        Thread thread1 = new Thread(myThreadRunnable,\"线程1\");\n        Thread thread2 = new Thread(myThreadRunnable,\"线程2\");\n        Thread thread3 = new Thread(myThreadRunnable,\"线程3\");\n        thread1.start();\n        thread2.start();\n        thread3.start();\n\n    }\n}\n```\n结果如下\n\n```shell\n线程1 卖票：ticket 9\n线程2 卖票：ticket 10\n线程3 卖票：ticket 7\n线程1 卖票：ticket 8\n线程3 卖票：ticket 5\n线程2 卖票：ticket 6\n线程3 卖票：ticket 3\n线程1 卖票：ticket 4\n线程3 卖票：ticket 1\n线程2 卖票：ticket 2\n```\n结果说明：\n(1) 和上面“MyThread继承于Thread”不同；这里的MyThread实现了Runnable接口。\n(2) 主线程main创建并启动3个子线程，而且这3个子线程都是基于“myThreadRunnable这个Runnable对象”而创建的。运行结果是这3个子线程一共卖出了10张票。这说明它们是共享了MyThread接口的。\n\n### 实现带有返回值的多线程\n```java\npublic class MyCallable implements Callable<Integer> {\n    @Override\n    public Integer call() throws Exception {\n        System.out.println(Thread.currentThread().getName()+\" start\");\n        return new Random().nextInt(10);\n    }\n\n    public static void main(String[] args) throws Exception {\n        MyCallable myCallable = new MyCallable();\n        FutureTask<Integer> task = new FutureTask<>(myCallable);\n        Thread t = new Thread(task,\"线程1\");\n        t.start();\n        try {\n            System.out.println(task.get());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n```\n结果如下\n\n```shell\n线程1 start\n6\n```\ncall方法可以抛出异常或者返回一个值。因为是异步的，而且是得到返回值还是捕获了异常也不清楚，这些都需要进行进一步的封装。FutureTask类是继承自Runnable接口的，它也可以配合Callable接口，使用Thread来创建多线程任务。x\nFutureTask和Callable会在后面的章节详细介绍。\n\n### 使用定时器Timer实现多线程\n```java\npublic class MyTimer {\n    public static void main(String[] args) {\n        Timer timer = new Timer();\n        // 使用schedule来调度任务，第一个参数是一个TimerTask，第二个参数时延时，第三个参数是执行间隔周期\n        timer.schedule(new TimerTask(){\n            @Override\n            public void run() {\n                System.out.println(Thread.currentThread().getName()+\" start\");\n            }\n        },0,1000);\n    }\n}\n```\n\n结果如下\n```shell\nTimer-0 start\nTimer-0 start\nTimer-0 start\nTimer-0 start\nTimer-0 start\n```\n> 多线程处理定时任务时，timer只要其中之一抛出没有捕获的异常时，其他的定时任务便会停止运行，可以使用ScheduledExecutorService代替\n\n\n### 使用线程池创建线程\n```java\npublic class MyThreadPool {\n    public static void main(String[] args) {\n        ExecutorService threadPool = Executors.newFixedThreadPool(2);\n        // 循环创建10个多线程任务\n        for (int i = 0; i < 10; i++) {\n            // 使用线程池来创建多线程任务\n            threadPool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    System.out.println(Thread.currentThread().getName() + \" start\");\n                }\n            });\n        }\n        // 关闭线程池\n        threadPool.shutdown();\n\n    }\n}\n```\n结果如下\n```shell\npool-1-thread-1 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\n```\n结果解释：\n上述代码创建了两个线程的线程池，线程池只会创建2个线程分别执行这10个任务\n\n\n\n','<h2 id=\"-\">什么是线程</h2>\n<p>现代操作系统在运行一个程序时，会为其创建一个进程。例如，启动一个Java程序，操作系统就会创建一个Java进程。现代操作系统调度的最小单元是线程，也叫轻量级进程（Light Weight Process），在一个进程里可以创建多个线程，这些线程都有各自的计数器、堆栈和局部变量等属性，并且能构访问共享的内存变量。</p>\n<p>一个Java程序从main()方法开始，执行main()方法的是一个main的线程。下面使用JMX来查看一个普通的Java程序包含哪些线程</p>\n<pre><code class=\"language-java\">public class MultiThread {\n\n    public static void main(String[] args) {\n        // 获取Java线程管理MXBean\n        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n        // 仅获取线程和线程的堆栈信息\n        ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(false, false);\n        for (ThreadInfo threadInfo : threadInfos) {\n            System.out.println(&quot;[&quot;+threadInfo.getThreadId()+&quot;]  &quot;+threadInfo.getThreadName());\n        }\n        // 当前活动线程数\n        System.out.println(&quot;当前活动的线程数: &quot;+Thread.activeCount());\n    }\n}</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">[5]  Monitor Ctrl-Break  \n[4]  Signal Dispatcher \n[3]  Finalizer  \n[2]  Reference Handler\n[1]  main\n当前活动的线程数: 2</code></pre>\n<p>可以看到，一个Java程序的运行不仅仅是main()方法的运行，而是main线程和多个其他线程的同时运行</p>\n<blockquote>\n<p>注意：当前活动线程数为2，解释如下：windows下这个Monitor Ctrl-Break是不算在活动线程的，所以这样大于1是可以执行的，但是linux下应该是大于2</p>\n</blockquote>\n<h2 id=\"-\">多线程的状态</h2>\n<p>线程的状态</p>\n<ol>\n<li>新建状态（New）：线程对象被创建后，就进入了新建状态。例如Thread thread = new Thread()。</li>\n<li>就绪状态（Runnable）：也被称为“可执行状态”。线程对象被创建后，其它线程调用了该对象的start()方法，从而来启动该线程。例如thread.start()。处于就绪状态的线程，随时可能被CPU调度执行。</li>\n<li>运行状态（Running）：线程获取CPU权限进行执行。需要注意的是，线程只能从就绪状态进入到运行状态。</li>\n<li>阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<br>(1) 等待阻塞：通过调用线程的wait()方法，让线程等待某工作的完成。<br>(2) 同步阻塞：线程在获取synchronized同步锁失败（因为锁被其它线程所占用），它会进入同步阻塞状态。<br>(3) 其他阻塞：通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</li>\n<li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li>\n</ol>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190722/0b3ca476bec8468096283f4834bd2cf1.png\" alt=\"image.png\"></p>\n<h2 id=\"-\">多线程的实现方式</h2>\n<h3 id=\"thread-runnable-\">Thread和Runnable简介</h3>\n<p>Runnable是一个接口，该接口中只包含了一个run()方法。它的定义如下：</p>\n<pre><code class=\"language-java\">public interface Runnable {\n    public abstract void run();\n}</code></pre>\n<p>Thread 是一个类。Thread本身就实现了Runnable接口。它的声明如下：</p>\n<pre><code class=\"language-java\">public class Thread implements Runnable {}</code></pre>\n<p>Thread是类，Runnable是接口；Thread本身是实现了Runnable接口的类。因为“一个类只能有一个父类，但却能实现多个接口”，因此Runnable具有更好的扩展性。\n此外，Runnable还可以用于“资源的共享”。即，多个线程都是基于某一个Runnable对象建立的，它们会<strong>共享Runnable对象上的资源</strong>。通常，建议通过“Runnable”实现多线程！</p>\n<h3 id=\"-thread-\">使用Thread实现多线程</h3>\n<pre><code class=\"language-java\">public class MyThread extends Thread {\n\n    private int ticket=5;\n\n    @Override\n    public void run() {\n        for (int i = 0; i &lt; 20; i++) {\n            if(ticket&gt;0) {\n                System.out.println(Thread.currentThread().getName()+&quot;剩余票数&quot;+this.ticket--);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread thread1 = new MyThread();\n        thread1.setName(&quot;线程1&quot;);\n        MyThread thread2 = new MyThread();\n        thread2.setName(&quot;线程2&quot;);\n        MyThread thread3 = new MyThread();\n        thread3.setName(&quot;线程3&quot;);\n        thread1.start();\n        thread2.start();\n        thread3.start();\n    }\n}\n</code></pre>\n<p>结果如下</p>\n<pre><code class=\"language-shell\">线程1剩余票数5\n线程1剩余票数4\n线程1剩余票数3\n线程1剩余票数2\n线程1剩余票数1\n线程3剩余票数5\n线程3剩余票数4\n线程3剩余票数3\n线程3剩余票数2\n线程3剩余票数1\n线程2剩余票数5\n线程2剩余票数4\n线程2剩余票数3\n线程2剩余票数2\n线程2剩余票数1</code></pre>\n<p>结果说明：\n(1) MyThread继承于Thread，它是自定义个线程。每个MyThread都会卖出5张票。\n(2) 主线程main创建并启动3个MyThread子线程。每个子线程都各自卖出了5张票。\n(3) 线程的启动顺序具有不确定性</p>\n<h3 id=\"-runnable-\">使用Runnable实现多线程</h3>\n<pre><code class=\"language-java\">public class MyThreadRunnable implements Runnable {\n\n    private int ticket=10;\n\n    @Override\n    public void run() {\n        for (int i = 0; i &lt; 10; i++) {\n            if(this.ticket&gt;0) {\n                System.out.println(Thread.currentThread().getName()+&quot; 卖票：ticket &quot;+this.ticket--);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThreadRunnable myThreadRunnable = new MyThreadRunnable();\n    // 启动3个线程（它们公用一个Runnable对象），这三个线程共卖10张票\n        Thread thread1 = new Thread(myThreadRunnable,&quot;线程1&quot;);\n        Thread thread2 = new Thread(myThreadRunnable,&quot;线程2&quot;);\n        Thread thread3 = new Thread(myThreadRunnable,&quot;线程3&quot;);\n        thread1.start();\n        thread2.start();\n        thread3.start();\n\n    }\n}</code></pre>\n<p>结果如下</p>\n<pre><code class=\"language-shell\">线程1 卖票：ticket 9\n线程2 卖票：ticket 10\n线程3 卖票：ticket 7\n线程1 卖票：ticket 8\n线程3 卖票：ticket 5\n线程2 卖票：ticket 6\n线程3 卖票：ticket 3\n线程1 卖票：ticket 4\n线程3 卖票：ticket 1\n线程2 卖票：ticket 2</code></pre>\n<p>结果说明：\n(1) 和上面“MyThread继承于Thread”不同；这里的MyThread实现了Runnable接口。\n(2) 主线程main创建并启动3个子线程，而且这3个子线程都是基于“myThreadRunnable这个Runnable对象”而创建的。运行结果是这3个子线程一共卖出了10张票。这说明它们是共享了MyThread接口的。</p>\n<h3 id=\"-\">实现带有返回值的多线程</h3>\n<pre><code class=\"language-java\">public class MyCallable implements Callable&lt;Integer&gt; {\n    @Override\n    public Integer call() throws Exception {\n        System.out.println(Thread.currentThread().getName()+&quot; start&quot;);\n        return new Random().nextInt(10);\n    }\n\n    public static void main(String[] args) throws Exception {\n        MyCallable myCallable = new MyCallable();\n        FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;(myCallable);\n        Thread t = new Thread(task,&quot;线程1&quot;);\n        t.start();\n        try {\n            System.out.println(task.get());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }</code></pre>\n<p>结果如下</p>\n<pre><code class=\"language-shell\">线程1 start\n6</code></pre>\n<p>call方法可以抛出异常或者返回一个值。因为是异步的，而且是得到返回值还是捕获了异常也不清楚，这些都需要进行进一步的封装。FutureTask类是继承自Runnable接口的，它也可以配合Callable接口，使用Thread来创建多线程任务。x\nFutureTask和Callable会在后面的章节详细介绍。</p>\n<h3 id=\"-timer-\">使用定时器Timer实现多线程</h3>\n<pre><code class=\"language-java\">public class MyTimer {\n    public static void main(String[] args) {\n        Timer timer = new Timer();\n        // 使用schedule来调度任务，第一个参数是一个TimerTask，第二个参数时延时，第三个参数是执行间隔周期\n        timer.schedule(new TimerTask(){\n            @Override\n            public void run() {\n                System.out.println(Thread.currentThread().getName()+&quot; start&quot;);\n            }\n        },0,1000);\n    }\n}</code></pre>\n<p>结果如下</p>\n<pre><code class=\"language-shell\">Timer-0 start\nTimer-0 start\nTimer-0 start\nTimer-0 start\nTimer-0 start</code></pre>\n<blockquote>\n<p>多线程处理定时任务时，timer只要其中之一抛出没有捕获的异常时，其他的定时任务便会停止运行，可以使用ScheduledExecutorService代替</p>\n</blockquote>\n<h3 id=\"-\">使用线程池创建线程</h3>\n<pre><code class=\"language-java\">public class MyThreadPool {\n    public static void main(String[] args) {\n        ExecutorService threadPool = Executors.newFixedThreadPool(2);\n        // 循环创建10个多线程任务\n        for (int i = 0; i &lt; 10; i++) {\n            // 使用线程池来创建多线程任务\n            threadPool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    System.out.println(Thread.currentThread().getName() + &quot; start&quot;);\n                }\n            });\n        }\n        // 关闭线程池\n        threadPool.shutdown();\n\n    }\n}</code></pre>\n<p>结果如下</p>\n<pre><code class=\"language-shell\">pool-1-thread-1 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start\npool-1-thread-2 start</code></pre>\n<p>结果解释：\n上述代码创建了两个线程的线程池，线程池只会创建2个线程分别执行这10个任务</p>\n',37,26,2,NULL,'2019-07-22 15:34:07','2019-07-23 15:44:49',0,'9,14,32',1,0),(18,'Java多线程基础02——synchronized','在java中，每一个对象有且仅有一个同步锁。这也意味着，同步锁是依赖于对象而存在。当我们调用某对象的synchronized方法时，就获取了该对象的同步锁','Bobbi','## synchronized简介\n在java中，每个对象有且仅有一个同步锁。这也意味着，**同步锁是依赖于对象而存在的**。\n\n当我们调用某个对象的synchronized方法时，就获取了该对象的同步锁。**不同线程对同步锁的访问是互斥的**,也就是说，某个时间点对象的同步锁只能被一个线程获取到！通过同步锁我们就能在多线程中实现对对象或方法的互斥访问。例如，现在有两个线程A和线程B，它们都会访问对象obj的同步锁。假设，在某一时刻，线程A获取到obj的同步锁并在执行一些操作；而此时，线程B也企图获取obj的同步锁，线程B将会获取失败，它必须等待，直到线程A释放了obj对象的同步锁之后线程B才能获取到obj对象的同步锁从而才可以运行。\n\n## synchronized基本规则\n我们将synchronized的基本规则总结为下面3条，并通过实例对它们进行说明。\n1. 第一条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的该“synchronized方法”或者“synchronized代码块”的访问将被阻塞。\n2. 第二条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程仍然可以访问“该对象”的非同步代码块。\n3. 第三条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的其他的“synchronized方法”或者“synchronized代码块”的访问将被阻塞。\n\n### 第一条规则验证\n```java\nclass MyRunnable implements Runnable {\n\n    @Override\n    public void run() {\n        synchronized (this) {\n            try {\n                for (int i = 0; i < 5; i++) {\n                    Thread.sleep(100); \n                    System.out.println(Thread.currentThread().getName() + \" loop \" + i);\n                }\n                System.out.println(Thread.currentThread().getName() + \" is end\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\npublic class Synchronized01 {\n\n    public static void main(String[] args) {\n        MyRunnable myRunnable = new MyRunnable();\n        Thread thread1 = new Thread(myRunnable);  // 新建“线程t1”, t1是基于myRunnable这个Runnable对象\n        Thread thread2 = new Thread(myRunnable);  // 新建“线程t2”, t2是基于myRunnable这个Runnable对象\n        thread1.start();\n        thread2.start();\n    }\n}\n```\n结果如下：\n```shell\nThread-0 loop 0\nThread-0 loop 1\nThread-0 loop 2\nThread-0 loop 3\nThread-0 loop 4\nThread-0 is end\nThread-1 loop 0\nThread-1 loop 1\nThread-1 loop 2\nThread-1 loop 3\nThread-1 loop 4\nThread-1 is end\n```\n结果说明：\nrun()方法中存在“synchronized(this)代码块”，而且t1和t2都是基于\"myRunnable这个Runnable对象\"创建的线程。这就意味着，我们可以将synchronized(this)中的this看作是“myRunnable这个Runnable对象”；因此，线程t1和t2共享“myRunnable对象的同步锁”。所以，当一个线程运行的时候，另外一个线程必须等待“运行线程”释放“myRunnable的同步锁”之后才能运行。\n\n\n我们将上面的代码进行修改，然后再运行看看结果怎么样\n```java\n\npublic class Synchronized01 {\n\n    public static void main(String[] args) {\n        Thread thread1 = new Thread(new MyRunnable());\n        Thread thread2 = new Thread(new MyRunnable());\n        thread1.start();\n        thread2.start();\n    }\n}\n```\n结果如下:\n```shell\nThread-1 loop 0\nThread-0 loop 1\nThread-1 loop 1\nThread-1 loop 2\nThread-0 loop 2\nThread-1 loop 3\nThread-0 loop 3\nThread-0 loop 4\nThread-1 loop 4\nThread-0 is end\nThread-1 is end\n```\n\n可以看到两条线程是交替运行的。这是因为线程t1和线程t2分别创建并运行了两个Runnable对象，此时两个线程里的synchronized(this)锁的是不同的对象，因此这两个线程没有互斥性，是随机交替运行的。\n\n### 第二条规则验证\n第二条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程仍然可以访问“该对象”的非同步代码块。\n```java\n\n/**\n * 共享资源类\n */\nclass ResourceObject {\n\n    // 同步方法\n    public void synMethod() {\n        synchronized (this) {\n            for (int i = 0; i < 5; i++) {\n                System.out.println(Thread.currentThread().getName()+\" synMethod running \" + i);\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n    // 非同步方法\n    public void noSynMethod() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(Thread.currentThread().getName()+\" noSynMethod running \" + i);\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n}\npublic class Synchronized02 {\n    public static void main(String[] args) {\n        ResourceObject resource = new ResourceObject();\n        Thread t1 = new Thread(() -> {\n           resource.synMethod();\n        });\n        Thread t2 = new Thread(() -> {\n           resource.noSynMethod();\n        });\n        t1.start();\n        t2.start();\n    }\n}\n\n```\n结果如下：\n```java\nThread-0 synMethod running 0\nThread-1 noSynMethod running 0\nThread-0 synMethod running 1\nThread-1 noSynMethod running 1\nThread-0 synMethod running 2\nThread-1 noSynMethod running 2\nThread-0 synMethod running 3\nThread-1 noSynMethod running 3\nThread-0 synMethod running 4\nThread-1 noSynMethod running 4\n```\n可以看到两个线程交替运行。主线程中新建了两个子线程t1和t2。t1会调用resource对象的synMethod()方法，该方法内含有同步块；而t2则会调用resource对象的noSynMethod()方法，该方法不是同步方法。t1运行时，虽然调用synchronized(this)获取“resource的同步锁”；但是并没有造成t2的阻塞，因为t2没有用到“resource”同步锁。\n\n\n### 第三条规则验证\n第三条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的其他的“synchronized方法”或者“synchronized代码块”的访问将被阻塞。\n```java\n/**\n * 共享资源类\n */\nclass ResourceObject {\n\n    // 同步方法\n    public void synMethod() {\n        synchronized (this) {\n            for (int i = 0; i < 5; i++) {\n                System.out.println(Thread.currentThread().getName()+\" synMethod running \" + i);\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n    // 同步方法2\n    public void synMethod2() {\n        synchronized (this) {\n            for (int i = 0; i < 5; i++) {\n                System.out.println(Thread.currentThread().getName() + \" noSynMethod running \" + i);\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n    }\n}\npublic class Synchronized02 {\n    public static void main(String[] args) {\n        ResourceObject resource = new ResourceObject();\n        Thread t1 = new Thread(() -> {\n           resource.synMethod();\n        });\n        Thread t2 = new Thread(() -> {\n           resource.synMethod2();\n        });\n        t1.start();\n        t2.start();\n    }\n}\n```\n结果如下：\n```shell\nThread-0 synMethod running 0\nThread-0 synMethod running 1\nThread-0 synMethod running 2\nThread-0 synMethod running 3\nThread-0 synMethod running 4\nThread-1 noSynMethod running 0\nThread-1 noSynMethod running 1\nThread-1 noSynMethod running 2\nThread-1 noSynMethod running 3\nThread-1 noSynMethod running 4\n```\n可以看到两个线程依次运行。主线程中新建了两个子线程t1和t2。t1和t2运行时都调用synchronized(this)，这个this是Resource对象，而t1和t2共用此对象。因此，在t1运行时，t2会被阻塞，等待t1运行释放“resource对象的同步锁”，t2才能运行。\n\n## synchronized方法 和 synchronized代码块\n“synchronized方法”是用synchronized修饰方法，而 “synchronized代码块”则是用synchronized修饰代码块。\n\nsynchronized方法示例\n```java\npublic synchronized void synMethod() {\n        for(int i=0; i<1000000; i++);\n    }\n```\nsynchronized代码块示例\n```java\n public void synBlock() {\n        synchronized (this) {\n            for(int i=0; i<1000000; i++);\n        }\n    }\n```\nsynchronized代码块可以更精确的控制冲突限制访问区域，有时候表现更高效率。下面通过一个示例来演示：\n\n```java\nclass Resource {\n    public synchronized void synMethod() {\n        for(int i=0; i<1000000; i++);\n    }\n\n    public void synBlock() {\n        synchronized (this) {\n            for(int i=0; i<1000000; i++);\n        }\n    }\n\n}\n\npublic class Synchronized03 {\n    public static void main(String[] args) {\n        Resource resource = new Resource();\n        long start, diff;\n        start = System.currentTimeMillis();                // 获取当前时间(millis)\n        resource.synBlock();                                // 调用“synchronized方法”\n        diff = System.currentTimeMillis() - start;        // 获取“时间差值”\n        System.out.println(\"synMethod() : \" + diff);\n        start = System.currentTimeMillis();                // 获取当前时间(millis)\n        resource.synMethod();                                // 调用“synchronized方法块”\n        diff = System.currentTimeMillis() - start;        // 获取“时间差值”\n        System.out.println(\"synBlock()  : \" + diff);\n    }\n}\n```\n\n运行结果:\n```shell\nsynMethod() : 5\nsynBlock()  : 3\n```\n## 示例锁和全局锁\n\n- 实例锁 -- 锁在某一个实例对象上。如果该类是单例，那么该锁也具有全局锁的概念。实例锁对应的就是synchronized关键字。\n- 全局锁 -- 该锁针对的是类，无论实例多少个对象，那么线程都共享该锁。全局锁对应的就是static synchronized（或者是锁在该类的class或者classloader对象上）。\n\n关于“实例锁”和“全局锁”有一个很形象的例子：\n```java\npulbic class Resource {\n    public synchronized void synA(){}\n    public synchronized void synB(){}\n    public static synchronized void synC(){}\n    public static synchronized void synD(){}\n}\n```\n\n假设，Something有两个实例x和y。分析下面4组表达式获取的锁的情况。\n\n(01) x.synA()与x.synB() \n\n(02) x.synA()与y.synA()\n\n(03) x.synC()与y.synD()\n\n(04) x.synA()与Resource.synC()\n\n### (01)情况：不能被同时访问\n因为synA和synB都是同一个对象的同步锁\n```java\nclass Resource {\n   public synchronized void synA() {\n       for (int i = 0; i < 5; i++) {\n           System.out.println(Thread.currentThread().getName()+\" synA\");\n           try {\n               Thread.sleep(10);\n           } catch (InterruptedException e) {\n               e.printStackTrace();\n           }\n       }\n   }\n    public synchronized void synB() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(Thread.currentThread().getName()+\" synB\");\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\npublic class Synchronized03 {\n    public static void main(String[] args) {\n        Resource resource = new Resource();\n       Thread t1 = new Thread(() -> {\n           resource.synA();\n       });\n       Thread t2 =new Thread(() -> {\n           resource.synB();\n       });\n       t1.start();\n       t2.start();\n    }\n}\n\n```\n结果如下：\n```shell\nThread-0 synA\nThread-0 synA\nThread-0 synA\nThread-0 synA\nThread-0 synA\nThread-1 synB\nThread-1 synB\nThread-1 synB\nThread-1 synB\nThread-1 synB\n```\n\n### (02)情况：能被同时访问\n因为访问的不是同一个对象的同步锁，x.synA()访问的是x的同步锁，y.synB()访问的是y的同步锁\n\n```java\nclass Resource {\n   public synchronized void synA() {\n       for (int i = 0; i < 5; i++) {\n           System.out.println(Thread.currentThread().getName()+\" synA\");\n           try {\n               Thread.sleep(10);\n           } catch (InterruptedException e) {\n               e.printStackTrace();\n           }\n       }\n   }\n    public synchronized void synB() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(Thread.currentThread().getName()+\" synB\");\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\npublic class Synchronized03 {\n    public static void main(String[] args) {\n       Thread t1 = new Thread(() -> {\n           new Resource().synA();\n       });\n       Thread t2 =new Thread(() -> {\n           new Resource().synB();\n       });\n       t1.start();\n       t2.start();\n    }\n}\n\n```\n结果如下:\n```Shell\nThread-1 synB\nThread-0 synA\nThread-1 synB\nThread-0 synA\nThread-0 synA\nThread-1 synB\nThread-0 synA\nThread-1 synB\nThread-1 synB\nThread-0 synA\n```\n\n### (03)情况：不能被同时访问\n因为synC()和synD()都是static类型，x.synC()相当于Resource.synC()，y.synC()相当于Resource.synD()，因此它们共用一个同步锁，不能被同时反问。\n```java\nclass Resource {\n   public static synchronized void synC() {\n       for (int i = 0; i < 5; i++) {\n           System.out.println(Thread.currentThread().getName()+\" synC\");\n           try {\n               Thread.sleep(10);\n           } catch (InterruptedException e) {\n               e.printStackTrace();\n           }\n       }\n   }\n    public static synchronized void synD() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(Thread.currentThread().getName()+\" synD\");\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\npublic class Synchronized03 {\n    public static void main(String[] args) {\n       Thread t1 = new Thread(() -> {\n           Resource.synC();\n       });\n       Thread t2 =new Thread(() -> {\n           Resource.synD();\n       });\n       t1.start();\n       t2.start();\n    }\n}\n\n```\n结果如下：\n```shell\nThread-0 synC\nThread-0 synC\nThread-0 synC\nThread-0 synC\nThread-0 synC\nThread-1 synD\nThread-1 synD\nThread-1 synD\nThread-1 synD\nThread-1 synD\n\n```\n### (03)情况：可以同时访问\n因为x.synA()使用的对象锁是x的对象锁，而synC是静态方法，Resource.sync()可以理解为使用的锁是“类的锁”，因此它们是可以同时被访问的\n```java\nclass Resource {\n   public  synchronized void synA() {\n       for (int i = 0; i < 5; i++) {\n           System.out.println(Thread.currentThread().getName()+\" synA\");\n           try {\n               Thread.sleep(10);\n           } catch (InterruptedException e) {\n               e.printStackTrace();\n           }\n       }\n   }\n    public static synchronized void synC() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(Thread.currentThread().getName()+\" synC\");\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\npublic class Synchronized03 {\n    public static void main(String[] args) {\n        Resource resource = new Resource();\n       Thread t1 = new Thread(() -> {\n           resource.synA();\n       });\n       Thread t2 =new Thread(() -> {\n           Resource.synC();\n       });\n       t1.start();\n       t2.start();\n    }\n}\n```\n\n结果如下：\n```shell\nThread-0 synA\nThread-1 synC\nThread-0 synA\nThread-1 synC\nThread-0 synA\nThread-1 synC\nThread-0 synA\nThread-1 synC\nThread-0 synA\nThread-1 synC\n\n```\n\n## synchronized底层原理\n```java\npublic class SynCodeBlock {\n    public int i;\n\n    public void syncTask(){\n        synchronized (this){\n            i++;\n        }\n    }\n}\n```\n\n通过javap反编译代码，得到执行字节码\n> javap -c SynCodeBlock.class \n\n![image.png](http://oss.dblearn.cn/dbblog/20190724/4f71fc94e47341e08fe34143dc709b8c.png)\n\n如图，从字节码中可知同步语句块的实现使用的是monitorenter 和 monitorexit 指令，其中monitorenter指令指向同步代码块的开始位置，monitorexit指令则指明同步代码块的结束位置，当执行monitorenter指令时，当前线程将试图获取 objectref(即对象锁) 所对应的 monitor 的持有权，当 objectref 的 monitor 的进入计数器为 0，那线程可以成功取得 monitor，并将计数器值设置为 1，取锁成功。直到正在执行线程执行完毕，即monitorexit指令被执行，执行线程将释放 monitor(锁)并设置计数器值为0 ，其他线程将有机会持有 monitor 。\n','<h2 id=\"synchronized-\">synchronized简介</h2>\n<p>在java中，每个对象有且仅有一个同步锁。这也意味着，<strong>同步锁是依赖于对象而存在的</strong>。</p>\n<p>当我们调用某个对象的synchronized方法时，就获取了该对象的同步锁。<strong>不同线程对同步锁的访问是互斥的</strong>,也就是说，某个时间点对象的同步锁只能被一个线程获取到！通过同步锁我们就能在多线程中实现对对象或方法的互斥访问。例如，现在有两个线程A和线程B，它们都会访问对象obj的同步锁。假设，在某一时刻，线程A获取到obj的同步锁并在执行一些操作；而此时，线程B也企图获取obj的同步锁，线程B将会获取失败，它必须等待，直到线程A释放了obj对象的同步锁之后线程B才能获取到obj对象的同步锁从而才可以运行。</p>\n<h2 id=\"synchronized-\">synchronized基本规则</h2>\n<p>我们将synchronized的基本规则总结为下面3条，并通过实例对它们进行说明。</p>\n<ol>\n<li>第一条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的该“synchronized方法”或者“synchronized代码块”的访问将被阻塞。</li>\n<li>第二条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程仍然可以访问“该对象”的非同步代码块。</li>\n<li>第三条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的其他的“synchronized方法”或者“synchronized代码块”的访问将被阻塞。</li>\n</ol>\n<h3 id=\"-\">第一条规则验证</h3>\n<pre><code class=\"language-java\">class MyRunnable implements Runnable {\n\n    @Override\n    public void run() {\n        synchronized (this) {\n            try {\n                for (int i = 0; i &lt; 5; i++) {\n                    Thread.sleep(100); \n                    System.out.println(Thread.currentThread().getName() + &quot; loop &quot; + i);\n                }\n                System.out.println(Thread.currentThread().getName() + &quot; is end&quot;);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\npublic class Synchronized01 {\n\n    public static void main(String[] args) {\n        MyRunnable myRunnable = new MyRunnable();\n        Thread thread1 = new Thread(myRunnable);  // 新建“线程t1”, t1是基于myRunnable这个Runnable对象\n        Thread thread2 = new Thread(myRunnable);  // 新建“线程t2”, t2是基于myRunnable这个Runnable对象\n        thread1.start();\n        thread2.start();\n    }\n}</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">Thread-0 loop 0\nThread-0 loop 1\nThread-0 loop 2\nThread-0 loop 3\nThread-0 loop 4\nThread-0 is end\nThread-1 loop 0\nThread-1 loop 1\nThread-1 loop 2\nThread-1 loop 3\nThread-1 loop 4\nThread-1 is end</code></pre>\n<p>结果说明：\nrun()方法中存在“synchronized(this)代码块”，而且t1和t2都是基于&quot;myRunnable这个Runnable对象&quot;创建的线程。这就意味着，我们可以将synchronized(this)中的this看作是“myRunnable这个Runnable对象”；因此，线程t1和t2共享“myRunnable对象的同步锁”。所以，当一个线程运行的时候，另外一个线程必须等待“运行线程”释放“myRunnable的同步锁”之后才能运行。</p>\n<p>我们将上面的代码进行修改，然后再运行看看结果怎么样</p>\n<pre><code class=\"language-java\">\npublic class Synchronized01 {\n\n    public static void main(String[] args) {\n        Thread thread1 = new Thread(new MyRunnable());\n        Thread thread2 = new Thread(new MyRunnable());\n        thread1.start();\n        thread2.start();\n    }\n}</code></pre>\n<p>结果如下:</p>\n<pre><code class=\"language-shell\">Thread-1 loop 0\nThread-0 loop 1\nThread-1 loop 1\nThread-1 loop 2\nThread-0 loop 2\nThread-1 loop 3\nThread-0 loop 3\nThread-0 loop 4\nThread-1 loop 4\nThread-0 is end\nThread-1 is end</code></pre>\n<p>可以看到两条线程是交替运行的。这是因为线程t1和线程t2分别创建并运行了两个Runnable对象，此时两个线程里的synchronized(this)锁的是不同的对象，因此这两个线程没有互斥性，是随机交替运行的。</p>\n<h3 id=\"-\">第二条规则验证</h3>\n<p>第二条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程仍然可以访问“该对象”的非同步代码块。</p>\n<pre><code class=\"language-java\">\n/**\n * 共享资源类\n */\nclass ResourceObject {\n\n    // 同步方法\n    public void synMethod() {\n        synchronized (this) {\n            for (int i = 0; i &lt; 5; i++) {\n                System.out.println(Thread.currentThread().getName()+&quot; synMethod running &quot; + i);\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n    // 非同步方法\n    public void noSynMethod() {\n        for (int i = 0; i &lt; 5; i++) {\n            System.out.println(Thread.currentThread().getName()+&quot; noSynMethod running &quot; + i);\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n}\npublic class Synchronized02 {\n    public static void main(String[] args) {\n        ResourceObject resource = new ResourceObject();\n        Thread t1 = new Thread(() -&gt; {\n           resource.synMethod();\n        });\n        Thread t2 = new Thread(() -&gt; {\n           resource.noSynMethod();\n        });\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-java\">Thread-0 synMethod running 0\nThread-1 noSynMethod running 0\nThread-0 synMethod running 1\nThread-1 noSynMethod running 1\nThread-0 synMethod running 2\nThread-1 noSynMethod running 2\nThread-0 synMethod running 3\nThread-1 noSynMethod running 3\nThread-0 synMethod running 4\nThread-1 noSynMethod running 4</code></pre>\n<p>可以看到两个线程交替运行。主线程中新建了两个子线程t1和t2。t1会调用resource对象的synMethod()方法，该方法内含有同步块；而t2则会调用resource对象的noSynMethod()方法，该方法不是同步方法。t1运行时，虽然调用synchronized(this)获取“resource的同步锁”；但是并没有造成t2的阻塞，因为t2没有用到“resource”同步锁。</p>\n<h3 id=\"-\">第三条规则验证</h3>\n<p>第三条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的其他的“synchronized方法”或者“synchronized代码块”的访问将被阻塞。</p>\n<pre><code class=\"language-java\">/**\n * 共享资源类\n */\nclass ResourceObject {\n\n    // 同步方法\n    public void synMethod() {\n        synchronized (this) {\n            for (int i = 0; i &lt; 5; i++) {\n                System.out.println(Thread.currentThread().getName()+&quot; synMethod running &quot; + i);\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n    // 同步方法2\n    public void synMethod2() {\n        synchronized (this) {\n            for (int i = 0; i &lt; 5; i++) {\n                System.out.println(Thread.currentThread().getName() + &quot; noSynMethod running &quot; + i);\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n    }\n}\npublic class Synchronized02 {\n    public static void main(String[] args) {\n        ResourceObject resource = new ResourceObject();\n        Thread t1 = new Thread(() -&gt; {\n           resource.synMethod();\n        });\n        Thread t2 = new Thread(() -&gt; {\n           resource.synMethod2();\n        });\n        t1.start();\n        t2.start();\n    }\n}</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">Thread-0 synMethod running 0\nThread-0 synMethod running 1\nThread-0 synMethod running 2\nThread-0 synMethod running 3\nThread-0 synMethod running 4\nThread-1 noSynMethod running 0\nThread-1 noSynMethod running 1\nThread-1 noSynMethod running 2\nThread-1 noSynMethod running 3\nThread-1 noSynMethod running 4</code></pre>\n<p>可以看到两个线程依次运行。主线程中新建了两个子线程t1和t2。t1和t2运行时都调用synchronized(this)，这个this是Resource对象，而t1和t2共用此对象。因此，在t1运行时，t2会被阻塞，等待t1运行释放“resource对象的同步锁”，t2才能运行。</p>\n<h2 id=\"synchronized-synchronized-\">synchronized方法 和 synchronized代码块</h2>\n<p>“synchronized方法”是用synchronized修饰方法，而 “synchronized代码块”则是用synchronized修饰代码块。</p>\n<p>synchronized方法示例</p>\n<pre><code class=\"language-java\">public synchronized void synMethod() {\n        for(int i=0; i&lt;1000000; i++);\n    }</code></pre>\n<p>synchronized代码块示例</p>\n<pre><code class=\"language-java\"> public void synBlock() {\n        synchronized (this) {\n            for(int i=0; i&lt;1000000; i++);\n        }\n    }</code></pre>\n<p>synchronized代码块可以更精确的控制冲突限制访问区域，有时候表现更高效率。下面通过一个示例来演示：</p>\n<pre><code class=\"language-java\">class Resource {\n    public synchronized void synMethod() {\n        for(int i=0; i&lt;1000000; i++);\n    }\n\n    public void synBlock() {\n        synchronized (this) {\n            for(int i=0; i&lt;1000000; i++);\n        }\n    }\n\n}\n\npublic class Synchronized03 {\n    public static void main(String[] args) {\n        Resource resource = new Resource();\n        long start, diff;\n        start = System.currentTimeMillis();                // 获取当前时间(millis)\n        resource.synBlock();                                // 调用“synchronized方法”\n        diff = System.currentTimeMillis() - start;        // 获取“时间差值”\n        System.out.println(&quot;synMethod() : &quot; + diff);\n        start = System.currentTimeMillis();                // 获取当前时间(millis)\n        resource.synMethod();                                // 调用“synchronized方法块”\n        diff = System.currentTimeMillis() - start;        // 获取“时间差值”\n        System.out.println(&quot;synBlock()  : &quot; + diff);\n    }\n}</code></pre>\n<p>运行结果:</p>\n<pre><code class=\"language-shell\">synMethod() : 5\nsynBlock()  : 3</code></pre>\n<h2 id=\"-\">示例锁和全局锁</h2>\n<ul>\n<li>实例锁 -- 锁在某一个实例对象上。如果该类是单例，那么该锁也具有全局锁的概念。实例锁对应的就是synchronized关键字。</li>\n<li>全局锁 -- 该锁针对的是类，无论实例多少个对象，那么线程都共享该锁。全局锁对应的就是static synchronized（或者是锁在该类的class或者classloader对象上）。</li>\n</ul>\n<p>关于“实例锁”和“全局锁”有一个很形象的例子：</p>\n<pre><code class=\"language-java\">pulbic class Resource {\n    public synchronized void synA(){}\n    public synchronized void synB(){}\n    public static synchronized void synC(){}\n    public static synchronized void synD(){}\n}</code></pre>\n<p>假设，Something有两个实例x和y。分析下面4组表达式获取的锁的情况。</p>\n<p>(01) x.synA()与x.synB() </p>\n<p>(02) x.synA()与y.synA()</p>\n<p>(03) x.synC()与y.synD()</p>\n<p>(04) x.synA()与Resource.synC()</p>\n<h3 id=\"-01-\">(01)情况：不能被同时访问</h3>\n<p>因为synA和synB都是同一个对象的同步锁</p>\n<pre><code class=\"language-java\">class Resource {\n   public synchronized void synA() {\n       for (int i = 0; i &lt; 5; i++) {\n           System.out.println(Thread.currentThread().getName()+&quot; synA&quot;);\n           try {\n               Thread.sleep(10);\n           } catch (InterruptedException e) {\n               e.printStackTrace();\n           }\n       }\n   }\n    public synchronized void synB() {\n        for (int i = 0; i &lt; 5; i++) {\n            System.out.println(Thread.currentThread().getName()+&quot; synB&quot;);\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\npublic class Synchronized03 {\n    public static void main(String[] args) {\n        Resource resource = new Resource();\n       Thread t1 = new Thread(() -&gt; {\n           resource.synA();\n       });\n       Thread t2 =new Thread(() -&gt; {\n           resource.synB();\n       });\n       t1.start();\n       t2.start();\n    }\n}\n</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">Thread-0 synA\nThread-0 synA\nThread-0 synA\nThread-0 synA\nThread-0 synA\nThread-1 synB\nThread-1 synB\nThread-1 synB\nThread-1 synB\nThread-1 synB</code></pre>\n<h3 id=\"-02-\">(02)情况：能被同时访问</h3>\n<p>因为访问的不是同一个对象的同步锁，x.synA()访问的是x的同步锁，y.synB()访问的是y的同步锁</p>\n<pre><code class=\"language-java\">class Resource {\n   public synchronized void synA() {\n       for (int i = 0; i &lt; 5; i++) {\n           System.out.println(Thread.currentThread().getName()+&quot; synA&quot;);\n           try {\n               Thread.sleep(10);\n           } catch (InterruptedException e) {\n               e.printStackTrace();\n           }\n       }\n   }\n    public synchronized void synB() {\n        for (int i = 0; i &lt; 5; i++) {\n            System.out.println(Thread.currentThread().getName()+&quot; synB&quot;);\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\npublic class Synchronized03 {\n    public static void main(String[] args) {\n       Thread t1 = new Thread(() -&gt; {\n           new Resource().synA();\n       });\n       Thread t2 =new Thread(() -&gt; {\n           new Resource().synB();\n       });\n       t1.start();\n       t2.start();\n    }\n}\n</code></pre>\n<p>结果如下:</p>\n<pre><code class=\"language-Shell\">Thread-1 synB\nThread-0 synA\nThread-1 synB\nThread-0 synA\nThread-0 synA\nThread-1 synB\nThread-0 synA\nThread-1 synB\nThread-1 synB\nThread-0 synA</code></pre>\n<h3 id=\"-03-\">(03)情况：不能被同时访问</h3>\n<p>因为synC()和synD()都是static类型，x.synC()相当于Resource.synC()，y.synC()相当于Resource.synD()，因此它们共用一个同步锁，不能被同时反问。</p>\n<pre><code class=\"language-java\">class Resource {\n   public static synchronized void synC() {\n       for (int i = 0; i &lt; 5; i++) {\n           System.out.println(Thread.currentThread().getName()+&quot; synC&quot;);\n           try {\n               Thread.sleep(10);\n           } catch (InterruptedException e) {\n               e.printStackTrace();\n           }\n       }\n   }\n    public static synchronized void synD() {\n        for (int i = 0; i &lt; 5; i++) {\n            System.out.println(Thread.currentThread().getName()+&quot; synD&quot;);\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\npublic class Synchronized03 {\n    public static void main(String[] args) {\n       Thread t1 = new Thread(() -&gt; {\n           Resource.synC();\n       });\n       Thread t2 =new Thread(() -&gt; {\n           Resource.synD();\n       });\n       t1.start();\n       t2.start();\n    }\n}\n</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">Thread-0 synC\nThread-0 synC\nThread-0 synC\nThread-0 synC\nThread-0 synC\nThread-1 synD\nThread-1 synD\nThread-1 synD\nThread-1 synD\nThread-1 synD\n</code></pre>\n<h3 id=\"-03-\">(03)情况：可以同时访问</h3>\n<p>因为x.synA()使用的对象锁是x的对象锁，而synC是静态方法，Resource.sync()可以理解为使用的锁是“类的锁”，因此它们是可以同时被访问的</p>\n<pre><code class=\"language-java\">class Resource {\n   public  synchronized void synA() {\n       for (int i = 0; i &lt; 5; i++) {\n           System.out.println(Thread.currentThread().getName()+&quot; synA&quot;);\n           try {\n               Thread.sleep(10);\n           } catch (InterruptedException e) {\n               e.printStackTrace();\n           }\n       }\n   }\n    public static synchronized void synC() {\n        for (int i = 0; i &lt; 5; i++) {\n            System.out.println(Thread.currentThread().getName()+&quot; synC&quot;);\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\npublic class Synchronized03 {\n    public static void main(String[] args) {\n        Resource resource = new Resource();\n       Thread t1 = new Thread(() -&gt; {\n           resource.synA();\n       });\n       Thread t2 =new Thread(() -&gt; {\n           Resource.synC();\n       });\n       t1.start();\n       t2.start();\n    }\n}</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">Thread-0 synA\nThread-1 synC\nThread-0 synA\nThread-1 synC\nThread-0 synA\nThread-1 synC\nThread-0 synA\nThread-1 synC\nThread-0 synA\nThread-1 synC\n</code></pre>\n<h2 id=\"synchronized-\">synchronized底层原理</h2>\n<pre><code class=\"language-java\">public class SynCodeBlock {\n    public int i;\n\n    public void syncTask(){\n        synchronized (this){\n            i++;\n        }\n    }\n}</code></pre>\n<p>通过javap反编译代码，得到执行字节码</p>\n<blockquote>\n<p>javap -c SynCodeBlock.class </p>\n</blockquote>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190724/4f71fc94e47341e08fe34143dc709b8c.png\" alt=\"image.png\"></p>\n<p>如图，从字节码中可知同步语句块的实现使用的是monitorenter 和 monitorexit 指令，其中monitorenter指令指向同步代码块的开始位置，monitorexit指令则指明同步代码块的结束位置，当执行monitorenter指令时，当前线程将试图获取 objectref(即对象锁) 所对应的 monitor 的持有权，当 objectref 的 monitor 的进入计数器为 0，那线程可以成功取得 monitor，并将计数器值设置为 1，取锁成功。直到正在执行线程执行完毕，即monitorexit指令被执行，执行线程将释放 monitor(锁)并设置计数器值为0 ，其他线程将有机会持有 monitor 。</p>\n',38,13,2,NULL,'2019-07-24 15:32:43','2019-07-24 15:47:41',0,'9,14,32',1,0),(19,'Java多线程基础03——线程等待与唤醒','在Object中，定义了wait(), notify()和notifyAll()等接口。wait()的作用是让当前线程进入等待状态，同时，wait()也会让当前线程释放它所持有的锁。而notify()和notifyAll()的作用，则是唤醒当前对象上的等待线程；notify()是唤醒单个线程，而notifyAll()是唤醒所有的线程。','Bobbi','### wait(),notify(),notifyAll()等方法介绍\n在Object中，定义了wait(), notify()和notifyAll()等接口。wait()的作用是让当前线程进入等待状态，同时，wait()也会让当前线程释放它所持有的锁。而notify()和notifyAll()的作用，则是唤醒当前对象上的等待线程；notify()是唤醒单个线程，而notifyAll()是唤醒所有的线程。\n\nObject类中关于等待/唤醒的API详细信息如下：\n- notify() -- 唤醒在此对象监视器上等待的单个线程。\n- notifyAll() -- 唤醒在此对象监视器上等待的所有线程。\n- wait() -- 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法”，当前线程被唤醒(进入“就绪状态”)。\n- wait(long timeout) -- 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量”，当前线程被唤醒(进入“就绪状态”)。\n- wait(long timeout, int nanos)  -- 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量”，当前线程被唤醒(进入“就绪状态”)。\n\n> wait(), notify(), notifyAll() 需要和 synchonized 搭配使用， 否则会报“java.lang.IllegalMonitorStateException”异常。\n\n\n## wait()和notify()示例\n```java\nclass MyThread extends Thread {\n    @Override\n    public void run() {\n        synchronized (this) {\n            System.out.println(Thread.currentThread().getName()+ \" call notify\");\n            notify();\n        }\n    }\n}\npublic class WaitTest {\n    public static void main(String[] args) {\n        MyThread t1 = new MyThread();\n        synchronized (t1) {\n            // 启动“线程t1”\n            System.out.println(Thread.currentThread().getName()+\" start t1\");\n            t1.start();\n            try {\n                // 主线程等待t1通过notify()唤醒。\n                System.out.println(Thread.currentThread().getName()+\" wait()\");\n                t1.wait();\n                System.out.println(Thread.currentThread().getName()+\" continue\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n```\n结果如下：\n```shell\nmain start t1\nmain wait()\nThread-0 call notify\nmain continue\n```\n结果说明：\n\n(01) 注意，\"主线程\" 代表“主线程main”。\"线程t1\" 代表WaitTest中启动的“线程t1”。 而“锁” 代表“t1这个对象的同步锁”。<br>\n(02) “主线程”通过 new MyThread() 新建“线程t1”。随后通过synchronized(t1)获取“t1对象的同步锁”。然后调用t1.start()启动“线程t1”。<br>\n(03) “主线程”执行t1.wait() 释放“t1对象的锁”并且进入“等待(阻塞)状态”。等待t1对象上的线程通过notify() 或 notifyAll()将其唤醒。<br>\n(04) “线程t1”运行之后，通过synchronized(this)获取“当前对象的锁”；接着调用notify()唤醒“当前对象上的等待线程”，也就是唤醒“主线程”。<br>\n(05) “线程t1”运行完毕之后，释放“当前对象的锁”。紧接着，“主线程”获取“t1对象的锁”，然后接着运行。\n\n对于以上代码，**t1.wait()应该是让“线程t1”等待；但是，为什么却是让“主线程main”等待了呢？**\n\n- 注意：jdk的解释中，说wait()的作用是让“当前线程”等待，而“当前线程”是指正在cpu上运行的线程！\n这也意味着，虽然t1.wait()是通过“线程t1”调用的wait()方法，但是调用t1.wait()的地方是在“主线程main”中。而主线程必须是“当前线程”，也就是运行状态，才可以执行t1.wait()。所以，此时的“当前线程”是“主线程main”！因此，t1.wait()是让“主线程”等待，而不是“线程t1”！\n\n\n## wait(long timeout)和notify()\nwait(long timeout)会让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量”，当前线程被唤醒(进入“就绪状态”)。\n下面的示例就是演示wait(long timeout)在超时情况下，线程被唤醒的情况。\n\n```java\nclass MyThread extends Thread {\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + \" run \");\n        // 死循环，不断运行。\n        while(true)\n            ;\n    }\n}\npublic class WaitTest {\n    public static void main(String[] args) {\n        MyThread t1= new MyThread();\n        synchronized (t1) {\n            // 启动“线程t1”\n            System.out.println(Thread.currentThread().getName()+\" start t1\");\n            t1.start();\n            try {\n                // 主线程等待t1通过notify()唤醒 或 notifyAll()唤醒，或超过3000ms延时；然后才被唤醒。\n                System.out.println(Thread.currentThread().getName()+\" wait()\");\n                t1.wait(3000);\n\n                System.out.println(Thread.currentThread().getName()+\" continue\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n```\n运行结果：\n```shell\nmain start t1\nmain wait()\nThread-0 run // 大约三秒后\nmain continue\n```\n结果说明：<br>\n(01) 注意，\"主线程\" 代表线程main。\"线程t1\" 代表WaitTest中启动的线程t1。 而“锁” 代表“t1这个对象的同步锁”。<br>\n(02) 主线程main执行t1.start()启动“线程t1”。<br>\n(03) 主线程main执行t1.wait(3000)，此时，主线程进入“阻塞状态”。需要“用于t1对象锁的线程通过notify() 或者 notifyAll()将其唤醒” 或者 “超时3000ms之后”，主线程main才进入到“就绪状态”，然后才可以运行。<br>\n(04) “线程t1”运行之后，进入了死循环，一直不断的运行。<br>\n(05) 超时3000ms之后，主线程main会进入到“就绪状态”，然后接着进入“运行状态”。<br>\n\n## wait() 和 notifyAll()\n```java\nclass MyThread extends Thread {\n\n    private String lockObject;\n\n    public MyThread(String lockObject) {\n        this.lockObject = lockObject;\n    }\n\n    @Override\n    public void run() {\n        synchronized (lockObject) {\n            try {\n                System.out.println(Thread.currentThread().getName()+\"线程等待\");\n                lockObject.wait();\n                System.out.println(Thread.currentThread().getName()+\"线程恢复运行\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\npublic class WaitTest {\n    public static void main(String[] args) {\n        String lockObject = \"lockObject\";\n        MyThread t1 = new MyThread(lockObject);\n        MyThread t2 = new MyThread(lockObject);\n        MyThread t3 = new MyThread(lockObject);\n        t1.start();\n        t2.start();\n        t3.start();\n\n        try {\n            Thread.sleep(3000);\n            synchronized (lockObject){\n		System.out.println(\"main notifyAll()\");\n                lockObject.notifyAll();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n}\n```\n运行结果：\n```shell\nThread-0线程等待\nThread-1线程等待\nThread-2线程等待\nmain notifyAll()\nThread-2线程恢复运行\nThread-1线程恢复运行\nThread-0线程恢复运行\n```\n结果说明：\n\n(01) 主线程中新建并且启动了3个线程\"t1\", \"t2\"和\"t3\"。<br>\n(02) 主线程通过sleep(3000)休眠3秒。在主线程休眠3秒的过程中，我们假设\"t1\", \"t2\"和\"t3\"这3个线程都运行了。以\"t1\"为例，当它运行的时候，它会执行obj.wait()等待其它线程通过notify()或额nofityAll()来唤醒它；相同的道理，\"t2\"和\"t3\"也会等待其它线程通过nofity()或nofityAll()来唤醒它们。\n(03) 主线程休眠3秒之后，接着运行。执行 lockObject.notifyAll() 唤醒lockObject上的等待线程，即唤醒\"t1\", \"t2\"和\"t3\"这3个线程。 紧接着，主线程的synchronized(lockObject)运行完毕之后，主线程释放“lockObject锁”。这样，\"t1\", \"t2\"和\"t3\"就可以获取“obj锁”而继续运行了！\n\n## 为什么notify(), wait()等函数定义在Object中，而不是Thread中\n\nObject中的wait(), notify()等函数，和synchronized一样，会对“对象的同步锁”进行操作。\n\nwait()会使“当前线程”等待，因为线程进入等待状态，所以线程应该释放它锁持有的“同步锁”，否则其它线程获取不到该“同步锁”而无法运行！\n\n而且，根据前面的介绍，我们知道：等待线程可以被notify()或notifyAll()唤醒。现在，请思考一个问题：notify()是依据什么唤醒等待线程的？或者说，wait()等待线程和notify()之间是通过什么关联起来的？答案是：依据“对象的同步锁”。\n\n负责唤醒等待线程的那个线程(我们称为“唤醒线程”)，它只有在获取“该对象的同步锁”(这里的同步锁必须和等待线程的同步锁是同一个)，并且调用notify()或notifyAll()方法之后，才能唤醒等待线程。**虽然，等待线程被唤醒；但是，它不能立刻执行，因为唤醒线程还持有“该对象的同步锁”。必须等到唤醒线程释放了“对象的同步锁”之后，等待线程才能获取到“对象的同步锁”进而继续运行。**\n\n总之，notify(), wait()依赖于“同步锁”，而“同步锁”是对象锁持有，并且每个对象有且仅有一个！这就是为什么notify(), wait()等函数定义在Object类，而不是Thread类中的原因。\n\n','<h3 id=\"wait-notify-notifyall-\">wait(),notify(),notifyAll()等方法介绍</h3>\n<p>在Object中，定义了wait(), notify()和notifyAll()等接口。wait()的作用是让当前线程进入等待状态，同时，wait()也会让当前线程释放它所持有的锁。而notify()和notifyAll()的作用，则是唤醒当前对象上的等待线程；notify()是唤醒单个线程，而notifyAll()是唤醒所有的线程。</p>\n<p>Object类中关于等待/唤醒的API详细信息如下：</p>\n<ul>\n<li>notify() -- 唤醒在此对象监视器上等待的单个线程。</li>\n<li>notifyAll() -- 唤醒在此对象监视器上等待的所有线程。</li>\n<li>wait() -- 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法”，当前线程被唤醒(进入“就绪状态”)。</li>\n<li>wait(long timeout) -- 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量”，当前线程被唤醒(进入“就绪状态”)。</li>\n<li>wait(long timeout, int nanos)  -- 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量”，当前线程被唤醒(进入“就绪状态”)。</li>\n</ul>\n<blockquote>\n<p>wait(), notify(), notifyAll() 需要和 synchonized 搭配使用， 否则会报“java.lang.IllegalMonitorStateException”异常。</p>\n</blockquote>\n<h2 id=\"wait-notify-\">wait()和notify()示例</h2>\n<pre><code class=\"language-java\">class MyThread extends Thread {\n    @Override\n    public void run() {\n        synchronized (this) {\n            System.out.println(Thread.currentThread().getName()+ &quot; call notify&quot;);\n            notify();\n        }\n    }\n}\npublic class WaitTest {\n    public static void main(String[] args) {\n        MyThread t1 = new MyThread();\n        synchronized (t1) {\n            // 启动“线程t1”\n            System.out.println(Thread.currentThread().getName()+&quot; start t1&quot;);\n            t1.start();\n            try {\n                // 主线程等待t1通过notify()唤醒。\n                System.out.println(Thread.currentThread().getName()+&quot; wait()&quot;);\n                t1.wait();\n                System.out.println(Thread.currentThread().getName()+&quot; continue&quot;);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">main start t1\nmain wait()\nThread-0 call notify\nmain continue</code></pre>\n<p>结果说明：</p>\n<p>(01) 注意，&quot;主线程&quot; 代表“主线程main”。&quot;线程t1&quot; 代表WaitTest中启动的“线程t1”。 而“锁” 代表“t1这个对象的同步锁”。<br>\n(02) “主线程”通过 new MyThread() 新建“线程t1”。随后通过synchronized(t1)获取“t1对象的同步锁”。然后调用t1.start()启动“线程t1”。<br>\n(03) “主线程”执行t1.wait() 释放“t1对象的锁”并且进入“等待(阻塞)状态”。等待t1对象上的线程通过notify() 或 notifyAll()将其唤醒。<br>\n(04) “线程t1”运行之后，通过synchronized(this)获取“当前对象的锁”；接着调用notify()唤醒“当前对象上的等待线程”，也就是唤醒“主线程”。<br>\n(05) “线程t1”运行完毕之后，释放“当前对象的锁”。紧接着，“主线程”获取“t1对象的锁”，然后接着运行。</p>\n<p>对于以上代码，<strong>t1.wait()应该是让“线程t1”等待；但是，为什么却是让“主线程main”等待了呢？</strong></p>\n<ul>\n<li>注意：jdk的解释中，说wait()的作用是让“当前线程”等待，而“当前线程”是指正在cpu上运行的线程！\n这也意味着，虽然t1.wait()是通过“线程t1”调用的wait()方法，但是调用t1.wait()的地方是在“主线程main”中。而主线程必须是“当前线程”，也就是运行状态，才可以执行t1.wait()。所以，此时的“当前线程”是“主线程main”！因此，t1.wait()是让“主线程”等待，而不是“线程t1”！</li>\n</ul>\n<h2 id=\"wait-long-timeout-notify-\">wait(long timeout)和notify()</h2>\n<p>wait(long timeout)会让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量”，当前线程被唤醒(进入“就绪状态”)。\n下面的示例就是演示wait(long timeout)在超时情况下，线程被唤醒的情况。</p>\n<pre><code class=\"language-java\">class MyThread extends Thread {\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + &quot; run &quot;);\n        // 死循环，不断运行。\n        while(true)\n            ;\n    }\n}\npublic class WaitTest {\n    public static void main(String[] args) {\n        MyThread t1= new MyThread();\n        synchronized (t1) {\n            // 启动“线程t1”\n            System.out.println(Thread.currentThread().getName()+&quot; start t1&quot;);\n            t1.start();\n            try {\n                // 主线程等待t1通过notify()唤醒 或 notifyAll()唤醒，或超过3000ms延时；然后才被唤醒。\n                System.out.println(Thread.currentThread().getName()+&quot; wait()&quot;);\n                t1.wait(3000);\n\n                System.out.println(Thread.currentThread().getName()+&quot; continue&quot;);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">main start t1\nmain wait()\nThread-0 run // 大约三秒后\nmain continue</code></pre>\n<p>结果说明：<br>\n(01) 注意，&quot;主线程&quot; 代表线程main。&quot;线程t1&quot; 代表WaitTest中启动的线程t1。 而“锁” 代表“t1这个对象的同步锁”。<br>\n(02) 主线程main执行t1.start()启动“线程t1”。<br>\n(03) 主线程main执行t1.wait(3000)，此时，主线程进入“阻塞状态”。需要“用于t1对象锁的线程通过notify() 或者 notifyAll()将其唤醒” 或者 “超时3000ms之后”，主线程main才进入到“就绪状态”，然后才可以运行。<br>\n(04) “线程t1”运行之后，进入了死循环，一直不断的运行。<br>\n(05) 超时3000ms之后，主线程main会进入到“就绪状态”，然后接着进入“运行状态”。<br></p>\n<h2 id=\"wait-notifyall-\">wait() 和 notifyAll()</h2>\n<pre><code class=\"language-java\">class MyThread extends Thread {\n\n    private String lockObject;\n\n    public MyThread(String lockObject) {\n        this.lockObject = lockObject;\n    }\n\n    @Override\n    public void run() {\n        synchronized (lockObject) {\n            try {\n                System.out.println(Thread.currentThread().getName()+&quot;线程等待&quot;);\n                lockObject.wait();\n                System.out.println(Thread.currentThread().getName()+&quot;线程恢复运行&quot;);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\npublic class WaitTest {\n    public static void main(String[] args) {\n        String lockObject = &quot;lockObject&quot;;\n        MyThread t1 = new MyThread(lockObject);\n        MyThread t2 = new MyThread(lockObject);\n        MyThread t3 = new MyThread(lockObject);\n        t1.start();\n        t2.start();\n        t3.start();\n\n        try {\n            Thread.sleep(3000);\n            synchronized (lockObject){\n        System.out.println(&quot;main notifyAll()&quot;);\n                lockObject.notifyAll();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n}</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">Thread-0线程等待\nThread-1线程等待\nThread-2线程等待\nmain notifyAll()\nThread-2线程恢复运行\nThread-1线程恢复运行\nThread-0线程恢复运行</code></pre>\n<p>结果说明：</p>\n<p>(01) 主线程中新建并且启动了3个线程&quot;t1&quot;, &quot;t2&quot;和&quot;t3&quot;。<br>\n(02) 主线程通过sleep(3000)休眠3秒。在主线程休眠3秒的过程中，我们假设&quot;t1&quot;, &quot;t2&quot;和&quot;t3&quot;这3个线程都运行了。以&quot;t1&quot;为例，当它运行的时候，它会执行obj.wait()等待其它线程通过notify()或额nofityAll()来唤醒它；相同的道理，&quot;t2&quot;和&quot;t3&quot;也会等待其它线程通过nofity()或nofityAll()来唤醒它们。\n(03) 主线程休眠3秒之后，接着运行。执行 lockObject.notifyAll() 唤醒lockObject上的等待线程，即唤醒&quot;t1&quot;, &quot;t2&quot;和&quot;t3&quot;这3个线程。 紧接着，主线程的synchronized(lockObject)运行完毕之后，主线程释放“lockObject锁”。这样，&quot;t1&quot;, &quot;t2&quot;和&quot;t3&quot;就可以获取“obj锁”而继续运行了！</p>\n<h2 id=\"-notify-wait-object-thread-\">为什么notify(), wait()等函数定义在Object中，而不是Thread中</h2>\n<p>Object中的wait(), notify()等函数，和synchronized一样，会对“对象的同步锁”进行操作。</p>\n<p>wait()会使“当前线程”等待，因为线程进入等待状态，所以线程应该释放它锁持有的“同步锁”，否则其它线程获取不到该“同步锁”而无法运行！</p>\n<p>而且，根据前面的介绍，我们知道：等待线程可以被notify()或notifyAll()唤醒。现在，请思考一个问题：notify()是依据什么唤醒等待线程的？或者说，wait()等待线程和notify()之间是通过什么关联起来的？答案是：依据“对象的同步锁”。</p>\n<p>负责唤醒等待线程的那个线程(我们称为“唤醒线程”)，它只有在获取“该对象的同步锁”(这里的同步锁必须和等待线程的同步锁是同一个)，并且调用notify()或notifyAll()方法之后，才能唤醒等待线程。<strong>虽然，等待线程被唤醒；但是，它不能立刻执行，因为唤醒线程还持有“该对象的同步锁”。必须等到唤醒线程释放了“对象的同步锁”之后，等待线程才能获取到“对象的同步锁”进而继续运行。</strong></p>\n<p>总之，notify(), wait()依赖于“同步锁”，而“同步锁”是对象锁持有，并且每个对象有且仅有一个！这就是为什么notify(), wait()等函数定义在Object类，而不是Thread类中的原因。</p>\n',27,6,2,NULL,'2019-07-25 15:33:25','2019-07-29 14:47:52',0,'9,14,32',1,0),(20,'Java多线程基础04——线程让步','yield()的作用是让步。它能让当前线程由“运行状态”进入到“就绪状态”，从而让其它具有相同优先级的等待线程获取执行权；但是，并不能保证在当前线程调用yield()之后，其它具有相同优先级的线程就一定能获得执行权；也有可能是当前线程又进入到“运行状态”继续运行！','Bobbi','## yield()介绍\nyield()的作用是让步。它能让当前线程由“运行状态”进入到“就绪状态”，从而让其它具有相同优先级的等待线程获取执行权；但是，并不能保证在当前线程调用yield()之后，其它具有相同优先级的线程就一定能获得执行权；也有可能是当前线程又进入到“运行状态”继续运行！\n\n## yield()示例\n```java\npublic class MyThread extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i < 10; i++) {\n            System.out.println(Thread.currentThread().getName() + \" \"+ i);\n            // i整除4时，调用yield\n            if (i % 4 == 0) {\n                System.out.println(Thread.currentThread().getName() + \" yield\");\n                Thread.yield();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread t1 = new MyThread();\n        MyThread t2 = new MyThread();\n        t1.start();\n        t2.start();\n\n    }\n}\n\n```\n结果如下：\n```shell\nThread-1 0\nThread-0 0\nThread-1 yield\nThread-0 yield\nThread-0 1\nThread-0 2\nThread-0 3\nThread-0 4\nThread-0 yield\nThread-1 1\nThread-0 5\nThread-1 2\nThread-0 6\nThread-1 3\nThread-0 7\nThread-1 4\nThread-0 8\nThread-1 yield\nThread-0 yield\nThread-1 5\nThread-0 9\nThread-1 6\nThread-1 7\nThread-1 8\nThread-1 yield\nThread-1 9\n\n```\n\n结果说明：\n可以看到，线程在满足i整除4时，有时成功“线程让步”有时却没有让步，这表明，yield()虽然可以让线程由“运行状态”进入到“就绪状态”；但是，它不一定会让其它线程获取CPU执行权(即，其它线程进入到“运行状态”)，即使这个“其它线程”与当前调用yield()的线程具有相同的优先级。\n\n## yield() 与 wait()的比较\n我们知道，wait()的作用是使线程从“运行状态”进入“等待（阻塞）队列”，同时会释放同步锁。而yield()的作用是让步，他也会让当前线程离开“运行状态”，它们的区别是：\n\n**(1)wait()的作用是使线程从“运行状态”进入“等待（阻塞）队列”,而yield的作用是让线程从“运行状态”到“就绪状态”**\n\n**(2)wait()会释放它所持有的同步锁，yield()不会释放同步锁**\n\n下面演示yield不会释放同步锁\n```java\npublic class MyThread extends Thread {\n    private String lock;\n\n    public MyThread( String lock) {\n        this.lock = lock;\n    }\n\n    @Override\n    public void run() {\n        synchronized (lock) {\n            for (int i = 0; i < 10; i++) {\n                System.out.println(Thread.currentThread().getName() + \" \"+ i);\n                // i整除4时，调用yield\n                if (i % 4 == 0) {\n                    System.out.println(Thread.currentThread().getName() + \" yield\");\n                    Thread.yield();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String lock = \"lock\";\n        MyThread t1 = new MyThread(lock);\n        MyThread t2 = new MyThread(lock);\n        t1.start();\n        t2.start();\n\n    }\n}\n```\n运行结果：\n```shell\nThread-0 0\nThread-0 yield\nThread-0 1\nThread-0 2\nThread-0 3\nThread-0 4\nThread-0 yield\nThread-0 5\nThread-0 6\nThread-0 7\nThread-0 8\nThread-0 yield\nThread-0 9\nThread-1 0\nThread-1 yield\nThread-1 1\nThread-1 2\nThread-1 3\nThread-1 4\nThread-1 yield\nThread-1 5\nThread-1 6\nThread-1 7\nThread-1 8\nThread-1 yield\nThread-1 9\n```\n结果说明：\n线程t1和t2共同持有同一把对象锁，从结果中可以看到，在t1运行过程中，虽然调用了yield方法，但是，t2并不会获取cpu的执行权的，因为t1没有释放所持有的对象锁。','<h2 id=\"yield-\">yield()介绍</h2>\n<p>yield()的作用是让步。它能让当前线程由“运行状态”进入到“就绪状态”，从而让其它具有相同优先级的等待线程获取执行权；但是，并不能保证在当前线程调用yield()之后，其它具有相同优先级的线程就一定能获得执行权；也有可能是当前线程又进入到“运行状态”继续运行！</p>\n<h2 id=\"yield-\">yield()示例</h2>\n<pre><code class=\"language-java\">public class MyThread extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i &lt; 10; i++) {\n            System.out.println(Thread.currentThread().getName() + &quot; &quot;+ i);\n            // i整除4时，调用yield\n            if (i % 4 == 0) {\n                System.out.println(Thread.currentThread().getName() + &quot; yield&quot;);\n                Thread.yield();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread t1 = new MyThread();\n        MyThread t2 = new MyThread();\n        t1.start();\n        t2.start();\n\n    }\n}\n</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">Thread-1 0\nThread-0 0\nThread-1 yield\nThread-0 yield\nThread-0 1\nThread-0 2\nThread-0 3\nThread-0 4\nThread-0 yield\nThread-1 1\nThread-0 5\nThread-1 2\nThread-0 6\nThread-1 3\nThread-0 7\nThread-1 4\nThread-0 8\nThread-1 yield\nThread-0 yield\nThread-1 5\nThread-0 9\nThread-1 6\nThread-1 7\nThread-1 8\nThread-1 yield\nThread-1 9\n</code></pre>\n<p>结果说明：\n可以看到，线程在满足i整除4时，有时成功“线程让步”有时却没有让步，这表明，yield()虽然可以让线程由“运行状态”进入到“就绪状态”；但是，它不一定会让其它线程获取CPU执行权(即，其它线程进入到“运行状态”)，即使这个“其它线程”与当前调用yield()的线程具有相同的优先级。</p>\n<h2 id=\"yield-wait-\">yield() 与 wait()的比较</h2>\n<p>我们知道，wait()的作用是使线程从“运行状态”进入“等待（阻塞）队列”，同时会释放同步锁。而yield()的作用是让步，他也会让当前线程离开“运行状态”，它们的区别是：</p>\n<p><strong>(1)wait()的作用是使线程从“运行状态”进入“等待（阻塞）队列”,而yield的作用是让线程从“运行状态”到“就绪状态”</strong></p>\n<p><strong>(2)wait()会释放它所持有的同步锁，yield()不会释放同步锁</strong></p>\n<p>下面演示yield不会释放同步锁</p>\n<pre><code class=\"language-java\">public class MyThread extends Thread {\n    private String lock;\n\n    public MyThread( String lock) {\n        this.lock = lock;\n    }\n\n    @Override\n    public void run() {\n        synchronized (lock) {\n            for (int i = 0; i &lt; 10; i++) {\n                System.out.println(Thread.currentThread().getName() + &quot; &quot;+ i);\n                // i整除4时，调用yield\n                if (i % 4 == 0) {\n                    System.out.println(Thread.currentThread().getName() + &quot; yield&quot;);\n                    Thread.yield();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String lock = &quot;lock&quot;;\n        MyThread t1 = new MyThread(lock);\n        MyThread t2 = new MyThread(lock);\n        t1.start();\n        t2.start();\n\n    }\n}</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">Thread-0 0\nThread-0 yield\nThread-0 1\nThread-0 2\nThread-0 3\nThread-0 4\nThread-0 yield\nThread-0 5\nThread-0 6\nThread-0 7\nThread-0 8\nThread-0 yield\nThread-0 9\nThread-1 0\nThread-1 yield\nThread-1 1\nThread-1 2\nThread-1 3\nThread-1 4\nThread-1 yield\nThread-1 5\nThread-1 6\nThread-1 7\nThread-1 8\nThread-1 yield\nThread-1 9</code></pre>\n<p>结果说明：\n线程t1和t2共同持有同一把对象锁，从结果中可以看到，在t1运行过程中，虽然调用了yield方法，但是，t2并不会获取cpu的执行权的，因为t1没有释放所持有的对象锁。</p>\n',16,1,2,NULL,'2019-07-26 04:36:47','2019-07-27 05:36:09',0,'9,14,32',1,0),(21,'Java多线程基础05——线程休眠','sleep() 的作用是让当前线程休眠，即当前线程会从“运行状态”进入到“休眠(阻塞)状态”。sleep()会指定休眠时间，线程休眠的时间会大于/等于该休眠时间；在线程重新被唤醒时，它会由“阻塞状态”变成“就绪状态”，从而等待cpu的调度执行。','Bobbi','sleep()的作用是让当前线程休眠，即当前线程会从“运行状态”进入到“阻塞（休眠）状态”。sleep()会指定休眠时间，线程休眠的时间会大于/等于该休眠时间；在线程重新被唤醒时，它会由“阻塞状态”变成“就绪状态”，从而等待cpu的调度运行\n\n## sleep 示例\n```java\npublic class MyThread extends Thread {\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 10; i++) {\n            System.out.println(Thread.currentThread().getName() + \" \" + i);\n            // i整除4时，调用yield\n            if (i % 4 == 0) {\n                System.out.println(Thread.currentThread().getName() + \" sleep 1000ms\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread t1 = new MyThread();\n        t1.start();\n\n    }\n}\n\n```\n运行结果：\n\n```shell\nThread-0 0\nThread-0 sleep 1000ms\nThread-0 1\nThread-0 2\nThread-0 3\nThread-0 4\nThread-0 sleep 1000ms\nThread-0 5\nThread-0 6\nThread-0 7\nThread-0 8\nThread-0 sleep 1000ms\nThread-0 9\n```\n结果说明：\n程序比较简单，在主线程main中启动线程t1。t1启动之后，当t1中的计算i能被4整除时，t1会通过Thread.sleep(1000)休眠1000毫秒。\n\n## sleep()和wait的比较\n(1) wait()的作用是让线程从“运行状态”进入“阻塞（等待）状态”，sleep()也是让线程由“运行状态”进入“阻塞(休眠)状态”\n\n**(2)wait()会释放对象的同步锁，而sleep不会释放锁**\n\n下面是sleep()不会释放对象锁的示例\n```java\npublic class MyThread extends Thread {\n    private String lock;\n\n    public MyThread(String lock) {\n        this.lock = lock;\n    }\n\n    @Override\n    public void run() {\n        synchronized (lock) {\n            for (int i = 0; i < 10; i++) {\n                System.out.println(Thread.currentThread().getName() + \" \"+ i);\n                // i整除4时，调用yield\n                if (i % 4 == 0) {\n                    System.out.println(Thread.currentThread().getName() + \" sleep 1000ms\");\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String lock = \"lock\";\n        MyThread t1 = new MyThread(lock);\n        MyThread t2 = new MyThread(lock);\n        t1.start();\n        t2.start();\n\n    }\n}\n\n```\n运行结果：\n```shell\nThread-0 0\nThread-0 sleep 1000ms\nThread-0 1\nThread-0 2\nThread-0 3\nThread-0 4\nThread-0 sleep 1000ms\nThread-0 5\nThread-0 6\nThread-0 7\nThread-0 8\nThread-0 sleep 1000ms\nThread-0 9\nThread-1 0\nThread-1 sleep 1000ms\nThread-1 1\nThread-1 2\nThread-1 3\nThread-1 4\nThread-1 sleep 1000ms\nThread-1 5\nThread-1 6\nThread-1 7\nThread-1 8\nThread-1 sleep 1000ms\nThread-1 9\n```\n结果说明：\n主线程main启动了两个线程t1和t2。t1和t2在运行的时候会引用同一个对象锁。在t1运行的过程中，虽然调用了Thread.sleep(1000)但是，t2并不会获取cpu的执行权。因为，t1没有释放这个对象锁','<p>sleep()的作用是让当前线程休眠，即当前线程会从“运行状态”进入到“阻塞（休眠）状态”。sleep()会指定休眠时间，线程休眠的时间会大于/等于该休眠时间；在线程重新被唤醒时，它会由“阻塞状态”变成“就绪状态”，从而等待cpu的调度运行</p>\n<h2 id=\"sleep-\">sleep 示例</h2>\n<pre><code class=\"language-java\">public class MyThread extends Thread {\n\n    @Override\n    public void run() {\n        for (int i = 0; i &lt; 10; i++) {\n            System.out.println(Thread.currentThread().getName() + &quot; &quot; + i);\n            // i整除4时，调用yield\n            if (i % 4 == 0) {\n                System.out.println(Thread.currentThread().getName() + &quot; sleep 1000ms&quot;);\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread t1 = new MyThread();\n        t1.start();\n\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">Thread-0 0\nThread-0 sleep 1000ms\nThread-0 1\nThread-0 2\nThread-0 3\nThread-0 4\nThread-0 sleep 1000ms\nThread-0 5\nThread-0 6\nThread-0 7\nThread-0 8\nThread-0 sleep 1000ms\nThread-0 9</code></pre>\n<p>结果说明：\n程序比较简单，在主线程main中启动线程t1。t1启动之后，当t1中的计算i能被4整除时，t1会通过Thread.sleep(1000)休眠1000毫秒。</p>\n<h2 id=\"sleep-wait-\">sleep()和wait的比较</h2>\n<p>(1) wait()的作用是让线程从“运行状态”进入“阻塞（等待）状态”，sleep()也是让线程由“运行状态”进入“阻塞(休眠)状态”</p>\n<p><strong>(2)wait()会释放对象的同步锁，而sleep不会释放锁</strong></p>\n<p>下面是sleep()不会释放对象锁的示例</p>\n<pre><code class=\"language-java\">public class MyThread extends Thread {\n    private String lock;\n\n    public MyThread(String lock) {\n        this.lock = lock;\n    }\n\n    @Override\n    public void run() {\n        synchronized (lock) {\n            for (int i = 0; i &lt; 10; i++) {\n                System.out.println(Thread.currentThread().getName() + &quot; &quot;+ i);\n                // i整除4时，调用yield\n                if (i % 4 == 0) {\n                    System.out.println(Thread.currentThread().getName() + &quot; sleep 1000ms&quot;);\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String lock = &quot;lock&quot;;\n        MyThread t1 = new MyThread(lock);\n        MyThread t2 = new MyThread(lock);\n        t1.start();\n        t2.start();\n\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">Thread-0 0\nThread-0 sleep 1000ms\nThread-0 1\nThread-0 2\nThread-0 3\nThread-0 4\nThread-0 sleep 1000ms\nThread-0 5\nThread-0 6\nThread-0 7\nThread-0 8\nThread-0 sleep 1000ms\nThread-0 9\nThread-1 0\nThread-1 sleep 1000ms\nThread-1 1\nThread-1 2\nThread-1 3\nThread-1 4\nThread-1 sleep 1000ms\nThread-1 5\nThread-1 6\nThread-1 7\nThread-1 8\nThread-1 sleep 1000ms\nThread-1 9</code></pre>\n<p>结果说明：\n主线程main启动了两个线程t1和t2。t1和t2在运行的时候会引用同一个对象锁。在t1运行的过程中，虽然调用了Thread.sleep(1000)但是，t2并不会获取cpu的执行权。因为，t1没有释放这个对象锁</p>\n',17,1,2,NULL,'2019-07-27 06:40:12','2019-07-27 06:40:12',0,'9,14,32',1,0),(22,'Java多线程基础06——join()','join() 的作用：让“主线程”等待“子线程”结束之后才能继续运行。','Bobbi','join() 的作用：让“当前线程”等待“另一个线程”结束之后才能继续运行。\n## join()示例\n```java\nclass MainThread extends Thread {\n    public MainThread(String name) {\n        super(name);\n    }\n\n    @Override\n    public void run() {\n        SubThread subThread = new SubThread(\"subThread\");\n        subThread.start();\n        try {\n            subThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        for (int i = 0; i < 5; i++) {\n            System.out.println(Thread.currentThread().getName()+\" is running\");\n        }\n    }\n}\nclass SubThread extends Thread {\n    public SubThread(String name) {\n        super(name);\n    }\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(Thread.currentThread().getName()+\" is running\");\n        }\n    }\n}\n\npublic class Mythread {\n    public static void main(String[] args) {\n        MainThread mainThread = new MainThread(\"mainThread\");\n        mainThread.start();\n    }\n}\n```\n运行结果：\n```shell\nsubThread is running\nsubThread is running\nsubThread is running\nsubThread is running\nsubThread is running\nmainThread is running\nmainThread is running\nmainThread is running\nmainThread is running\nmainThread is running\n```\n结果说明：\n上面有两个类，SubThread是在MainThread中创建并启动的，所以MainThrea是“主线程”，SubThread是“子线程”\n\n在MainThread中，调用了subThread.join()，所以，主线程MainThread会一直等待直到子线程subThread运行完毕,MainThread主线程才能继续运行\n\n## join()源码分析(基于JDK8)\n```java\n public final synchronized void join(long millis)\n    throws InterruptedException {\n        long base = System.currentTimeMillis();\n        long now = 0;\n\n        if (millis < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (millis == 0) {\n            while (isAlive()) {\n                wait(0);\n            }\n        } else {\n            while (isAlive()) {\n                long delay = millis - now;\n                if (delay <= 0) {\n                    break;\n                }\n                wait(delay);\n                now = System.currentTimeMillis() - base;\n            }\n        }\n    }\n```\n说明：\n从代码中，可以发现，当millis==0时；只要子线程是活的，主线程就不停的等待。join的底层原理是其实是无限的等待。','<p>join() 的作用：让“当前线程”等待“另一个线程”结束之后才能继续运行。</p>\n<h2 id=\"join-\">join()示例</h2>\n<pre><code class=\"language-java\">class MainThread extends Thread {\n    public MainThread(String name) {\n        super(name);\n    }\n\n    @Override\n    public void run() {\n        SubThread subThread = new SubThread(&quot;subThread&quot;);\n        subThread.start();\n        try {\n            subThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        for (int i = 0; i &lt; 5; i++) {\n            System.out.println(Thread.currentThread().getName()+&quot; is running&quot;);\n        }\n    }\n}\nclass SubThread extends Thread {\n    public SubThread(String name) {\n        super(name);\n    }\n\n    @Override\n    public void run() {\n        for (int i = 0; i &lt; 5; i++) {\n            System.out.println(Thread.currentThread().getName()+&quot; is running&quot;);\n        }\n    }\n}\n\npublic class Mythread {\n    public static void main(String[] args) {\n        MainThread mainThread = new MainThread(&quot;mainThread&quot;);\n        mainThread.start();\n    }\n}</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">subThread is running\nsubThread is running\nsubThread is running\nsubThread is running\nsubThread is running\nmainThread is running\nmainThread is running\nmainThread is running\nmainThread is running\nmainThread is running</code></pre>\n<p>结果说明：\n上面有两个类，SubThread是在MainThread中创建并启动的，所以MainThrea是“主线程”，SubThread是“子线程”</p>\n<p>在MainThread中，调用了subThread.join()，所以，主线程MainThread会一直等待直到子线程subThread运行完毕,MainThread主线程才能继续运行</p>\n<h2 id=\"join-jdk8-\">join()源码分析(基于JDK8)</h2>\n<pre><code class=\"language-java\"> public final synchronized void join(long millis)\n    throws InterruptedException {\n        long base = System.currentTimeMillis();\n        long now = 0;\n\n        if (millis &lt; 0) {\n            throw new IllegalArgumentException(&quot;timeout value is negative&quot;);\n        }\n\n        if (millis == 0) {\n            while (isAlive()) {\n                wait(0);\n            }\n        } else {\n            while (isAlive()) {\n                long delay = millis - now;\n                if (delay &lt;= 0) {\n                    break;\n                }\n                wait(delay);\n                now = System.currentTimeMillis() - base;\n            }\n        }\n    }</code></pre>\n<p>说明：\n从代码中，可以发现，当millis==0时；只要子线程是活的，主线程就不停的等待。join的底层原理是其实是无限的等待。</p>\n',22,1,2,NULL,'2019-07-27 09:00:09','2019-07-27 09:00:33',0,'9,14,32',1,0),(23,'Java多线程基础07——线程中断','在介绍终止线程的方式之前，有必要先对interrupt()进行了解','Bobbi','## interrupt()介绍\n在介绍终止线程的方式之前，有必要先对interrupt()进行了解。关于interrupt()，jdk的文档描述如下：\n- interrupt()的作用是中断本线程。本线程中断自己是被允许的；其它线程调用本线程的interrupt()方法时，会通过checkAccess()检查权限。这有可能抛出SecurityException异常。\n\n- 如果本线程是处于阻塞状态：调用线程的wait(), wait(long)或wait(long, int)会让它进入等待(阻塞)状态，或者调用线程的join(), join(long), join(long, int), sleep(long), sleep(long, int)也会让它进入阻塞状态。若线程在阻塞状态时，调用了它的interrupt()方法，那么它的“中断状态”会被清除并且会收到一个InterruptedException异常。例如，线程通过wait()进入阻塞状态，此时通过interrupt()中断该线程；调用interrupt()会立即将线程的中断标记设为“true”，但是由于线程处于阻塞状态，所以该“中断标记”会立即被清除为“false”，同时，会产生一个InterruptedException的异常。\n\n- 如果线程被阻塞在一个Selector选择器中，那么通过interrupt()中断它时；线程的中断标记会被设置为true，并且它会立即从选择操作中返回。\n\n- 如果不属于前面所说的情况，那么通过interrupt()中断线程时，它的中断标记会被设置为“true”。\n中断一个“已终止的线程”不会产生任何操作。\n\n通过上面的分析，我们可以总结，**调用线程类的interrupt()方法，其本质只是设置该线程的中断标志，将中断标志设置为true，并根据线程状态决定是否抛出异常。** 因此，通过interrupt()方法真正实现线程的中断原理是：开发人员根据中断标志的具体值，来决定如何退出线程。\n\n## 终止线程的方式\nThread中的stop()和suspend()方法，由于固有的不安全性，已经建议不再使用！\n\n### 终止处于“阻塞状态”的线程\n当线程由于被调用了sleep().wait(),join()等方法而进入阻塞状态；若此时调用线程的interrupt()将线程的中断标记设为true。由于处于阻塞状态，**中断标记会被清除**，同时产生一个InterruptedException异常。将InterrupedException放在适当的位置就能终止线程，形式如下：\n```java\n@Override\npublic void run() {\n    try {\n        while (true) {\n            // 执行任务...\n        }\n    } catch (InterruptedException ie) {  \n        // 由于产生InterruptedException异常，退出while(true)循环，线程终止！\n    }\n}\n```\n说明：在while(true)中不断的执行任务，当线程处于阻塞状态时，调用线程的interrupt()产生InterruptedException中断。中断的捕获在while(true)之外，这样就退出了while(true)循环！\n\n注意：对InterruptedException的捕获务一般放在while(true)循环体的外面，这样，在产生异常时就退出了while(true)循环。否则，InterruptedException在while(true)循环体之内，就需要额外的添加退出处理。形式如下：\n``` java\n@Override\npublic void run() {\n    while (true) {\n        try {\n            // 执行任务...\n        } catch (InterruptedException ie) {  \n            // InterruptedException在while(true)循环体内。\n            // 当线程产生了InterruptedException异常时，while(true)仍能继续运行！需要手动退出\n            break;\n        }\n    }\n}\n```\n说明：上面的InterruptedException异常的捕获在whle(true)之内。当产生InterruptedException异常时，被catch处理之外，仍然在while(true)循环体内；要退出while(true)循环体，需要额外的执行退出while(true)的操作。\n\n### 终止处于“运行状态”的线程\n通常，我们通过“标记”方式终止处于“运行状态”的线程。其中，包括“中断标记”和“额外添加标记”。\n\n#### (1) 通过“中断”标记终止线程\n```java\n@Override\npublic void run() {\n    while (!isInterrupted()) {\n        // 执行任务...\n    }\n}\n```\n说明：isInterrupted()是判断线程的中断标记是不是为true。当线程处于运行状态，并且我们需要终止它时；可以调用线程的interrupt()方法，使用线程的中断标记为true，即isInterrupted()会返回true。此时，就会退出while循环。\n\n注意：interrupt()并不会终止处于“运行状态”的线程！它会将线程的中断标记设为true。\n\n#### (2) 通过“额外添加标记”。\n```java\nprivate volatile boolean flag= true;\nprotected void stopTask() {\n    flag = false;\n}\n\n@Override\npublic void run() {\n    while (flag) {\n        // 执行任务...\n    }\n}\n```\n说明：线程中有一个flag标记，它的默认值是true；并且我们提供stopTask()来设置flag标记。当我们需要终止该线程时，调用该线程的stopTask()方法就可以让线程退出while循环。\n\n注意：将flag定义为volatile类型，是为了保证flag的可见性。即其它线程通过stopTask()修改了flag之后，本线程能看到修改后的flag的值。\n\n### 处于“阻塞状态”和“运行状态”的终止方式\n```java\n@Override\npublic void run() {\n    try {\n        // 1. isInterrupted()保证，只要中断标记为true就终止线程。\n        while (!isInterrupted()) {\n            // 执行任务...\n        }\n    } catch (InterruptedException ie) {  \n        // 2. InterruptedException异常保证，当InterruptedException异常产生时，线程被终止。\n    }\n}\n```\n\n## 终止线程示例\n```java\npublic class MyThread extends Thread {\n    @Override\n    public void run() {\n        try {\n            int i = 0;\n            while (!isInterrupted()) {\n                Thread.sleep(100);\n                i++;\n                System.out.println(Thread.currentThread().getName() + \"(\" + this.getState() + \") loop \" + i);\n            }\n        } catch (InterruptedException e) {\n            System.out.println(Thread.currentThread().getName() + \"(\" + this.getState() + \") catch InterruptedException\");\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            MyThread t1 = new MyThread();\n            System.out.println(t1.getName() + \" (\" + t1.getState() + \") is new.\");\n\n            t1.start();\n            System.out.println(t1.getName() + \" (\" + t1.getState() + \") is started.\");\n\n            // 主线程休眠300ms，然后主线程给t1发“中断”指令。\n            Thread.sleep(300);\n            t1.interrupt();\n            System.out.println(t1.getName() + \" (\" + t1.getState() + \") is interrupted.\");\n\n            // 主线程休眠300ms，然后查看t1的状态\n            Thread.sleep(300);\n            System.out.println(t1.getName() + \" (\" + t1.getState() + \") is interrupted now.\");\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n运行结果：\n``` shell\nThread-0 (NEW) is new.\nThread-0 (RUNNABLE) is started.\nThread-0(RUNNABLE) loop 1\nThread-0(RUNNABLE) loop 2\nThread-0 (TIMED_WAITING) is interrupted.\nThread-0(RUNNABLE) catch InterruptedException\nThread-0 (TERMINATED) is interrupted now.\n```\n结果说明：<br>\n(1)主线程main创建一个线程t1,并且启动t1<br>\n(2)t1启动之后，会不断检查它的中断标记，如果中断标记为false，则休眠100ms<br>\n(3) t1休眠之后，会切换到主线程，执行t1.interrupt()中断线程t1。t1收到中断指令后，会将t1的中断标记设置为false(**阻塞状态标记清除为false并抛出异常**),而且会抛出InterruptedException异常。在t1的run()方法中，是在循环体之外捕获的异常；因此循环被终止。\n\n\n\n我们将程序稍稍改一下，将run()方法中捕获的InterruptedException异常代码快移到while()循环体内\n\n```java\npublic class MyThread extends Thread {\n    @Override\n    public void run() {\n\n        int i = 0;\n        while (!isInterrupted()) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                System.out.println(Thread.currentThread().getName() + \"(\" + this.getState() + \") catch InterruptedException\");\n            }\n            i++;\n            System.out.println(Thread.currentThread().getName() + \"(\" + this.getState() + \") loop \" + i);\n\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            MyThread t1 = new MyThread();\n            System.out.println(t1.getName() + \" (\" + t1.getState() + \") is new.\");\n\n            t1.start();\n            System.out.println(t1.getName() + \" (\" + t1.getState() + \") is started.\");\n\n            // 主线程休眠300ms，然后主线程给t1发“中断”指令。\n            Thread.sleep(300);\n            t1.interrupt();\n            System.out.println(t1.getName() + \" (\" + t1.getState() + \") is interrupted.\");\n\n            // 主线程休眠300ms，然后查看t1的状态\n            Thread.sleep(300);\n            System.out.println(t1.getName() + \" (\" + t1.getState() + \") is interrupted now.\");\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n结果如下：\n```shell\nThread-0 (NEW) is new.\nThread-0 (RUNNABLE) is started.\nThread-0(RUNNABLE) loop 1\nThread-0(RUNNABLE) loop 2\nThread-0 (TIMED_WAITING) is interrupted.\nThread-0(RUNNABLE) catch InterruptedException\nThread-0(RUNNABLE) loop 3\nThread-0(RUNNABLE) loop 4\nThread-0(RUNNABLE) loop 5\nThread-0 (TIMED_WAITING) is interrupted now.\nThread-0(RUNNABLE) loop 6\nThread-0(RUNNABLE) loop 7\nThread-0(RUNNABLE) loop 8\nThread-0(RUNNABLE) loop 9\nThread-0(RUNNABLE) loop 10\nThread-0(RUNNABLE) loop 11\nThread-0(RUNNABLE) loop 12\nThread-0(RUNNABLE) loop 13\nThread-0(RUNNABLE) loop 14\n...\n```\n\n结果说明：程序进入了死循环！为什么会这样呢？这是因为t1在“等待(阻塞)状态”时，被interrupt()中断；此时，会清除中断标记[即isInterrupted()会返回false]，而且会抛出InterruptedException异常[该异常在while循环体内被捕获]。因此，t1理所当然的会进入死循环了。<br>\n\n\n解决该问题，需要我们在捕获异常时，额外的进行退出while循环的处理。例如，在MyThread的catch(InterruptedException)中添加break 或 return就能解决该问题。','<h2 id=\"interrupt-\">interrupt()介绍</h2>\n<p>在介绍终止线程的方式之前，有必要先对interrupt()进行了解。关于interrupt()，jdk的文档描述如下：</p>\n<ul>\n<li><p>interrupt()的作用是中断本线程。本线程中断自己是被允许的；其它线程调用本线程的interrupt()方法时，会通过checkAccess()检查权限。这有可能抛出SecurityException异常。</p>\n</li>\n<li><p>如果本线程是处于阻塞状态：调用线程的wait(), wait(long)或wait(long, int)会让它进入等待(阻塞)状态，或者调用线程的join(), join(long), join(long, int), sleep(long), sleep(long, int)也会让它进入阻塞状态。若线程在阻塞状态时，调用了它的interrupt()方法，那么它的“中断状态”会被清除并且会收到一个InterruptedException异常。例如，线程通过wait()进入阻塞状态，此时通过interrupt()中断该线程；调用interrupt()会立即将线程的中断标记设为“true”，但是由于线程处于阻塞状态，所以该“中断标记”会立即被清除为“false”，同时，会产生一个InterruptedException的异常。</p>\n</li>\n<li><p>如果线程被阻塞在一个Selector选择器中，那么通过interrupt()中断它时；线程的中断标记会被设置为true，并且它会立即从选择操作中返回。</p>\n</li>\n<li><p>如果不属于前面所说的情况，那么通过interrupt()中断线程时，它的中断标记会被设置为“true”。\n中断一个“已终止的线程”不会产生任何操作。</p>\n</li>\n</ul>\n<p>通过上面的分析，我们可以总结，<strong>调用线程类的interrupt()方法，其本质只是设置该线程的中断标志，将中断标志设置为true，并根据线程状态决定是否抛出异常。</strong> 因此，通过interrupt()方法真正实现线程的中断原理是：开发人员根据中断标志的具体值，来决定如何退出线程。</p>\n<h2 id=\"-\">终止线程的方式</h2>\n<p>Thread中的stop()和suspend()方法，由于固有的不安全性，已经建议不再使用！</p>\n<h3 id=\"-\">终止处于“阻塞状态”的线程</h3>\n<p>当线程由于被调用了sleep().wait(),join()等方法而进入阻塞状态；若此时调用线程的interrupt()将线程的中断标记设为true。由于处于阻塞状态，<strong>中断标记会被清除</strong>，同时产生一个InterruptedException异常。将InterrupedException放在适当的位置就能终止线程，形式如下：</p>\n<pre><code class=\"language-java\">@Override\npublic void run() {\n    try {\n        while (true) {\n            // 执行任务...\n        }\n    } catch (InterruptedException ie) {  \n        // 由于产生InterruptedException异常，退出while(true)循环，线程终止！\n    }\n}</code></pre>\n<p>说明：在while(true)中不断的执行任务，当线程处于阻塞状态时，调用线程的interrupt()产生InterruptedException中断。中断的捕获在while(true)之外，这样就退出了while(true)循环！</p>\n<p>注意：对InterruptedException的捕获务一般放在while(true)循环体的外面，这样，在产生异常时就退出了while(true)循环。否则，InterruptedException在while(true)循环体之内，就需要额外的添加退出处理。形式如下：</p>\n<pre><code class=\"language-java\">@Override\npublic void run() {\n    while (true) {\n        try {\n            // 执行任务...\n        } catch (InterruptedException ie) {  \n            // InterruptedException在while(true)循环体内。\n            // 当线程产生了InterruptedException异常时，while(true)仍能继续运行！需要手动退出\n            break;\n        }\n    }\n}</code></pre>\n<p>说明：上面的InterruptedException异常的捕获在whle(true)之内。当产生InterruptedException异常时，被catch处理之外，仍然在while(true)循环体内；要退出while(true)循环体，需要额外的执行退出while(true)的操作。</p>\n<h3 id=\"-\">终止处于“运行状态”的线程</h3>\n<p>通常，我们通过“标记”方式终止处于“运行状态”的线程。其中，包括“中断标记”和“额外添加标记”。</p>\n<h4 id=\"-1-\">(1) 通过“中断”标记终止线程</h4>\n<pre><code class=\"language-java\">@Override\npublic void run() {\n    while (!isInterrupted()) {\n        // 执行任务...\n    }\n}</code></pre>\n<p>说明：isInterrupted()是判断线程的中断标记是不是为true。当线程处于运行状态，并且我们需要终止它时；可以调用线程的interrupt()方法，使用线程的中断标记为true，即isInterrupted()会返回true。此时，就会退出while循环。</p>\n<p>注意：interrupt()并不会终止处于“运行状态”的线程！它会将线程的中断标记设为true。</p>\n<h4 id=\"-2-\">(2) 通过“额外添加标记”。</h4>\n<pre><code class=\"language-java\">private volatile boolean flag= true;\nprotected void stopTask() {\n    flag = false;\n}\n\n@Override\npublic void run() {\n    while (flag) {\n        // 执行任务...\n    }\n}</code></pre>\n<p>说明：线程中有一个flag标记，它的默认值是true；并且我们提供stopTask()来设置flag标记。当我们需要终止该线程时，调用该线程的stopTask()方法就可以让线程退出while循环。</p>\n<p>注意：将flag定义为volatile类型，是为了保证flag的可见性。即其它线程通过stopTask()修改了flag之后，本线程能看到修改后的flag的值。</p>\n<h3 id=\"-\">处于“阻塞状态”和“运行状态”的终止方式</h3>\n<pre><code class=\"language-java\">@Override\npublic void run() {\n    try {\n        // 1. isInterrupted()保证，只要中断标记为true就终止线程。\n        while (!isInterrupted()) {\n            // 执行任务...\n        }\n    } catch (InterruptedException ie) {  \n        // 2. InterruptedException异常保证，当InterruptedException异常产生时，线程被终止。\n    }\n}</code></pre>\n<h2 id=\"-\">终止线程示例</h2>\n<pre><code class=\"language-java\">public class MyThread extends Thread {\n    @Override\n    public void run() {\n        try {\n            int i = 0;\n            while (!isInterrupted()) {\n                Thread.sleep(100);\n                i++;\n                System.out.println(Thread.currentThread().getName() + &quot;(&quot; + this.getState() + &quot;) loop &quot; + i);\n            }\n        } catch (InterruptedException e) {\n            System.out.println(Thread.currentThread().getName() + &quot;(&quot; + this.getState() + &quot;) catch InterruptedException&quot;);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            MyThread t1 = new MyThread();\n            System.out.println(t1.getName() + &quot; (&quot; + t1.getState() + &quot;) is new.&quot;);\n\n            t1.start();\n            System.out.println(t1.getName() + &quot; (&quot; + t1.getState() + &quot;) is started.&quot;);\n\n            // 主线程休眠300ms，然后主线程给t1发“中断”指令。\n            Thread.sleep(300);\n            t1.interrupt();\n            System.out.println(t1.getName() + &quot; (&quot; + t1.getState() + &quot;) is interrupted.&quot;);\n\n            // 主线程休眠300ms，然后查看t1的状态\n            Thread.sleep(300);\n            System.out.println(t1.getName() + &quot; (&quot; + t1.getState() + &quot;) is interrupted now.&quot;);\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">Thread-0 (NEW) is new.\nThread-0 (RUNNABLE) is started.\nThread-0(RUNNABLE) loop 1\nThread-0(RUNNABLE) loop 2\nThread-0 (TIMED_WAITING) is interrupted.\nThread-0(RUNNABLE) catch InterruptedException\nThread-0 (TERMINATED) is interrupted now.</code></pre>\n<p>结果说明：<br>\n(1)主线程main创建一个线程t1,并且启动t1<br>\n(2)t1启动之后，会不断检查它的中断标记，如果中断标记为false，则休眠100ms<br>\n(3) t1休眠之后，会切换到主线程，执行t1.interrupt()中断线程t1。t1收到中断指令后，会将t1的中断标记设置为false(<strong>阻塞状态标记清除为false并抛出异常</strong>),而且会抛出InterruptedException异常。在t1的run()方法中，是在循环体之外捕获的异常；因此循环被终止。</p>\n<p>我们将程序稍稍改一下，将run()方法中捕获的InterruptedException异常代码快移到while()循环体内</p>\n<pre><code class=\"language-java\">public class MyThread extends Thread {\n    @Override\n    public void run() {\n\n        int i = 0;\n        while (!isInterrupted()) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                System.out.println(Thread.currentThread().getName() + &quot;(&quot; + this.getState() + &quot;) catch InterruptedException&quot;);\n            }\n            i++;\n            System.out.println(Thread.currentThread().getName() + &quot;(&quot; + this.getState() + &quot;) loop &quot; + i);\n\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            MyThread t1 = new MyThread();\n            System.out.println(t1.getName() + &quot; (&quot; + t1.getState() + &quot;) is new.&quot;);\n\n            t1.start();\n            System.out.println(t1.getName() + &quot; (&quot; + t1.getState() + &quot;) is started.&quot;);\n\n            // 主线程休眠300ms，然后主线程给t1发“中断”指令。\n            Thread.sleep(300);\n            t1.interrupt();\n            System.out.println(t1.getName() + &quot; (&quot; + t1.getState() + &quot;) is interrupted.&quot;);\n\n            // 主线程休眠300ms，然后查看t1的状态\n            Thread.sleep(300);\n            System.out.println(t1.getName() + &quot; (&quot; + t1.getState() + &quot;) is interrupted now.&quot;);\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">Thread-0 (NEW) is new.\nThread-0 (RUNNABLE) is started.\nThread-0(RUNNABLE) loop 1\nThread-0(RUNNABLE) loop 2\nThread-0 (TIMED_WAITING) is interrupted.\nThread-0(RUNNABLE) catch InterruptedException\nThread-0(RUNNABLE) loop 3\nThread-0(RUNNABLE) loop 4\nThread-0(RUNNABLE) loop 5\nThread-0 (TIMED_WAITING) is interrupted now.\nThread-0(RUNNABLE) loop 6\nThread-0(RUNNABLE) loop 7\nThread-0(RUNNABLE) loop 8\nThread-0(RUNNABLE) loop 9\nThread-0(RUNNABLE) loop 10\nThread-0(RUNNABLE) loop 11\nThread-0(RUNNABLE) loop 12\nThread-0(RUNNABLE) loop 13\nThread-0(RUNNABLE) loop 14\n...</code></pre>\n<p>结果说明：程序进入了死循环！为什么会这样呢？这是因为t1在“等待(阻塞)状态”时，被interrupt()中断；此时，会清除中断标记[即isInterrupted()会返回false]，而且会抛出InterruptedException异常[该异常在while循环体内被捕获]。因此，t1理所当然的会进入死循环了。<br></p>\n<p>解决该问题，需要我们在捕获异常时，额外的进行退出while循环的处理。例如，在MyThread的catch(InterruptedException)中添加break 或 return就能解决该问题。</p>\n',22,0,2,NULL,'2019-07-27 11:03:24','2019-07-28 07:22:13',0,'9,14,32',1,0),(24,'Java多线程基础08——线程优先级和守护线程','java 中的线程优先级的范围是1～10，默认的优先级是5。“高优先级线程”会优先于“低优先级线程”执行。\n\njava 中有两种线程：用户线程和守护线程。可以通过isDaemon()方法来区别它们：如果返回false，则说明该线程是“用户线程”；否则就是“守护线程”。','Bobbi','## 线程优先级介绍\njava 中的线程优先级的范围是1～10，默认的优先级是5。“高优先级线程”会优先于“低优先级线程”执行。<br>\njava 中有两种线程：用户线程和守护线程。可以通过isDaemon()方法来区别它们：如果返回false，则说明该线程是“用户线程”；否则就是“守护线程”。\n\n用户线程一般用户执行用户级任务，而守护线程也就是“后台线程”，一般用来执行后台任务。需要注意的是：当只有守护线程运行时，JVM会自动退出。\n\n## 优先级示例\n```java\npublic class Mythread extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(Thread.currentThread().getName() + \"(\" + Thread.currentThread().getPriority() + \") loop \" + i);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(Thread.currentThread().getName()\n                +\"(\"+Thread.currentThread().getPriority()+ \")\");\n        Mythread t1 = new Mythread();\n        Mythread t2 = new Mythread();\n        t1.setPriority(1);\n        t2.setPriority(10);\n        t1.start();\n        t2.start();\n    }\n}\n\n```\n结果如下：\n```shell\nmain(5)\nThread-1(10) loop 0\nThread-0(1) loop 0\nThread-1(10) loop 1\nThread-0(1) loop 1\nThread-0(1) loop 2\nThread-0(1) loop 3\nThread-0(1) loop 4\nThread-1(10) loop 2\nThread-1(10) loop 3\nThread-1(10) loop 4\n```\n结果说明：<br>\n(1)主线程main的优先级是5<br>\n(2) t1的优先级被设为1，而t2的优先级被设为10。cpu在执行t1和t2的时候，根据时间片轮循调度，所以能够并发执行。\n\n## 守护线程的示例\n```java\nclass MyDaemon extends Thread{\n    public MyDaemon(String name) {\n        super(name);\n    }\n\n    @Override\n    public void run(){\n        try {\n            for (int i=0; i<10000; i++) {\n                Thread.sleep(1);\n                System.out.println(this.getName() +\"(isDaemon=\"+this.isDaemon()+ \")\" +\", loop \"+i);\n            }\n        } catch (InterruptedException e) {\n        }\n    }\n}\npublic class Mythread extends Thread {\n    public Mythread(String name) {\n        super(name);\n    }\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            try {\n                Thread.sleep(3);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(this.getName() +\"(isDaemon=\"+this.isDaemon()+ \")\" +\", loop \"+i);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(Thread.currentThread().getName()\n                +\"(isDaemon=\"+Thread.currentThread().isDaemon()+ \")\");\n\n        Mythread t1=new Mythread(\"t1\");    // 新建t1\n        MyDaemon t2=new MyDaemon(\"MyDaemon\");    // 新建t2\n        t2.setDaemon(true);                // 设置t2为守护线程\n        t1.start();                        // 启动t1\n        t2.start();                        // 启动t2\n    }\n}\n```\n\n结果如下：\n```shell\nmain(isDaemon=false)\nMyDaemon(isDaemon=true), loop 0\nMyDaemon(isDaemon=true), loop 1\nt1(isDaemon=false), loop 0\nMyDaemon(isDaemon=true), loop 2\nMyDaemon(isDaemon=true), loop 3\nMyDaemon(isDaemon=true), loop 4\nt1(isDaemon=false), loop 1\nMyDaemon(isDaemon=true), loop 5\nMyDaemon(isDaemon=true), loop 6\nMyDaemon(isDaemon=true), loop 7\nt1(isDaemon=false), loop 2\nMyDaemon(isDaemon=true), loop 8\nMyDaemon(isDaemon=true), loop 9\nt1(isDaemon=false), loop 3\nMyDaemon(isDaemon=true), loop 10\nMyDaemon(isDaemon=true), loop 11\nMyDaemon(isDaemon=true), loop 12\nt1(isDaemon=false), loop 4\nMyDaemon(isDaemon=true), loop 13\n\n```\n结果说明：<br>\n(1) 主线程main是用户线程，它创建的子线程t1也是用户线程。<br>\n(2) myDeamon是守护线程。在“主线程main”和“子线程t1”(它们都是用户线程)执行完毕，只剩myDeamon这个守护线程的时候，JVM自动退出。','<h2 id=\"-\">线程优先级介绍</h2>\n<p>java 中的线程优先级的范围是1～10，默认的优先级是5。“高优先级线程”会优先于“低优先级线程”执行。<br>\njava 中有两种线程：用户线程和守护线程。可以通过isDaemon()方法来区别它们：如果返回false，则说明该线程是“用户线程”；否则就是“守护线程”。</p>\n<p>用户线程一般用户执行用户级任务，而守护线程也就是“后台线程”，一般用来执行后台任务。需要注意的是：当只有守护线程运行时，JVM会自动退出。</p>\n<h2 id=\"-\">优先级示例</h2>\n<pre><code class=\"language-java\">public class Mythread extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i &lt; 5; i++) {\n            System.out.println(Thread.currentThread().getName() + &quot;(&quot; + Thread.currentThread().getPriority() + &quot;) loop &quot; + i);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(Thread.currentThread().getName()\n                +&quot;(&quot;+Thread.currentThread().getPriority()+ &quot;)&quot;);\n        Mythread t1 = new Mythread();\n        Mythread t2 = new Mythread();\n        t1.setPriority(1);\n        t2.setPriority(10);\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">main(5)\nThread-1(10) loop 0\nThread-0(1) loop 0\nThread-1(10) loop 1\nThread-0(1) loop 1\nThread-0(1) loop 2\nThread-0(1) loop 3\nThread-0(1) loop 4\nThread-1(10) loop 2\nThread-1(10) loop 3\nThread-1(10) loop 4</code></pre>\n<p>结果说明：<br>\n(1)主线程main的优先级是5<br>\n(2) t1的优先级被设为1，而t2的优先级被设为10。cpu在执行t1和t2的时候，根据时间片轮循调度，所以能够并发执行。</p>\n<h2 id=\"-\">守护线程的示例</h2>\n<pre><code class=\"language-java\">class MyDaemon extends Thread{\n    public MyDaemon(String name) {\n        super(name);\n    }\n\n    @Override\n    public void run(){\n        try {\n            for (int i=0; i&lt;10000; i++) {\n                Thread.sleep(1);\n                System.out.println(this.getName() +&quot;(isDaemon=&quot;+this.isDaemon()+ &quot;)&quot; +&quot;, loop &quot;+i);\n            }\n        } catch (InterruptedException e) {\n        }\n    }\n}\npublic class Mythread extends Thread {\n    public Mythread(String name) {\n        super(name);\n    }\n\n    @Override\n    public void run() {\n        for (int i = 0; i &lt; 5; i++) {\n            try {\n                Thread.sleep(3);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(this.getName() +&quot;(isDaemon=&quot;+this.isDaemon()+ &quot;)&quot; +&quot;, loop &quot;+i);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(Thread.currentThread().getName()\n                +&quot;(isDaemon=&quot;+Thread.currentThread().isDaemon()+ &quot;)&quot;);\n\n        Mythread t1=new Mythread(&quot;t1&quot;);    // 新建t1\n        MyDaemon t2=new MyDaemon(&quot;MyDaemon&quot;);    // 新建t2\n        t2.setDaemon(true);                // 设置t2为守护线程\n        t1.start();                        // 启动t1\n        t2.start();                        // 启动t2\n    }\n}</code></pre>\n<p>结果如下：</p>\n<pre><code class=\"language-shell\">main(isDaemon=false)\nMyDaemon(isDaemon=true), loop 0\nMyDaemon(isDaemon=true), loop 1\nt1(isDaemon=false), loop 0\nMyDaemon(isDaemon=true), loop 2\nMyDaemon(isDaemon=true), loop 3\nMyDaemon(isDaemon=true), loop 4\nt1(isDaemon=false), loop 1\nMyDaemon(isDaemon=true), loop 5\nMyDaemon(isDaemon=true), loop 6\nMyDaemon(isDaemon=true), loop 7\nt1(isDaemon=false), loop 2\nMyDaemon(isDaemon=true), loop 8\nMyDaemon(isDaemon=true), loop 9\nt1(isDaemon=false), loop 3\nMyDaemon(isDaemon=true), loop 10\nMyDaemon(isDaemon=true), loop 11\nMyDaemon(isDaemon=true), loop 12\nt1(isDaemon=false), loop 4\nMyDaemon(isDaemon=true), loop 13\n</code></pre>\n<p>结果说明：<br>\n(1) 主线程main是用户线程，它创建的子线程t1也是用户线程。<br>\n(2) myDeamon是守护线程。在“主线程main”和“子线程t1”(它们都是用户线程)执行完毕，只剩myDeamon这个守护线程的时候，JVM自动退出。</p>\n',24,0,2,NULL,'2019-07-28 08:20:50','2019-07-28 08:20:50',0,'9,14,32',1,0),(25,'Java多线程基础09——生产者和消费者  ','生产/消费者问题是个非常典型的多线程问题，涉及到的对象包括“生产者”、“消费者”、“仓库”和“产品”。他们之间的关系如下','Bobbi','## 生产者消费者模型\n生产/消费者问题是个非常典型的多线程问题，涉及到的对象包括“生产者”、“消费者”、“仓库”和“产品”。他们之间的关系如下：\n1. 生产者仅仅在仓储未满时候生产，仓满则停止生产。\n2. 消费者仅仅在仓储有产品时候才能消费，仓空则等待。\n3. 当消费者发现仓储没产品可消费时候会通知生产者生产。\n4. 生产者在生产出可消费产品时候，应该通知等待的消费者去消费。\n\n## 生产者消费者实现\n```java\nclass Store {\n    private int count;\n    private final int MAX_SIZE = 5;\n\n    // 加库存\n    public synchronized void product() {\n\n        try {\n            Thread.sleep(new Random().nextInt(300));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        while (count >= MAX_SIZE) {\n            try {\n                System.out.println(\"producer wait\");\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        count++;\n        System.out.println(\"producer生产，剩余\" + count);\n        notifyAll();\n\n    }\n\n    // 减库存\n    public synchronized void consume() {\n\n        try {\n            Thread.sleep(new Random().nextInt(300));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        while (count <= 0) {\n            try {\n                System.out.println(\"consumer wait\");\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        count--;\n        System.out.println(\"consumer 消费，剩余\" + count);\n        notifyAll();\n\n    }\n\n}\n\n// 生产者\nclass Producer extends Thread {\n    private Store store;\n\n    public Producer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 生产者开始不断生产\n        while (true) {\n            store.product();\n            try {\n                Thread.sleep(300);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n// 消费者\nclass Consumer extends Thread {\n    private Store store;\n\n    public Consumer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 消费者开始不断消费\n        while (true) {\n            store.consume();\n            try {\n                Thread.sleep(300);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\npublic class ProducerAndConsumerTest {\n    public static void main(String[] args) {\n        // 创建仓库类\n        Store store = new Store();\n        // 创建5个生产者线程\n        Producer producer1 = new Producer(store);\n        Producer producer2 = new Producer(store);\n        Producer producer3 = new Producer(store);\n        Producer producer4 = new Producer(store);\n        Producer producer5 = new Producer(store);\n        // 创建3个消费者线程\n        Consumer consumer1 = new Consumer(store);\n        Consumer consumer2 = new Consumer(store);\n        Consumer consumer3 = new Consumer(store);\n        // 启动线程\n        producer1.start();\n        producer2.start();\n        producer3.start();\n        producer4.start();\n        producer5.start();\n        consumer1.start();\n        consumer2.start();\n        consumer3.start();\n    }\n}\n```\n运行结果：\n```shell\nproducer生产，剩余1\nconsumer 消费，剩余0\nconsumer wait\nconsumer wait\nproducer生产，剩余1\nproducer生产，剩余2\nproducer生产，剩余3\nproducer生产，剩余4\nproducer生产，剩余5\nproducer wait\nconsumer 消费，剩余4\nconsumer 消费，剩余3\nconsumer 消费，剩余2\nproducer生产，剩余3\n...\n```\n结果说明：<br>\n在上面的代码中，有一个仓库类Store，它的store()和consum()方法负责存入或消费商品，这两个方法都是加锁的，并且是以当前Store对象为锁。\n\n在store()方法中，首先判断了当前库存量是否大于最大库存量，如果大于就使当前线程开始等待，如果没有达到最大库存量，就开始增加库存，并且调用notifyAll()方法唤醒所有线程。\n\n在consum()方法中，首先判断了当前库存量是否小于等于0，如果满足就使当前线程开始等待，如果仓库还有库存，就开始消费商品，并且调用notifyAll()方法唤醒所有线程。\n\n生产者和消费者分别对应Producer和Consumer两个类，这两个类的实现非常简单，就是循环调用仓库的store()和consum()方法分别生成商品和消费商品。需要注意的是，在主要代码中，Producer和Consumer两个类的实例中的Store实例是同一个，也就是说生产者和消费者是针对同一个仓库进行生产和消费操作的。\n\n在主线程中，分别开启了五个生产线程和三个消费线程。\n\n当Producer生产线程在生产的产品达到最大库存量时，会停下来等待，而当Consumer消费线程在消费到仓库库存为0时也会停下来等待；而每次生产或消费的时候都会执行notifyAll()方法唤醒所有线程，这个唤醒操作会唤醒等待的生产或消费线程继续进行生产或消费。\n\n','<h2 id=\"-\">生产者消费者模型</h2>\n<p>生产/消费者问题是个非常典型的多线程问题，涉及到的对象包括“生产者”、“消费者”、“仓库”和“产品”。他们之间的关系如下：</p>\n<ol>\n<li>生产者仅仅在仓储未满时候生产，仓满则停止生产。</li>\n<li>消费者仅仅在仓储有产品时候才能消费，仓空则等待。</li>\n<li>当消费者发现仓储没产品可消费时候会通知生产者生产。</li>\n<li>生产者在生产出可消费产品时候，应该通知等待的消费者去消费。</li>\n</ol>\n<h2 id=\"-\">生产者消费者实现</h2>\n<pre><code class=\"language-java\">class Store {\n    private int count;\n    private final int MAX_SIZE = 5;\n\n    // 加库存\n    public synchronized void product() {\n\n        try {\n            Thread.sleep(new Random().nextInt(300));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        while (count &gt;= MAX_SIZE) {\n            try {\n                System.out.println(&quot;producer wait&quot;);\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        count++;\n        System.out.println(&quot;producer生产，剩余&quot; + count);\n        notifyAll();\n\n    }\n\n    // 减库存\n    public synchronized void consume() {\n\n        try {\n            Thread.sleep(new Random().nextInt(300));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        while (count &lt;= 0) {\n            try {\n                System.out.println(&quot;consumer wait&quot;);\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        count--;\n        System.out.println(&quot;consumer 消费，剩余&quot; + count);\n        notifyAll();\n\n    }\n\n}\n\n// 生产者\nclass Producer extends Thread {\n    private Store store;\n\n    public Producer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 生产者开始不断生产\n        while (true) {\n            store.product();\n            try {\n                Thread.sleep(300);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n// 消费者\nclass Consumer extends Thread {\n    private Store store;\n\n    public Consumer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 消费者开始不断消费\n        while (true) {\n            store.consume();\n            try {\n                Thread.sleep(300);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\npublic class ProducerAndConsumerTest {\n    public static void main(String[] args) {\n        // 创建仓库类\n        Store store = new Store();\n        // 创建5个生产者线程\n        Producer producer1 = new Producer(store);\n        Producer producer2 = new Producer(store);\n        Producer producer3 = new Producer(store);\n        Producer producer4 = new Producer(store);\n        Producer producer5 = new Producer(store);\n        // 创建3个消费者线程\n        Consumer consumer1 = new Consumer(store);\n        Consumer consumer2 = new Consumer(store);\n        Consumer consumer3 = new Consumer(store);\n        // 启动线程\n        producer1.start();\n        producer2.start();\n        producer3.start();\n        producer4.start();\n        producer5.start();\n        consumer1.start();\n        consumer2.start();\n        consumer3.start();\n    }\n}</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">producer生产，剩余1\nconsumer 消费，剩余0\nconsumer wait\nconsumer wait\nproducer生产，剩余1\nproducer生产，剩余2\nproducer生产，剩余3\nproducer生产，剩余4\nproducer生产，剩余5\nproducer wait\nconsumer 消费，剩余4\nconsumer 消费，剩余3\nconsumer 消费，剩余2\nproducer生产，剩余3\n...</code></pre>\n<p>结果说明：<br>\n在上面的代码中，有一个仓库类Store，它的store()和consum()方法负责存入或消费商品，这两个方法都是加锁的，并且是以当前Store对象为锁。</p>\n<p>在store()方法中，首先判断了当前库存量是否大于最大库存量，如果大于就使当前线程开始等待，如果没有达到最大库存量，就开始增加库存，并且调用notifyAll()方法唤醒所有线程。</p>\n<p>在consum()方法中，首先判断了当前库存量是否小于等于0，如果满足就使当前线程开始等待，如果仓库还有库存，就开始消费商品，并且调用notifyAll()方法唤醒所有线程。</p>\n<p>生产者和消费者分别对应Producer和Consumer两个类，这两个类的实现非常简单，就是循环调用仓库的store()和consum()方法分别生成商品和消费商品。需要注意的是，在主要代码中，Producer和Consumer两个类的实例中的Store实例是同一个，也就是说生产者和消费者是针对同一个仓库进行生产和消费操作的。</p>\n<p>在主线程中，分别开启了五个生产线程和三个消费线程。</p>\n<p>当Producer生产线程在生产的产品达到最大库存量时，会停下来等待，而当Consumer消费线程在消费到仓库库存为0时也会停下来等待；而每次生产或消费的时候都会执行notifyAll()方法唤醒所有线程，这个唤醒操作会唤醒等待的生产或消费线程继续进行生产或消费。</p>\n',39,23,2,NULL,'2019-07-28 15:37:47','2019-07-29 14:46:19',0,'9,14,32',1,0),(26,'Java多线程JUC原子类01——AtomicLong','AtomicLong是作用是对长整形进行原子操作。\n在32位操作系统中，64位的long 和 double 变量由于会被JVM当作两个分离的32位来进行操作，所以不具有原子性。而使用AtomicLong能让long的操作保持原子型。','Bobbi','## JUC原子类介绍\n根据修改的数据类型，可以将JUC包中的原子操作类可以分为4类。\n\n1. 基本类型: AtomicInteger, AtomicLong, AtomicBoolean ;\n2. 数组类型: AtomicIntegerArray, AtomicLongArray, AtomicReferenceArray ;\n3. 引用类型: AtomicReference, AtomicStampedRerence, AtomicMarkableReference ;\n4. 对象的属性修改类型: AtomicIntegerFieldUpdater, AtomicLongFieldUpdater, AtomicReferenceFieldUpdater 。\n\n这些类存在的目的是对相应的数据进行原子操作。所谓原子操作，是指操作过程不会被中断，保证数据操作是以原子方式进行的。\n\n## AtomicLong\nAtomicLong是作用是对长整形进行原子操作。\n在32位操作系统中，64位的long 和 double 变量由于会被JVM当作两个分离的32位来进行操作，所以不具有原子性。而使用AtomicLong能让long的操作保持原子型。\n\n## AtomicLong API\n```java\n// 构造函数\nAtomicLong()\n// 创建值为initialValue的AtomicLong对象\nAtomicLong(long initialValue)\n// 以原子方式设置当前值为newValue。\nfinal void set(long newValue) \n// 获取当前值\nfinal long get() \n// 以原子方式将当前值减 1，并返回减1后的值。等价于“--num”\nfinal long decrementAndGet() \n// 以原子方式将当前值减 1，并返回减1前的值。等价于“num--”\nfinal long getAndDecrement() \n// 以原子方式将当前值加 1，并返回加1后的值。等价于“++num”\nfinal long incrementAndGet() \n// 以原子方式将当前值加 1，并返回加1前的值。等价于“num++”\nfinal long getAndIncrement()    \n// 以原子方式将delta与当前值相加，并返回相加后的值。\nfinal long addAndGet(long delta) \n// 以原子方式将delta添加到当前值，并返回相加前的值。\nfinal long getAndAdd(long delta) \n// 如果当前值 == expect，则以原子方式将该值设置为update。成功返回true，否则返回false，并且不修改原值。\nfinal boolean compareAndSet(long expect, long update)\n// 以原子方式设置当前值为newValue，并返回旧值。\nfinal long getAndSet(long newValue)\n// 返回当前值对应的int值\nint intValue() \n// 获取当前值对应的long值\nlong longValue()    \n// 以 float 形式返回当前值\nfloat floatValue()    \n// 以 double 形式返回当前值\ndouble doubleValue()    \n// 最后设置为给定值。延时设置变量值，这个等价于set()方法，但是由于字段是volatile类型的，因此次字段的修改会比普通字段（非volatile字段）有稍微的性能延时（尽管可以忽略），所以如果不是想立即读取设置的新值，允许在“后台”修改值，那么此方法就很有用。如果还是难以理解，这里就类似于启动一个后台线程如执行修改新值的任务，原线程就不等待修改结果立即返回（这种解释其实是不正确的，但是可以这么理解）。\nfinal void lazySet(long newValue)\n// 如果当前值 == 预期值，则以原子方式将该设置为给定的更新值。JSR规范中说：以原子方式读取和有条件地写入变量但不 创建任何 happen-before 排序，因此不提供与除 weakCompareAndSet 目标外任何变量以前或后续读取或写入操作有关的任何保证。大意就是说调用weakCompareAndSet时并不能保证不存在happen-before的发生（也就是可能存在指令重排序导致此操作失败）。但是从Java源码来看，其实此方法并没有实现JSR规范的要求，最后效果和compareAndSet是等效的，都调用了unsafe.compareAndSwapInt()完成操作。\nfinal boolean weakCompareAndSet(long expect, long update)\n\n```\n## AtomicLong源码分析\nAtomicLong的代码很简单，下面仅以incrementAndGet()为例，对AtomicLong的原理进行说明。\nincrementAndGet()源码如下（JDK8）：\n\n```java \npublic final long incrementAndGet() {\n        return unsafe.getAndAddLong(this, valueOffset, 1L) + 1L;\n    }\n\n```\n> Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。\n\n我们来看看getAndAddLong方法：\n```java\npublic final long getAndAddLong(Object var1, long var2, long var4) {\n        long var6;\n        do {\n	    // 获取内存中AtomicLong当前对应的long值\n            var6 = this.getLongVolatile(var1, var2);\n	    // 调用CAS函数比较并更新AtomicLong的值\n        } while(!this.compareAndSwapLong(var1, var2, var6, var6 + var4));\n	// 更新成功则返回值，否则一直循环\n        return var6;\n    }\n```\n说明：<br>\n其中，var1：实例。var2：偏移地址。var4：需要自增的值，这里是1。var6是实例在内存中的值<br>\n(1) 首先根据this.getLongVolatile获取AtomicLong对应的long值 var6。<br>\n(2) compareAndSwapLong会比较原始值与期望值是否相等，若相等则更新。如果从内存上获取的值var6（原始值）等于AtomicLong的值（期望值），则更新AtomicLong的值为var6+自增值，否则继续循环，知道更新成功为止。（CAS自旋）\n\n## AtomicLong示例\n```java\npublic class AtomicTest {\n    public static void main(String[] args) {\n        // 新建AtomicLong对象\n        AtomicLong mAtoLong = new AtomicLong();\n\n        mAtoLong.set(0x0123456789ABCDEFL);\n        System.out.println(\"----类型转换-----\");\n        System.out.printf(\"%20s : 0x%016X\\n\", \"get()\", mAtoLong.get());\n        System.out.printf(\"%20s : 0x%016X\\n\", \"intValue()\", mAtoLong.intValue());\n        System.out.printf(\"%20s : 0x%016X\\n\", \"longValue()\", mAtoLong.longValue());\n        System.out.printf(\"%20s : %s\\n\", \"doubleValue()\", mAtoLong.doubleValue());\n        System.out.printf(\"%20s : %s\\n\", \"floatValue()\", mAtoLong.floatValue());\n\n        System.out.println(\"----自增（自减）-----\");\n        System.out.printf(\"%20s : 0x%016X\\n\", \"getAndDecrement()\", mAtoLong.getAndDecrement());\n        System.out.printf(\"%20s : 0x%016X\\n\", \"decrementAndGet()\", mAtoLong.decrementAndGet());\n        System.out.printf(\"%20s : 0x%016X\\n\", \"getAndIncrement()\", mAtoLong.getAndIncrement());\n        System.out.printf(\"%20s : 0x%016X\\n\", \"incrementAndGet()\", mAtoLong.incrementAndGet());\n\n        System.out.println(\"----+n-----\");\n        System.out.printf(\"%20s : 0x%016X\\n\", \"addAndGet(0x10)\", mAtoLong.addAndGet(0x10));\n        System.out.printf(\"%20s : 0x%016X\\n\", \"getAndAdd(0x10)\", mAtoLong.getAndAdd(0x10));\n\n\n        System.out.println(\"----compareAndSet-----\");\n        System.out.printf(\"%20s : 0x%016X\\n\", \"get()\", mAtoLong.get());\n        System.out.printf(\"%20s : %s\\n\", \"compareAndSet()\", mAtoLong.compareAndSet(0x0123456789ABCE0FL, 0xFEDCBA9876543210L));\n        System.out.printf(\"%20s : 0x%016X\\n\", \"get()\", mAtoLong.get());\n    }\n}\n\n```\n运行结果：\n```shell\n		\n		----类型转换-----\n               get() : 0x0123456789ABCDEF\n          intValue() : 0x0000000089ABCDEF\n         longValue() : 0x0123456789ABCDEF\n       doubleValue() : 8.1985529216486896E16\n        floatValue() : 8.1985531E16\n		----自增（自减）-----\n   getAndDecrement() : 0x0123456789ABCDEF\n   decrementAndGet() : 0x0123456789ABCDED\n   getAndIncrement() : 0x0123456789ABCDED\n   incrementAndGet() : 0x0123456789ABCDEF\n		----+n-----\n     addAndGet(0x10) : 0x0123456789ABCDFF\n     getAndAdd(0x10) : 0x0123456789ABCDFF\n		----compareAndSet-----\n               get() : 0x0123456789ABCE0F\n     compareAndSet() : true\n               get() : 0xFEDCBA9876543210\n```\n\n\n\n','<h2 id=\"juc-\">JUC原子类介绍</h2>\n<p>根据修改的数据类型，可以将JUC包中的原子操作类可以分为4类。</p>\n<ol>\n<li>基本类型: AtomicInteger, AtomicLong, AtomicBoolean ;</li>\n<li>数组类型: AtomicIntegerArray, AtomicLongArray, AtomicReferenceArray ;</li>\n<li>引用类型: AtomicReference, AtomicStampedRerence, AtomicMarkableReference ;</li>\n<li>对象的属性修改类型: AtomicIntegerFieldUpdater, AtomicLongFieldUpdater, AtomicReferenceFieldUpdater 。</li>\n</ol>\n<p>这些类存在的目的是对相应的数据进行原子操作。所谓原子操作，是指操作过程不会被中断，保证数据操作是以原子方式进行的。</p>\n<h2 id=\"atomiclong\">AtomicLong</h2>\n<p>AtomicLong是作用是对长整形进行原子操作。\n在32位操作系统中，64位的long 和 double 变量由于会被JVM当作两个分离的32位来进行操作，所以不具有原子性。而使用AtomicLong能让long的操作保持原子型。</p>\n<h2 id=\"atomiclong-api\">AtomicLong API</h2>\n<pre><code class=\"language-java\">// 构造函数\nAtomicLong()\n// 创建值为initialValue的AtomicLong对象\nAtomicLong(long initialValue)\n// 以原子方式设置当前值为newValue。\nfinal void set(long newValue) \n// 获取当前值\nfinal long get() \n// 以原子方式将当前值减 1，并返回减1后的值。等价于“--num”\nfinal long decrementAndGet() \n// 以原子方式将当前值减 1，并返回减1前的值。等价于“num--”\nfinal long getAndDecrement() \n// 以原子方式将当前值加 1，并返回加1后的值。等价于“++num”\nfinal long incrementAndGet() \n// 以原子方式将当前值加 1，并返回加1前的值。等价于“num++”\nfinal long getAndIncrement()    \n// 以原子方式将delta与当前值相加，并返回相加后的值。\nfinal long addAndGet(long delta) \n// 以原子方式将delta添加到当前值，并返回相加前的值。\nfinal long getAndAdd(long delta) \n// 如果当前值 == expect，则以原子方式将该值设置为update。成功返回true，否则返回false，并且不修改原值。\nfinal boolean compareAndSet(long expect, long update)\n// 以原子方式设置当前值为newValue，并返回旧值。\nfinal long getAndSet(long newValue)\n// 返回当前值对应的int值\nint intValue() \n// 获取当前值对应的long值\nlong longValue()    \n// 以 float 形式返回当前值\nfloat floatValue()    \n// 以 double 形式返回当前值\ndouble doubleValue()    \n// 最后设置为给定值。延时设置变量值，这个等价于set()方法，但是由于字段是volatile类型的，因此次字段的修改会比普通字段（非volatile字段）有稍微的性能延时（尽管可以忽略），所以如果不是想立即读取设置的新值，允许在“后台”修改值，那么此方法就很有用。如果还是难以理解，这里就类似于启动一个后台线程如执行修改新值的任务，原线程就不等待修改结果立即返回（这种解释其实是不正确的，但是可以这么理解）。\nfinal void lazySet(long newValue)\n// 如果当前值 == 预期值，则以原子方式将该设置为给定的更新值。JSR规范中说：以原子方式读取和有条件地写入变量但不 创建任何 happen-before 排序，因此不提供与除 weakCompareAndSet 目标外任何变量以前或后续读取或写入操作有关的任何保证。大意就是说调用weakCompareAndSet时并不能保证不存在happen-before的发生（也就是可能存在指令重排序导致此操作失败）。但是从Java源码来看，其实此方法并没有实现JSR规范的要求，最后效果和compareAndSet是等效的，都调用了unsafe.compareAndSwapInt()完成操作。\nfinal boolean weakCompareAndSet(long expect, long update)\n</code></pre>\n<h2 id=\"atomiclong-\">AtomicLong源码分析</h2>\n<p>AtomicLong的代码很简单，下面仅以incrementAndGet()为例，对AtomicLong的原理进行说明。\nincrementAndGet()源码如下（JDK8）：</p>\n<pre><code class=\"language-java\">public final long incrementAndGet() {\n        return unsafe.getAndAddLong(this, valueOffset, 1L) + 1L;\n    }\n</code></pre>\n<blockquote>\n<p>Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。</p>\n</blockquote>\n<p>我们来看看getAndAddLong方法：</p>\n<pre><code class=\"language-java\">public final long getAndAddLong(Object var1, long var2, long var4) {\n        long var6;\n        do {\n        // 获取内存中AtomicLong当前对应的long值\n            var6 = this.getLongVolatile(var1, var2);\n        // 调用CAS函数比较并更新AtomicLong的值\n        } while(!this.compareAndSwapLong(var1, var2, var6, var6 + var4));\n    // 更新成功则返回值，否则一直循环\n        return var6;\n    }</code></pre>\n<p>说明：<br>\n其中，var1：实例。var2：偏移地址。var4：需要自增的值，这里是1。var6是实例在内存中的值<br>\n(1) 首先根据this.getLongVolatile获取AtomicLong对应的long值 var6。<br>\n(2) compareAndSwapLong会比较原始值与期望值是否相等，若相等则更新。如果从内存上获取的值var6（原始值）等于AtomicLong的值（期望值），则更新AtomicLong的值为var6+自增值，否则继续循环，知道更新成功为止。（CAS自旋）</p>\n<h2 id=\"atomiclong-\">AtomicLong示例</h2>\n<pre><code class=\"language-java\">public class AtomicTest {\n    public static void main(String[] args) {\n        // 新建AtomicLong对象\n        AtomicLong mAtoLong = new AtomicLong();\n\n        mAtoLong.set(0x0123456789ABCDEFL);\n        System.out.println(&quot;----类型转换-----&quot;);\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;get()&quot;, mAtoLong.get());\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;intValue()&quot;, mAtoLong.intValue());\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;longValue()&quot;, mAtoLong.longValue());\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;doubleValue()&quot;, mAtoLong.doubleValue());\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;floatValue()&quot;, mAtoLong.floatValue());\n\n        System.out.println(&quot;----自增（自减）-----&quot;);\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;getAndDecrement()&quot;, mAtoLong.getAndDecrement());\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;decrementAndGet()&quot;, mAtoLong.decrementAndGet());\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;getAndIncrement()&quot;, mAtoLong.getAndIncrement());\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;incrementAndGet()&quot;, mAtoLong.incrementAndGet());\n\n        System.out.println(&quot;----+n-----&quot;);\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;addAndGet(0x10)&quot;, mAtoLong.addAndGet(0x10));\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;getAndAdd(0x10)&quot;, mAtoLong.getAndAdd(0x10));\n\n\n        System.out.println(&quot;----compareAndSet-----&quot;);\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;get()&quot;, mAtoLong.get());\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;compareAndSet()&quot;, mAtoLong.compareAndSet(0x0123456789ABCE0FL, 0xFEDCBA9876543210L));\n        System.out.printf(&quot;%20s : 0x%016X\\n&quot;, &quot;get()&quot;, mAtoLong.get());\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">\n        ----类型转换-----\n               get() : 0x0123456789ABCDEF\n          intValue() : 0x0000000089ABCDEF\n         longValue() : 0x0123456789ABCDEF\n       doubleValue() : 8.1985529216486896E16\n        floatValue() : 8.1985531E16\n        ----自增（自减）-----\n   getAndDecrement() : 0x0123456789ABCDEF\n   decrementAndGet() : 0x0123456789ABCDED\n   getAndIncrement() : 0x0123456789ABCDED\n   incrementAndGet() : 0x0123456789ABCDEF\n        ----+n-----\n     addAndGet(0x10) : 0x0123456789ABCDFF\n     getAndAdd(0x10) : 0x0123456789ABCDFF\n        ----compareAndSet-----\n               get() : 0x0123456789ABCE0F\n     compareAndSet() : true\n               get() : 0xFEDCBA9876543210</code></pre>\n',38,52,2,NULL,'2019-07-29 15:44:46','2019-07-29 15:46:38',0,'9,14,33',1,0),(27,'Java多线程JUC原子类02——AtomicLongArray','AtomicLong是作用是对长整形进行原子操作。而AtomicLongArray的作用则是对\"长整形数组\"进行原子操作。','Bobbi','## AtomicLongArray介绍\nAtomicLong是作用是对长整形进行原子操作。而AtomicLongArray的作用则是对\"长整形数组\"进行原子操作。\n## AtomicLongArray函数列表\n```java \n// 创建给定长度的新 AtomicLongArray。\nAtomicLongArray(int length)\n// 创建与给定数组具有相同长度的新 AtomicLongArray，并从给定数组复制其所有元素。\nAtomicLongArray(long[] array)\n\n// 以原子方式将给定值添加到索引 i 的元素。\nlong addAndGet(int i, long delta)\n// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。\nboolean compareAndSet(int i, long expect, long update)\n// 以原子方式将索引 i 的元素减1。\nlong decrementAndGet(int i)\n// 获取位置 i 的当前值。\nlong get(int i)\n// 以原子方式将给定值与索引 i 的元素相加。\nlong getAndAdd(int i, long delta)\n// 以原子方式将索引 i 的元素减 1。\nlong getAndDecrement(int i)\n// 以原子方式将索引 i 的元素加 1。\nlong getAndIncrement(int i)\n// 以原子方式将位置 i 的元素设置为给定值，并返回旧值。\nlong getAndSet(int i, long newValue)\n// 以原子方式将索引 i 的元素加1。\nlong incrementAndGet(int i)\n// 最终将位置 i 的元素设置为给定值。\nvoid lazySet(int i, long newValue)\n// 返回该数组的长度。\nint length()\n// 将位置 i 的元素设置为给定值。\nvoid set(int i, long newValue)\n// 返回数组当前值的字符串表示形式。\nString toString()\n// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。\nboolean    weakCompareAndSet(int i, long expect, long update)\n\n```\n## AtomicLongArray源码分析\n这里以incrementAndGet的源码分析：\n```java\npublic final long incrementAndGet(int i) {\n        return getAndAdd(i, 1) + 1;\n    }\n```\ngetAndAdd()\n```java\npublic final long getAndAdd(int i, long delta) {\n        return unsafe.getAndAddLong(array, checkedByteOffset(i), delta);\n    }\n```\n说明：incrementAndGet()的作用是以原子方式将long数组的索引 i 的元素加1，并返回加1之后的值。\n\n其中unsafe.getAndAddLong(array, checkedByteOffset(i), delta);源码如下：\n```java\npublic final long getAndAddLong(Object var1, long var2, long var4) {\n        long var6;\n        do {\n	    // 获取内存上的实际值\n            var6 = this.getLongVolatile(var1, var2);\n	    // 比较并替换：比较内存上的值是否与预期值相等，若相等，则替换值为预期值+偏移量\n        } while(!this.compareAndSwapLong(var1, var2, var6, var6 + var4));\n\n        return var6;\n    }\n```\n说明：addAndGet()首先检查数组是否越界。如果没有越界的话，则先获取数组索引i的值；然后通过CAS函数更新i的值。\n\n## AtomicLongArray示例\n```java\npublic class AtomicLongArrayTest {\n    public static void main(String[] args) {\n        // 新建AtomicLongArray对象\n        long[] arrLong = new long[] {10, 20, 30, 40, 50};\n        AtomicLongArray ala = new AtomicLongArray(arrLong);\n\n        ala.set(0, 100);\n        for (int i=0, len=ala.length(); i<len; i++){\n            System.out.printf(\"get(%d) : %s\\n\", i, ala.get(i));\n        }\n\n        System.out.printf(\"%20s : %s\\n\", \"getAndDecrement(0)\", ala.getAndDecrement(0));\n        System.out.printf(\"%20s : %s\\n\", \"decrementAndGet(1)\", ala.decrementAndGet(1));\n        System.out.printf(\"%20s : %s\\n\", \"getAndIncrement(2)\", ala.getAndIncrement(2));\n        System.out.printf(\"%20s : %s\\n\", \"incrementAndGet(3)\", ala.incrementAndGet(3));\n\n        System.out.printf(\"%20s : %s\\n\", \"addAndGet(100)\", ala.addAndGet(0, 100));\n        System.out.printf(\"%20s : %s\\n\", \"getAndAdd(100)\", ala.getAndAdd(1, 100));\n\n        System.out.printf(\"%20s : %s\\n\", \"compareAndSet()\", ala.compareAndSet(2, 31, 1000));\n        System.out.printf(\"%20s : %s\\n\", \"get(2)\", ala.get(2));\n    }\n}\n\n```\n运行结果：\n```shell\nget(0) : 100\nget(1) : 20\nget(2) : 30\nget(3) : 40\nget(4) : 50\n  getAndDecrement(0) : 100\n  decrementAndGet(1) : 19\n  getAndIncrement(2) : 30\n  incrementAndGet(3) : 41\n      addAndGet(100) : 199\n      getAndAdd(100) : 19\n     compareAndSet() : true\n              get(2) : 1000\n\n\n```','<h2 id=\"atomiclongarray-\">AtomicLongArray介绍</h2>\n<p>AtomicLong是作用是对长整形进行原子操作。而AtomicLongArray的作用则是对&quot;长整形数组&quot;进行原子操作。</p>\n<h2 id=\"atomiclongarray-\">AtomicLongArray函数列表</h2>\n<pre><code class=\"language-java\">// 创建给定长度的新 AtomicLongArray。\nAtomicLongArray(int length)\n// 创建与给定数组具有相同长度的新 AtomicLongArray，并从给定数组复制其所有元素。\nAtomicLongArray(long[] array)\n\n// 以原子方式将给定值添加到索引 i 的元素。\nlong addAndGet(int i, long delta)\n// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。\nboolean compareAndSet(int i, long expect, long update)\n// 以原子方式将索引 i 的元素减1。\nlong decrementAndGet(int i)\n// 获取位置 i 的当前值。\nlong get(int i)\n// 以原子方式将给定值与索引 i 的元素相加。\nlong getAndAdd(int i, long delta)\n// 以原子方式将索引 i 的元素减 1。\nlong getAndDecrement(int i)\n// 以原子方式将索引 i 的元素加 1。\nlong getAndIncrement(int i)\n// 以原子方式将位置 i 的元素设置为给定值，并返回旧值。\nlong getAndSet(int i, long newValue)\n// 以原子方式将索引 i 的元素加1。\nlong incrementAndGet(int i)\n// 最终将位置 i 的元素设置为给定值。\nvoid lazySet(int i, long newValue)\n// 返回该数组的长度。\nint length()\n// 将位置 i 的元素设置为给定值。\nvoid set(int i, long newValue)\n// 返回数组当前值的字符串表示形式。\nString toString()\n// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。\nboolean    weakCompareAndSet(int i, long expect, long update)\n</code></pre>\n<h2 id=\"atomiclongarray-\">AtomicLongArray源码分析</h2>\n<p>这里以incrementAndGet的源码分析：</p>\n<pre><code class=\"language-java\">public final long incrementAndGet(int i) {\n        return getAndAdd(i, 1) + 1;\n    }</code></pre>\n<p>getAndAdd()</p>\n<pre><code class=\"language-java\">public final long getAndAdd(int i, long delta) {\n        return unsafe.getAndAddLong(array, checkedByteOffset(i), delta);\n    }</code></pre>\n<p>说明：incrementAndGet()的作用是以原子方式将long数组的索引 i 的元素加1，并返回加1之后的值。</p>\n<p>其中unsafe.getAndAddLong(array, checkedByteOffset(i), delta);源码如下：</p>\n<pre><code class=\"language-java\">public final long getAndAddLong(Object var1, long var2, long var4) {\n        long var6;\n        do {\n        // 获取内存上的实际值\n            var6 = this.getLongVolatile(var1, var2);\n        // 比较并替换：比较内存上的值是否与预期值相等，若相等，则替换值为预期值+偏移量\n        } while(!this.compareAndSwapLong(var1, var2, var6, var6 + var4));\n\n        return var6;\n    }</code></pre>\n<p>说明：addAndGet()首先检查数组是否越界。如果没有越界的话，则先获取数组索引i的值；然后通过CAS函数更新i的值。</p>\n<h2 id=\"atomiclongarray-\">AtomicLongArray示例</h2>\n<pre><code class=\"language-java\">public class AtomicLongArrayTest {\n    public static void main(String[] args) {\n        // 新建AtomicLongArray对象\n        long[] arrLong = new long[] {10, 20, 30, 40, 50};\n        AtomicLongArray ala = new AtomicLongArray(arrLong);\n\n        ala.set(0, 100);\n        for (int i=0, len=ala.length(); i&lt;len; i++){\n            System.out.printf(&quot;get(%d) : %s\\n&quot;, i, ala.get(i));\n        }\n\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;getAndDecrement(0)&quot;, ala.getAndDecrement(0));\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;decrementAndGet(1)&quot;, ala.decrementAndGet(1));\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;getAndIncrement(2)&quot;, ala.getAndIncrement(2));\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;incrementAndGet(3)&quot;, ala.incrementAndGet(3));\n\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;addAndGet(100)&quot;, ala.addAndGet(0, 100));\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;getAndAdd(100)&quot;, ala.getAndAdd(1, 100));\n\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;compareAndSet()&quot;, ala.compareAndSet(2, 31, 1000));\n        System.out.printf(&quot;%20s : %s\\n&quot;, &quot;get(2)&quot;, ala.get(2));\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">get(0) : 100\nget(1) : 20\nget(2) : 30\nget(3) : 40\nget(4) : 50\n  getAndDecrement(0) : 100\n  decrementAndGet(1) : 19\n  getAndIncrement(2) : 30\n  incrementAndGet(3) : 41\n      addAndGet(100) : 199\n      getAndAdd(100) : 19\n     compareAndSet() : true\n              get(2) : 1000\n\n</code></pre>\n',23,0,2,NULL,'2019-08-04 02:51:34','2019-08-04 02:53:41',0,'9,14,33',1,0),(28,'Java多线程JUC原子类03——AtomicReference','AtomicReference是作用是对\"对象\"进行原子操作。','Bobbi','## AtomicReference介绍\nAtomicReference是作用是对\"对象\"进行原子操作。\n## AtomicReference函数列表\n```java\n// 使用 null 初始值创建新的 AtomicReference。\nAtomicReference()\n// 使用给定的初始值创建新的 AtomicReference。\nAtomicReference(V initialValue)\n\n// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。\nboolean compareAndSet(V expect, V update)\n// 获取当前值。\nV get()\n// 以原子方式设置为给定值，并返回旧值。\nV getAndSet(V newValue)\n// 最终设置为给定值。\nvoid lazySet(V newValue)\n// 设置为给定值。\nvoid set(V newValue)\n// 返回当前值的字符串表示形式。\nString toString()\n// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。\nboolean weakCompareAndSet(V expect, V update)\n```\n\n## AtomicReference源码分析\n```java\npublic class AtomicReference<V> implements java.io.Serializable {\n    private static final long serialVersionUID = -1848883965231344442L;\n\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicReference.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n    // volatile类型\n    private volatile V value;\n\n    public AtomicReference(V initialValue) {\n        value = initialValue;\n    }\n\n    public AtomicReference() {\n    }\n\n    public final V get() {\n        return value;\n    }\n\n    public final void set(V newValue) {\n        value = newValue;\n    }\n\n    public final void lazySet(V newValue) {\n        unsafe.putOrderedObject(this, valueOffset, newValue);\n    }\n\n    public final boolean compareAndSet(V expect, V update) {\n        return unsafe.compareAndSwapObject(this, valueOffset, expect, update);\n    }\n\n    public final boolean weakCompareAndSet(V expect, V update) {\n        return unsafe.compareAndSwapObject(this, valueOffset, expect, update);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public final V getAndSet(V newValue) {\n        return (V)unsafe.getAndSetObject(this, valueOffset, newValue);\n    }\n\n    public final V getAndUpdate(UnaryOperator<V> updateFunction) {\n        V prev, next;\n        do {\n            prev = get();\n            next = updateFunction.apply(prev);\n        } while (!compareAndSet(prev, next));\n        return prev;\n    }\n\n    public final V updateAndGet(UnaryOperator<V> updateFunction) {\n        V prev, next;\n        do {\n            prev = get();\n            next = updateFunction.apply(prev);\n        } while (!compareAndSet(prev, next));\n        return next;\n    }\n\n    public final V getAndAccumulate(V x,\n                                    BinaryOperator<V> accumulatorFunction) {\n        V prev, next;\n        do {\n            prev = get();\n            next = accumulatorFunction.apply(prev, x);\n        } while (!compareAndSet(prev, next));\n        return prev;\n    }\n\n    public final V accumulateAndGet(V x,\n                                    BinaryOperator<V> accumulatorFunction) {\n        V prev, next;\n        do {\n            prev = get();\n            next = accumulatorFunction.apply(prev, x);\n        } while (!compareAndSet(prev, next));\n        return next;\n    }\n\n    public String toString() {\n        return String.valueOf(get());\n    }\n\n}\n```\n说明：\nAtomicReference的源码比较简单。它是通过\"volatile\"和\"Unsafe提供的CAS函数实现\"原子操作。\n1. value是volatile类型。这保证了：当某线程修改value的值时，其他线程看到的value值都是最新的value值，即修改之后的volatile的值。\n2. 通过CAS设置value。这保证了：当某线程池通过CAS函数(如compareAndSet函数)设置value时，它的操作是原子的，即线程在操作value时不会被中断。\n\n## AtomicReference示例\n```java\nclass Person {\n    volatile long id;\n    public Person(long id) {\n        this.id = id;\n    }\n    @Override\n    public String toString() {\n        return \"id:\"+id;\n    }\n}\npublic class AtomicReferenceTest {\n    public static void main(String[] args) {\n        // 创建两个Person对象，它们的id分别是101和102。\n        Person p1 = new Person(101);\n        Person p2 = new Person(102);\n        // 新建AtomicReference对象，初始化它的值为p1对象\n        AtomicReference ar = new AtomicReference(p1);\n        // 通过CAS设置ar。如果ar的值为p1的话，则将其设置为p2。\n        ar.compareAndSet(p1, p2);\n\n        Person p3 = (Person)ar.get();\n        System.out.println(\"p3 is \"+p3);\n        System.out.println(\"p3.equals(p1)=\"+p3.equals(p1));\n    }\n}\n\n\n```\n运行结果如下：\n```shell\np3 is id:102\np3.equals(p1)=false\n\n```','<h2 id=\"atomicreference-\">AtomicReference介绍</h2>\n<p>AtomicReference是作用是对&quot;对象&quot;进行原子操作。</p>\n<h2 id=\"atomicreference-\">AtomicReference函数列表</h2>\n<pre><code class=\"language-java\">// 使用 null 初始值创建新的 AtomicReference。\nAtomicReference()\n// 使用给定的初始值创建新的 AtomicReference。\nAtomicReference(V initialValue)\n\n// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。\nboolean compareAndSet(V expect, V update)\n// 获取当前值。\nV get()\n// 以原子方式设置为给定值，并返回旧值。\nV getAndSet(V newValue)\n// 最终设置为给定值。\nvoid lazySet(V newValue)\n// 设置为给定值。\nvoid set(V newValue)\n// 返回当前值的字符串表示形式。\nString toString()\n// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。\nboolean weakCompareAndSet(V expect, V update)</code></pre>\n<h2 id=\"atomicreference-\">AtomicReference源码分析</h2>\n<pre><code class=\"language-java\">public class AtomicReference&lt;V&gt; implements java.io.Serializable {\n    private static final long serialVersionUID = -1848883965231344442L;\n\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicReference.class.getDeclaredField(&quot;value&quot;));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n    // volatile类型\n    private volatile V value;\n\n    public AtomicReference(V initialValue) {\n        value = initialValue;\n    }\n\n    public AtomicReference() {\n    }\n\n    public final V get() {\n        return value;\n    }\n\n    public final void set(V newValue) {\n        value = newValue;\n    }\n\n    public final void lazySet(V newValue) {\n        unsafe.putOrderedObject(this, valueOffset, newValue);\n    }\n\n    public final boolean compareAndSet(V expect, V update) {\n        return unsafe.compareAndSwapObject(this, valueOffset, expect, update);\n    }\n\n    public final boolean weakCompareAndSet(V expect, V update) {\n        return unsafe.compareAndSwapObject(this, valueOffset, expect, update);\n    }\n\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public final V getAndSet(V newValue) {\n        return (V)unsafe.getAndSetObject(this, valueOffset, newValue);\n    }\n\n    public final V getAndUpdate(UnaryOperator&lt;V&gt; updateFunction) {\n        V prev, next;\n        do {\n            prev = get();\n            next = updateFunction.apply(prev);\n        } while (!compareAndSet(prev, next));\n        return prev;\n    }\n\n    public final V updateAndGet(UnaryOperator&lt;V&gt; updateFunction) {\n        V prev, next;\n        do {\n            prev = get();\n            next = updateFunction.apply(prev);\n        } while (!compareAndSet(prev, next));\n        return next;\n    }\n\n    public final V getAndAccumulate(V x,\n                                    BinaryOperator&lt;V&gt; accumulatorFunction) {\n        V prev, next;\n        do {\n            prev = get();\n            next = accumulatorFunction.apply(prev, x);\n        } while (!compareAndSet(prev, next));\n        return prev;\n    }\n\n    public final V accumulateAndGet(V x,\n                                    BinaryOperator&lt;V&gt; accumulatorFunction) {\n        V prev, next;\n        do {\n            prev = get();\n            next = accumulatorFunction.apply(prev, x);\n        } while (!compareAndSet(prev, next));\n        return next;\n    }\n\n    public String toString() {\n        return String.valueOf(get());\n    }\n\n}</code></pre>\n<p>说明：\nAtomicReference的源码比较简单。它是通过&quot;volatile&quot;和&quot;Unsafe提供的CAS函数实现&quot;原子操作。</p>\n<ol>\n<li>value是volatile类型。这保证了：当某线程修改value的值时，其他线程看到的value值都是最新的value值，即修改之后的volatile的值。</li>\n<li>通过CAS设置value。这保证了：当某线程池通过CAS函数(如compareAndSet函数)设置value时，它的操作是原子的，即线程在操作value时不会被中断。</li>\n</ol>\n<h2 id=\"atomicreference-\">AtomicReference示例</h2>\n<pre><code class=\"language-java\">class Person {\n    volatile long id;\n    public Person(long id) {\n        this.id = id;\n    }\n    @Override\n    public String toString() {\n        return &quot;id:&quot;+id;\n    }\n}\npublic class AtomicReferenceTest {\n    public static void main(String[] args) {\n        // 创建两个Person对象，它们的id分别是101和102。\n        Person p1 = new Person(101);\n        Person p2 = new Person(102);\n        // 新建AtomicReference对象，初始化它的值为p1对象\n        AtomicReference ar = new AtomicReference(p1);\n        // 通过CAS设置ar。如果ar的值为p1的话，则将其设置为p2。\n        ar.compareAndSet(p1, p2);\n\n        Person p3 = (Person)ar.get();\n        System.out.println(&quot;p3 is &quot;+p3);\n        System.out.println(&quot;p3.equals(p1)=&quot;+p3.equals(p1));\n    }\n}\n\n</code></pre>\n<p>运行结果如下：</p>\n<pre><code class=\"language-shell\">p3 is id:102\np3.equals(p1)=false\n</code></pre>\n',21,0,2,NULL,'2019-08-04 03:48:59','2019-08-04 03:56:04',0,'9,14,33',1,0),(29,'Java多线程JUC原子类04——AtomicStampedReference','在AtomicReference的基础上带有版本号的原子引用类型。该类将整数值与引用关联起来，可用于更新原子数据和数据的版本号，可以解决使用CAS进行原子更新时，可能出现的ABA问题。','Bobbi','## AtomicStampedReference介绍\n在AtomicReference的基础上带有版本号的原子引用类型。该类将整数值与引用关联起来，可用于更新原子数据和数据的版本号，可以解决使用CAS进行原子更新时，可能出现的ABA问题。\n### ABA问题\n1. 从之前的原子类型可以发现，CAS实现的过程是先取出内存中某时刻的数据，在下一时刻比较并替换，那么在这个时间差会导致数据的变化，此时就会导致出现“ABA”问题。 \n2. 什么是”ABA”问题？ \n比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后one操作成功。 \n\n尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的，很多业务场景很复杂，有些时候是需要记录线程one的A是否有修改过的\n\n## AtomicStampedReference源码分析\nAtomicStampedReference 本质是有一个int 值作为版本号，每次更改前先取到这个int值的版本号，等到修改的时候，比较当前版本号与当前线程持有的版本号是否一致，如果一致，则进行修改，并将版本号+1（当然加多少或减多少都是可以自己定义的\n\n这里看下主要的compareAndSet源码\n```java\n public boolean compareAndSet(V   expectedReference,\n                                 V   newReference,\n                                 int expectedStamp,\n                                 int newStamp) {\n        Pair<V> current = pair;\n        return\n            expectedReference == current.reference &&\n            expectedStamp == current.stamp &&\n            ((newReference == current.reference &&\n              newStamp == current.stamp) ||\n             casPair(current, Pair.of(newReference, newStamp)));\n    }\n\n```\n\n如源码：如果当前引用等于预期引用并且当前戳记版本等于预期戳记，则以原子方式将引用和戳记的值设置为给定的更新值。\n\n## AtomicStampedReference示例\n\n```java\npublic class AtomicStampReferenceTest {\n    static AtomicReference<Integer> atomicReference = new AtomicReference<>(100);\n    // 参数一：原子类，参数二：版本号\n    static AtomicStampedReference<Integer> atomicStampedReference = new AtomicStampedReference<>(100,0);\n\n    public static void main(String[] args) {\n        System.out.println(\"======ABA=====\");\n        System.out.println(\"一开始的值：\"+atomicReference.get());\n        new Thread(() -> {\n            atomicReference.compareAndSet(100,101);\n            atomicReference.compareAndSet(101,100);\n        }).start();\n        System.out.println(\"AB后的值：\"+atomicReference.get());\n        new Thread(() -> {\n            System.out.println(\"CAS更新情况：\"+atomicReference.compareAndSet(100,2019)+\" \"+atomicReference.get());\n        }).start();\n\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"======AtomicStampedReference解决ABA问题======\");\n        int stamp = atomicStampedReference.getStamp();\n        new Thread(() -> {\n            System.out.println(\"第一次版本号：\"+atomicStampedReference.getStamp());\n            atomicStampedReference.compareAndSet(100,101,atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+1);\n            System.out.println(\"第二次版本号：\"+atomicStampedReference.getStamp());\n            atomicStampedReference.compareAndSet(101,100,atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+1);\n            System.out.println(\"第三次版本号：\"+atomicStampedReference.getStamp());\n        }).start();\n\n        new Thread(() -> {\n            System.out.println(\"CAS更新情况：\"+atomicStampedReference.compareAndSet(100,2019,stamp,stamp+1)+\" \"+atomicStampedReference.getReference());\n        }).start();\n\n    }\n\n}\n\n```\n运行结果:\n```shell\n======ABA=====\n一开始的值：100\nAB后的值：100\nCAS更新情况：true 2019\n======AtomicStampedReference解决ABA问题======\n第一次版本号：0\n第二次版本号：1\n第三次版本号：2\nCAS更新情况：false 100\n\n```\n结果说明：\n1. ABA问题：线程A将100更新为101，再将101更新为100。线程B此时更新100为2019，更新成功，出现ABA问题。\n2. AtomicStampedReference ：创建初始值为100，版本号为0的AtomicStampedReference。线程A将100更新为101，再将101更新为100，此时版本号从0->1->2。线程B此时更新100为2019，但是传入的版本号期望值(0)与当前内存中的版本号(2)不一致，故更新失败。\n\n\n','<h2 id=\"atomicstampedreference-\">AtomicStampedReference介绍</h2>\n<p>在AtomicReference的基础上带有版本号的原子引用类型。该类将整数值与引用关联起来，可用于更新原子数据和数据的版本号，可以解决使用CAS进行原子更新时，可能出现的ABA问题。</p>\n<h3 id=\"aba-\">ABA问题</h3>\n<ol>\n<li>从之前的原子类型可以发现，CAS实现的过程是先取出内存中某时刻的数据，在下一时刻比较并替换，那么在这个时间差会导致数据的变化，此时就会导致出现“ABA”问题。 </li>\n<li>什么是”ABA”问题？ \n比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后one操作成功。 </li>\n</ol>\n<p>尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的，很多业务场景很复杂，有些时候是需要记录线程one的A是否有修改过的</p>\n<h2 id=\"atomicstampedreference-\">AtomicStampedReference源码分析</h2>\n<p>AtomicStampedReference 本质是有一个int 值作为版本号，每次更改前先取到这个int值的版本号，等到修改的时候，比较当前版本号与当前线程持有的版本号是否一致，如果一致，则进行修改，并将版本号+1（当然加多少或减多少都是可以自己定义的</p>\n<p>这里看下主要的compareAndSet源码</p>\n<pre><code class=\"language-java\"> public boolean compareAndSet(V   expectedReference,\n                                 V   newReference,\n                                 int expectedStamp,\n                                 int newStamp) {\n        Pair&lt;V&gt; current = pair;\n        return\n            expectedReference == current.reference &amp;&amp;\n            expectedStamp == current.stamp &amp;&amp;\n            ((newReference == current.reference &amp;&amp;\n              newStamp == current.stamp) ||\n             casPair(current, Pair.of(newReference, newStamp)));\n    }\n</code></pre>\n<p>如源码：如果当前引用等于预期引用并且当前戳记版本等于预期戳记，则以原子方式将引用和戳记的值设置为给定的更新值。</p>\n<h2 id=\"atomicstampedreference-\">AtomicStampedReference示例</h2>\n<pre><code class=\"language-java\">public class AtomicStampReferenceTest {\n    static AtomicReference&lt;Integer&gt; atomicReference = new AtomicReference&lt;&gt;(100);\n    // 参数一：原子类，参数二：版本号\n    static AtomicStampedReference&lt;Integer&gt; atomicStampedReference = new AtomicStampedReference&lt;&gt;(100,0);\n\n    public static void main(String[] args) {\n        System.out.println(&quot;======ABA=====&quot;);\n        System.out.println(&quot;一开始的值：&quot;+atomicReference.get());\n        new Thread(() -&gt; {\n            atomicReference.compareAndSet(100,101);\n            atomicReference.compareAndSet(101,100);\n        }).start();\n        System.out.println(&quot;AB后的值：&quot;+atomicReference.get());\n        new Thread(() -&gt; {\n            System.out.println(&quot;CAS更新情况：&quot;+atomicReference.compareAndSet(100,2019)+&quot; &quot;+atomicReference.get());\n        }).start();\n\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(&quot;======AtomicStampedReference解决ABA问题======&quot;);\n        int stamp = atomicStampedReference.getStamp();\n        new Thread(() -&gt; {\n            System.out.println(&quot;第一次版本号：&quot;+atomicStampedReference.getStamp());\n            atomicStampedReference.compareAndSet(100,101,atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+1);\n            System.out.println(&quot;第二次版本号：&quot;+atomicStampedReference.getStamp());\n            atomicStampedReference.compareAndSet(101,100,atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+1);\n            System.out.println(&quot;第三次版本号：&quot;+atomicStampedReference.getStamp());\n        }).start();\n\n        new Thread(() -&gt; {\n            System.out.println(&quot;CAS更新情况：&quot;+atomicStampedReference.compareAndSet(100,2019,stamp,stamp+1)+&quot; &quot;+atomicStampedReference.getReference());\n        }).start();\n\n    }\n\n}\n</code></pre>\n<p>运行结果:</p>\n<pre><code class=\"language-shell\">======ABA=====\n一开始的值：100\nAB后的值：100\nCAS更新情况：true 2019\n======AtomicStampedReference解决ABA问题======\n第一次版本号：0\n第二次版本号：1\n第三次版本号：2\nCAS更新情况：false 100\n</code></pre>\n<p>结果说明：</p>\n<ol>\n<li>ABA问题：线程A将100更新为101，再将101更新为100。线程B此时更新100为2019，更新成功，出现ABA问题。</li>\n<li>AtomicStampedReference ：创建初始值为100，版本号为0的AtomicStampedReference。线程A将100更新为101，再将101更新为100，此时版本号从0-&gt;1-&gt;2。线程B此时更新100为2019，但是传入的版本号期望值(0)与当前内存中的版本号(2)不一致，故更新失败。</li>\n</ol>\n',38,6,2,NULL,'2019-08-04 07:38:29','2019-08-04 07:38:29',0,'9,14,33',1,0),(30,'Java多线程JUC原子类05——AtomicLongFieldUpdater','AtomicLongFieldUpdater可以对指定\"类的 \'volatile long\'类型的成员\"进行原子更新。它是基于反射原理实现的','Bobbi','## AtomicLongFieldUpdater介绍\nAtomicLongFieldUpdater可以对指定\"类的 \'volatile long\'类型的成员\"进行原子更新。它是基于反射原理实现的。\n\n## AtomicLongFieldUpdater函数列表\n```java\n// 受保护的无操作构造方法，供子类使用。\nprotected AtomicLongFieldUpdater()\n// 以原子方式将给定值添加到此更新器管理的给定对象的字段的当前值。\nlong addAndGet(T obj, long delta)\n// 如果当前值 == 预期值，则以原子方式将此更新器所管理的给定对象的字段设置为给定的更新值。\nabstract boolean compareAndSet(T obj, long expect, long update)\n// 以原子方式将此更新器管理的给定对象字段当前值减 1。\nlong decrementAndGet(T obj)\n// 获取此更新器管理的在给定对象的字段中保持的当前值。\nabstract long get(T obj)\n// 以原子方式将给定值添加到此更新器管理的给定对象的字段的当前值。\nlong getAndAdd(T obj, long delta)\n// 以原子方式将此更新器管理的给定对象字段当前值减 1。\nlong getAndDecrement(T obj)\n// 以原子方式将此更新器管理的给定对象字段的当前值加 1。\nlong getAndIncrement(T obj)\n// 将此更新器管理的给定对象的字段以原子方式设置为给定值，并返回旧值。\nlong getAndSet(T obj, long newValue)\n// 以原子方式将此更新器管理的给定对象字段当前值加 1。\nlong incrementAndGet(T obj)\n// 最后将此更新器管理的给定对象的字段设置为给定更新值。\nabstract void lazySet(T obj, long newValue)\n// 为对象创建并返回一个具有给定字段的更新器。\nstatic <U> AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass, String fieldName)\n// 将此更新器管理的给定对象的字段设置为给定更新值。\nabstract void set(T obj, long newValue)\n// 如果当前值 == 预期值，则以原子方式将此更新器所管理的给定对象的字段设置为给定的更新值。\nabstract boolean weakCompareAndSet(T obj, long expect, long update)\n```\n## AtomicLongFieldUpdater示例\n```java\nclass Person {\n    volatile long id;\n    public Person(long id) {\n        this.id = id;\n    }\n    public void setId(long id) {\n        this.id = id;\n    }\n    public long getId() {\n        return id;\n    }\n}\npublic class AtomicLongFieldUpdaterTest {\n    public static void main(String[] args) {\n        // 新建AtomicLongFieldUpdater对象，传递参数是“class对象”和“long类型在类中对应的名称”\n        AtomicLongFieldUpdater mAtoLong = AtomicLongFieldUpdater.newUpdater(Person.class, \"id\");\n        Person person = new Person(12345678L);\n\n        // 比较person的\"id\"属性，如果id的值为12345678L，则设置为1000。\n        mAtoLong.compareAndSet(person, 12345678L, 1000);\n        System.out.println(\"id=\"+person.getId());\n    }\n}\n```\n运行结果：\n```shell\nid=1000\n```\n\n\n### 下面分析AtomicLongFieldUpdaterTest.java的流程。\n\n1、newUpdater()\nnewUpdater()的源码如下：\n```java\npublic static <U> AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass,\n                                                           String fieldName) {\n        Class<?> caller = Reflection.getCallerClass();\n        if (AtomicLong.VM_SUPPORTS_LONG_CAS)\n            return new CASUpdater<U>(tclass, fieldName, caller);\n        else\n            return new LockedUpdater<U>(tclass, fieldName, caller);\n    }\n```\n说明：newUpdater()的作用是获取一个AtomicIntegerFieldUpdater类型的对象。\n它实际上返回的是CASUpdater对象，或者LockedUpdater对象；具体返回哪一个类取决于JVM是否支持long类型的CAS函数。CASUpdater和LockedUpdater都是AtomicIntegerFieldUpdater的子类，这两个类的实现区别在于：在做各类更新操作的时候，CASUpdater使用的是CAS方式，而LockedUpdater使用的是粗暴的synchronized加锁方式。 下面是CASUpdater\n\n2、CASUpdater类的源码如下：\n\n```java\n public final boolean compareAndSet(T obj, long expect, long update) {\n            accessCheck(obj);\n            return U.compareAndSwapLong(obj, offset, expect, update);\n        }\n```\n说明：它实际上是通过CAS函数操作。如果类的long对象的值是expect，则设置它的值为update。 ','<h2 id=\"atomiclongfieldupdater-\">AtomicLongFieldUpdater介绍</h2>\n<p>AtomicLongFieldUpdater可以对指定&quot;类的 &#39;volatile long&#39;类型的成员&quot;进行原子更新。它是基于反射原理实现的。</p>\n<h2 id=\"atomiclongfieldupdater-\">AtomicLongFieldUpdater函数列表</h2>\n<pre><code class=\"language-java\">// 受保护的无操作构造方法，供子类使用。\nprotected AtomicLongFieldUpdater()\n// 以原子方式将给定值添加到此更新器管理的给定对象的字段的当前值。\nlong addAndGet(T obj, long delta)\n// 如果当前值 == 预期值，则以原子方式将此更新器所管理的给定对象的字段设置为给定的更新值。\nabstract boolean compareAndSet(T obj, long expect, long update)\n// 以原子方式将此更新器管理的给定对象字段当前值减 1。\nlong decrementAndGet(T obj)\n// 获取此更新器管理的在给定对象的字段中保持的当前值。\nabstract long get(T obj)\n// 以原子方式将给定值添加到此更新器管理的给定对象的字段的当前值。\nlong getAndAdd(T obj, long delta)\n// 以原子方式将此更新器管理的给定对象字段当前值减 1。\nlong getAndDecrement(T obj)\n// 以原子方式将此更新器管理的给定对象字段的当前值加 1。\nlong getAndIncrement(T obj)\n// 将此更新器管理的给定对象的字段以原子方式设置为给定值，并返回旧值。\nlong getAndSet(T obj, long newValue)\n// 以原子方式将此更新器管理的给定对象字段当前值加 1。\nlong incrementAndGet(T obj)\n// 最后将此更新器管理的给定对象的字段设置为给定更新值。\nabstract void lazySet(T obj, long newValue)\n// 为对象创建并返回一个具有给定字段的更新器。\nstatic &lt;U&gt; AtomicLongFieldUpdater&lt;U&gt; newUpdater(Class&lt;U&gt; tclass, String fieldName)\n// 将此更新器管理的给定对象的字段设置为给定更新值。\nabstract void set(T obj, long newValue)\n// 如果当前值 == 预期值，则以原子方式将此更新器所管理的给定对象的字段设置为给定的更新值。\nabstract boolean weakCompareAndSet(T obj, long expect, long update)</code></pre>\n<h2 id=\"atomiclongfieldupdater-\">AtomicLongFieldUpdater示例</h2>\n<pre><code class=\"language-java\">class Person {\n    volatile long id;\n    public Person(long id) {\n        this.id = id;\n    }\n    public void setId(long id) {\n        this.id = id;\n    }\n    public long getId() {\n        return id;\n    }\n}\npublic class AtomicLongFieldUpdaterTest {\n    public static void main(String[] args) {\n        // 新建AtomicLongFieldUpdater对象，传递参数是“class对象”和“long类型在类中对应的名称”\n        AtomicLongFieldUpdater mAtoLong = AtomicLongFieldUpdater.newUpdater(Person.class, &quot;id&quot;);\n        Person person = new Person(12345678L);\n\n        // 比较person的&quot;id&quot;属性，如果id的值为12345678L，则设置为1000。\n        mAtoLong.compareAndSet(person, 12345678L, 1000);\n        System.out.println(&quot;id=&quot;+person.getId());\n    }\n}</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">id=1000</code></pre>\n<h3 id=\"-atomiclongfieldupdatertest-java-\">下面分析AtomicLongFieldUpdaterTest.java的流程。</h3>\n<p>1、newUpdater()\nnewUpdater()的源码如下：</p>\n<pre><code class=\"language-java\">public static &lt;U&gt; AtomicLongFieldUpdater&lt;U&gt; newUpdater(Class&lt;U&gt; tclass,\n                                                           String fieldName) {\n        Class&lt;?&gt; caller = Reflection.getCallerClass();\n        if (AtomicLong.VM_SUPPORTS_LONG_CAS)\n            return new CASUpdater&lt;U&gt;(tclass, fieldName, caller);\n        else\n            return new LockedUpdater&lt;U&gt;(tclass, fieldName, caller);\n    }</code></pre>\n<p>说明：newUpdater()的作用是获取一个AtomicIntegerFieldUpdater类型的对象。\n它实际上返回的是CASUpdater对象，或者LockedUpdater对象；具体返回哪一个类取决于JVM是否支持long类型的CAS函数。CASUpdater和LockedUpdater都是AtomicIntegerFieldUpdater的子类，这两个类的实现区别在于：在做各类更新操作的时候，CASUpdater使用的是CAS方式，而LockedUpdater使用的是粗暴的synchronized加锁方式。 下面是CASUpdater</p>\n<p>2、CASUpdater类的源码如下：</p>\n<pre><code class=\"language-java\"> public final boolean compareAndSet(T obj, long expect, long update) {\n            accessCheck(obj);\n            return U.compareAndSwapLong(obj, offset, expect, update);\n        }</code></pre>\n<p>说明：它实际上是通过CAS函数操作。如果类的long对象的值是expect，则设置它的值为update。 </p>\n',71,29,2,NULL,'2019-08-04 08:45:04','2019-08-20 14:50:48',0,'9,14,33',1,0),(31,'Java多线程JUC锁01——JUC锁框架','根据锁添加到Java中的时间，Java中的锁，可以分为“同步锁”和“JUC锁”','Bobbi','根据锁的添加到Java中的时间，Java中的锁，可以分为\"同步锁\"和\"JUC包中的锁\"。\n## 同步锁\n即通过synchronized关键字来进行同步，实现对竞争资源的互斥访问的锁。Java 1.0版本中就已经支持同步锁了。\n\n同步锁的原理是，对于每一个对象，有且仅有一个同步锁；不同的线程能够共同访问该同步锁，但是在一个时间点只有一个线程能获取该锁。这样，获取到锁的线程能够进行CPU调度，从而在CPU上执行。而没有获得到锁的线程，必须进行等待，直到获取到同步锁才能继续运行。这就是多线程通过同步锁进行同步的原理。\n## JUC包中的锁\n相比同步锁，JUC包中的锁的功能更加强大，它为锁提供了一个框架，该框架允许更灵活地使用锁，只是它的用法更难罢了。\n\nJUC包中的锁，包括：Lock接口，ReadWriteLock接口，LockSupport阻塞原语，Condition条件，AbstractOwnableSynchronizer/AbstractQueuedSynchronizer/AbstractQueuedLongSynchronizer三个抽象类，ReentrantLock独占锁，ReentrantReadWriteLock读写锁。由于CountDownLatch，CyclicBarrier和Semaphore也是通过AQS来实现的；因此，我也将它们归纳到锁的框架中进行介绍。\n\n![image.png](http://oss.dblearn.cn/dbblog/20190817/67b7445b1f9d437ca750a1b16d45d534.png)\n\n## 1. Lock接口\n\nJUC包中的Lock接口支持语义不同（重入、公平等）的锁规则。所谓语义不同，是指锁可是有公平机制的锁、非公平机制的锁、可重入的锁等等。公平机制是指不同线程获取锁的机制是公平的，而非公平机制则是指不同线程获取锁的机制是非公平的，可重入锁是指同一个锁能够被一个线程多次获取。Lock接口有如下方法：\n```java\npublic interface Lock {\n    /**\n     * Acquires the lock. 获得锁\n     */\n    void lock();\n\n    /**\n     * 获取锁，可被中断\n     */\n    void lockInterruptibly() throws InterruptedException;\n\n    /**\n     * 尝试获取锁\n     */\n    boolean tryLock();\n\n    /**\n     * 尝试获取锁，time是超时时间，unit是时间单位\n     */\n    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;\n\n    /**\n     * 释放锁\n     */\n    void unlock();\n\n    /**\n     * 获取锁的Confition状态示例\n     */\n    Condition newCondition();\n}\n\n```\n## 2. ReadWriteLock\nReadWriteLock 接口以和Lock类似的方式定义了一些读取者可以共享而写入者独占的锁。JUC包只有一个类实现了该接口，即 ReentrantReadWriteLock，因为它适用于大部分的标准用法上下文。但程序员可以创建自己的、适用于非标准要求的实现。\n```java\npublic interface ReadWriteLock {\n    /**\n     * Returns the lock used for reading.\n     */\n    Lock readLock();\n\n    /**\n     * Returns the lock used for writing.\n     */\n    Lock writeLock();\n}\n```\n## 3. AbstractQueuedSynchronizer\nAbstractQueuedSynchronizer就是被称之为AQS的类，它是一个非常有用的超类，可用来定义锁以及依赖于排队阻塞线程的其他同步器；ReentrantLock，ReentrantReadWriteLock，CountDownLatch，CyclicBarrier和Semaphore等这些类都是基于AQS类实现的。AbstractQueuedLongSynchronizer 类提供相同的功能但扩展了对同步状态的 64 位的支持。两者都扩展了类 AbstractOwnableSynchronizer（一个帮助记录当前保持独占同步的线程的简单类）。\n\n## 4. LockSupport\nLockSupport提供“创建锁”和“其他同步类的基本线程阻塞原语”。 \n\nLockSupport的功能和\"Thread中的Thread.suspend()和Thread.resume()有点类似\"，LockSupport中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程。但是park()和unpark()不会遇到“Thread.suspend 和 Thread.resume所可能引发的死锁”问题。\n\n## 5. Condition\nCondition需要和Lock联合使用，它的作用是代替Object监视器方法，可以通过await(),signal()来休眠/唤醒线程。\nCondition 接口描述了可能会与锁有关联的条件变量。这些变量在用法上与使用 Object.wait()访问的隐式监视器类似，但提供了更强大的功能。需要特别指出的是，单个 Lock 可能与多个 Condition 对象关联。为了避免兼容性问题，Condition 方法的名称与对应的 Object 版本中的不同。\n\n## 6. ReentrantLock\nReentrantLock是独占锁。所谓独占锁，是指只能被独自占领，即同一个时间点只能被一个线程获取到锁。ReentrantLock锁包括“公平的ReentrantLock”和“非公平的ReentrantLock”。“公平的ReentrantLock”是指不同线程获取到锁的机制是公平的。而“非公平的ReentrantLock”是指不同线程获取到锁的机制是非公平的。ReentrantLock是“可重入的锁”\n\nReentrantLock的UML如下：\n![image.png](http://oss.dblearn.cn/dbblog/20190818/128e4c4980af4af0a6806afb53119199.png)\n\n1. ReentrantLock实现了Lock接口。\n2. ReentrantLock中有一个成员变量sync，sync是Sync类型；Sync是一个抽象类，而且它继承于AQS。\n3. ReentrantLock中有\"公平锁类\"FairSync和\"非公平锁类\"NonfairSync，它们都是Sync的子类。ReentrantReadWriteLock中sync对象，是FairSync与NonfairSync中的一种，这也意味着ReentrantLock是\"公平锁\"或\"非公平锁\"中的一种，ReentrantLock默认是非公平锁。\n\n\n## 7. ReentrantReadWriteLock\nReentrantReadWriteLock是读写锁接口ReadWriteLock的实现类，它包括子类ReadLock和WriteLock。ReentrantLock是共享锁，而WriteLock是独占锁。\n\nReentrantReadWriteLock的UML类图如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190818/185a555d36cd482da0bd3850739863f3.png)\n\n1. ReentrantReadWriteLock实现了ReadWriteLock接口。\n2. ReentrantReadWriteLock中包含sync对象，读锁readerLock和写锁writerLock。读锁ReadLock和写锁WriteLock都实现了Lock接口。\n3. 和\"ReentrantLock\"一样，sync是Sync类型；而且，Sync也是一个继承于AQS的抽象类。Sync也包括\"公平锁\"FairSync和\"非公平锁\"NonfairSync。\n\n## 8. CountDownLatch\nCountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。 \n\nCountDownLatch的UML类图如下：\n![image.png](http://oss.dblearn.cn/dbblog/20190818/7a58c75b879440a48e896fedbc12fb57.png)\n\nCountDownLatch包含了sync对象，sync是Sync类型。CountDownLatch的Sync是实例类，它继承于AQS。\n\n## 9.CyclicBarrier\nCyclicBarrier是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。\n\nCyclicBarrier的UML类图如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190818/98942854eef24dfaafb5be8147a09344.png)\n\nCyclicBarrier是包含了\"ReentrantLock对象lock\"和\"Condition对象trip\"，它是通过独占锁实现的。\n### CyclicBarrier和CountDownLatch的区别是：\n1. CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待。\n2.  CountDownLatch的计数器无法被重置；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier。\n\n## 10. Semaphore\nSemaphore是一个计数信号量，它的本质是一个\"共享锁\"。\n\n信号量维护了一个信号量许可集。线程可以通过调用acquire()来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过release()来释放它所持有的信号量许可。\n\nSemaphore的UML类图如下：\n![image.png](http://oss.dblearn.cn/dbblog/20190818/83ae38c8d23c4bdbb6b2155733383d3f.png)\n\n和\"ReentrantLock\"一样，Semaphore包含了sync对象，sync是Sync类型；而且，Sync也是一个继承于AQS的抽象类。Sync也包括\"公平信号量\"FairSync和\"非公平信号量\"NonfairSync。','<p>根据锁的添加到Java中的时间，Java中的锁，可以分为&quot;同步锁&quot;和&quot;JUC包中的锁&quot;。</p>\n<h2 id=\"-\">同步锁</h2>\n<p>即通过synchronized关键字来进行同步，实现对竞争资源的互斥访问的锁。Java 1.0版本中就已经支持同步锁了。</p>\n<p>同步锁的原理是，对于每一个对象，有且仅有一个同步锁；不同的线程能够共同访问该同步锁，但是在一个时间点只有一个线程能获取该锁。这样，获取到锁的线程能够进行CPU调度，从而在CPU上执行。而没有获得到锁的线程，必须进行等待，直到获取到同步锁才能继续运行。这就是多线程通过同步锁进行同步的原理。</p>\n<h2 id=\"juc-\">JUC包中的锁</h2>\n<p>相比同步锁，JUC包中的锁的功能更加强大，它为锁提供了一个框架，该框架允许更灵活地使用锁，只是它的用法更难罢了。</p>\n<p>JUC包中的锁，包括：Lock接口，ReadWriteLock接口，LockSupport阻塞原语，Condition条件，AbstractOwnableSynchronizer/AbstractQueuedSynchronizer/AbstractQueuedLongSynchronizer三个抽象类，ReentrantLock独占锁，ReentrantReadWriteLock读写锁。由于CountDownLatch，CyclicBarrier和Semaphore也是通过AQS来实现的；因此，我也将它们归纳到锁的框架中进行介绍。</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190817/67b7445b1f9d437ca750a1b16d45d534.png\" alt=\"image.png\"></p>\n<h2 id=\"1-lock-\">1. Lock接口</h2>\n<p>JUC包中的Lock接口支持语义不同（重入、公平等）的锁规则。所谓语义不同，是指锁可是有公平机制的锁、非公平机制的锁、可重入的锁等等。公平机制是指不同线程获取锁的机制是公平的，而非公平机制则是指不同线程获取锁的机制是非公平的，可重入锁是指同一个锁能够被一个线程多次获取。Lock接口有如下方法：</p>\n<pre><code class=\"language-java\">public interface Lock {\n    /**\n     * Acquires the lock. 获得锁\n     */\n    void lock();\n\n    /**\n     * 获取锁，可被中断\n     */\n    void lockInterruptibly() throws InterruptedException;\n\n    /**\n     * 尝试获取锁\n     */\n    boolean tryLock();\n\n    /**\n     * 尝试获取锁，time是超时时间，unit是时间单位\n     */\n    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;\n\n    /**\n     * 释放锁\n     */\n    void unlock();\n\n    /**\n     * 获取锁的Confition状态示例\n     */\n    Condition newCondition();\n}\n</code></pre>\n<h2 id=\"2-readwritelock\">2. ReadWriteLock</h2>\n<p>ReadWriteLock 接口以和Lock类似的方式定义了一些读取者可以共享而写入者独占的锁。JUC包只有一个类实现了该接口，即 ReentrantReadWriteLock，因为它适用于大部分的标准用法上下文。但程序员可以创建自己的、适用于非标准要求的实现。</p>\n<pre><code class=\"language-java\">public interface ReadWriteLock {\n    /**\n     * Returns the lock used for reading.\n     */\n    Lock readLock();\n\n    /**\n     * Returns the lock used for writing.\n     */\n    Lock writeLock();\n}</code></pre>\n<h2 id=\"3-abstractqueuedsynchronizer\">3. AbstractQueuedSynchronizer</h2>\n<p>AbstractQueuedSynchronizer就是被称之为AQS的类，它是一个非常有用的超类，可用来定义锁以及依赖于排队阻塞线程的其他同步器；ReentrantLock，ReentrantReadWriteLock，CountDownLatch，CyclicBarrier和Semaphore等这些类都是基于AQS类实现的。AbstractQueuedLongSynchronizer 类提供相同的功能但扩展了对同步状态的 64 位的支持。两者都扩展了类 AbstractOwnableSynchronizer（一个帮助记录当前保持独占同步的线程的简单类）。</p>\n<h2 id=\"4-locksupport\">4. LockSupport</h2>\n<p>LockSupport提供“创建锁”和“其他同步类的基本线程阻塞原语”。 </p>\n<p>LockSupport的功能和&quot;Thread中的Thread.suspend()和Thread.resume()有点类似&quot;，LockSupport中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程。但是park()和unpark()不会遇到“Thread.suspend 和 Thread.resume所可能引发的死锁”问题。</p>\n<h2 id=\"5-condition\">5. Condition</h2>\n<p>Condition需要和Lock联合使用，它的作用是代替Object监视器方法，可以通过await(),signal()来休眠/唤醒线程。\nCondition 接口描述了可能会与锁有关联的条件变量。这些变量在用法上与使用 Object.wait()访问的隐式监视器类似，但提供了更强大的功能。需要特别指出的是，单个 Lock 可能与多个 Condition 对象关联。为了避免兼容性问题，Condition 方法的名称与对应的 Object 版本中的不同。</p>\n<h2 id=\"6-reentrantlock\">6. ReentrantLock</h2>\n<p>ReentrantLock是独占锁。所谓独占锁，是指只能被独自占领，即同一个时间点只能被一个线程获取到锁。ReentrantLock锁包括“公平的ReentrantLock”和“非公平的ReentrantLock”。“公平的ReentrantLock”是指不同线程获取到锁的机制是公平的。而“非公平的ReentrantLock”是指不同线程获取到锁的机制是非公平的。ReentrantLock是“可重入的锁”</p>\n<p>ReentrantLock的UML如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190818/128e4c4980af4af0a6806afb53119199.png\" alt=\"image.png\"></p>\n<ol>\n<li>ReentrantLock实现了Lock接口。</li>\n<li>ReentrantLock中有一个成员变量sync，sync是Sync类型；Sync是一个抽象类，而且它继承于AQS。</li>\n<li>ReentrantLock中有&quot;公平锁类&quot;FairSync和&quot;非公平锁类&quot;NonfairSync，它们都是Sync的子类。ReentrantReadWriteLock中sync对象，是FairSync与NonfairSync中的一种，这也意味着ReentrantLock是&quot;公平锁&quot;或&quot;非公平锁&quot;中的一种，ReentrantLock默认是非公平锁。</li>\n</ol>\n<h2 id=\"7-reentrantreadwritelock\">7. ReentrantReadWriteLock</h2>\n<p>ReentrantReadWriteLock是读写锁接口ReadWriteLock的实现类，它包括子类ReadLock和WriteLock。ReentrantLock是共享锁，而WriteLock是独占锁。</p>\n<p>ReentrantReadWriteLock的UML类图如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190818/185a555d36cd482da0bd3850739863f3.png\" alt=\"image.png\"></p>\n<ol>\n<li>ReentrantReadWriteLock实现了ReadWriteLock接口。</li>\n<li>ReentrantReadWriteLock中包含sync对象，读锁readerLock和写锁writerLock。读锁ReadLock和写锁WriteLock都实现了Lock接口。</li>\n<li>和&quot;ReentrantLock&quot;一样，sync是Sync类型；而且，Sync也是一个继承于AQS的抽象类。Sync也包括&quot;公平锁&quot;FairSync和&quot;非公平锁&quot;NonfairSync。</li>\n</ol>\n<h2 id=\"8-countdownlatch\">8. CountDownLatch</h2>\n<p>CountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。 </p>\n<p>CountDownLatch的UML类图如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190818/7a58c75b879440a48e896fedbc12fb57.png\" alt=\"image.png\"></p>\n<p>CountDownLatch包含了sync对象，sync是Sync类型。CountDownLatch的Sync是实例类，它继承于AQS。</p>\n<h2 id=\"9-cyclicbarrier\">9.CyclicBarrier</h2>\n<p>CyclicBarrier是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。</p>\n<p>CyclicBarrier的UML类图如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190818/98942854eef24dfaafb5be8147a09344.png\" alt=\"image.png\"></p>\n<p>CyclicBarrier是包含了&quot;ReentrantLock对象lock&quot;和&quot;Condition对象trip&quot;，它是通过独占锁实现的。</p>\n<h3 id=\"cyclicbarrier-countdownlatch-\">CyclicBarrier和CountDownLatch的区别是：</h3>\n<ol>\n<li>CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待。</li>\n<li>CountDownLatch的计数器无法被重置；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier。</li>\n</ol>\n<h2 id=\"10-semaphore\">10. Semaphore</h2>\n<p>Semaphore是一个计数信号量，它的本质是一个&quot;共享锁&quot;。</p>\n<p>信号量维护了一个信号量许可集。线程可以通过调用acquire()来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过release()来释放它所持有的信号量许可。</p>\n<p>Semaphore的UML类图如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190818/83ae38c8d23c4bdbb6b2155733383d3f.png\" alt=\"image.png\"></p>\n<p>和&quot;ReentrantLock&quot;一样，Semaphore包含了sync对象，sync是Sync类型；而且，Sync也是一个继承于AQS的抽象类。Sync也包括&quot;公平信号量&quot;FairSync和&quot;非公平信号量&quot;NonfairSync。</p>\n',34,3,2,NULL,'2019-08-11 15:38:31','2019-08-25 05:15:09',0,'9,14,35',1,0),(32,'Java多线程JUC锁02——互斥锁ReentrantLock','ReentrantLock是一个可重入的互斥锁，又被称为“独占锁”。','Bobbi','## ReentrantLock介绍\nReentrantLock是一个可重入的互斥锁，又被称为“独占锁”。\n顾名思义，ReentrantLock锁在同一个时间点只能被一个线程锁持有；而可重入的意思是，ReentrantLock锁，可以被单个线程多次获取。\n\nReentrantLock分为“公平锁”和“非公平锁”。他们的具体体现在获取锁的机制上是否公平。“锁”是为了保护竞争资源，防止多个线程同时操作线程而出错，ReentrantLock在同一个时间点只能被一个线程获取（当某线程获取到“锁”时，其他线程就必须等待）；ReentrantLock是通过一个FIFO的等待队列来管理获取该锁所有线程的。在“公平锁”的机制下，线程一次排队获取锁；而“非公平锁”在锁是可获取状态时，不管自己是不是在队列的开头都会获取锁\n\n### ReenTrantLock函数列表\n```java\n// 创建一个 ReentrantLock ，默认是“非公平锁”。\nReentrantLock()\n// 创建策略是fair的 ReentrantLock。fair为true表示是公平锁，fair为false表示是非公平锁。\nReentrantLock(boolean fair)\n\n// 查询当前线程保持此锁的次数。\nint getHoldCount()\n// 返回目前拥有此锁的线程，如果此锁不被任何线程拥有，则返回 null。\nprotected Thread getOwner()\n// 返回一个 collection，它包含可能正等待获取此锁的线程。\nprotected Collection<Thread> getQueuedThreads()\n// 返回正等待获取此锁的线程估计数。\nint getQueueLength()\n// 返回一个 collection，它包含可能正在等待与此锁相关给定条件的那些线程。\nprotected Collection<Thread> getWaitingThreads(Condition condition)\n// 返回等待与此锁相关的给定条件的线程估计数。\nint getWaitQueueLength(Condition condition)\n// 查询给定线程是否正在等待获取此锁。\nboolean hasQueuedThread(Thread thread)\n// 查询是否有些线程正在等待获取此锁。\nboolean hasQueuedThreads()\n// 查询是否有些线程正在等待与此锁有关的给定条件。\nboolean hasWaiters(Condition condition)\n// 如果是“公平锁”返回true，否则返回false。\nboolean isFair()\n// 查询当前线程是否保持此锁。\nboolean isHeldByCurrentThread()\n// 查询此锁是否由任意线程保持。\nboolean isLocked()\n// 获取锁。\nvoid lock()\n// 如果当前线程未被中断，则获取锁。\nvoid lockInterruptibly()\n// 返回用来与此 Lock 实例一起使用的 Condition 实例。\nCondition newCondition()\n// 仅在调用时锁未被另一个线程保持的情况下，才获取该锁。\nboolean tryLock()\n// 如果锁在给定等待时间内没有被另一个线程保持，且当前线程未被中断，则获取该锁。\nboolean tryLock(long timeout, TimeUnit unit)\n// 试图释放此锁。\nvoid unlock()\n```\n\nReentrantLock的UML类图\n\n![image.png](http://oss.dblearn.cn/dbblog/20190818/128e4c4980af4af0a6806afb53119199.png)\n\n1. ReentrantLock实现了Lock接口。Lock接口提供了获取锁的lock()方法和释放锁的unlock()方法。\n2. ReentrantLock中有一个成员变量sync，sync是Sync类型；Sync是一个抽象类，而且它继承于AQS，通过Sync同步器，ReentrantLock实现了锁的竞争、获取和释放。\n3. ReentrantLock中有\"公平锁类\"FairSync和\"非公平锁类\"NonfairSync，它们都是Sync的子类。默认是NoFairSync\n\n## ReentrantLock示例\n下面用生产者和消费者示例演示ReentrantLock\n```java\n/**\n * 仓库\n */\nclass Store {\n    public int MAX_SIZE=5; //  仓库容量\n    public int currentSize = 0; // 当前仓库数量\n    public ReentrantLock lock = new ReentrantLock(); // 锁\n\n    /**\n     * 生产\n     */\n    public void produce() {\n        // 加锁\n        lock.lock();\n        try {\n            if(currentSize<MAX_SIZE) {\n                currentSize++;\n                System.out.println(Thread.currentThread().getName()+\", 生产者生产，剩余 \"+ currentSize);\n            }\n        }finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n    /**\n     * 消费\n     */\n    public void consume() {\n        // 加锁\n        lock.lock();\n        try {\n            if(currentSize>0) {\n                currentSize--;\n                System.out.println(Thread.currentThread().getName()+\", 消费者消费，剩余 \"+ currentSize);\n            }\n        }finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n\n}\n\n/**\n * 生产者\n */\nclass Producer implements Runnable{\n    private Store store ;\n\n    public Producer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断生产\n        while (true) {\n            store.produce();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass Consumer implements Runnable {\n    private Store store;\n\n    public Consumer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断消费\n        while(true) {\n            store.consume();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\npublic class ProducerAndConsumerLockTest {\n\n    public static void main(String[] args) {\n        // 创建一个仓库\n        Store store = new Store();\n\n        // 启动5个生产线程\n        new Thread(new Producer(store), \"Producer-1\").start();\n        new Thread(new Producer(store), \"Producer-2\").start();\n        new Thread(new Producer(store), \"Producer-3\").start();\n        new Thread(new Producer(store), \"Producer-4\").start();\n        new Thread(new Producer(store), \"Producer-5\").start();\n\n        // 启动2个消费线程\n        new Thread(new Consumer(store), \"Consumer-1\").start();\n        new Thread(new Consumer(store), \"Consumer-2\").start();\n    }\n}\n\n```\n运行结果：\n\n```java\nProducer-1, 生产者生产，剩余 1\nProducer-2, 生产者生产，剩余 2\nProducer-3, 生产者生产，剩余 3\nProducer-4, 生产者生产，剩余 4\nProducer-5, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nConsumer-2, 消费者消费，剩余 3\nProducer-1, 生产者生产，剩余 4\nProducer-2, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nConsumer-2, 消费者消费，剩余 3\nProducer-1, 生产者生产，剩余 4\n...\n```\n\n结果分析：\n1. Store 是仓库类，通过produce方法生产仓库货物，通过consume消费仓库货物。通过独占锁实现对仓库的互斥访问：在操作(生产/消费)仓库中的货品前，会先通过lock()锁住仓库，操作完后再通过unlock解锁。\n2. Producer是生产者类。调用Producer中的produce()函数可以新建一个线程往仓库中生产产品。\n3. Customer是消费者类。调用Customer中的consume()函数可以新建一个线程消费仓库中的产品。\n4. 在主线程中，创建了5个线程的生产者，和2个线程的消费者。通过打印日志可知，生产线程和消费线程的协作是不存在问题的，数量的变化是正确无误的。\n\n虽然上面的生产者消费者示例可以正确无误的运行，但是还是存在一些缺陷，例如，当生产达到仓库的最大值时，虽然此时会跳过Store的生产过程执行ublock()，但是下次获取到锁的线程仍然可能是生产线程，依旧无法生产，这就使得可能会有一段时间生产线程和消费线程都处于空等状态，也存在一定的性能问题。\n\n\n正常的情况应该是，当仓库的商品数量已达库存上限时，使生产线程等待，让消费线程进行消费，同样的，当仓库的商品数量为0时，应该使消费线程等待，让生产线程进行生产。想要达到这样的效果，就需要使用Condition类，通过Condition中的await()方法，能让线程阻塞，类似于wait()；通过Condition的signal()方法，能让唤醒线程，类似于notify()：\n\n```java\n/**\n * 仓库\n */\nclass Store {\n    public int MAX_SIZE=5; //  仓库容量\n    public int currentSize = 0; // 当前仓库数量\n    public ReentrantLock lock = new ReentrantLock(); // 锁\n    public Condition producerCondition = lock.newCondition(); // 生产条件\n    public Condition consumerCondition = lock.newCondition(); // 消费条件\n    /**\n     * 生产\n     */\n    public void produce() {\n        // 加锁\n        lock.lock();\n        try {\n            // 如果仓库中的货物满了，暂停等待生产\n            while (currentSize >= MAX_SIZE) {\n                producerCondition.await();\n                System.out.println(Thread.currentThread().getName()+\"，producer 等待\");\n            }\n            currentSize++;\n            System.out.println(Thread.currentThread().getName()+\", 生产者生产，剩余 \"+ currentSize);\n            // 已经生产了，则通知消费者消费\n            consumerCondition.signalAll();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n    /**\n     * 消费\n     */\n    public void consume() {\n        // 加锁\n        lock.lock();\n        try {\n            // 如果仓库空了，则等待消费\n            while (currentSize <= 0) {\n                consumerCondition.await();\n                System.out.println(Thread.currentThread().getName()+\"，consumer 等待\");\n\n            }\n            currentSize--;\n            // 让消费线程唤醒-;\n            System.out.println(Thread.currentThread().getName()+\", 消费者消费，剩余 \"+ currentSize);\n            // 消费了一个货物，通知生产者生产\n            producerCondition.signalAll();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n\n}\n\n/**\n * 生产者\n */\nclass Producer implements Runnable{\n    private Store store ;\n\n    public Producer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断生产\n        while (true) {\n            store.produce();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass Consumer implements Runnable {\n    private Store store;\n\n    public Consumer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断消费\n        while(true) {\n            store.consume();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\npublic class ProducerAndConsumerLockTest {\n\n    public static void main(String[] args) {\n        // 创建一个仓库\n        Store store = new Store();\n\n        // 启动5个生产线程\n        new Thread(new Producer(store), \"Producer-1\").start();\n        new Thread(new Producer(store), \"Producer-2\").start();\n        new Thread(new Producer(store), \"Producer-3\").start();\n        new Thread(new Producer(store), \"Producer-4\").start();\n        new Thread(new Producer(store), \"Producer-5\").start();\n\n        // 启动2个消费线程\n        new Thread(new Consumer(store), \"Consumer-1\").start();\n        new Thread(new Consumer(store), \"Consumer-2\").start();\n    }\n}\n\n```\n运行结果：\n\n```java\nProducer-1, 生产者生产，剩余 1\nProducer-5, 生产者生产，剩余 2\nProducer-2, 生产者生产，剩余 3\nProducer-4, 生产者生产，剩余 4\nConsumer-1, 消费者消费，剩余 3\nProducer-3, 生产者生产，剩余 4\nConsumer-2, 消费者消费，剩余 3\nProducer-1, 生产者生产，剩余 4\nProducer-5, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nProducer-3, 生产者生产，剩余 5\nProducer-2，producer 等待\nConsumer-2, 消费者消费，剩余 4\nProducer-4，producer 等待\nProducer-4, 生产者生产，剩余 5\nProducer-2，producer 等待\nConsumer-1, 消费者消费，剩余 4\nProducer-3, 生产者生产，剩余 5\nProducer-2，producer 等待\nProducer-1，producer 等待\nProducer-5，producer 等待\nConsumer-2, 消费者消费，剩余 4\nProducer-4, 生产者生产，剩余 5\nProducer-2，producer 等待\nProducer-1，producer 等待\nProducer-5，producer 等待\nConsumer-1, 消费者消费，剩余 4\nProducer-3, 生产者生产，剩余 5\nProducer-2，producer 等待\nProducer-1，producer 等待\nConsumer-2, 消费者消费，剩余 4\nProducer-5，producer 等待\nProducer-5, 生产者生产，剩余 5\nProducer-2，producer 等待\nProducer-1，producer 等待\nConsumer-1, 消费者消费，剩余 4\nProducer-3, 生产者生产，剩余 5\nProducer-4，producer 等待\nProducer-2，producer 等待\nProducer-1，producer 等待\nConsumer-2, 消费者消费，剩余 4\nProducer-5, 生产者生产，剩余 5\nProducer-4，producer 等待\nProducer-2，producer 等待\nProducer-1，producer 等待\nConsumer-1, 消费者消费，剩余 4\nProducer-4，producer 等待\nProducer-4, 生产者生产，剩余 5\n...\n\n```\n\n关于Condition的内容，后面会详细介绍','<h2 id=\"reentrantlock-\">ReentrantLock介绍</h2>\n<p>ReentrantLock是一个可重入的互斥锁，又被称为“独占锁”。\n顾名思义，ReentrantLock锁在同一个时间点只能被一个线程锁持有；而可重入的意思是，ReentrantLock锁，可以被单个线程多次获取。</p>\n<p>ReentrantLock分为“公平锁”和“非公平锁”。他们的具体体现在获取锁的机制上是否公平。“锁”是为了保护竞争资源，防止多个线程同时操作线程而出错，ReentrantLock在同一个时间点只能被一个线程获取（当某线程获取到“锁”时，其他线程就必须等待）；ReentrantLock是通过一个FIFO的等待队列来管理获取该锁所有线程的。在“公平锁”的机制下，线程一次排队获取锁；而“非公平锁”在锁是可获取状态时，不管自己是不是在队列的开头都会获取锁</p>\n<h3 id=\"reentrantlock-\">ReenTrantLock函数列表</h3>\n<pre><code class=\"language-java\">// 创建一个 ReentrantLock ，默认是“非公平锁”。\nReentrantLock()\n// 创建策略是fair的 ReentrantLock。fair为true表示是公平锁，fair为false表示是非公平锁。\nReentrantLock(boolean fair)\n\n// 查询当前线程保持此锁的次数。\nint getHoldCount()\n// 返回目前拥有此锁的线程，如果此锁不被任何线程拥有，则返回 null。\nprotected Thread getOwner()\n// 返回一个 collection，它包含可能正等待获取此锁的线程。\nprotected Collection&lt;Thread&gt; getQueuedThreads()\n// 返回正等待获取此锁的线程估计数。\nint getQueueLength()\n// 返回一个 collection，它包含可能正在等待与此锁相关给定条件的那些线程。\nprotected Collection&lt;Thread&gt; getWaitingThreads(Condition condition)\n// 返回等待与此锁相关的给定条件的线程估计数。\nint getWaitQueueLength(Condition condition)\n// 查询给定线程是否正在等待获取此锁。\nboolean hasQueuedThread(Thread thread)\n// 查询是否有些线程正在等待获取此锁。\nboolean hasQueuedThreads()\n// 查询是否有些线程正在等待与此锁有关的给定条件。\nboolean hasWaiters(Condition condition)\n// 如果是“公平锁”返回true，否则返回false。\nboolean isFair()\n// 查询当前线程是否保持此锁。\nboolean isHeldByCurrentThread()\n// 查询此锁是否由任意线程保持。\nboolean isLocked()\n// 获取锁。\nvoid lock()\n// 如果当前线程未被中断，则获取锁。\nvoid lockInterruptibly()\n// 返回用来与此 Lock 实例一起使用的 Condition 实例。\nCondition newCondition()\n// 仅在调用时锁未被另一个线程保持的情况下，才获取该锁。\nboolean tryLock()\n// 如果锁在给定等待时间内没有被另一个线程保持，且当前线程未被中断，则获取该锁。\nboolean tryLock(long timeout, TimeUnit unit)\n// 试图释放此锁。\nvoid unlock()</code></pre>\n<p>ReentrantLock的UML类图</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190818/128e4c4980af4af0a6806afb53119199.png\" alt=\"image.png\"></p>\n<ol>\n<li>ReentrantLock实现了Lock接口。Lock接口提供了获取锁的lock()方法和释放锁的unlock()方法。</li>\n<li>ReentrantLock中有一个成员变量sync，sync是Sync类型；Sync是一个抽象类，而且它继承于AQS，通过Sync同步器，ReentrantLock实现了锁的竞争、获取和释放。</li>\n<li>ReentrantLock中有&quot;公平锁类&quot;FairSync和&quot;非公平锁类&quot;NonfairSync，它们都是Sync的子类。默认是NoFairSync</li>\n</ol>\n<h2 id=\"reentrantlock-\">ReentrantLock示例</h2>\n<p>下面用生产者和消费者示例演示ReentrantLock</p>\n<pre><code class=\"language-java\">/**\n * 仓库\n */\nclass Store {\n    public int MAX_SIZE=5; //  仓库容量\n    public int currentSize = 0; // 当前仓库数量\n    public ReentrantLock lock = new ReentrantLock(); // 锁\n\n    /**\n     * 生产\n     */\n    public void produce() {\n        // 加锁\n        lock.lock();\n        try {\n            if(currentSize&lt;MAX_SIZE) {\n                currentSize++;\n                System.out.println(Thread.currentThread().getName()+&quot;, 生产者生产，剩余 &quot;+ currentSize);\n            }\n        }finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n    /**\n     * 消费\n     */\n    public void consume() {\n        // 加锁\n        lock.lock();\n        try {\n            if(currentSize&gt;0) {\n                currentSize--;\n                System.out.println(Thread.currentThread().getName()+&quot;, 消费者消费，剩余 &quot;+ currentSize);\n            }\n        }finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n\n}\n\n/**\n * 生产者\n */\nclass Producer implements Runnable{\n    private Store store ;\n\n    public Producer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断生产\n        while (true) {\n            store.produce();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass Consumer implements Runnable {\n    private Store store;\n\n    public Consumer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断消费\n        while(true) {\n            store.consume();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\npublic class ProducerAndConsumerLockTest {\n\n    public static void main(String[] args) {\n        // 创建一个仓库\n        Store store = new Store();\n\n        // 启动5个生产线程\n        new Thread(new Producer(store), &quot;Producer-1&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-2&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-3&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-4&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-5&quot;).start();\n\n        // 启动2个消费线程\n        new Thread(new Consumer(store), &quot;Consumer-1&quot;).start();\n        new Thread(new Consumer(store), &quot;Consumer-2&quot;).start();\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-java\">Producer-1, 生产者生产，剩余 1\nProducer-2, 生产者生产，剩余 2\nProducer-3, 生产者生产，剩余 3\nProducer-4, 生产者生产，剩余 4\nProducer-5, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nConsumer-2, 消费者消费，剩余 3\nProducer-1, 生产者生产，剩余 4\nProducer-2, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nConsumer-2, 消费者消费，剩余 3\nProducer-1, 生产者生产，剩余 4\n...</code></pre>\n<p>结果分析：</p>\n<ol>\n<li>Store 是仓库类，通过produce方法生产仓库货物，通过consume消费仓库货物。通过独占锁实现对仓库的互斥访问：在操作(生产/消费)仓库中的货品前，会先通过lock()锁住仓库，操作完后再通过unlock解锁。</li>\n<li>Producer是生产者类。调用Producer中的produce()函数可以新建一个线程往仓库中生产产品。</li>\n<li>Customer是消费者类。调用Customer中的consume()函数可以新建一个线程消费仓库中的产品。</li>\n<li>在主线程中，创建了5个线程的生产者，和2个线程的消费者。通过打印日志可知，生产线程和消费线程的协作是不存在问题的，数量的变化是正确无误的。</li>\n</ol>\n<p>虽然上面的生产者消费者示例可以正确无误的运行，但是还是存在一些缺陷，例如，当生产达到仓库的最大值时，虽然此时会跳过Store的生产过程执行ublock()，但是下次获取到锁的线程仍然可能是生产线程，依旧无法生产，这就使得可能会有一段时间生产线程和消费线程都处于空等状态，也存在一定的性能问题。</p>\n<p>正常的情况应该是，当仓库的商品数量已达库存上限时，使生产线程等待，让消费线程进行消费，同样的，当仓库的商品数量为0时，应该使消费线程等待，让生产线程进行生产。想要达到这样的效果，就需要使用Condition类，通过Condition中的await()方法，能让线程阻塞，类似于wait()；通过Condition的signal()方法，能让唤醒线程，类似于notify()：</p>\n<pre><code class=\"language-java\">/**\n * 仓库\n */\nclass Store {\n    public int MAX_SIZE=5; //  仓库容量\n    public int currentSize = 0; // 当前仓库数量\n    public ReentrantLock lock = new ReentrantLock(); // 锁\n    public Condition producerCondition = lock.newCondition(); // 生产条件\n    public Condition consumerCondition = lock.newCondition(); // 消费条件\n    /**\n     * 生产\n     */\n    public void produce() {\n        // 加锁\n        lock.lock();\n        try {\n            // 如果仓库中的货物满了，暂停等待生产\n            while (currentSize &gt;= MAX_SIZE) {\n                producerCondition.await();\n                System.out.println(Thread.currentThread().getName()+&quot;，producer 等待&quot;);\n            }\n            currentSize++;\n            System.out.println(Thread.currentThread().getName()+&quot;, 生产者生产，剩余 &quot;+ currentSize);\n            // 已经生产了，则通知消费者消费\n            consumerCondition.signalAll();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n    /**\n     * 消费\n     */\n    public void consume() {\n        // 加锁\n        lock.lock();\n        try {\n            // 如果仓库空了，则等待消费\n            while (currentSize &lt;= 0) {\n                consumerCondition.await();\n                System.out.println(Thread.currentThread().getName()+&quot;，consumer 等待&quot;);\n\n            }\n            currentSize--;\n            // 让消费线程唤醒-;\n            System.out.println(Thread.currentThread().getName()+&quot;, 消费者消费，剩余 &quot;+ currentSize);\n            // 消费了一个货物，通知生产者生产\n            producerCondition.signalAll();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n\n}\n\n/**\n * 生产者\n */\nclass Producer implements Runnable{\n    private Store store ;\n\n    public Producer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断生产\n        while (true) {\n            store.produce();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass Consumer implements Runnable {\n    private Store store;\n\n    public Consumer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断消费\n        while(true) {\n            store.consume();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\npublic class ProducerAndConsumerLockTest {\n\n    public static void main(String[] args) {\n        // 创建一个仓库\n        Store store = new Store();\n\n        // 启动5个生产线程\n        new Thread(new Producer(store), &quot;Producer-1&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-2&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-3&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-4&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-5&quot;).start();\n\n        // 启动2个消费线程\n        new Thread(new Consumer(store), &quot;Consumer-1&quot;).start();\n        new Thread(new Consumer(store), &quot;Consumer-2&quot;).start();\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-java\">Producer-1, 生产者生产，剩余 1\nProducer-5, 生产者生产，剩余 2\nProducer-2, 生产者生产，剩余 3\nProducer-4, 生产者生产，剩余 4\nConsumer-1, 消费者消费，剩余 3\nProducer-3, 生产者生产，剩余 4\nConsumer-2, 消费者消费，剩余 3\nProducer-1, 生产者生产，剩余 4\nProducer-5, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nProducer-3, 生产者生产，剩余 5\nProducer-2，producer 等待\nConsumer-2, 消费者消费，剩余 4\nProducer-4，producer 等待\nProducer-4, 生产者生产，剩余 5\nProducer-2，producer 等待\nConsumer-1, 消费者消费，剩余 4\nProducer-3, 生产者生产，剩余 5\nProducer-2，producer 等待\nProducer-1，producer 等待\nProducer-5，producer 等待\nConsumer-2, 消费者消费，剩余 4\nProducer-4, 生产者生产，剩余 5\nProducer-2，producer 等待\nProducer-1，producer 等待\nProducer-5，producer 等待\nConsumer-1, 消费者消费，剩余 4\nProducer-3, 生产者生产，剩余 5\nProducer-2，producer 等待\nProducer-1，producer 等待\nConsumer-2, 消费者消费，剩余 4\nProducer-5，producer 等待\nProducer-5, 生产者生产，剩余 5\nProducer-2，producer 等待\nProducer-1，producer 等待\nConsumer-1, 消费者消费，剩余 4\nProducer-3, 生产者生产，剩余 5\nProducer-4，producer 等待\nProducer-2，producer 等待\nProducer-1，producer 等待\nConsumer-2, 消费者消费，剩余 4\nProducer-5, 生产者生产，剩余 5\nProducer-4，producer 等待\nProducer-2，producer 等待\nProducer-1，producer 等待\nConsumer-1, 消费者消费，剩余 4\nProducer-4，producer 等待\nProducer-4, 生产者生产，剩余 5\n...\n</code></pre>\n<p>关于Condition的内容，后面会详细介绍</p>\n',29,1,2,NULL,'2019-08-18 11:18:26','2019-08-25 05:14:45',0,'9,14,35',1,0),(33,'Java多线程JUC锁03——Condition条件','Condition的作用是对锁进行更精确的控制','Bobbi','## Condition介绍\nCondition的作用是对锁进行更精确的控制。Condition中的await()方法相当于Object的wait()方法，Condition中的signal()方法相当于Object的notify()方法，Condition中的signalAll()方法相当于Object的notifyAll()方法。不同的是，Object中的wait()、notify()、notifyAll()方法是和同步锁Synchronized捆绑使用的；而Condition是需要与“互斥锁/共享锁”捆绑使用的。\n\n## Condition函数列表\n```java\n// 造成当前线程在接到信号或被中断之前一直处于等待状态。\nvoid await()\n// 造成当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。\nboolean await(long time, TimeUnit unit)\n// 造成当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。\nlong awaitNanos(long nanosTimeout)\n// 造成当前线程在接到信号之前一直处于等待状态。\nvoid awaitUninterruptibly()\n// 造成当前线程在接到信号、被中断或到达指定最后期限之前一直处于等待状态。\nboolean awaitUntil(Date deadline)\n// 唤醒一个等待线程。\nvoid signal()\n// 唤醒所有等待线程。\nvoid signalAll()\n```\n\n## Condition示例\n示例1是通过Object的wait()、notify()来演示线程的休眠、唤醒功能\n\n示例2是通过lock的await()、singal()来演示线程的休眠、唤醒功能\n\n示例1：\n```java\npublic class ObjectTest {\n    public static Object object = new Object();\n\n    public static void main(String[] args) {\n        ThreadA threadA = new ThreadA();\n        threadA.start();\n        synchronized (object) {\n            System.out.println(\"主线程进入阻塞状态\");\n            try {\n                object.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"主线程被唤醒了\");\n        }\n    }\n\n    static class ThreadA extends Thread {\n\n        @Override\n        public void run() {\n            synchronized (object) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(\"ThreadA唤醒了主线程\");\n                object.notify();\n            }\n        }\n    }\n\n}\n\n```\n运行结果：\n\n```shell\n主线程进入阻塞状态\nThreadA唤醒了主线程\n主线程被唤醒了\n```\n\n示例2：\n\n```java\n\npublic class ConditionTest {\n    public static Lock lock = new ReentrantLock();\n    public static Condition condition = lock.newCondition();\n\n    public static void main(String[] args) {\n        ThreadA threadA= new ThreadA();\n        threadA.start();\n        lock.lock();\n        try {\n            System.out.println(\"主线程进入了阻塞状态\");\n            condition.await();\n\n            System.out.println(\"主线程被唤醒了\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    static class ThreadA extends Thread {\n        @Override\n        public void run() {\n            lock.lock();\n            try {\n                Thread.sleep(100);\n                condition.signalAll();\n                System.out.println(\"ThreadA 唤醒了主线程\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n}\n\n```\n运行结果：\n\n```shell\n主线程进入了阻塞状态\nThreadA 唤醒了主线程\n主线程被唤醒了\n```\n通过示例1和示例2，我们知道Condition和Object的方法对应关系如下：\n\n```shell\n              Object      Condition  \n休眠           wait        await\n唤醒个线程     notify      signal\n唤醒所有线程   notifyAll   signalAll\n```\n\n## Condition高级用法\nCondition除了支持上面的功能之外，它更强大的地方在于：能够更加精细的控制多线程的休眠与唤醒。对于同一个锁，我们可以创建多个Condition，在不同的情况下使用不同的Condition。\n\n以生产者消费者模型为例，多线程读/写同一个缓冲区：当向缓冲区中写入数据之后，唤醒\"读线程\"；当从缓冲区读出数据之后，唤醒\"写线程\"；并且当缓冲区满的时候，\"写线程\"需要等待；当缓冲区为空时，\"读线程\"需要等待。     \n```java\n\n/**\n * 仓库\n */\nclass Store {\n    public int MAX_SIZE=5; //  仓库容量\n    public int currentSize = 0; // 当前仓库数量\n    public ReentrantLock lock = new ReentrantLock(); // 锁\n    public Condition producerCondition = lock.newCondition(); // 生产条件\n    public Condition consumerCondition = lock.newCondition(); // 消费条件\n    /**\n     * 生产\n     */\n    public void produce() {\n        // 加锁\n        lock.lock();\n        try {\n            // 如果仓库中的货物满了，暂停等待生产\n            while (currentSize >= MAX_SIZE) {\n                producerCondition.await();\n                System.out.println(Thread.currentThread().getName()+\"，producer 等待\");\n            }\n            currentSize++;\n            System.out.println(Thread.currentThread().getName()+\", 生产者生产，剩余 \"+ currentSize);\n            // 已经生产了，则通知消费者消费\n            consumerCondition.signalAll();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n    /**\n     * 消费\n     */\n    public void consume() {\n        // 加锁\n        lock.lock();\n        try {\n            // 如果仓库空了，则等待消费\n            while (currentSize <= 0) {\n                consumerCondition.await();\n                System.out.println(Thread.currentThread().getName()+\"，consumer 等待\");\n\n            }\n            currentSize--;\n            // 让消费线程唤醒-;\n            System.out.println(Thread.currentThread().getName()+\", 消费者消费，剩余 \"+ currentSize);\n            // 消费了一个货物，通知生产者生产\n            producerCondition.signalAll();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n\n}\n\n/**\n * 生产者\n */\nclass Producer implements Runnable{\n    private Store store ;\n\n    public Producer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断生产\n        while (true) {\n            store.produce();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass Consumer implements Runnable {\n    private Store store;\n\n    public Consumer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断消费\n        while(true) {\n            store.consume();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\npublic class ProducerAndConsumerLockTest {\n\n    public static void main(String[] args) {\n        // 创建一个仓库\n        Store store = new Store();\n\n        // 启动5个生产线程\n        new Thread(new Producer(store), \"Producer-1\").start();\n        new Thread(new Producer(store), \"Producer-2\").start();\n        new Thread(new Producer(store), \"Producer-3\").start();\n        new Thread(new Producer(store), \"Producer-4\").start();\n        new Thread(new Producer(store), \"Producer-5\").start();\n\n        // 启动2个消费线程\n        new Thread(new Consumer(store), \"Consumer-1\").start();\n        new Thread(new Consumer(store), \"Consumer-2\").start();\n    }\n}\n\n```   \n运行结果：\n\n```shell\nProducer-1, 生产者生产，剩余 1\nProducer-2, 生产者生产，剩余 2\nProducer-3, 生产者生产，剩余 3\nProducer-4, 生产者生产，剩余 4\nProducer-5, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nConsumer-2, 消费者消费，剩余 3\nProducer-1, 生产者生产，剩余 4\nProducer-2, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nConsumer-2, 消费者消费，剩余 3\nProducer-3，producer 等待\nProducer-3, 生产者生产，剩余 4\nProducer-4，producer 等待\nProducer-4, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nProducer-4, 生产者生产，剩余 5\nConsumer-2, 消费者消费，剩余 4\nProducer-5，producer 等待\n...\n```\n\n如果采用Object类中的wait(), notify(), notifyAll()实现该缓冲区，当向缓冲区写入数据之后需要唤醒\"读线程\"时，不可能通过notify()或notifyAll()明确的指定唤醒\"读线程\"，而只能通过notifyAll唤醒所有线程(但是notifyAll无法区分唤醒的线程是读线程，还是写线程)。  但是，通过Condition，就能明确的指定唤醒读线程。\n\n','<h2 id=\"condition-\">Condition介绍</h2>\n<p>Condition的作用是对锁进行更精确的控制。Condition中的await()方法相当于Object的wait()方法，Condition中的signal()方法相当于Object的notify()方法，Condition中的signalAll()方法相当于Object的notifyAll()方法。不同的是，Object中的wait()、notify()、notifyAll()方法是和同步锁Synchronized捆绑使用的；而Condition是需要与“互斥锁/共享锁”捆绑使用的。</p>\n<h2 id=\"condition-\">Condition函数列表</h2>\n<pre><code class=\"language-java\">// 造成当前线程在接到信号或被中断之前一直处于等待状态。\nvoid await()\n// 造成当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。\nboolean await(long time, TimeUnit unit)\n// 造成当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。\nlong awaitNanos(long nanosTimeout)\n// 造成当前线程在接到信号之前一直处于等待状态。\nvoid awaitUninterruptibly()\n// 造成当前线程在接到信号、被中断或到达指定最后期限之前一直处于等待状态。\nboolean awaitUntil(Date deadline)\n// 唤醒一个等待线程。\nvoid signal()\n// 唤醒所有等待线程。\nvoid signalAll()</code></pre>\n<h2 id=\"condition-\">Condition示例</h2>\n<p>示例1是通过Object的wait()、notify()来演示线程的休眠、唤醒功能</p>\n<p>示例2是通过lock的await()、singal()来演示线程的休眠、唤醒功能</p>\n<p>示例1：</p>\n<pre><code class=\"language-java\">public class ObjectTest {\n    public static Object object = new Object();\n\n    public static void main(String[] args) {\n        ThreadA threadA = new ThreadA();\n        threadA.start();\n        synchronized (object) {\n            System.out.println(&quot;主线程进入阻塞状态&quot;);\n            try {\n                object.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(&quot;主线程被唤醒了&quot;);\n        }\n    }\n\n    static class ThreadA extends Thread {\n\n        @Override\n        public void run() {\n            synchronized (object) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(&quot;ThreadA唤醒了主线程&quot;);\n                object.notify();\n            }\n        }\n    }\n\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">主线程进入阻塞状态\nThreadA唤醒了主线程\n主线程被唤醒了</code></pre>\n<p>示例2：</p>\n<pre><code class=\"language-java\">\npublic class ConditionTest {\n    public static Lock lock = new ReentrantLock();\n    public static Condition condition = lock.newCondition();\n\n    public static void main(String[] args) {\n        ThreadA threadA= new ThreadA();\n        threadA.start();\n        lock.lock();\n        try {\n            System.out.println(&quot;主线程进入了阻塞状态&quot;);\n            condition.await();\n\n            System.out.println(&quot;主线程被唤醒了&quot;);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    static class ThreadA extends Thread {\n        @Override\n        public void run() {\n            lock.lock();\n            try {\n                Thread.sleep(100);\n                condition.signalAll();\n                System.out.println(&quot;ThreadA 唤醒了主线程&quot;);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">主线程进入了阻塞状态\nThreadA 唤醒了主线程\n主线程被唤醒了</code></pre>\n<p>通过示例1和示例2，我们知道Condition和Object的方法对应关系如下：</p>\n<pre><code class=\"language-shell\">              Object      Condition  \n休眠           wait        await\n唤醒个线程     notify      signal\n唤醒所有线程   notifyAll   signalAll</code></pre>\n<h2 id=\"condition-\">Condition高级用法</h2>\n<p>Condition除了支持上面的功能之外，它更强大的地方在于：能够更加精细的控制多线程的休眠与唤醒。对于同一个锁，我们可以创建多个Condition，在不同的情况下使用不同的Condition。</p>\n<p>以生产者消费者模型为例，多线程读/写同一个缓冲区：当向缓冲区中写入数据之后，唤醒&quot;读线程&quot;；当从缓冲区读出数据之后，唤醒&quot;写线程&quot;；并且当缓冲区满的时候，&quot;写线程&quot;需要等待；当缓冲区为空时，&quot;读线程&quot;需要等待。     </p>\n<pre><code class=\"language-java\">\n/**\n * 仓库\n */\nclass Store {\n    public int MAX_SIZE=5; //  仓库容量\n    public int currentSize = 0; // 当前仓库数量\n    public ReentrantLock lock = new ReentrantLock(); // 锁\n    public Condition producerCondition = lock.newCondition(); // 生产条件\n    public Condition consumerCondition = lock.newCondition(); // 消费条件\n    /**\n     * 生产\n     */\n    public void produce() {\n        // 加锁\n        lock.lock();\n        try {\n            // 如果仓库中的货物满了，暂停等待生产\n            while (currentSize &gt;= MAX_SIZE) {\n                producerCondition.await();\n                System.out.println(Thread.currentThread().getName()+&quot;，producer 等待&quot;);\n            }\n            currentSize++;\n            System.out.println(Thread.currentThread().getName()+&quot;, 生产者生产，剩余 &quot;+ currentSize);\n            // 已经生产了，则通知消费者消费\n            consumerCondition.signalAll();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n    /**\n     * 消费\n     */\n    public void consume() {\n        // 加锁\n        lock.lock();\n        try {\n            // 如果仓库空了，则等待消费\n            while (currentSize &lt;= 0) {\n                consumerCondition.await();\n                System.out.println(Thread.currentThread().getName()+&quot;，consumer 等待&quot;);\n\n            }\n            currentSize--;\n            // 让消费线程唤醒-;\n            System.out.println(Thread.currentThread().getName()+&quot;, 消费者消费，剩余 &quot;+ currentSize);\n            // 消费了一个货物，通知生产者生产\n            producerCondition.signalAll();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // 解锁\n            lock.unlock();\n        }\n    }\n\n\n}\n\n/**\n * 生产者\n */\nclass Producer implements Runnable{\n    private Store store ;\n\n    public Producer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断生产\n        while (true) {\n            store.produce();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass Consumer implements Runnable {\n    private Store store;\n\n    public Consumer(Store store) {\n        this.store = store;\n    }\n\n    @Override\n    public void run() {\n        // 不断消费\n        while(true) {\n            store.consume();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\npublic class ProducerAndConsumerLockTest {\n\n    public static void main(String[] args) {\n        // 创建一个仓库\n        Store store = new Store();\n\n        // 启动5个生产线程\n        new Thread(new Producer(store), &quot;Producer-1&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-2&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-3&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-4&quot;).start();\n        new Thread(new Producer(store), &quot;Producer-5&quot;).start();\n\n        // 启动2个消费线程\n        new Thread(new Consumer(store), &quot;Consumer-1&quot;).start();\n        new Thread(new Consumer(store), &quot;Consumer-2&quot;).start();\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">Producer-1, 生产者生产，剩余 1\nProducer-2, 生产者生产，剩余 2\nProducer-3, 生产者生产，剩余 3\nProducer-4, 生产者生产，剩余 4\nProducer-5, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nConsumer-2, 消费者消费，剩余 3\nProducer-1, 生产者生产，剩余 4\nProducer-2, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nConsumer-2, 消费者消费，剩余 3\nProducer-3，producer 等待\nProducer-3, 生产者生产，剩余 4\nProducer-4，producer 等待\nProducer-4, 生产者生产，剩余 5\nConsumer-1, 消费者消费，剩余 4\nProducer-4, 生产者生产，剩余 5\nConsumer-2, 消费者消费，剩余 4\nProducer-5，producer 等待\n...</code></pre>\n<p>如果采用Object类中的wait(), notify(), notifyAll()实现该缓冲区，当向缓冲区写入数据之后需要唤醒&quot;读线程&quot;时，不可能通过notify()或notifyAll()明确的指定唤醒&quot;读线程&quot;，而只能通过notifyAll唤醒所有线程(但是notifyAll无法区分唤醒的线程是读线程，还是写线程)。  但是，通过Condition，就能明确的指定唤醒读线程。</p>\n',24,1,2,NULL,'2019-08-19 15:21:07','2019-08-25 05:13:55',0,'9,14,35',1,0),(34,'Java多线程JUC锁04——LockSupport','LockSupport是用于创建锁和其他同步类的基本线程阻塞原语。','Bobbi','## LockSupport介绍\nLockSupport是用来创建锁和其他同步类的基本线程阻塞原语。\n \nLockSupport中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程，而且park()和unpark()不会遇到“Thread.suspend 和 Thread.resume所可能引发的死锁”问题。因为park() 和 unpark()有许可证的存在；调用 park() 的线程和另一个试图将其 unpark() 的线程之间的竞争将保持活性。\n\n## LockSupport函数列表\n```java\n// 返回提供给最近一次尚未解除阻塞的 park 方法调用的 blocker 对象，如果该调用不受阻塞，则返回 null。\nstatic Object getBlocker(Thread t)\n// 为了线程调度，禁用当前线程，除非许可可用。\nstatic void park()\n// 为了线程调度，在许可可用之前禁用当前线程。\nstatic void park(Object blocker)\n// 为了线程调度禁用当前线程，最多等待指定的等待时间，除非许可可用。\nstatic void parkNanos(long nanos)\n// 为了线程调度，在许可可用前禁用当前线程，并最多等待指定的等待时间。\nstatic void parkNanos(Object blocker, long nanos)\n// 为了线程调度，在指定的时限前禁用当前线程，除非许可可用。\nstatic void parkUntil(long deadline)\n// 为了线程调度，在指定的时限前禁用当前线程，除非许可可用。\nstatic void parkUntil(Object blocker, long deadline)\n// 如果给定线程的许可尚不可用，则使其可用。\nstatic void unpark(Thread thread)\n```\n## LockSupport示例\n对比下面的“示例1”和“示例2”可以更清晰的了解LockSupport的用法。\n\n\n```java\npublic class LockSupportTest1 {\n    static Object object = new Object();\n\n    public static void main(String[] args) {\n        synchronized (object) {\n            ThreadA threadA = new ThreadA();\n            System.out.println(\"主线程进入阻塞状态\");\n            threadA.start();\n            try {\n                object.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"主线程被唤醒了\");\n        }\n\n\n    }\n\n    static class ThreadA extends Thread {\n        @Override\n        public void run() {\n            synchronized (object) {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(\"1s后线程A唤醒主线程\");\n                object.notify();\n            }\n        }\n    }\n}\n\n```\n运行结果：\n\n```shell\n主线程进入阻塞状态\n1s后线程A唤醒主线程\n主线程被唤醒了\n```\n\n示例2:\n```java\npublic class LockSupportTest2 {\n    static Thread mainThread ;\n\n    public static void main(String[] args) {\n        // 获取主线程\n        mainThread = Thread.currentThread();\n        ThreadA threadA = new ThreadA();\n        System.out.println(\"主线程进入阻塞状态\");\n        threadA.start();\n        LockSupport.park(mainThread);\n        System.out.println(\"主线程被唤醒了\");\n\n\n    }\n\n    static class ThreadA extends Thread {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"1s后线程A唤醒主线程\");\n            LockSupport.unpark(mainThread);\n        }\n    }\n}\n```\n运行结果：\n\n```shell\n主线程进入阻塞状态\n1s后线程A唤醒主线程\n主线程被唤醒了\n```\n结果说明：\n在主线程中使用LockSupport挂起主线程，然后在子线程中使用LockSupport将主线程唤醒\n\n## LockSupport.park与Object.wait的区别\nLockSupport阻塞和解除阻塞线程直接操作的是Thread,而Object的wait/notify它并不是直接对线程操作,它是被动的方法,它需要一个object来进行线程的挂起或唤醒.\n\nThead在调用wait之前, 当前线程必须先获得该对象的监视器(synchronized),被唤醒之后需要重新获取到监视器才能继续执行.而LockSupport可以随意进行park或者unpark. \n','<h2 id=\"locksupport-\">LockSupport介绍</h2>\n<p>LockSupport是用来创建锁和其他同步类的基本线程阻塞原语。</p>\n<p>LockSupport中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程，而且park()和unpark()不会遇到“Thread.suspend 和 Thread.resume所可能引发的死锁”问题。因为park() 和 unpark()有许可证的存在；调用 park() 的线程和另一个试图将其 unpark() 的线程之间的竞争将保持活性。</p>\n<h2 id=\"locksupport-\">LockSupport函数列表</h2>\n<pre><code class=\"language-java\">// 返回提供给最近一次尚未解除阻塞的 park 方法调用的 blocker 对象，如果该调用不受阻塞，则返回 null。\nstatic Object getBlocker(Thread t)\n// 为了线程调度，禁用当前线程，除非许可可用。\nstatic void park()\n// 为了线程调度，在许可可用之前禁用当前线程。\nstatic void park(Object blocker)\n// 为了线程调度禁用当前线程，最多等待指定的等待时间，除非许可可用。\nstatic void parkNanos(long nanos)\n// 为了线程调度，在许可可用前禁用当前线程，并最多等待指定的等待时间。\nstatic void parkNanos(Object blocker, long nanos)\n// 为了线程调度，在指定的时限前禁用当前线程，除非许可可用。\nstatic void parkUntil(long deadline)\n// 为了线程调度，在指定的时限前禁用当前线程，除非许可可用。\nstatic void parkUntil(Object blocker, long deadline)\n// 如果给定线程的许可尚不可用，则使其可用。\nstatic void unpark(Thread thread)</code></pre>\n<h2 id=\"locksupport-\">LockSupport示例</h2>\n<p>对比下面的“示例1”和“示例2”可以更清晰的了解LockSupport的用法。</p>\n<pre><code class=\"language-java\">public class LockSupportTest1 {\n    static Object object = new Object();\n\n    public static void main(String[] args) {\n        synchronized (object) {\n            ThreadA threadA = new ThreadA();\n            System.out.println(&quot;主线程进入阻塞状态&quot;);\n            threadA.start();\n            try {\n                object.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(&quot;主线程被唤醒了&quot;);\n        }\n\n\n    }\n\n    static class ThreadA extends Thread {\n        @Override\n        public void run() {\n            synchronized (object) {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(&quot;1s后线程A唤醒主线程&quot;);\n                object.notify();\n            }\n        }\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">主线程进入阻塞状态\n1s后线程A唤醒主线程\n主线程被唤醒了</code></pre>\n<p>示例2:</p>\n<pre><code class=\"language-java\">public class LockSupportTest2 {\n    static Thread mainThread ;\n\n    public static void main(String[] args) {\n        // 获取主线程\n        mainThread = Thread.currentThread();\n        ThreadA threadA = new ThreadA();\n        System.out.println(&quot;主线程进入阻塞状态&quot;);\n        threadA.start();\n        LockSupport.park(mainThread);\n        System.out.println(&quot;主线程被唤醒了&quot;);\n\n\n    }\n\n    static class ThreadA extends Thread {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(&quot;1s后线程A唤醒主线程&quot;);\n            LockSupport.unpark(mainThread);\n        }\n    }\n}</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">主线程进入阻塞状态\n1s后线程A唤醒主线程\n主线程被唤醒了</code></pre>\n<p>结果说明：\n在主线程中使用LockSupport挂起主线程，然后在子线程中使用LockSupport将主线程唤醒</p>\n<h2 id=\"locksupport-park-object-wait-\">LockSupport.park与Object.wait的区别</h2>\n<p>LockSupport阻塞和解除阻塞线程直接操作的是Thread,而Object的wait/notify它并不是直接对线程操作,它是被动的方法,它需要一个object来进行线程的挂起或唤醒.</p>\n<p>Thead在调用wait之前, 当前线程必须先获得该对象的监视器(synchronized),被唤醒之后需要重新获取到监视器才能继续执行.而LockSupport可以随意进行park或者unpark. </p>\n',32,0,2,NULL,'2019-08-20 04:49:13','2019-08-25 05:13:31',0,'9,14,35',1,0),(35,'Java多线程JUC锁05——ReentrantReadWriteLock','ReadWriteLock，顾名思义，是读写锁。它维护了一对相关的锁 — — “读取锁”和“写入锁”，一个用于读取操作，另一个用于写入操作。','Bobbi','## ReadWriteLock 和 ReentrantReadWriteLock介绍\nReadWriteLock，顾名思义，是读写锁。它维护了一对相关的锁 — — “读取锁”和“写入锁”，一个用于读取操作，另一个用于写入操作。\n\n“读取锁”用于只读操作，它是“共享锁”，能同时被多个线程获取。“写入锁”用于写入操作，它是“独占锁”，写入锁只能被一个线程锁获取。注意：不能同时存在读取锁和写入锁！\n\nReadWriteLock是一个接口。ReentrantReadWriteLock是它的实现类，ReentrantReadWriteLock包括子类ReadLock和WriteLock。\n\n## ReadWriteLock 和 ReentrantReadWriteLock函数列表\n### ReadWriteLock函数列表\n```java\npublic interface ReadWriteLock {\n    /**\n     * Returns the lock used for reading.\n     */\n    Lock readLock();\n\n    /**\n     * Returns the lock used for writing.\n     */\n    Lock writeLock();\n}\n```\n\n### ReentrantReadWriteLock函数列表\n```java\n// 创建一个新的 ReentrantReadWriteLock，默认是采用“非公平策略”。\nReentrantReadWriteLock()\n// 创建一个新的 ReentrantReadWriteLock，fair是“公平策略”。fair为true，意味着公平策略；否则，意味着非公平策略。\nReentrantReadWriteLock(boolean fair)\n// 返回当前拥有写入锁的线程，如果没有这样的线程，则返回 null。\nprotected Thread getOwner()\n// 返回一个 collection，它包含可能正在等待获取读取锁的线程。\nprotected Collection<Thread> getQueuedReaderThreads()\n// 返回一个 collection，它包含可能正在等待获取读取或写入锁的线程。\nprotected Collection<Thread> getQueuedThreads()\n// 返回一个 collection，它包含可能正在等待获取写入锁的线程。\nprotected Collection<Thread> getQueuedWriterThreads()\n// 返回等待获取读取或写入锁的线程估计数目。\nint getQueueLength()\n// 查询当前线程在此锁上保持的重入读取锁数量。\nint getReadHoldCount()\n// 查询为此锁保持的读取锁数量。\nint getReadLockCount()\n// 返回一个 collection，它包含可能正在等待与写入锁相关的给定条件的那些线程。\nprotected Collection<Thread> getWaitingThreads(Condition condition)\n// 返回正等待与写入锁相关的给定条件的线程估计数目。\nint getWaitQueueLength(Condition condition)\n// 查询当前线程在此锁上保持的重入写入锁数量。\nint getWriteHoldCount()\n// 查询是否给定线程正在等待获取读取或写入锁。\nboolean hasQueuedThread(Thread thread)\n// 查询是否所有的线程正在等待获取读取或写入锁。\nboolean hasQueuedThreads()\n// 查询是否有些线程正在等待与写入锁有关的给定条件。\nboolean hasWaiters(Condition condition)\n// 如果此锁将公平性设置为 ture，则返回 true。\nboolean isFair()\n// 查询是否某个线程保持了写入锁。\nboolean isWriteLocked()\n// 查询当前线程是否保持了写入锁。\nboolean isWriteLockedByCurrentThread()\n// 返回用于读取操作的锁。\nReentrantReadWriteLock.ReadLock readLock()\n// 返回用于写入操作的锁。\nReentrantReadWriteLock.WriteLock writeLock()\n```\n\n## ReentrantReadWriteLock数据结构\n\n![image.png](http://oss.dblearn.cn/dbblog/20190818/185a555d36cd482da0bd3850739863f3.png)\n\n从中可以看出：\n\n1. ReentrantReadWriteLock实现了ReadWriteLock接口。ReadWriteLock是一个读写锁的接口，提供了\"获取读锁的readLock()函数\" 和 \"获取写锁的writeLock()函数\"。\n2. ReentrantReadWriteLock中包含：sync对象，读锁readerLock和写锁writerLock。读锁ReadLock和写锁WriteLock都实现了Lock接口。读锁ReadLock和写锁WriteLock中也都分别包含了\"Sync对象\"，它们的Sync对象和ReentrantReadWriteLock的Sync对象 是一样的，就是通过sync，读锁和写锁实现了对同一个对象的访问。\n3. 和\"ReentrantLock\"一样，sync是Sync类型；而且，Sync也是一个继承于AQS的抽象类。Sync也包括\"公平锁\"FairSync和\"非公平锁\"NonfairSync。sync对象是\"FairSync\"和\"NonfairSync\"中的一个，默认是\"NonfairSync\"。\n\n## 共享锁简析\n部分源码如下：\n```java\npublic static class ReadLock implements Lock, java.io.Serializable {\n    private static final long serialVersionUID = -5992448646407690164L;\n    // ReentrantReadWriteLock的AQS对象\n    private final Sync sync;\n\n    protected ReadLock(ReentrantReadWriteLock lock) {\n        sync = lock.sync;\n    }\n\n    // 获取“共享锁”\n    public void lock() {\n        sync.acquireShared(1);\n    }\n\n    // 如果线程是中断状态，则抛出一场，否则尝试获取共享锁。\n    public void lockInterruptibly() throws InterruptedException {\n        sync.acquireSharedInterruptibly(1);\n    }\n\n    // 尝试获取“共享锁”\n    public  boolean tryLock() {\n        return sync.tryReadLock();\n    }\n\n    // 在指定时间内，尝试获取“共享锁”\n    public boolean tryLock(long timeout, TimeUnit unit)\n            throws InterruptedException {\n        return sync.tryAcquireSharedNanos(1, unit.toNanos(timeout));\n    }\n\n    // 释放“共享锁”\n    public  void unlock() {\n        sync.releaseShared(1);\n    }\n\n    // 新建条件\n    public Condition newCondition() {\n        throw new UnsupportedOperationException();\n    }\n\n    public String toString() {\n        int r = sync.getReadLockCount();\n        return super.toString() +\n            \"[Read locks = \" + r + \"]\";\n    }\n}	\n```\n### 获取共享锁\n获取共享锁的思想(即lock函数的步骤)，是先通过tryAcquireShared()尝试获取共享锁。尝试成功的话，则直接返回；尝试失败的话，则通过doAcquireShared()不断的循环并尝试获取锁，若有需要，则阻塞等待。doAcquireShared()在循环中每次尝试获取锁时，都是通过tryAcquireShared()来进行尝试的。下面看看“获取共享锁”的详细流程\n\n#### 1.lock()\nlock()在ReadLock中，源码如下：\n```java\npublic void lock() {\n    sync.acquireShared(1);\n}\n```\n\n#### 2. acquireShared()\nSync继承于AQS，acquireShared()定义在AQS中。源码如下：\n```java\n public final void acquireShared(int arg) {\n        if (tryAcquireShared(arg) < 0)\n            doAcquireShared(arg);\n    }\n```\nacquireShared()首先会通过tryAcquireShared()来尝试获取锁。尝试成功的话，则不再做任何动作(因为已经成功获取到锁了)。尝试失败的话，则通过doAcquireShared()来获取锁。doAcquireShared()会获取到锁了才返回。\n\n#### 3. tryAcquireShared()\ntryAcquireShared()定义在ReentrantReadWriteLock.java的Sync中，源码如下：\n```java\nprotected final int tryAcquireShared(int unused) {\n    Thread current = Thread.currentThread();\n    // 获取“锁”的状态\n    int c = getState();\n    // 如果“锁”是“互斥锁”，并且获取锁的线程不是current线程；则返回-1。\n    if (exclusiveCount(c) != 0 &&\n        getExclusiveOwnerThread() != current)\n        return -1;\n    // 获取“读取锁”的共享计数\n    int r = sharedCount(c);\n    // 如果“不需要阻塞等待”，并且“读取锁”的共享计数小于MAX_COUNT；\n    // 则通过CAS函数更新“锁的状态”，将“读取锁”的共享计数+1。\n    if (!readerShouldBlock() &&\n        r < MAX_COUNT &&\n        compareAndSetState(c, c + SHARED_UNIT)) {\n        // 第1次获取“读取锁”。\n        if (r == 0) { \n            firstReader = current;\n            firstReaderHoldCount = 1;\n        // 如果想要获取锁的线程(current)是第1个获取锁(firstReader)的线程\n        } else if (firstReader == current) { \n            firstReaderHoldCount++;\n        } else {\n            // HoldCounter是用来统计该线程获取“读取锁”的次数。\n            HoldCounter rh = cachedHoldCounter;\n            if (rh == null || rh.tid != current.getId())\n                cachedHoldCounter = rh = readHolds.get();\n            else if (rh.count == 0)\n                readHolds.set(rh);\n            // 将该线程获取“读取锁”的次数+1。\n            rh.count++;\n        }\n        return 1;\n    }\n    return fullTryAcquireShared(current);\n}\n\n```\n说明：\ntryAcquireShared()的作用是尝试获取“共享锁”。\n如果在尝试获取锁时，“不需要阻塞等待”并且“读取锁的共享计数小于MAX_COUNT”，则直接通过CAS函数更新“读取锁的共享计数”，以及将“当前线程获取读取锁的次数+1”。\n否则，通过fullTryAcquireShared()获取读取锁。\n\n#### 4. fullTryAcquireShared()\nfullTryAcquireShared()在ReentrantReadWriteLock中定义，源码如下：\n```java\nfinal int fullTryAcquireShared(Thread current) {\n    HoldCounter rh = null;\n    for (;;) {\n        // 获取“锁”的状态\n        int c = getState();\n        // 如果“锁”是“互斥锁”，并且获取锁的线程不是current线程；则返回-1。\n        if (exclusiveCount(c) != 0) {\n            if (getExclusiveOwnerThread() != current)\n                return -1;\n        // 如果“需要阻塞等待”。\n        // (01) 当“需要阻塞等待”的线程是第1个获取锁的线程的话，则继续往下执行。\n        // (02) 当“需要阻塞等待”的线程获取锁的次数=0时，则返回-1。\n        } else if (readerShouldBlock()) {\n            // 如果想要获取锁的线程(current)是第1个获取锁(firstReader)的线程\n            if (firstReader == current) {\n            } else {\n                if (rh == null) {\n                    rh = cachedHoldCounter;\n                    if (rh == null || rh.tid != current.getId()) {\n                        rh = readHolds.get();\n                        if (rh.count == 0)\n                            readHolds.remove();\n                    }\n                }\n                // 如果当前线程获取锁的计数=0,则返回-1。\n                if (rh.count == 0)\n                    return -1;\n            }\n        }\n        // 如果“不需要阻塞等待”，则获取“读取锁”的共享统计数；\n        // 如果共享统计数超过MAX_COUNT，则抛出异常。\n        if (sharedCount(c) == MAX_COUNT)\n            throw new Error(\"Maximum lock count exceeded\");\n        // 将线程获取“读取锁”的次数+1。\n        if (compareAndSetState(c, c + SHARED_UNIT)) {\n            // 如果是第1次获取“读取锁”，则更新firstReader和firstReaderHoldCount。\n            if (sharedCount(c) == 0) {\n                firstReader = current;\n                firstReaderHoldCount = 1;\n            // 如果想要获取锁的线程(current)是第1个获取锁(firstReader)的线程，\n            // 则将firstReaderHoldCount+1。\n            } else if (firstReader == current) {\n                firstReaderHoldCount++;\n            } else {\n                if (rh == null)\n                    rh = cachedHoldCounter;\n                if (rh == null || rh.tid != current.getId())\n                    rh = readHolds.get();\n                else if (rh.count == 0)\n                    readHolds.set(rh);\n                // 更新线程的获取“读取锁”的共享计数\n                rh.count++;\n                cachedHoldCounter = rh; // cache for release\n            }\n            return 1;\n        }\n    }\n}\n```\n说明：fullTryAcquireShared()会根据“是否需要阻塞等待”，“读取锁的共享计数是否超过限制”等等进行处理。如果不需要阻塞等待，并且锁的共享计数没有超过限制，则通过CAS尝试获取锁，并返回1。\n\n#### 5. doAcquireShared()\ndoAcquireShared()定义在AQS函数中，源码如下：\n```java\nprivate void doAcquireShared(int arg) {\n    // addWaiter(Node.SHARED)的作用是，创建“当前线程”对应的节点，并将该线程添加到CLH队列中。\n    final Node node = addWaiter(Node.SHARED);\n    boolean failed = true;\n    try {\n        boolean interrupted = false;\n        for (;;) {\n            // 获取“node”的前一节点\n            final Node p = node.predecessor();\n            // 如果“当前线程”是CLH队列的表头，则尝试获取共享锁。\n            if (p == head) {\n                int r = tryAcquireShared(arg);\n                if (r >= 0) {\n                    setHeadAndPropagate(node, r);\n                    p.next = null; // help GC\n                    if (interrupted)\n                        selfInterrupt();\n                    failed = false;\n                    return;\n                }\n            }\n            // 如果“当前线程”不是CLH队列的表头，则通过shouldParkAfterFailedAcquire()判断是否需要等待，\n            // 需要的话，则通过parkAndCheckInterrupt()进行阻塞等待。若阻塞等待过程中，线程被中断过，则设置interrupted为true。\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n\n```\n说明：doAcquireShared()的作用是获取共享锁。\n它会首先创建线程对应的CLH队列的节点，然后将该节点添加到CLH队列中。CLH队列是管理获取锁的等待线程的队列。\n如果“当前线程”是CLH队列的表头，则尝试获取共享锁；否则，则需要通过shouldParkAfterFailedAcquire()判断是否阻塞等待，需要的话，则通过parkAndCheckInterrupt()进行阻塞等待。\ndoAcquireShared()会通过for循环，不断的进行上面的操作；目的就是获取共享锁。需要注意的是：doAcquireShared()在每一次尝试获取锁时，是通过tryAcquireShared()来执行的！\n\n### 释放锁共享锁\n释放共享锁的思想，是先通过tryReleaseShared()尝试释放共享锁。尝试成功的话，则通过doReleaseShared()唤醒“其他等待获取共享锁的线程”，并返回true；否则的话，返回flase。\n\n#### 1. unlock()\n```java\npublic  void unlock() {\n    sync.releaseShared(1);\n}\n```\n说明：该函数实际上调用releaseShared(1)释放共享锁。\n\n#### 2. releaseShared()\nreleaseShared()在AQS中实现，源码如下：\n```java\npublic final boolean releaseShared(int arg) {\n    if (tryReleaseShared(arg)) {\n        doReleaseShared();\n        return true;\n    }\n    return false;\n}\n```\n说明：releaseShared()的目的是让当前线程释放它所持有的共享锁。\n它首先会通过tryReleaseShared()去尝试释放共享锁。尝试成功，则直接返回；尝试失败，则通过doReleaseShared()去释放共享锁。\n\n#### 3. tryReleaseShared()\ntryReleaseShared()定义在ReentrantReadWriteLock中，源码如下：\n```java\nprotected final boolean tryReleaseShared(int unused) {\n    // 获取当前线程，即释放共享锁的线程。\n    Thread current = Thread.currentThread();\n    // 如果想要释放锁的线程(current)是第1个获取锁(firstReader)的线程，\n    // 并且“第1个获取锁的线程获取锁的次数”=1，则设置firstReader为null；\n    // 否则，将“第1个获取锁的线程的获取次数”-1。\n    if (firstReader == current) {\n        // assert firstReaderHoldCount > 0;\n        if (firstReaderHoldCount == 1)\n            firstReader = null;\n        else\n            firstReaderHoldCount--;\n    // 获取rh对象，并更新“当前线程获取锁的信息”。\n    } else {\n \n        HoldCounter rh = cachedHoldCounter;\n        if (rh == null || rh.tid != current.getId())\n            rh = readHolds.get();\n        int count = rh.count;\n        if (count <= 1) {\n            readHolds.remove();\n            if (count <= 0)\n                throw unmatchedUnlockException();\n        }\n        --rh.count;\n    }\n    for (;;) {\n        // 获取锁的状态\n        int c = getState();\n        // 将锁的获取次数-1。\n        int nextc = c - SHARED_UNIT;\n        // 通过CAS更新锁的状态。\n        if (compareAndSetState(c, nextc))\n            return nextc == 0;\n    }\n}\n\n\n```\n说明：tryReleaseShared()的作用是尝试释放共享锁。\n\n#### 4. doReleaseShared()\ndoReleaseShared()定义在AQS中，源码如下：\n```java\nprivate void doReleaseShared() {\n    for (;;) {\n        // 获取CLH队列的头节点\n        Node h = head;\n        // 如果头节点不为null，并且头节点不等于tail节点。\n        if (h != null && h != tail) {\n            // 获取头节点对应的线程的状态\n            int ws = h.waitStatus;\n            // 如果头节点对应的线程是SIGNAL状态，则意味着“头节点的下一个节点所对应的线程”需要被unpark唤醒。\n            if (ws == Node.SIGNAL) {\n                // 设置“头节点对应的线程状态”为空状态。失败的话，则继续循环。\n                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n                    continue;\n                // 唤醒“头节点的下一个节点所对应的线程”。\n                unparkSuccessor(h);\n            }\n            // 如果头节点对应的线程是空状态，则设置“文件点对应的线程所拥有的共享锁”为其它线程获取锁的空状态。\n            else if (ws == 0 &&\n                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                continue;                // loop on failed CAS\n        }\n        // 如果头节点发生变化，则继续循环。否则，退出循环。\n        if (h == head)                   // loop if head changed\n            break;\n    }\n}\n```\n说明：doReleaseShared()会释放“共享锁”。它会从前往后的遍历CLH队列，依次“唤醒”然后“执行”队列中每个节点对应的线程；最终的目的是让这些线程释放它们所持有的锁。\n\n## 公平共享锁和非公平共享锁\n和互斥锁ReentrantLock一样，ReadLock也分为公平锁和非公平锁。\n\n公平锁和非公平锁的区别，体现在判断是否需要阻塞的函数readerShouldBlock()是不同的。\n公平锁的readerShouldBlock()的源码如下：\n```java\nfinal boolean readerShouldBlock() {\n    return hasQueuedPredecessors();\n}\n```\n\n在公平共享锁中，如果在当前线程的前面有其他线程在等待获取共享锁，则返回true；否则，返回false。\n非公平锁的readerShouldBlock()的源码如下：\n```java\nfinal boolean readerShouldBlock() {\n    return apparentlyFirstQueuedIsExclusive();\n}\n```\n在非公平共享锁中，它会无视当前线程的前面是否有其他线程在等待获取共享锁。只要该非公平共享锁对应的线程不为null，则返回true。\n\n## ReentrantReadWriteLock示例\n```java\n\npublic class ReentrantReadWriteLockTest {\n    static ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n\n    public static void main(String[] args) {\n        MyResource myResource = new MyResource(1);\n        // 分别创建3个“读线程”和3个“写线程”\n        for (int i = 0; i < 3; i++) {\n            new Thread(() -> {\n                readWriteLock.readLock().lock();\n                System.out.println(Thread.currentThread().getName()+\" read start\");\n                System.out.println(Thread.currentThread().getName() + \" resource = \"+ myResource.getResource());\n                System.out.println(Thread.currentThread().getName()+\" read end\");\n                readWriteLock.readLock().unlock();\n            }).start();\n        }\n\n        for (int i = 0; i < 3; i++) {\n            new Thread(() -> {\n                readWriteLock.writeLock().lock();\n                System.out.println(Thread.currentThread().getName()+\" write start\");\n                myResource.setResource(myResource.getResource() + 1);\n                System.out.println(Thread.currentThread().getName() + \" resource =\"+ myResource.getResource());\n                System.out.println(Thread.currentThread().getName()+\" write end\");\n                readWriteLock.writeLock().unlock();\n            }).start();\n        }\n\n    }\n    static class MyResource {\n        private Integer resource;\n\n        public MyResource(Integer resource) {\n            this.resource = resource;\n        }\n\n        public Integer getResource() {\n            return resource;\n        }\n\n        public void setResource(Integer resource) {\n            this.resource = resource;\n        }\n    }\n\n}\n\n```\n运行结果：\n```shell\nThread-0 read start\nThread-2 read start\nThread-1 read start\nThread-2 resource = 1\nThread-2 read end\nThread-0 resource = 1\nThread-1 resource = 1\nThread-1 read end\nThread-0 read end\nThread-3 write start\nThread-3 resource =2\nThread-3 write end\nThread-4 write start\nThread-4 resource =3\nThread-4 write end\nThread-5 write start\nThread-5 resource =4\nThread-5 write end\n```\n结果说明：\n\n(1) 观察Thread-0和Thread-2的运行结果，我们发现，Thread-0启动并获取到“读取锁”，在它还没运行完毕的时候，Thread-2也启动了并且也成功获取到“读取锁”。\n因此，“读取锁”支持被多个线程同时获取。\n\n(2) 观察Thread-3,Thread-4,Thread-5这三个“写入锁”的线程。只要“写入锁”被某线程获取，则该线程运行完毕了，才释放该锁。\n因此，“写入锁”不支持被多个线程同时获取。\n\n','<h2 id=\"readwritelock-reentrantreadwritelock-\">ReadWriteLock 和 ReentrantReadWriteLock介绍</h2>\n<p>ReadWriteLock，顾名思义，是读写锁。它维护了一对相关的锁 — — “读取锁”和“写入锁”，一个用于读取操作，另一个用于写入操作。</p>\n<p>“读取锁”用于只读操作，它是“共享锁”，能同时被多个线程获取。“写入锁”用于写入操作，它是“独占锁”，写入锁只能被一个线程锁获取。注意：不能同时存在读取锁和写入锁！</p>\n<p>ReadWriteLock是一个接口。ReentrantReadWriteLock是它的实现类，ReentrantReadWriteLock包括子类ReadLock和WriteLock。</p>\n<h2 id=\"readwritelock-reentrantreadwritelock-\">ReadWriteLock 和 ReentrantReadWriteLock函数列表</h2>\n<h3 id=\"readwritelock-\">ReadWriteLock函数列表</h3>\n<pre><code class=\"language-java\">public interface ReadWriteLock {\n    /**\n     * Returns the lock used for reading.\n     */\n    Lock readLock();\n\n    /**\n     * Returns the lock used for writing.\n     */\n    Lock writeLock();\n}</code></pre>\n<h3 id=\"reentrantreadwritelock-\">ReentrantReadWriteLock函数列表</h3>\n<pre><code class=\"language-java\">// 创建一个新的 ReentrantReadWriteLock，默认是采用“非公平策略”。\nReentrantReadWriteLock()\n// 创建一个新的 ReentrantReadWriteLock，fair是“公平策略”。fair为true，意味着公平策略；否则，意味着非公平策略。\nReentrantReadWriteLock(boolean fair)\n// 返回当前拥有写入锁的线程，如果没有这样的线程，则返回 null。\nprotected Thread getOwner()\n// 返回一个 collection，它包含可能正在等待获取读取锁的线程。\nprotected Collection&lt;Thread&gt; getQueuedReaderThreads()\n// 返回一个 collection，它包含可能正在等待获取读取或写入锁的线程。\nprotected Collection&lt;Thread&gt; getQueuedThreads()\n// 返回一个 collection，它包含可能正在等待获取写入锁的线程。\nprotected Collection&lt;Thread&gt; getQueuedWriterThreads()\n// 返回等待获取读取或写入锁的线程估计数目。\nint getQueueLength()\n// 查询当前线程在此锁上保持的重入读取锁数量。\nint getReadHoldCount()\n// 查询为此锁保持的读取锁数量。\nint getReadLockCount()\n// 返回一个 collection，它包含可能正在等待与写入锁相关的给定条件的那些线程。\nprotected Collection&lt;Thread&gt; getWaitingThreads(Condition condition)\n// 返回正等待与写入锁相关的给定条件的线程估计数目。\nint getWaitQueueLength(Condition condition)\n// 查询当前线程在此锁上保持的重入写入锁数量。\nint getWriteHoldCount()\n// 查询是否给定线程正在等待获取读取或写入锁。\nboolean hasQueuedThread(Thread thread)\n// 查询是否所有的线程正在等待获取读取或写入锁。\nboolean hasQueuedThreads()\n// 查询是否有些线程正在等待与写入锁有关的给定条件。\nboolean hasWaiters(Condition condition)\n// 如果此锁将公平性设置为 ture，则返回 true。\nboolean isFair()\n// 查询是否某个线程保持了写入锁。\nboolean isWriteLocked()\n// 查询当前线程是否保持了写入锁。\nboolean isWriteLockedByCurrentThread()\n// 返回用于读取操作的锁。\nReentrantReadWriteLock.ReadLock readLock()\n// 返回用于写入操作的锁。\nReentrantReadWriteLock.WriteLock writeLock()</code></pre>\n<h2 id=\"reentrantreadwritelock-\">ReentrantReadWriteLock数据结构</h2>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190818/185a555d36cd482da0bd3850739863f3.png\" alt=\"image.png\"></p>\n<p>从中可以看出：</p>\n<ol>\n<li>ReentrantReadWriteLock实现了ReadWriteLock接口。ReadWriteLock是一个读写锁的接口，提供了&quot;获取读锁的readLock()函数&quot; 和 &quot;获取写锁的writeLock()函数&quot;。</li>\n<li>ReentrantReadWriteLock中包含：sync对象，读锁readerLock和写锁writerLock。读锁ReadLock和写锁WriteLock都实现了Lock接口。读锁ReadLock和写锁WriteLock中也都分别包含了&quot;Sync对象&quot;，它们的Sync对象和ReentrantReadWriteLock的Sync对象 是一样的，就是通过sync，读锁和写锁实现了对同一个对象的访问。</li>\n<li>和&quot;ReentrantLock&quot;一样，sync是Sync类型；而且，Sync也是一个继承于AQS的抽象类。Sync也包括&quot;公平锁&quot;FairSync和&quot;非公平锁&quot;NonfairSync。sync对象是&quot;FairSync&quot;和&quot;NonfairSync&quot;中的一个，默认是&quot;NonfairSync&quot;。</li>\n</ol>\n<h2 id=\"-\">共享锁简析</h2>\n<p>部分源码如下：</p>\n<pre><code class=\"language-java\">public static class ReadLock implements Lock, java.io.Serializable {\n    private static final long serialVersionUID = -5992448646407690164L;\n    // ReentrantReadWriteLock的AQS对象\n    private final Sync sync;\n\n    protected ReadLock(ReentrantReadWriteLock lock) {\n        sync = lock.sync;\n    }\n\n    // 获取“共享锁”\n    public void lock() {\n        sync.acquireShared(1);\n    }\n\n    // 如果线程是中断状态，则抛出一场，否则尝试获取共享锁。\n    public void lockInterruptibly() throws InterruptedException {\n        sync.acquireSharedInterruptibly(1);\n    }\n\n    // 尝试获取“共享锁”\n    public  boolean tryLock() {\n        return sync.tryReadLock();\n    }\n\n    // 在指定时间内，尝试获取“共享锁”\n    public boolean tryLock(long timeout, TimeUnit unit)\n            throws InterruptedException {\n        return sync.tryAcquireSharedNanos(1, unit.toNanos(timeout));\n    }\n\n    // 释放“共享锁”\n    public  void unlock() {\n        sync.releaseShared(1);\n    }\n\n    // 新建条件\n    public Condition newCondition() {\n        throw new UnsupportedOperationException();\n    }\n\n    public String toString() {\n        int r = sync.getReadLockCount();\n        return super.toString() +\n            &quot;[Read locks = &quot; + r + &quot;]&quot;;\n    }\n}    </code></pre>\n<h3 id=\"-\">获取共享锁</h3>\n<p>获取共享锁的思想(即lock函数的步骤)，是先通过tryAcquireShared()尝试获取共享锁。尝试成功的话，则直接返回；尝试失败的话，则通过doAcquireShared()不断的循环并尝试获取锁，若有需要，则阻塞等待。doAcquireShared()在循环中每次尝试获取锁时，都是通过tryAcquireShared()来进行尝试的。下面看看“获取共享锁”的详细流程</p>\n<h4 id=\"1-lock-\">1.lock()</h4>\n<p>lock()在ReadLock中，源码如下：</p>\n<pre><code class=\"language-java\">public void lock() {\n    sync.acquireShared(1);\n}</code></pre>\n<h4 id=\"2-acquireshared-\">2. acquireShared()</h4>\n<p>Sync继承于AQS，acquireShared()定义在AQS中。源码如下：</p>\n<pre><code class=\"language-java\"> public final void acquireShared(int arg) {\n        if (tryAcquireShared(arg) &lt; 0)\n            doAcquireShared(arg);\n    }</code></pre>\n<p>acquireShared()首先会通过tryAcquireShared()来尝试获取锁。尝试成功的话，则不再做任何动作(因为已经成功获取到锁了)。尝试失败的话，则通过doAcquireShared()来获取锁。doAcquireShared()会获取到锁了才返回。</p>\n<h4 id=\"3-tryacquireshared-\">3. tryAcquireShared()</h4>\n<p>tryAcquireShared()定义在ReentrantReadWriteLock.java的Sync中，源码如下：</p>\n<pre><code class=\"language-java\">protected final int tryAcquireShared(int unused) {\n    Thread current = Thread.currentThread();\n    // 获取“锁”的状态\n    int c = getState();\n    // 如果“锁”是“互斥锁”，并且获取锁的线程不是current线程；则返回-1。\n    if (exclusiveCount(c) != 0 &amp;&amp;\n        getExclusiveOwnerThread() != current)\n        return -1;\n    // 获取“读取锁”的共享计数\n    int r = sharedCount(c);\n    // 如果“不需要阻塞等待”，并且“读取锁”的共享计数小于MAX_COUNT；\n    // 则通过CAS函数更新“锁的状态”，将“读取锁”的共享计数+1。\n    if (!readerShouldBlock() &amp;&amp;\n        r &lt; MAX_COUNT &amp;&amp;\n        compareAndSetState(c, c + SHARED_UNIT)) {\n        // 第1次获取“读取锁”。\n        if (r == 0) { \n            firstReader = current;\n            firstReaderHoldCount = 1;\n        // 如果想要获取锁的线程(current)是第1个获取锁(firstReader)的线程\n        } else if (firstReader == current) { \n            firstReaderHoldCount++;\n        } else {\n            // HoldCounter是用来统计该线程获取“读取锁”的次数。\n            HoldCounter rh = cachedHoldCounter;\n            if (rh == null || rh.tid != current.getId())\n                cachedHoldCounter = rh = readHolds.get();\n            else if (rh.count == 0)\n                readHolds.set(rh);\n            // 将该线程获取“读取锁”的次数+1。\n            rh.count++;\n        }\n        return 1;\n    }\n    return fullTryAcquireShared(current);\n}\n</code></pre>\n<p>说明：\ntryAcquireShared()的作用是尝试获取“共享锁”。\n如果在尝试获取锁时，“不需要阻塞等待”并且“读取锁的共享计数小于MAX_COUNT”，则直接通过CAS函数更新“读取锁的共享计数”，以及将“当前线程获取读取锁的次数+1”。\n否则，通过fullTryAcquireShared()获取读取锁。</p>\n<h4 id=\"4-fulltryacquireshared-\">4. fullTryAcquireShared()</h4>\n<p>fullTryAcquireShared()在ReentrantReadWriteLock中定义，源码如下：</p>\n<pre><code class=\"language-java\">final int fullTryAcquireShared(Thread current) {\n    HoldCounter rh = null;\n    for (;;) {\n        // 获取“锁”的状态\n        int c = getState();\n        // 如果“锁”是“互斥锁”，并且获取锁的线程不是current线程；则返回-1。\n        if (exclusiveCount(c) != 0) {\n            if (getExclusiveOwnerThread() != current)\n                return -1;\n        // 如果“需要阻塞等待”。\n        // (01) 当“需要阻塞等待”的线程是第1个获取锁的线程的话，则继续往下执行。\n        // (02) 当“需要阻塞等待”的线程获取锁的次数=0时，则返回-1。\n        } else if (readerShouldBlock()) {\n            // 如果想要获取锁的线程(current)是第1个获取锁(firstReader)的线程\n            if (firstReader == current) {\n            } else {\n                if (rh == null) {\n                    rh = cachedHoldCounter;\n                    if (rh == null || rh.tid != current.getId()) {\n                        rh = readHolds.get();\n                        if (rh.count == 0)\n                            readHolds.remove();\n                    }\n                }\n                // 如果当前线程获取锁的计数=0,则返回-1。\n                if (rh.count == 0)\n                    return -1;\n            }\n        }\n        // 如果“不需要阻塞等待”，则获取“读取锁”的共享统计数；\n        // 如果共享统计数超过MAX_COUNT，则抛出异常。\n        if (sharedCount(c) == MAX_COUNT)\n            throw new Error(&quot;Maximum lock count exceeded&quot;);\n        // 将线程获取“读取锁”的次数+1。\n        if (compareAndSetState(c, c + SHARED_UNIT)) {\n            // 如果是第1次获取“读取锁”，则更新firstReader和firstReaderHoldCount。\n            if (sharedCount(c) == 0) {\n                firstReader = current;\n                firstReaderHoldCount = 1;\n            // 如果想要获取锁的线程(current)是第1个获取锁(firstReader)的线程，\n            // 则将firstReaderHoldCount+1。\n            } else if (firstReader == current) {\n                firstReaderHoldCount++;\n            } else {\n                if (rh == null)\n                    rh = cachedHoldCounter;\n                if (rh == null || rh.tid != current.getId())\n                    rh = readHolds.get();\n                else if (rh.count == 0)\n                    readHolds.set(rh);\n                // 更新线程的获取“读取锁”的共享计数\n                rh.count++;\n                cachedHoldCounter = rh; // cache for release\n            }\n            return 1;\n        }\n    }\n}</code></pre>\n<p>说明：fullTryAcquireShared()会根据“是否需要阻塞等待”，“读取锁的共享计数是否超过限制”等等进行处理。如果不需要阻塞等待，并且锁的共享计数没有超过限制，则通过CAS尝试获取锁，并返回1。</p>\n<h4 id=\"5-doacquireshared-\">5. doAcquireShared()</h4>\n<p>doAcquireShared()定义在AQS函数中，源码如下：</p>\n<pre><code class=\"language-java\">private void doAcquireShared(int arg) {\n    // addWaiter(Node.SHARED)的作用是，创建“当前线程”对应的节点，并将该线程添加到CLH队列中。\n    final Node node = addWaiter(Node.SHARED);\n    boolean failed = true;\n    try {\n        boolean interrupted = false;\n        for (;;) {\n            // 获取“node”的前一节点\n            final Node p = node.predecessor();\n            // 如果“当前线程”是CLH队列的表头，则尝试获取共享锁。\n            if (p == head) {\n                int r = tryAcquireShared(arg);\n                if (r &gt;= 0) {\n                    setHeadAndPropagate(node, r);\n                    p.next = null; // help GC\n                    if (interrupted)\n                        selfInterrupt();\n                    failed = false;\n                    return;\n                }\n            }\n            // 如果“当前线程”不是CLH队列的表头，则通过shouldParkAfterFailedAcquire()判断是否需要等待，\n            // 需要的话，则通过parkAndCheckInterrupt()进行阻塞等待。若阻塞等待过程中，线程被中断过，则设置interrupted为true。\n            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;\n                parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n</code></pre>\n<p>说明：doAcquireShared()的作用是获取共享锁。\n它会首先创建线程对应的CLH队列的节点，然后将该节点添加到CLH队列中。CLH队列是管理获取锁的等待线程的队列。\n如果“当前线程”是CLH队列的表头，则尝试获取共享锁；否则，则需要通过shouldParkAfterFailedAcquire()判断是否阻塞等待，需要的话，则通过parkAndCheckInterrupt()进行阻塞等待。\ndoAcquireShared()会通过for循环，不断的进行上面的操作；目的就是获取共享锁。需要注意的是：doAcquireShared()在每一次尝试获取锁时，是通过tryAcquireShared()来执行的！</p>\n<h3 id=\"-\">释放锁共享锁</h3>\n<p>释放共享锁的思想，是先通过tryReleaseShared()尝试释放共享锁。尝试成功的话，则通过doReleaseShared()唤醒“其他等待获取共享锁的线程”，并返回true；否则的话，返回flase。</p>\n<h4 id=\"1-unlock-\">1. unlock()</h4>\n<pre><code class=\"language-java\">public  void unlock() {\n    sync.releaseShared(1);\n}</code></pre>\n<p>说明：该函数实际上调用releaseShared(1)释放共享锁。</p>\n<h4 id=\"2-releaseshared-\">2. releaseShared()</h4>\n<p>releaseShared()在AQS中实现，源码如下：</p>\n<pre><code class=\"language-java\">public final boolean releaseShared(int arg) {\n    if (tryReleaseShared(arg)) {\n        doReleaseShared();\n        return true;\n    }\n    return false;\n}</code></pre>\n<p>说明：releaseShared()的目的是让当前线程释放它所持有的共享锁。\n它首先会通过tryReleaseShared()去尝试释放共享锁。尝试成功，则直接返回；尝试失败，则通过doReleaseShared()去释放共享锁。</p>\n<h4 id=\"3-tryreleaseshared-\">3. tryReleaseShared()</h4>\n<p>tryReleaseShared()定义在ReentrantReadWriteLock中，源码如下：</p>\n<pre><code class=\"language-java\">protected final boolean tryReleaseShared(int unused) {\n    // 获取当前线程，即释放共享锁的线程。\n    Thread current = Thread.currentThread();\n    // 如果想要释放锁的线程(current)是第1个获取锁(firstReader)的线程，\n    // 并且“第1个获取锁的线程获取锁的次数”=1，则设置firstReader为null；\n    // 否则，将“第1个获取锁的线程的获取次数”-1。\n    if (firstReader == current) {\n        // assert firstReaderHoldCount &gt; 0;\n        if (firstReaderHoldCount == 1)\n            firstReader = null;\n        else\n            firstReaderHoldCount--;\n    // 获取rh对象，并更新“当前线程获取锁的信息”。\n    } else {\n\n        HoldCounter rh = cachedHoldCounter;\n        if (rh == null || rh.tid != current.getId())\n            rh = readHolds.get();\n        int count = rh.count;\n        if (count &lt;= 1) {\n            readHolds.remove();\n            if (count &lt;= 0)\n                throw unmatchedUnlockException();\n        }\n        --rh.count;\n    }\n    for (;;) {\n        // 获取锁的状态\n        int c = getState();\n        // 将锁的获取次数-1。\n        int nextc = c - SHARED_UNIT;\n        // 通过CAS更新锁的状态。\n        if (compareAndSetState(c, nextc))\n            return nextc == 0;\n    }\n}\n\n</code></pre>\n<p>说明：tryReleaseShared()的作用是尝试释放共享锁。</p>\n<h4 id=\"4-doreleaseshared-\">4. doReleaseShared()</h4>\n<p>doReleaseShared()定义在AQS中，源码如下：</p>\n<pre><code class=\"language-java\">private void doReleaseShared() {\n    for (;;) {\n        // 获取CLH队列的头节点\n        Node h = head;\n        // 如果头节点不为null，并且头节点不等于tail节点。\n        if (h != null &amp;&amp; h != tail) {\n            // 获取头节点对应的线程的状态\n            int ws = h.waitStatus;\n            // 如果头节点对应的线程是SIGNAL状态，则意味着“头节点的下一个节点所对应的线程”需要被unpark唤醒。\n            if (ws == Node.SIGNAL) {\n                // 设置“头节点对应的线程状态”为空状态。失败的话，则继续循环。\n                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n                    continue;\n                // 唤醒“头节点的下一个节点所对应的线程”。\n                unparkSuccessor(h);\n            }\n            // 如果头节点对应的线程是空状态，则设置“文件点对应的线程所拥有的共享锁”为其它线程获取锁的空状态。\n            else if (ws == 0 &amp;&amp;\n                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                continue;                // loop on failed CAS\n        }\n        // 如果头节点发生变化，则继续循环。否则，退出循环。\n        if (h == head)                   // loop if head changed\n            break;\n    }\n}</code></pre>\n<p>说明：doReleaseShared()会释放“共享锁”。它会从前往后的遍历CLH队列，依次“唤醒”然后“执行”队列中每个节点对应的线程；最终的目的是让这些线程释放它们所持有的锁。</p>\n<h2 id=\"-\">公平共享锁和非公平共享锁</h2>\n<p>和互斥锁ReentrantLock一样，ReadLock也分为公平锁和非公平锁。</p>\n<p>公平锁和非公平锁的区别，体现在判断是否需要阻塞的函数readerShouldBlock()是不同的。\n公平锁的readerShouldBlock()的源码如下：</p>\n<pre><code class=\"language-java\">final boolean readerShouldBlock() {\n    return hasQueuedPredecessors();\n}</code></pre>\n<p>在公平共享锁中，如果在当前线程的前面有其他线程在等待获取共享锁，则返回true；否则，返回false。\n非公平锁的readerShouldBlock()的源码如下：</p>\n<pre><code class=\"language-java\">final boolean readerShouldBlock() {\n    return apparentlyFirstQueuedIsExclusive();\n}</code></pre>\n<p>在非公平共享锁中，它会无视当前线程的前面是否有其他线程在等待获取共享锁。只要该非公平共享锁对应的线程不为null，则返回true。</p>\n<h2 id=\"reentrantreadwritelock-\">ReentrantReadWriteLock示例</h2>\n<pre><code class=\"language-java\">\npublic class ReentrantReadWriteLockTest {\n    static ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n\n    public static void main(String[] args) {\n        MyResource myResource = new MyResource(1);\n        // 分别创建3个“读线程”和3个“写线程”\n        for (int i = 0; i &lt; 3; i++) {\n            new Thread(() -&gt; {\n                readWriteLock.readLock().lock();\n                System.out.println(Thread.currentThread().getName()+&quot; read start&quot;);\n                System.out.println(Thread.currentThread().getName() + &quot; resource = &quot;+ myResource.getResource());\n                System.out.println(Thread.currentThread().getName()+&quot; read end&quot;);\n                readWriteLock.readLock().unlock();\n            }).start();\n        }\n\n        for (int i = 0; i &lt; 3; i++) {\n            new Thread(() -&gt; {\n                readWriteLock.writeLock().lock();\n                System.out.println(Thread.currentThread().getName()+&quot; write start&quot;);\n                myResource.setResource(myResource.getResource() + 1);\n                System.out.println(Thread.currentThread().getName() + &quot; resource =&quot;+ myResource.getResource());\n                System.out.println(Thread.currentThread().getName()+&quot; write end&quot;);\n                readWriteLock.writeLock().unlock();\n            }).start();\n        }\n\n    }\n    static class MyResource {\n        private Integer resource;\n\n        public MyResource(Integer resource) {\n            this.resource = resource;\n        }\n\n        public Integer getResource() {\n            return resource;\n        }\n\n        public void setResource(Integer resource) {\n            this.resource = resource;\n        }\n    }\n\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">Thread-0 read start\nThread-2 read start\nThread-1 read start\nThread-2 resource = 1\nThread-2 read end\nThread-0 resource = 1\nThread-1 resource = 1\nThread-1 read end\nThread-0 read end\nThread-3 write start\nThread-3 resource =2\nThread-3 write end\nThread-4 write start\nThread-4 resource =3\nThread-4 write end\nThread-5 write start\nThread-5 resource =4\nThread-5 write end</code></pre>\n<p>结果说明：</p>\n<p>(1) 观察Thread-0和Thread-2的运行结果，我们发现，Thread-0启动并获取到“读取锁”，在它还没运行完毕的时候，Thread-2也启动了并且也成功获取到“读取锁”。\n因此，“读取锁”支持被多个线程同时获取。</p>\n<p>(2) 观察Thread-3,Thread-4,Thread-5这三个“写入锁”的线程。只要“写入锁”被某线程获取，则该线程运行完毕了，才释放该锁。\n因此，“写入锁”不支持被多个线程同时获取。</p>\n',51,2,2,NULL,'2019-08-20 14:49:49','2019-08-25 05:13:04',0,'9,14,35',1,0),(36,'Java多线程JUC锁06——CountDownLatch','CountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。','Bobbi','## CountDownLatch简介\nCountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。\n\n### CountDownLatch和CyclicBarrier的区别\n1. CountDownLatch的作用是允许1个或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待\n2. CountDownLatch的计数器无法被充值；CyclicBarrier的计数器可以被重置后使用，因此它被成为是循环的barrier\n\n### CountDownLatch函数列表\n```java\nCountDownLatch(int count)\n构造一个用给定计数初始化的 CountDownLatch。\n\n// 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断。\nvoid await()\n// 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。\nboolean await(long timeout, TimeUnit unit)\n// 递减锁存器的计数，如果计数到达零，则释放所有等待的线程。\nvoid countDown()\n// 返回当前计数。\nlong getCount()\n// 返回标识此锁存器及其状态的字符串。\nString toString()\n```\n## CountDownLatch数据结构\nCountDownLatch的UML类图如下：\n![image.png](http://oss.dblearn.cn/dbblog/20190818/7a58c75b879440a48e896fedbc12fb57.png)\n\nCountDownLatch的数据结构很简单，它是通过\"共享锁\"实现的。它包含了sync对象，sync是Sync类型。Sync是实例类，它继承于AQS。\n\n## CountDownLatch源码分析\n#### 1. CountDownLatch(int count)\n```java\npublic CountDownLatch(int count) {\n        if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n        this.sync = new Sync(count);\n    }\n```\n该函数是创建一个Sync对象，而Sync是继承于AQS的。Sync构造函数如下：\n\n```java\nSync(int count) {\n     setState(count);\n}\n```\nsetState()在AQS中实现，源码如下：\n```java\nprotected final void setState(int newState) {\n        state = newState;\n    } \n```\n在AQS中，state是一个private volatile long类型的对象。对于CountDownLatch而言，state表示的”锁计数器“。CountDownLatch中的getCount()最终是调用AQS中的getState()，返回的state对象，即”锁计数器“。\n\n#### 2. await()\n```java\npublic void await() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n```\n该函数实际上是调用的AQS的acquireSharedInterruptibly(1);\n\nAQS中的acquireSharedInterruptibly()的源码如下：\n```java\n    public final void acquireSharedInterruptibly(int arg)\n            throws InterruptedException {\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        if (tryAcquireShared(arg) < 0)\n            doAcquireSharedInterruptibly(arg);\n    }\n```\nacquireSharedInterruptibly()的作用是获取共享锁。\n如果当前线程是中断状态，则抛出异常InterruptedException。否则，调用tryAcquireShared(arg)尝试获取共享锁；尝试成功则返回，否则就调用doAcquireSharedInterruptibly()。doAcquireSharedInterruptibly()会使当前线程一直等待，直到当前线程获取到共享锁(或被中断)才返回。\n\ntryAcquireShared()在CountDownLatch.java中被重写，它的源码如下：\n```java\nprotected int tryAcquireShared(int acquires) {\n    return (getState() == 0) ? 1 : -1;\n}\n```\ntryAcquireShared()的作用是尝试获取共享锁。\n如果\"锁计数器=0\"，即锁是可获取状态，则返回1；否则，锁是不可获取状态，则返回-1。\n\n#### 3. countDown()\n```java\n    public void countDown() {\n        sync.releaseShared(1);\n    }\n```\n该函数实际上调用releaseShared(1)释放共享锁。\n\nreleaseShared()在AQS中实现，源码如下：\n```java\npublic final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n\n```\nreleaseShared()的目的是让当前线程释放它所持有的共享锁。\n它首先会通过tryReleaseShared()去尝试释放共享锁。尝试成功，则直接返回；尝试失败，则通过doReleaseShared()去释放共享锁。\n\ntryReleaseShared()在CountDownLatch.java中被重写，源码如下：\n```java\n        protected boolean tryReleaseShared(int releases) {\n            // Decrement count; signal when transition to zero\n            for (;;) {\n		 // 获取“锁计数器”的状态\n                int c = getState();\n                if (c == 0)\n                    return false;\n		// “锁计数器”-1\n                int nextc = c-1;\n		// 通过CAS函数进行赋值。\n                if (compareAndSetState(c, nextc))\n                    return nextc == 0;\n            }\n        }\n```\ntryReleaseShared()的作用是释放共享锁，将“锁计数器”的值-1。\n\n#### 总结\nCountDownLatch是通过“共享锁”实现的。在创建CountDownLatch中时，会传递一个int类型参数count，该参数是“锁计数器”的初始状态，表示该“共享锁”最多能被count给线程同时获取。当某线程调用该CountDownLatch对象的await()方法时，该线程会等待“共享锁”可用时，才能获取“共享锁”进而继续运行。而“共享锁”可用的条件，就是“锁计数器”的值为0！而“锁计数器”的初始值为count，每当一个线程调用该CountDownLatch对象的countDown()方法时，才将“锁计数器”-1；通过这种方式，必须有count个线程调用countDown()之后，“锁计数器”才为0，而前面提到的等待线程才能继续运行！\n\n以上，就是CountDownLatch的实现原理。\n\n## CountDownLatch的使用实例\n```java\n\npublic class CountDownLatchTest {\n    static CountDownLatch countDownLatch = new CountDownLatch(5);\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 5; i++) {\n            new MyThread().start();\n        }\n        try {\n            System.out.println(\"主线程开始等待5个线程执行完毕后执行\");\n            countDownLatch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"主线程执行\");\n\n    }\n\n    static class MyThread extends Thread {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName()+\" run\");\n            countDownLatch.countDown();\n        }\n    }\n}\n\n```\n运行结果：\n\n```java\n主线程开始等待5个线程执行完毕后执行\nThread-0 run\nThread-1 run\nThread-2 run\nThread-3 run\nThread-4 run\n主线程执行\n```\n结果说明：\n创建一个长度为5的CountDowntLatch。主线程通过countDownLatch.await等待其他线程将countDownLatch的值递减为0时，主线程被唤醒后继续执行。','<h2 id=\"countdownlatch-\">CountDownLatch简介</h2>\n<p>CountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</p>\n<h3 id=\"countdownlatch-cyclicbarrier-\">CountDownLatch和CyclicBarrier的区别</h3>\n<ol>\n<li>CountDownLatch的作用是允许1个或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待</li>\n<li>CountDownLatch的计数器无法被充值；CyclicBarrier的计数器可以被重置后使用，因此它被成为是循环的barrier</li>\n</ol>\n<h3 id=\"countdownlatch-\">CountDownLatch函数列表</h3>\n<pre><code class=\"language-java\">CountDownLatch(int count)\n构造一个用给定计数初始化的 CountDownLatch。\n\n// 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断。\nvoid await()\n// 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。\nboolean await(long timeout, TimeUnit unit)\n// 递减锁存器的计数，如果计数到达零，则释放所有等待的线程。\nvoid countDown()\n// 返回当前计数。\nlong getCount()\n// 返回标识此锁存器及其状态的字符串。\nString toString()</code></pre>\n<h2 id=\"countdownlatch-\">CountDownLatch数据结构</h2>\n<p>CountDownLatch的UML类图如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190818/7a58c75b879440a48e896fedbc12fb57.png\" alt=\"image.png\"></p>\n<p>CountDownLatch的数据结构很简单，它是通过&quot;共享锁&quot;实现的。它包含了sync对象，sync是Sync类型。Sync是实例类，它继承于AQS。</p>\n<h2 id=\"countdownlatch-\">CountDownLatch源码分析</h2>\n<h4 id=\"1-countdownlatch-int-count-\">1. CountDownLatch(int count)</h4>\n<pre><code class=\"language-java\">public CountDownLatch(int count) {\n        if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);\n        this.sync = new Sync(count);\n    }</code></pre>\n<p>该函数是创建一个Sync对象，而Sync是继承于AQS的。Sync构造函数如下：</p>\n<pre><code class=\"language-java\">Sync(int count) {\n     setState(count);\n}</code></pre>\n<p>setState()在AQS中实现，源码如下：</p>\n<pre><code class=\"language-java\">protected final void setState(int newState) {\n        state = newState;\n    } </code></pre>\n<p>在AQS中，state是一个private volatile long类型的对象。对于CountDownLatch而言，state表示的”锁计数器“。CountDownLatch中的getCount()最终是调用AQS中的getState()，返回的state对象，即”锁计数器“。</p>\n<h4 id=\"2-await-\">2. await()</h4>\n<pre><code class=\"language-java\">public void await() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}</code></pre>\n<p>该函数实际上是调用的AQS的acquireSharedInterruptibly(1);</p>\n<p>AQS中的acquireSharedInterruptibly()的源码如下：</p>\n<pre><code class=\"language-java\">    public final void acquireSharedInterruptibly(int arg)\n            throws InterruptedException {\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        if (tryAcquireShared(arg) &lt; 0)\n            doAcquireSharedInterruptibly(arg);\n    }</code></pre>\n<p>acquireSharedInterruptibly()的作用是获取共享锁。\n如果当前线程是中断状态，则抛出异常InterruptedException。否则，调用tryAcquireShared(arg)尝试获取共享锁；尝试成功则返回，否则就调用doAcquireSharedInterruptibly()。doAcquireSharedInterruptibly()会使当前线程一直等待，直到当前线程获取到共享锁(或被中断)才返回。</p>\n<p>tryAcquireShared()在CountDownLatch.java中被重写，它的源码如下：</p>\n<pre><code class=\"language-java\">protected int tryAcquireShared(int acquires) {\n    return (getState() == 0) ? 1 : -1;\n}</code></pre>\n<p>tryAcquireShared()的作用是尝试获取共享锁。\n如果&quot;锁计数器=0&quot;，即锁是可获取状态，则返回1；否则，锁是不可获取状态，则返回-1。</p>\n<h4 id=\"3-countdown-\">3. countDown()</h4>\n<pre><code class=\"language-java\">    public void countDown() {\n        sync.releaseShared(1);\n    }</code></pre>\n<p>该函数实际上调用releaseShared(1)释放共享锁。</p>\n<p>releaseShared()在AQS中实现，源码如下：</p>\n<pre><code class=\"language-java\">public final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n</code></pre>\n<p>releaseShared()的目的是让当前线程释放它所持有的共享锁。\n它首先会通过tryReleaseShared()去尝试释放共享锁。尝试成功，则直接返回；尝试失败，则通过doReleaseShared()去释放共享锁。</p>\n<p>tryReleaseShared()在CountDownLatch.java中被重写，源码如下：</p>\n<pre><code class=\"language-java\">        protected boolean tryReleaseShared(int releases) {\n            // Decrement count; signal when transition to zero\n            for (;;) {\n         // 获取“锁计数器”的状态\n                int c = getState();\n                if (c == 0)\n                    return false;\n        // “锁计数器”-1\n                int nextc = c-1;\n        // 通过CAS函数进行赋值。\n                if (compareAndSetState(c, nextc))\n                    return nextc == 0;\n            }\n        }</code></pre>\n<p>tryReleaseShared()的作用是释放共享锁，将“锁计数器”的值-1。</p>\n<h4 id=\"-\">总结</h4>\n<p>CountDownLatch是通过“共享锁”实现的。在创建CountDownLatch中时，会传递一个int类型参数count，该参数是“锁计数器”的初始状态，表示该“共享锁”最多能被count给线程同时获取。当某线程调用该CountDownLatch对象的await()方法时，该线程会等待“共享锁”可用时，才能获取“共享锁”进而继续运行。而“共享锁”可用的条件，就是“锁计数器”的值为0！而“锁计数器”的初始值为count，每当一个线程调用该CountDownLatch对象的countDown()方法时，才将“锁计数器”-1；通过这种方式，必须有count个线程调用countDown()之后，“锁计数器”才为0，而前面提到的等待线程才能继续运行！</p>\n<p>以上，就是CountDownLatch的实现原理。</p>\n<h2 id=\"countdownlatch-\">CountDownLatch的使用实例</h2>\n<pre><code class=\"language-java\">\npublic class CountDownLatchTest {\n    static CountDownLatch countDownLatch = new CountDownLatch(5);\n\n    public static void main(String[] args) {\n        for (int i = 0; i &lt; 5; i++) {\n            new MyThread().start();\n        }\n        try {\n            System.out.println(&quot;主线程开始等待5个线程执行完毕后执行&quot;);\n            countDownLatch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(&quot;主线程执行&quot;);\n\n    }\n\n    static class MyThread extends Thread {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName()+&quot; run&quot;);\n            countDownLatch.countDown();\n        }\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-java\">主线程开始等待5个线程执行完毕后执行\nThread-0 run\nThread-1 run\nThread-2 run\nThread-3 run\nThread-4 run\n主线程执行</code></pre>\n<p>结果说明：\n创建一个长度为5的CountDowntLatch。主线程通过countDownLatch.await等待其他线程将countDownLatch的值递减为0时，主线程被唤醒后继续执行。</p>\n',35,83,2,NULL,'2019-08-22 12:03:25','2019-08-25 05:12:44',0,'9,14,35',1,0),(37,'Java多线程JUC锁07——CyclicBarrier','CyclicBarrier是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。','Bobbi','## CyclicBarrier简介\nCyclicBarrier是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。\n\n注意比较CountDownLatch和CyclicBarrier：\n1. CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待。\n2. CountDownLatch的计数器无法被重置；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier。\n\n### CyclicBarrier函数列表\n```java\nCyclicBarrier(int parties)\n创建一个新的 CyclicBarrier，它将在给定数量的参与者（线程）处于等待状态时启动，但它不会在启动 barrier 时执行预定义的操作。\nCyclicBarrier(int parties, Runnable barrierAction)\n创建一个新的 CyclicBarrier，它将在给定数量的参与者（线程）处于等待状态时启动，并在启动 barrier 时执行给定的屏障操作，该操作由最后一个进入 barrier 的线程执行。\n\nint await()\n在所有参与者都已经在此 barrier 上调用 await 方法之前，将一直等待。\nint await(long timeout, TimeUnit unit)\n在所有参与者都已经在此屏障上调用 await 方法之前将一直等待,或者超出了指定的等待时间。\nint getNumberWaiting()\n返回当前在屏障处等待的参与者数目。\nint getParties()\n返回要求启动此 barrier 的参与者数目。\nboolean isBroken()\n查询此屏障是否处于损坏状态。\nvoid reset()\n将屏障重置为其初始状态。\n```\n\n## CyclicBarrier数据结构\n\n![image.png](http://oss.dblearn.cn/dbblog/20190818/98942854eef24dfaafb5be8147a09344.png)\n\nCyclicBarrier是包含了\"ReentrantLock对象lock\"和\"Condition对象trip\"，它是通过独占锁实现的。\n\n## CyclicBarrier源码分析\n\nCyclicBarrier是通过ReentrantLock(独占锁)和Condition来实现的。下面，我们分析CyclicBarrier中3个核心函数: 构造函数, await()作出分析。\n\n#### 1. 构造函数\nCyclicBarrier的构造函数共2个：CyclicBarrier 和 CyclicBarrier(int parties, Runnable barrierAction)。第1个构造函数是调用第2个构造函数来实现的，下面第2个构造函数的源码。\n\n```java\n\npublic CyclicBarrier(int parties, Runnable barrierAction) {\n    if (parties <= 0) throw new IllegalArgumentException();\n    // parties表示“必须同时到达barrier的线程个数”。\n    this.parties = parties;\n    // count表示“处在等待状态的线程个数”。\n    this.count = parties;\n    // barrierCommand表示“parties个线程到达barrier时，会执行的动作”。\n    this.barrierCommand = barrierAction;\n}\n\n```\n#### 2. await()\n```java\npublic int await() throws InterruptedException, BrokenBarrierException {\n    try {\n        return dowait(false, 0L);\n    } catch (TimeoutException toe) {\n        throw new Error(toe); // cannot happen;\n    }\n}\n```\nawait()是通过dowait()实现的。\n\n```java\nprivate int dowait(boolean timed, long nanos)\n    throws InterruptedException, BrokenBarrierException,\n           TimeoutException {\n    final ReentrantLock lock = this.lock;\n    // 获取“独占锁(lock)”\n    lock.lock();\n    try {\n        // 保存“当前的generation”\n        final Generation g = generation;\n\n        // 若“当前generation已损坏”，则抛出异常。\n        if (g.broken)\n            throw new BrokenBarrierException();\n\n        // 如果当前线程被中断，则通过breakBarrier()终止CyclicBarrier，唤醒CyclicBarrier中所有等待线程。\n        if (Thread.interrupted()) {\n            breakBarrier();\n            throw new InterruptedException();\n        }\n\n       // 将“count计数器”-1\n       int index = --count;\n       // 如果index=0，则意味着“有parties个线程到达barrier”。\n       if (index == 0) {  // tripped\n           boolean ranAction = false;\n           try {\n               // 如果barrierCommand不为null，则执行该动作。\n               final Runnable command = barrierCommand;\n               if (command != null)\n                   command.run();\n               ranAction = true;\n               // 唤醒所有等待线程，并更新generation。\n               nextGeneration();\n               return 0;\n           } finally {\n               if (!ranAction)\n                   breakBarrier();\n           }\n       }\n\n        // 当前线程一直阻塞，直到“有parties个线程到达barrier” 或 “当前线程被中断” 或 “超时”这3者之一发生，\n        // 当前线程才继续执行。\n        for (;;) {\n            try {\n                // 如果不是“超时等待”，则调用awati()进行等待；否则，调用awaitNanos()进行等待。\n                if (!timed)\n                    trip.await();\n                else if (nanos > 0L)\n                    nanos = trip.awaitNanos(nanos);\n            } catch (InterruptedException ie) {\n                // 如果等待过程中，线程被中断，则执行下面的函数。\n                if (g == generation && ! g.broken) {\n                    breakBarrier();\n                    throw ie;\n                } else {\n                    Thread.currentThread().interrupt();\n                }\n            }\n\n            // 如果“当前generation已经损坏”，则抛出异常。\n            if (g.broken)\n                throw new BrokenBarrierException();\n\n            // 如果“generation已经换代”，则返回index。\n            if (g != generation)\n                return index;\n\n            // 如果是“超时等待”，并且时间已到，则通过breakBarrier()终止CyclicBarrier，唤醒CyclicBarrier中所有等待线程。\n            if (timed && nanos <= 0L) {\n                breakBarrier();\n                throw new TimeoutException();\n            }\n        }\n    } finally {\n        // 释放“独占锁(lock)”\n        lock.unlock();\n    }\n}\n\n```\ndowait()的作用就是让当前线程阻塞，直到“有parties个线程到达barrier” 或 “当前线程被中断” 或 “超时”这3者之一发生，当前线程才继续执行。\n(1) generation是CyclicBarrier的一个成员变量，它的定义如下：\n```java\nprivate Generation generation = new Generation();\n\nprivate static class Generation {\n    boolean broken = false;\n}\n```\n在CyclicBarrier中，同一批的线程属于同一代，即同一个Generation；CyclicBarrier中通过generation对象，记录属于哪一代。\n当有parties个线程到达barrier，generation就会被更新换代。\n\n(2) 如果当前线程被中断，即Thread.interrupted()为true；则通过breakBarrier()终止CyclicBarrier。breakBarrier()的源码如下：\n```java\n    private void breakBarrier() {\n        generation.broken = true;\n        count = parties;\n        trip.signalAll();\n    }\n```\nbreakBarrier()会设置当前中断标记broken为true，意味着“将该Generation中断”；同时，设置count=parties，即重新初始化count；最后，通过signalAll()唤醒CyclicBarrier上所有的等待线程。\n\n(3) 将“count计数器”-1，即--count；然后判断是不是“有parties个线程到达barrier”，即index是不是为0。\n当index=0时，如果barrierCommand不为null，则执行该barrierCommand，barrierCommand就是我们创建CyclicBarrier时，传入的Runnable对象。然后，调用nextGeneration()进行换代工作，nextGeneration()的源码如下：\n\n```java\nprivate void nextGeneration() {\n    trip.signalAll();\n    count = parties;\n    generation = new Generation();\n}\n```\n首先，它会调用signalAll()唤醒CyclicBarrier上所有的等待线程；接着，重新初始化count；最后，更新generation的值。\n\n(4) 在for(;;)循环中。timed是用来表示当前是不是“超时等待”线程。如果不是，则通过trip.await()进行等待；否则，调用awaitNanos()进行超时等待。\n\n## CyclicBarrier的使用示例\n```java\npublic class CyclicBarrierTest {\n    // 创建barrier为5的CyclicBarrier,并注册达到barrier的事件\n    static CyclicBarrier cyclicBarrier = new CyclicBarrier(5,() -> {\n        System.out.println(\"CyclicBarrier\'s parties is: \"+ CyclicBarrierTest.cyclicBarrier.getParties());\n    });\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 5; i++) {\n            new Mythread().start();\n        }\n    }\n\n    static class Mythread extends Thread {\n        @Override\n        public void run() {\n            System.out.println(Thread.currentThread().getName() + \" wait for CyclicBarrier\");\n            try {\n                // 将cyclicBarrier的参与者数量加1\n                cyclicBarrier.await();\n\n                // 参与者的数量等于5时，才继续执行\n                System.out.println(Thread.currentThread().getName()+\" continued\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n运行结果：\n\n```shell\nThread-0 wait for CyclicBarrier\nThread-1 wait for CyclicBarrier\nThread-2 wait for CyclicBarrier\nThread-3 wait for CyclicBarrier\nThread-4 wait for CyclicBarrier\nCyclicBarrier\'s parties is: 5\nThread-4 continued\nThread-0 continued\nThread-2 continued\nThread-1 continued\nThread-3 continued\n```\n\n主线程中新建了5个线程，所有的这些线程都调用cyclicBarrier.await()等待。所有这些线程一直等待，直到cyclicBarrier中所有线程都达到barrier时，执行新建cyclicBarrier时注册的Runnable任务。\n\n\n\n','<h2 id=\"cyclicbarrier-\">CyclicBarrier简介</h2>\n<p>CyclicBarrier是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。</p>\n<p>注意比较CountDownLatch和CyclicBarrier：</p>\n<ol>\n<li>CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待。</li>\n<li>CountDownLatch的计数器无法被重置；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier。</li>\n</ol>\n<h3 id=\"cyclicbarrier-\">CyclicBarrier函数列表</h3>\n<pre><code class=\"language-java\">CyclicBarrier(int parties)\n创建一个新的 CyclicBarrier，它将在给定数量的参与者（线程）处于等待状态时启动，但它不会在启动 barrier 时执行预定义的操作。\nCyclicBarrier(int parties, Runnable barrierAction)\n创建一个新的 CyclicBarrier，它将在给定数量的参与者（线程）处于等待状态时启动，并在启动 barrier 时执行给定的屏障操作，该操作由最后一个进入 barrier 的线程执行。\n\nint await()\n在所有参与者都已经在此 barrier 上调用 await 方法之前，将一直等待。\nint await(long timeout, TimeUnit unit)\n在所有参与者都已经在此屏障上调用 await 方法之前将一直等待,或者超出了指定的等待时间。\nint getNumberWaiting()\n返回当前在屏障处等待的参与者数目。\nint getParties()\n返回要求启动此 barrier 的参与者数目。\nboolean isBroken()\n查询此屏障是否处于损坏状态。\nvoid reset()\n将屏障重置为其初始状态。</code></pre>\n<h2 id=\"cyclicbarrier-\">CyclicBarrier数据结构</h2>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190818/98942854eef24dfaafb5be8147a09344.png\" alt=\"image.png\"></p>\n<p>CyclicBarrier是包含了&quot;ReentrantLock对象lock&quot;和&quot;Condition对象trip&quot;，它是通过独占锁实现的。</p>\n<h2 id=\"cyclicbarrier-\">CyclicBarrier源码分析</h2>\n<p>CyclicBarrier是通过ReentrantLock(独占锁)和Condition来实现的。下面，我们分析CyclicBarrier中3个核心函数: 构造函数, await()作出分析。</p>\n<h4 id=\"1-\">1. 构造函数</h4>\n<p>CyclicBarrier的构造函数共2个：CyclicBarrier 和 CyclicBarrier(int parties, Runnable barrierAction)。第1个构造函数是调用第2个构造函数来实现的，下面第2个构造函数的源码。</p>\n<pre><code class=\"language-java\">\npublic CyclicBarrier(int parties, Runnable barrierAction) {\n    if (parties &lt;= 0) throw new IllegalArgumentException();\n    // parties表示“必须同时到达barrier的线程个数”。\n    this.parties = parties;\n    // count表示“处在等待状态的线程个数”。\n    this.count = parties;\n    // barrierCommand表示“parties个线程到达barrier时，会执行的动作”。\n    this.barrierCommand = barrierAction;\n}\n</code></pre>\n<h4 id=\"2-await-\">2. await()</h4>\n<pre><code class=\"language-java\">public int await() throws InterruptedException, BrokenBarrierException {\n    try {\n        return dowait(false, 0L);\n    } catch (TimeoutException toe) {\n        throw new Error(toe); // cannot happen;\n    }\n}</code></pre>\n<p>await()是通过dowait()实现的。</p>\n<pre><code class=\"language-java\">private int dowait(boolean timed, long nanos)\n    throws InterruptedException, BrokenBarrierException,\n           TimeoutException {\n    final ReentrantLock lock = this.lock;\n    // 获取“独占锁(lock)”\n    lock.lock();\n    try {\n        // 保存“当前的generation”\n        final Generation g = generation;\n\n        // 若“当前generation已损坏”，则抛出异常。\n        if (g.broken)\n            throw new BrokenBarrierException();\n\n        // 如果当前线程被中断，则通过breakBarrier()终止CyclicBarrier，唤醒CyclicBarrier中所有等待线程。\n        if (Thread.interrupted()) {\n            breakBarrier();\n            throw new InterruptedException();\n        }\n\n       // 将“count计数器”-1\n       int index = --count;\n       // 如果index=0，则意味着“有parties个线程到达barrier”。\n       if (index == 0) {  // tripped\n           boolean ranAction = false;\n           try {\n               // 如果barrierCommand不为null，则执行该动作。\n               final Runnable command = barrierCommand;\n               if (command != null)\n                   command.run();\n               ranAction = true;\n               // 唤醒所有等待线程，并更新generation。\n               nextGeneration();\n               return 0;\n           } finally {\n               if (!ranAction)\n                   breakBarrier();\n           }\n       }\n\n        // 当前线程一直阻塞，直到“有parties个线程到达barrier” 或 “当前线程被中断” 或 “超时”这3者之一发生，\n        // 当前线程才继续执行。\n        for (;;) {\n            try {\n                // 如果不是“超时等待”，则调用awati()进行等待；否则，调用awaitNanos()进行等待。\n                if (!timed)\n                    trip.await();\n                else if (nanos &gt; 0L)\n                    nanos = trip.awaitNanos(nanos);\n            } catch (InterruptedException ie) {\n                // 如果等待过程中，线程被中断，则执行下面的函数。\n                if (g == generation &amp;&amp; ! g.broken) {\n                    breakBarrier();\n                    throw ie;\n                } else {\n                    Thread.currentThread().interrupt();\n                }\n            }\n\n            // 如果“当前generation已经损坏”，则抛出异常。\n            if (g.broken)\n                throw new BrokenBarrierException();\n\n            // 如果“generation已经换代”，则返回index。\n            if (g != generation)\n                return index;\n\n            // 如果是“超时等待”，并且时间已到，则通过breakBarrier()终止CyclicBarrier，唤醒CyclicBarrier中所有等待线程。\n            if (timed &amp;&amp; nanos &lt;= 0L) {\n                breakBarrier();\n                throw new TimeoutException();\n            }\n        }\n    } finally {\n        // 释放“独占锁(lock)”\n        lock.unlock();\n    }\n}\n</code></pre>\n<p>dowait()的作用就是让当前线程阻塞，直到“有parties个线程到达barrier” 或 “当前线程被中断” 或 “超时”这3者之一发生，当前线程才继续执行。\n(1) generation是CyclicBarrier的一个成员变量，它的定义如下：</p>\n<pre><code class=\"language-java\">private Generation generation = new Generation();\n\nprivate static class Generation {\n    boolean broken = false;\n}</code></pre>\n<p>在CyclicBarrier中，同一批的线程属于同一代，即同一个Generation；CyclicBarrier中通过generation对象，记录属于哪一代。\n当有parties个线程到达barrier，generation就会被更新换代。</p>\n<p>(2) 如果当前线程被中断，即Thread.interrupted()为true；则通过breakBarrier()终止CyclicBarrier。breakBarrier()的源码如下：</p>\n<pre><code class=\"language-java\">    private void breakBarrier() {\n        generation.broken = true;\n        count = parties;\n        trip.signalAll();\n    }</code></pre>\n<p>breakBarrier()会设置当前中断标记broken为true，意味着“将该Generation中断”；同时，设置count=parties，即重新初始化count；最后，通过signalAll()唤醒CyclicBarrier上所有的等待线程。</p>\n<p>(3) 将“count计数器”-1，即--count；然后判断是不是“有parties个线程到达barrier”，即index是不是为0。\n当index=0时，如果barrierCommand不为null，则执行该barrierCommand，barrierCommand就是我们创建CyclicBarrier时，传入的Runnable对象。然后，调用nextGeneration()进行换代工作，nextGeneration()的源码如下：</p>\n<pre><code class=\"language-java\">private void nextGeneration() {\n    trip.signalAll();\n    count = parties;\n    generation = new Generation();\n}</code></pre>\n<p>首先，它会调用signalAll()唤醒CyclicBarrier上所有的等待线程；接着，重新初始化count；最后，更新generation的值。</p>\n<p>(4) 在for(;;)循环中。timed是用来表示当前是不是“超时等待”线程。如果不是，则通过trip.await()进行等待；否则，调用awaitNanos()进行超时等待。</p>\n<h2 id=\"cyclicbarrier-\">CyclicBarrier的使用示例</h2>\n<pre><code class=\"language-java\">public class CyclicBarrierTest {\n    // 创建barrier为5的CyclicBarrier,并注册达到barrier的事件\n    static CyclicBarrier cyclicBarrier = new CyclicBarrier(5,() -&gt; {\n        System.out.println(&quot;CyclicBarrier&#39;s parties is: &quot;+ CyclicBarrierTest.cyclicBarrier.getParties());\n    });\n\n    public static void main(String[] args) {\n        for (int i = 0; i &lt; 5; i++) {\n            new Mythread().start();\n        }\n    }\n\n    static class Mythread extends Thread {\n        @Override\n        public void run() {\n            System.out.println(Thread.currentThread().getName() + &quot; wait for CyclicBarrier&quot;);\n            try {\n                // 将cyclicBarrier的参与者数量加1\n                cyclicBarrier.await();\n\n                // 参与者的数量等于5时，才继续执行\n                System.out.println(Thread.currentThread().getName()+&quot; continued&quot;);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">Thread-0 wait for CyclicBarrier\nThread-1 wait for CyclicBarrier\nThread-2 wait for CyclicBarrier\nThread-3 wait for CyclicBarrier\nThread-4 wait for CyclicBarrier\nCyclicBarrier&#39;s parties is: 5\nThread-4 continued\nThread-0 continued\nThread-2 continued\nThread-1 continued\nThread-3 continued</code></pre>\n<p>主线程中新建了5个线程，所有的这些线程都调用cyclicBarrier.await()等待。所有这些线程一直等待，直到cyclicBarrier中所有线程都达到barrier时，执行新建cyclicBarrier时注册的Runnable任务。</p>\n',50,1,2,NULL,'2019-08-24 06:38:31','2019-08-25 05:12:21',0,'9,14,35',1,0),(38,'Java多线程JUC锁08——Semaphore信号量','Semaphore是一个计数信号量，它的本质是一个\"共享锁\"。\n\n信号量维护了一个信号量许可集。线程可以通过调用acquire()来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过release()来释放它所持有的信号量许可。','Bobbi','## Semaphore简介\nSemaphore是一个计数信号量，它的本质是一个\"共享锁\"。\n\n信号量维护了一个信号量许可集。线程可以通过调用acquire()来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过release()来释放它所持有的信号量许可。\n### Semaphore的函数列表\n```java\n// 创建具有给定的许可数和非公平的公平设置的 Semaphore。\nSemaphore(int permits)\n// 创建具有给定的许可数和给定的公平设置的 Semaphore。\nSemaphore(int permits, boolean fair)\n\n// 从此信号量获取一个许可，在提供一个许可前一直将线程阻塞，否则线程被中断。\nvoid acquire()\n// 从此信号量获取给定数目的许可，在提供这些许可前一直将线程阻塞，或者线程已被中断。\nvoid acquire(int permits)\n// 从此信号量中获取许可，在有可用的许可前将其阻塞。\nvoid acquireUninterruptibly()\n// 从此信号量获取给定数目的许可，在提供这些许可前一直将线程阻塞。\nvoid acquireUninterruptibly(int permits)\n// 返回此信号量中当前可用的许可数。\nint availablePermits()\n// 获取并返回立即可用的所有许可。\nint drainPermits()\n// 返回一个 collection，包含可能等待获取的线程。\nprotected Collection<Thread> getQueuedThreads()\n// 返回正在等待获取的线程的估计数目。\nint getQueueLength()\n// 查询是否有线程正在等待获取。\nboolean hasQueuedThreads()\n// 如果此信号量的公平设置为 true，则返回 true。\nboolean isFair()\n// 根据指定的缩减量减小可用许可的数目。\nprotected void reducePermits(int reduction)\n// 释放一个许可，将其返回给信号量。\nvoid release()\n// 释放给定数目的许可，将其返回到信号量。\nvoid release(int permits)\n// 返回标识此信号量的字符串，以及信号量的状态。\nString toString()\n// 仅在调用时此信号量存在一个可用许可，才从信号量获取许可。\nboolean tryAcquire()\n// 仅在调用时此信号量中有给定数目的许可时，才从此信号量中获取这些许可。\nboolean tryAcquire(int permits)\n// 如果在给定的等待时间内此信号量有可用的所有许可，并且当前线程未被中断，则从此信号量获取给定数目的许可。\nboolean tryAcquire(int permits, long timeout, TimeUnit unit)\n// 如果在给定的等待时间内，此信号量有可用的许可并且当前线程未被中断，则从此信号量获取一个许可。\nboolean tryAcquire(long timeout, TimeUnit unit)\n```\n## Semaphore数据结构\n![image.png](http://oss.dblearn.cn/dbblog/20190818/83ae38c8d23c4bdbb6b2155733383d3f.png)\n\n从图中可以看出：\n1. 和\"ReentrantLock\"一样，Semaphore也包含了sync对象，sync是Sync类型；而且，Sync是一个继承于AQS的抽象类。\n2. Sync包括两个子类：\"公平信号量\"FairSync 和 \"非公平信号量\"NonfairSync。sync是\"FairSync的实例\"，或者\"NonfairSync的实例\"；默认情况下，sync是NonfairSync(即，默认是非公平信号量)。\n\n## Semaphore源码分析\nSemaphore是通过共享锁实现的。根据共享锁的获取原则，Semaphore分为\"公平信号量\"和\"非公平信号量\"。\n\n#### \"公平信号量\"和\"非公平信号量\"的区别\n\n\"公平信号量\"和\"非公平信号量\"的释放信号量的机制是一样的！不同的是它们获取信号量的机制：线程在尝试获取信号量许可时，对于公平信号量而言，如果当前线程不在CLH队列的头部，则排队等候；而对于非公平信号量而言，无论当前线程是不是在CLH队列的头部，它都会直接获取信号量。该差异具体的体现在，它们的tryAcquireShared()函数的实现不同。\n\n#### 信号量构造函数\n```java\npublic Semaphore(int permits) {\n    sync = new NonfairSync(permits);\n}\n\npublic Semaphore(int permits, boolean fair) {\n    sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n}\n\n```\n从中，我们可以信号量分为“公平信号量(FairSync)”和“非公平信号量(NonfairSync)”。Semaphore(int permits)函数会默认创建“非公平信号量”。\n\n\n#### 公平信号量的获取\n\nSemaphore中的公平信号量是FairSync。它的获取API如下：\n```java\npublic void acquire() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n\npublic void acquire(int permits) throws InterruptedException {\n    if (permits < 0) throw new IllegalArgumentException();\n    sync.acquireSharedInterruptibly(permits);\n}\n```\n信号量中的acquire()获取函数，实际上是调用的AQS中的acquireSharedInterruptibly()。\n\nacquireSharedInterruptibly()的源码如下：\n```java\n\npublic final void acquireSharedInterruptibly(int arg)\n        throws InterruptedException {\n    // 如果线程是中断状态，则抛出异常。\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    // 否则，尝试获取“共享锁”；获取成功则直接返回，获取失败，则通过doAcquireSharedInterruptibly()获取。\n    if (tryAcquireShared(arg) < 0)\n        doAcquireSharedInterruptibly(arg);\n}\n```\n\nSemaphore中”公平锁“对应的tryAcquireShared()实现如下：\n```java\nprotected int tryAcquireShared(int acquires) {\n    for (;;) {\n        // 判断“当前线程”是不是CLH队列中的第一个线程线程，\n        // 若是的话，则返回-1。\n        if (hasQueuedPredecessors())\n            return -1;\n        // 设置“可以获得的信号量的许可数”\n        int available = getState();\n        // 设置“获得acquires个信号量许可之后，剩余的信号量许可数”\n        int remaining = available - acquires;\n        // 如果“剩余的信号量许可数>=0”，则设置“可以获得的信号量许可数”为remaining。\n        if (remaining < 0 ||\n            compareAndSetState(available, remaining))\n            return remaining;\n    }\n}\n```\ntryAcquireShared()的作用是尝试获取acquires个信号量许可数。\n对于Semaphore而言，state表示的是“当前可获得的信号量许可数”。\n\n下面看看AQS中doAcquireSharedInterruptibly()的实现：\n```java\nprivate void doAcquireSharedInterruptibly(long arg)\n    throws InterruptedException {\n    // 创建”当前线程“的Node节点，且Node中记录的锁是”共享锁“类型；并将该节点添加到CLH队列末尾。\n    final Node node = addWaiter(Node.SHARED);\n    boolean failed = true;\n    try {\n        for (;;) {\n            // 获取上一个节点。\n            // 如果上一节点是CLH队列的表头，则”尝试获取共享锁“。\n            final Node p = node.predecessor();\n            if (p == head) {\n                long r = tryAcquireShared(arg);\n                if (r >= 0) {\n                    setHeadAndPropagate(node, r);\n                    p.next = null; // help GC\n                    failed = false;\n                    return;\n                }\n            }\n            // 当前线程一直等待，直到获取到共享锁。\n            // 如果线程在等待过程中被中断过，则再次中断该线程(还原之前的中断状态)。\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                throw new InterruptedException();\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n\n```\ndoAcquireSharedInterruptibly()会使当前线程一直等待，直到当前线程获取到共享锁(或被中断)才返回。\n\n#### 公平信号量的释放\nSemaphore中公平信号量(FairSync)的释放API如下：\n```java\npublic void release() {\n    sync.releaseShared(1);\n}\n\npublic void release(int permits) {\n    if (permits < 0) throw new IllegalArgumentException();\n    sync.releaseShared(permits);\n}\n```\n信号量的releases()释放函数，实际上是调用的AQS中的releaseShared()。\n\nreleaseShared()在AQS中实现，源码如下：\n```java\npublic final boolean releaseShared(int arg) {\n    if (tryReleaseShared(arg)) {\n        doReleaseShared();\n        return true;\n    }\n    return false;\n}\n```\nreleaseShared()的目的是让当前线程释放它所持有的共享锁。\n它首先会通过tryReleaseShared()去尝试释放共享锁。尝试成功，则直接返回；尝试失败，则通过doReleaseShared()去释放共享锁。\n\nSemaphore重写了tryReleaseShared()，它的源码如下：\n```java\nprotected final boolean tryReleaseShared(int releases) {\n    for (;;) {\n        // 获取“可以获得的信号量的许可数”\n        int current = getState();\n        // 获取“释放releases个信号量许可之后，剩余的信号量许可数”\n        int next = current + releases;\n        if (next < current) // overflow\n            throw new Error(\"Maximum permit count exceeded\");\n        // 设置“可以获得的信号量的许可数”为next。\n        if (compareAndSetState(current, next))\n            return true;\n    }\n}\n```\n\n如果tryReleaseShared()尝试释放共享锁失败，则会调用doReleaseShared()去释放共享锁。doReleaseShared()的源码如下：\n```java\nprivate void doReleaseShared() {\n    for (;;) {\n        // 获取CLH队列的头节点\n        Node h = head;\n        // 如果头节点不为null，并且头节点不等于tail节点。\n        if (h != null && h != tail) {\n            // 获取头节点对应的线程的状态\n            int ws = h.waitStatus;\n            // 如果头节点对应的线程是SIGNAL状态，则意味着“头节点的下一个节点所对应的线程”需要被unpark唤醒。\n            if (ws == Node.SIGNAL) {\n                // 设置“头节点对应的线程状态”为空状态。失败的话，则继续循环。\n                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n                    continue;\n                // 唤醒“头节点的下一个节点所对应的线程”。\n                unparkSuccessor(h);\n            }\n            // 如果头节点对应的线程是空状态，则设置“文件点对应的线程所拥有的共享锁”为其它线程获取锁的空状态。\n            else if (ws == 0 &&\n                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                continue;                // loop on failed CAS\n        }\n        // 如果头节点发生变化，则继续循环。否则，退出循环。\n        if (h == head)                   // loop if head changed\n            break;\n    }\n}\n```\ndoReleaseShared()会释放“共享锁”。它会从前往后的遍历CLH队列，依次“唤醒”然后“执行”队列中每个节点对应的线程；最终的目的是让这些线程释放它们所持有的信号量。\n\n#### 非公平信号量获取和释放\nSemaphore中的非公平信号量是NonFairSync。在Semaphore中，“非公平信号量许可的释放(release)”与“公平信号量许可的释放(release)”是一样的。\n不同的是它们获取“信号量许可”的机制不同，下面是非公平信号量获取信号量许可的代码。\n\n非公平信号量的tryAcquireShared()实现如下：\n```java\nprotected int tryAcquireShared(int acquires) {\n    return nonfairTryAcquireShared(acquires);\n}\n```\n\nnonfairTryAcquireShared()的实现如下：\n\n```java\nfinal int nonfairTryAcquireShared(int acquires) {\n    for (;;) {\n        // 设置“可以获得的信号量的许可数”\n        int available = getState();\n        // 设置“获得acquires个信号量许可之后，剩余的信号量许可数”\n        int remaining = available - acquires;\n        // 如果“剩余的信号量许可数>=0”，则设置“可以获得的信号量许可数”为remaining。\n        if (remaining < 0 ||\n            compareAndSetState(available, remaining))\n            return remaining;\n    }\n}\n```\n非公平信号量的tryAcquireShared()调用AQS中的nonfairTryAcquireShared()。而在nonfairTryAcquireShared()的for循环中，它都会直接判断“当前剩余的信号量许可数”是否足够；足够的话，则直接“设置可以获得的信号量许可数”，进而再获取信号量。\n而公平信号量的tryAcquireShared()中，在获取信号量之前会通过if (hasQueuedPredecessors())来判断“当前线程是不是在CLH队列的头部”，是的话，则返回-1。 \n## Semaphore示例\n```java\nclass Mythread extends Thread {\n    private Semaphore semaphore;\n    private Integer count;\n\n    public Mythread(Semaphore semaphore, Integer count) {\n        this.semaphore = semaphore;\n        this.count = count;\n    }\n\n    @Override\n    public void run() {\n        try {\n            // 从信号量中获取count个许可\n            semaphore.acquire(count);\n            Thread.sleep(2000);\n            System.out.println(Thread.currentThread().getName() + \" acquire count=\" + count);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // 释放给定数目的许可，将其返回到信号量。\n            semaphore.release(count);\n            System.out.println(Thread.currentThread().getName() + \" release \" + count + \"\");\n        }\n    }\n}\n\npublic class SemaphoreTest {\n\n    public static void main(String[] args) {\n        Semaphore semaphore = new Semaphore(10);\n        ExecutorService threadPool = Executors.newFixedThreadPool(3);\n        threadPool.execute(new Mythread(semaphore,4));\n        threadPool.execute(new Mythread(semaphore,5));\n        threadPool.execute(new Mythread(semaphore,7));\n        threadPool.shutdown();\n    }\n\n\n}\n\n```\n运行结果：\n\n```java\npool-1-thread-1 acquire count=4\npool-1-thread-2 acquire count=5\npool-1-thread-1 release 4\npool-1-thread-2 release 5\npool-1-thread-3 acquire count=7\npool-1-thread-3 release 7\n```\n\n信号量sem的许可总数是10个；共3个线程，分别需要获取的信号量许可数是5,4,7。前面两个线程获取到信号量的许可后，sem中剩余的可用的许可数是1；因此，最后一个线程必须等前两个线程释放了它们所持有的信号量许可之后，才能获取到7个信号量许可。','<h2 id=\"semaphore-\">Semaphore简介</h2>\n<p>Semaphore是一个计数信号量，它的本质是一个&quot;共享锁&quot;。</p>\n<p>信号量维护了一个信号量许可集。线程可以通过调用acquire()来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过release()来释放它所持有的信号量许可。</p>\n<h3 id=\"semaphore-\">Semaphore的函数列表</h3>\n<pre><code class=\"language-java\">// 创建具有给定的许可数和非公平的公平设置的 Semaphore。\nSemaphore(int permits)\n// 创建具有给定的许可数和给定的公平设置的 Semaphore。\nSemaphore(int permits, boolean fair)\n\n// 从此信号量获取一个许可，在提供一个许可前一直将线程阻塞，否则线程被中断。\nvoid acquire()\n// 从此信号量获取给定数目的许可，在提供这些许可前一直将线程阻塞，或者线程已被中断。\nvoid acquire(int permits)\n// 从此信号量中获取许可，在有可用的许可前将其阻塞。\nvoid acquireUninterruptibly()\n// 从此信号量获取给定数目的许可，在提供这些许可前一直将线程阻塞。\nvoid acquireUninterruptibly(int permits)\n// 返回此信号量中当前可用的许可数。\nint availablePermits()\n// 获取并返回立即可用的所有许可。\nint drainPermits()\n// 返回一个 collection，包含可能等待获取的线程。\nprotected Collection&lt;Thread&gt; getQueuedThreads()\n// 返回正在等待获取的线程的估计数目。\nint getQueueLength()\n// 查询是否有线程正在等待获取。\nboolean hasQueuedThreads()\n// 如果此信号量的公平设置为 true，则返回 true。\nboolean isFair()\n// 根据指定的缩减量减小可用许可的数目。\nprotected void reducePermits(int reduction)\n// 释放一个许可，将其返回给信号量。\nvoid release()\n// 释放给定数目的许可，将其返回到信号量。\nvoid release(int permits)\n// 返回标识此信号量的字符串，以及信号量的状态。\nString toString()\n// 仅在调用时此信号量存在一个可用许可，才从信号量获取许可。\nboolean tryAcquire()\n// 仅在调用时此信号量中有给定数目的许可时，才从此信号量中获取这些许可。\nboolean tryAcquire(int permits)\n// 如果在给定的等待时间内此信号量有可用的所有许可，并且当前线程未被中断，则从此信号量获取给定数目的许可。\nboolean tryAcquire(int permits, long timeout, TimeUnit unit)\n// 如果在给定的等待时间内，此信号量有可用的许可并且当前线程未被中断，则从此信号量获取一个许可。\nboolean tryAcquire(long timeout, TimeUnit unit)</code></pre>\n<h2 id=\"semaphore-\">Semaphore数据结构</h2>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190818/83ae38c8d23c4bdbb6b2155733383d3f.png\" alt=\"image.png\"></p>\n<p>从图中可以看出：</p>\n<ol>\n<li>和&quot;ReentrantLock&quot;一样，Semaphore也包含了sync对象，sync是Sync类型；而且，Sync是一个继承于AQS的抽象类。</li>\n<li>Sync包括两个子类：&quot;公平信号量&quot;FairSync 和 &quot;非公平信号量&quot;NonfairSync。sync是&quot;FairSync的实例&quot;，或者&quot;NonfairSync的实例&quot;；默认情况下，sync是NonfairSync(即，默认是非公平信号量)。</li>\n</ol>\n<h2 id=\"semaphore-\">Semaphore源码分析</h2>\n<p>Semaphore是通过共享锁实现的。根据共享锁的获取原则，Semaphore分为&quot;公平信号量&quot;和&quot;非公平信号量&quot;。</p>\n<h4 id=\"-\">&quot;公平信号量&quot;和&quot;非公平信号量&quot;的区别</h4>\n<p>&quot;公平信号量&quot;和&quot;非公平信号量&quot;的释放信号量的机制是一样的！不同的是它们获取信号量的机制：线程在尝试获取信号量许可时，对于公平信号量而言，如果当前线程不在CLH队列的头部，则排队等候；而对于非公平信号量而言，无论当前线程是不是在CLH队列的头部，它都会直接获取信号量。该差异具体的体现在，它们的tryAcquireShared()函数的实现不同。</p>\n<h4 id=\"-\">信号量构造函数</h4>\n<pre><code class=\"language-java\">public Semaphore(int permits) {\n    sync = new NonfairSync(permits);\n}\n\npublic Semaphore(int permits, boolean fair) {\n    sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n}\n</code></pre>\n<p>从中，我们可以信号量分为“公平信号量(FairSync)”和“非公平信号量(NonfairSync)”。Semaphore(int permits)函数会默认创建“非公平信号量”。</p>\n<h4 id=\"-\">公平信号量的获取</h4>\n<p>Semaphore中的公平信号量是FairSync。它的获取API如下：</p>\n<pre><code class=\"language-java\">public void acquire() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n\npublic void acquire(int permits) throws InterruptedException {\n    if (permits &lt; 0) throw new IllegalArgumentException();\n    sync.acquireSharedInterruptibly(permits);\n}</code></pre>\n<p>信号量中的acquire()获取函数，实际上是调用的AQS中的acquireSharedInterruptibly()。</p>\n<p>acquireSharedInterruptibly()的源码如下：</p>\n<pre><code class=\"language-java\">\npublic final void acquireSharedInterruptibly(int arg)\n        throws InterruptedException {\n    // 如果线程是中断状态，则抛出异常。\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    // 否则，尝试获取“共享锁”；获取成功则直接返回，获取失败，则通过doAcquireSharedInterruptibly()获取。\n    if (tryAcquireShared(arg) &lt; 0)\n        doAcquireSharedInterruptibly(arg);\n}</code></pre>\n<p>Semaphore中”公平锁“对应的tryAcquireShared()实现如下：</p>\n<pre><code class=\"language-java\">protected int tryAcquireShared(int acquires) {\n    for (;;) {\n        // 判断“当前线程”是不是CLH队列中的第一个线程线程，\n        // 若是的话，则返回-1。\n        if (hasQueuedPredecessors())\n            return -1;\n        // 设置“可以获得的信号量的许可数”\n        int available = getState();\n        // 设置“获得acquires个信号量许可之后，剩余的信号量许可数”\n        int remaining = available - acquires;\n        // 如果“剩余的信号量许可数&gt;=0”，则设置“可以获得的信号量许可数”为remaining。\n        if (remaining &lt; 0 ||\n            compareAndSetState(available, remaining))\n            return remaining;\n    }\n}</code></pre>\n<p>tryAcquireShared()的作用是尝试获取acquires个信号量许可数。\n对于Semaphore而言，state表示的是“当前可获得的信号量许可数”。</p>\n<p>下面看看AQS中doAcquireSharedInterruptibly()的实现：</p>\n<pre><code class=\"language-java\">private void doAcquireSharedInterruptibly(long arg)\n    throws InterruptedException {\n    // 创建”当前线程“的Node节点，且Node中记录的锁是”共享锁“类型；并将该节点添加到CLH队列末尾。\n    final Node node = addWaiter(Node.SHARED);\n    boolean failed = true;\n    try {\n        for (;;) {\n            // 获取上一个节点。\n            // 如果上一节点是CLH队列的表头，则”尝试获取共享锁“。\n            final Node p = node.predecessor();\n            if (p == head) {\n                long r = tryAcquireShared(arg);\n                if (r &gt;= 0) {\n                    setHeadAndPropagate(node, r);\n                    p.next = null; // help GC\n                    failed = false;\n                    return;\n                }\n            }\n            // 当前线程一直等待，直到获取到共享锁。\n            // 如果线程在等待过程中被中断过，则再次中断该线程(还原之前的中断状态)。\n            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;\n                parkAndCheckInterrupt())\n                throw new InterruptedException();\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n</code></pre>\n<p>doAcquireSharedInterruptibly()会使当前线程一直等待，直到当前线程获取到共享锁(或被中断)才返回。</p>\n<h4 id=\"-\">公平信号量的释放</h4>\n<p>Semaphore中公平信号量(FairSync)的释放API如下：</p>\n<pre><code class=\"language-java\">public void release() {\n    sync.releaseShared(1);\n}\n\npublic void release(int permits) {\n    if (permits &lt; 0) throw new IllegalArgumentException();\n    sync.releaseShared(permits);\n}</code></pre>\n<p>信号量的releases()释放函数，实际上是调用的AQS中的releaseShared()。</p>\n<p>releaseShared()在AQS中实现，源码如下：</p>\n<pre><code class=\"language-java\">public final boolean releaseShared(int arg) {\n    if (tryReleaseShared(arg)) {\n        doReleaseShared();\n        return true;\n    }\n    return false;\n}</code></pre>\n<p>releaseShared()的目的是让当前线程释放它所持有的共享锁。\n它首先会通过tryReleaseShared()去尝试释放共享锁。尝试成功，则直接返回；尝试失败，则通过doReleaseShared()去释放共享锁。</p>\n<p>Semaphore重写了tryReleaseShared()，它的源码如下：</p>\n<pre><code class=\"language-java\">protected final boolean tryReleaseShared(int releases) {\n    for (;;) {\n        // 获取“可以获得的信号量的许可数”\n        int current = getState();\n        // 获取“释放releases个信号量许可之后，剩余的信号量许可数”\n        int next = current + releases;\n        if (next &lt; current) // overflow\n            throw new Error(&quot;Maximum permit count exceeded&quot;);\n        // 设置“可以获得的信号量的许可数”为next。\n        if (compareAndSetState(current, next))\n            return true;\n    }\n}</code></pre>\n<p>如果tryReleaseShared()尝试释放共享锁失败，则会调用doReleaseShared()去释放共享锁。doReleaseShared()的源码如下：</p>\n<pre><code class=\"language-java\">private void doReleaseShared() {\n    for (;;) {\n        // 获取CLH队列的头节点\n        Node h = head;\n        // 如果头节点不为null，并且头节点不等于tail节点。\n        if (h != null &amp;&amp; h != tail) {\n            // 获取头节点对应的线程的状态\n            int ws = h.waitStatus;\n            // 如果头节点对应的线程是SIGNAL状态，则意味着“头节点的下一个节点所对应的线程”需要被unpark唤醒。\n            if (ws == Node.SIGNAL) {\n                // 设置“头节点对应的线程状态”为空状态。失败的话，则继续循环。\n                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n                    continue;\n                // 唤醒“头节点的下一个节点所对应的线程”。\n                unparkSuccessor(h);\n            }\n            // 如果头节点对应的线程是空状态，则设置“文件点对应的线程所拥有的共享锁”为其它线程获取锁的空状态。\n            else if (ws == 0 &amp;&amp;\n                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                continue;                // loop on failed CAS\n        }\n        // 如果头节点发生变化，则继续循环。否则，退出循环。\n        if (h == head)                   // loop if head changed\n            break;\n    }\n}</code></pre>\n<p>doReleaseShared()会释放“共享锁”。它会从前往后的遍历CLH队列，依次“唤醒”然后“执行”队列中每个节点对应的线程；最终的目的是让这些线程释放它们所持有的信号量。</p>\n<h4 id=\"-\">非公平信号量获取和释放</h4>\n<p>Semaphore中的非公平信号量是NonFairSync。在Semaphore中，“非公平信号量许可的释放(release)”与“公平信号量许可的释放(release)”是一样的。\n不同的是它们获取“信号量许可”的机制不同，下面是非公平信号量获取信号量许可的代码。</p>\n<p>非公平信号量的tryAcquireShared()实现如下：</p>\n<pre><code class=\"language-java\">protected int tryAcquireShared(int acquires) {\n    return nonfairTryAcquireShared(acquires);\n}</code></pre>\n<p>nonfairTryAcquireShared()的实现如下：</p>\n<pre><code class=\"language-java\">final int nonfairTryAcquireShared(int acquires) {\n    for (;;) {\n        // 设置“可以获得的信号量的许可数”\n        int available = getState();\n        // 设置“获得acquires个信号量许可之后，剩余的信号量许可数”\n        int remaining = available - acquires;\n        // 如果“剩余的信号量许可数&gt;=0”，则设置“可以获得的信号量许可数”为remaining。\n        if (remaining &lt; 0 ||\n            compareAndSetState(available, remaining))\n            return remaining;\n    }\n}</code></pre>\n<p>非公平信号量的tryAcquireShared()调用AQS中的nonfairTryAcquireShared()。而在nonfairTryAcquireShared()的for循环中，它都会直接判断“当前剩余的信号量许可数”是否足够；足够的话，则直接“设置可以获得的信号量许可数”，进而再获取信号量。\n而公平信号量的tryAcquireShared()中，在获取信号量之前会通过if (hasQueuedPredecessors())来判断“当前线程是不是在CLH队列的头部”，是的话，则返回-1。 </p>\n<h2 id=\"semaphore-\">Semaphore示例</h2>\n<pre><code class=\"language-java\">class Mythread extends Thread {\n    private Semaphore semaphore;\n    private Integer count;\n\n    public Mythread(Semaphore semaphore, Integer count) {\n        this.semaphore = semaphore;\n        this.count = count;\n    }\n\n    @Override\n    public void run() {\n        try {\n            // 从信号量中获取count个许可\n            semaphore.acquire(count);\n            Thread.sleep(2000);\n            System.out.println(Thread.currentThread().getName() + &quot; acquire count=&quot; + count);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // 释放给定数目的许可，将其返回到信号量。\n            semaphore.release(count);\n            System.out.println(Thread.currentThread().getName() + &quot; release &quot; + count + &quot;&quot;);\n        }\n    }\n}\n\npublic class SemaphoreTest {\n\n    public static void main(String[] args) {\n        Semaphore semaphore = new Semaphore(10);\n        ExecutorService threadPool = Executors.newFixedThreadPool(3);\n        threadPool.execute(new Mythread(semaphore,4));\n        threadPool.execute(new Mythread(semaphore,5));\n        threadPool.execute(new Mythread(semaphore,7));\n        threadPool.shutdown();\n    }\n\n\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-java\">pool-1-thread-1 acquire count=4\npool-1-thread-2 acquire count=5\npool-1-thread-1 release 4\npool-1-thread-2 release 5\npool-1-thread-3 acquire count=7\npool-1-thread-3 release 7</code></pre>\n<p>信号量sem的许可总数是10个；共3个线程，分别需要获取的信号量许可数是5,4,7。前面两个线程获取到信号量的许可后，sem中剩余的可用的许可数是1；因此，最后一个线程必须等前两个线程释放了它们所持有的信号量许可之后，才能获取到7个信号量许可。</p>\n',110,60,2,NULL,'2019-08-24 08:00:44','2019-09-18 09:41:12',0,'9,14,35',1,0),(39,'Java多线程JUC集合01——JUC集合框架','介绍java集合的架构。主体内容包括Collection集合和Map类；而Collection集合又可以划分为List(队列)和Set(集合)。','Bobbi',NULL,NULL,0,0,2,NULL,'2019-08-28 11:26:01','2019-08-28 11:26:01',0,'9,14,37',0,0),(40,'Java集合01——总体框架','Java集合是java提供的工具包，包含了常用的数据结构：集合、链表、队列、栈、数组、映射等','Bobbi','## 集合框架\nJava集合是java提供的工具包，包含了常用的数据结构：集合、链表、队列、栈、数组、映射等。Java集合工具包位置是java.util.*\n\nJava集合主要可以划分为4个部分：\n- List列表\n- Set集合\n- Map映射\n- 工具类(Iterator迭代器、Enumeration枚举类、Arrays和Collections)\n\nJava集合工具包框架图(如下)：\n![image.png](http://oss.dblearn.cn/dbblog/20190902/2a2f0a9782654805b65d526f20aaf01c.png)\n\n## 大致说明：\n\n看上面的框架图，先抓住它的主干，即Collection和Map。\n\n### 1. Collection是一个接口，是高度抽象出来的集合，它包含了集合的基本操作和属性。\n\nCollection包含了List和Set两大分支。\n\nList是一个有序的队列，每一个元素都有它的索引。第一个元素的索引值是0。List的实现类有LinkedList, ArrayList, Vector, Stack。\nSet是一个不允许有重复元素的集合。Set的实现类有HastSet和TreeSet。HashSet依赖于HashMap，它实际上是通过HashMap实现的；TreeSet依赖于TreeMap，它实际上是通过TreeMap实现的。\n\n### 2. Map是一个映射接口，即key-value键值对。Map中的每一个元素包含“一个key”和“key对应的value”。\n\nAbstractMap是个抽象类，它实现了Map接口中的大部分API。而HashMap，TreeMap，WeakHashMap都是继承于AbstractMap。\n   \nHashtable虽然继承于Dictionary，但它实现了Map接口。\n\n接下来，再看Iterator。它是遍历集合的工具，即我们通常通过Iterator迭代器来遍历集合。我们说Collection依赖于Iterator，是因为Collection的实现类都要实现iterator()函数，返回一个Iterator对象。\n\n\n最后，看Arrays和Collections。它们是操作数组、集合的两个工具类。\n\n有了上面的整体框架之后，我们接下来对每个类分别进行分析。\n\n\n','<h2 id=\"-\">集合框架</h2>\n<p>Java集合是java提供的工具包，包含了常用的数据结构：集合、链表、队列、栈、数组、映射等。Java集合工具包位置是java.util.*</p>\n<p>Java集合主要可以划分为4个部分：</p>\n<ul>\n<li>List列表</li>\n<li>Set集合</li>\n<li>Map映射</li>\n<li>工具类(Iterator迭代器、Enumeration枚举类、Arrays和Collections)</li>\n</ul>\n<p>Java集合工具包框架图(如下)：\n<img src=\"http://oss.dblearn.cn/dbblog/20190902/2a2f0a9782654805b65d526f20aaf01c.png\" alt=\"image.png\"></p>\n<h2 id=\"-\">大致说明：</h2>\n<p>看上面的框架图，先抓住它的主干，即Collection和Map。</p>\n<h3 id=\"1-collection-\">1. Collection是一个接口，是高度抽象出来的集合，它包含了集合的基本操作和属性。</h3>\n<p>Collection包含了List和Set两大分支。</p>\n<p>List是一个有序的队列，每一个元素都有它的索引。第一个元素的索引值是0。List的实现类有LinkedList, ArrayList, Vector, Stack。\nSet是一个不允许有重复元素的集合。Set的实现类有HastSet和TreeSet。HashSet依赖于HashMap，它实际上是通过HashMap实现的；TreeSet依赖于TreeMap，它实际上是通过TreeMap实现的。</p>\n<h3 id=\"2-map-key-value-map-key-key-value-\">2. Map是一个映射接口，即key-value键值对。Map中的每一个元素包含“一个key”和“key对应的value”。</h3>\n<p>AbstractMap是个抽象类，它实现了Map接口中的大部分API。而HashMap，TreeMap，WeakHashMap都是继承于AbstractMap。</p>\n<p>Hashtable虽然继承于Dictionary，但它实现了Map接口。</p>\n<p>接下来，再看Iterator。它是遍历集合的工具，即我们通常通过Iterator迭代器来遍历集合。我们说Collection依赖于Iterator，是因为Collection的实现类都要实现iterator()函数，返回一个Iterator对象。</p>\n<p>最后，看Arrays和Collections。它们是操作数组、集合的两个工具类。</p>\n<p>有了上面的整体框架之后，我们接下来对每个类分别进行分析。</p>\n',70,92,2,NULL,'2019-09-02 14:56:47','2019-09-02 15:21:10',0,'9,11,38',1,0),(41,'Java集合02——Collection框架','Collection是一个接口，它主要的两个分支是：List 和 Set。\n',NULL,'## 概要\nCollection是一个接口，它主要的两个分支是：List 和 Set。\n![image.png](http://oss.dblearn.cn/dbblog/20190903/a8a003a1642a48368ddfa1286f5b6821.png)\n\n- List和Set都是接口，它们继承于Collection。List是有序的队列，List中可以有重复的元素；而Set是数学概念中的集合，Set中没有重复元素！\n\n- AbstractCollection抽象类，它实现了Collection中的绝大部分函数；这样，在Collection的实现类中，我们就可以通过继承AbstractCollection省去重复编码。AbstractList和AbstractSet都继承于AbstractCollection，具体的List实现类继承于AbstractList，而Set的实现类则继承于AbstractSet。\n\n- 另外，Collection中有一个iterator()函数，它的作用是返回一个Iterator接口。通常，我们通过Iterator迭代器来遍历集合。ListIterator是List接口所特有的，在List接口中，通过ListIterator()返回一个ListIterator对象。\n\n## Collection简介\nCollection 定义如下：\n```java\npublic interface Collection<E> extends Iterable<E> {}\n```\n它是一个接口，是高度抽象出来的集合，它包含了集合的基本操作：添加、删除、清空、遍历(读取)、是否为空、获取大小、是否保护某元素等等。\n\n```java\npublic interface Collection<E> extends Iterable<E> {\n    // Query Operations\n\n    // 返回此集合中的元素数\n    int size();\n\n    // 如果此集合不包含元素，则返回 true\n    boolean isEmpty();\n\n    // 如果此集合包含指定的元素，则返回 true\n    boolean contains(Object o);\n\n    // 返回此集合中的元素的迭代器\n    Iterator<E> iterator();\n\n    // 返回一个包含此集合中所有元素的数组\n    Object[] toArray();\n\n    // 返回包含此集合中所有元素的数组; 返回的数组的运行时类型是指定数组的运行时类型。\n    <T> T[] toArray(T[] a);\n\n    // Modification Operations\n\n    // 向集合中添加一个元素\n    boolean add(E e);\n\n    // 从该集合中删除指定元素的单个实例（如果存在）\n    boolean remove(Object o);\n\n\n    // 以下均为批量操作\n\n    // 如果此集合包含指定 集合中的所有元素，则返回true。\n    boolean containsAll(Collection<?> c);\n\n    // 将指定集合中的所有元素添加到此集合\n    boolean addAll(Collection<? extends E> c);\n\n    // 删除指定集合中包含的所有此集合的元素\n    boolean removeAll(Collection<?> c);\n\n    // 删除满足给定谓词的此集合的所有元素。(1.8 后)\n    default boolean removeIf(Predicate<? super E> filter) {\n        Objects.requireNonNull(filter);\n        boolean removed = false;\n        final Iterator<E> each = iterator();\n        while (each.hasNext()) {\n            if (filter.test(each.next())) {\n                each.remove();\n                removed = true;\n            }\n        }\n        return removed;\n    }\n\n    // 仅保留此集合中包含在指定集合中的元素\n    boolean retainAll(Collection<?> c);\n\n    // 从此集合中删除所有元素\n    void clear();\n    \n    // 比较和散列\n    boolean equals(Object o);\n    int hashCode();\n\n    // 创建一个并行迭代器。(，1.8后)\n    @Override\n    default Spliterator<E> spliterator() {\n        return Spliterators.spliterator(this, 0);\n    }\n    \n    // 返回一个Stream\n    default Stream<E> stream() {\n        return StreamSupport.stream(spliterator(), false);\n    }\n\n    // 返回可并行的 Stream\n    default Stream<E> parallelStream() {\n        return StreamSupport.stream(spliterator(), true);\n    }\n}\n\n```\n\n## List简介\nList的接口定义如下：\n```java\npublic interface List<E> extends Collection<E> {}\n```\nList是一个继承于Collection的接口。List是有序的队列，List中的每一个元素都有一个索引；第一个元素的索引值是0，往后的元素的索引值依次+1。和Set不同，List中允许有重复的元素。\n\n```java\npublic interface List<E> extends Collection<E> {\n    // 以下是查询操作\n\n    // 返回此集合中的元素数\n    int size();\n\n    // 如果此集合不包含元素，则返回 true\n    boolean isEmpty();\n\n    // 如果此集合包含指定的元素，则返回 true\n    boolean contains(Object o);\n\n    // 返回此集合中的元素的迭代器\n    Iterator<E> iterator();\n\n    // 返回一个包含此集合中所有元素的数组\n    Object[] toArray();\n\n    // 返回的数组的运行时类型是指定数组的运行时类型。\n    <T> T[] toArray(T[] a);\n\n\n    // 以下是修改操作\n\n    // 向集合中添加一个元素\n    boolean add(E e);\n\n    // 从该集合中删除指定元素的单个实例（如果存在）\n    boolean remove(Object o);\n\n\n    // Bulk Modification Operations\n\n    // 如果此集合包含指定 集合中的所有元素，则返回true。\n    boolean containsAll(Collection<?> c);\n\n    // 将指定集合中的所有元素添加到此集合\n    boolean addAll(Collection<? extends E> c);\n\n    // 将指定集合中的所有元素插入到此列表中的指定位置\n    boolean addAll(int index, Collection<? extends E> c);\n\n    // 删除指定集合中包含的所有此集合的元素\n    boolean removeAll(Collection<?> c);\n\n    // 仅保留此集合中包含在指定集合中的元素\n    boolean retainAll(Collection<?> c);\n\n    // 将该列表的每个元素替换为将该运算符应用于该元素的结果。\n    default void replaceAll(UnaryOperator<E> operator) {\n        Objects.requireNonNull(operator);\n        final ListIterator<E> li = this.listIterator();\n        while (li.hasNext()) {\n            li.set(operator.apply(li.next()));\n        }\n    }\n\n    // 使用随附的 Comparator排序此列表来比较元素。\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    default void sort(Comparator<? super E> c) {\n        Object[] a = this.toArray();\n        Arrays.sort(a, (Comparator) c);\n        ListIterator<E> i = this.listIterator();\n        for (Object e : a) {\n            i.next();\n            i.set((E) e);\n        }\n    }\n\n    // 从此集合中删除所有元素\n    void clear();\n\n    // 比较和散列\n    boolean equals(Object o);\n\n    int hashCode();\n\n\n    // 以下是位置访问操作\n\n    // 返回此列表中指定位置的元素。\n    E get(int index);\n\n    // 用指定的元素（可选操作）替换此列表中指定位置的元素。\n    E set(int index, E element);\n\n    // 将指定的元素插入此列表中的指定位置\n    void add(int index, E element);\n\n   // 删除该列表中指定位置的元素\n    E remove(int index);\n\n\n    // 以下是搜索操作\n\n    // 返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1\n    int indexOf(Object o);\n\n    // 返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1\n    int lastIndexOf(Object o);\n\n\n    // 以下是List迭代器\n\n    // 返回列表中的列表迭代器\n    ListIterator<E> listIterator();\n\n    // 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。\n    ListIterator<E> listIterator(int index);\n\n    // 以下是视图\n\n    // 返回此列表中指定的 fromIndex （含）和 toIndex之间的视图\n    java.util.List<E> subList(int fromIndex, int toIndex);\n\n    //  创建一个并行迭代器\n    @Override\n    default Spliterator<E> spliterator() {\n        return Spliterators.spliterator(this, Spliterator.ORDERED);\n    }\n}\n```\n\n## Set简介\nSet的定义如下：\n```java\npublic interface Set<E> extends Collection<E> {}\n```\nSet是一个继承于Collection的接口。Set是无序列表，且不允许有重复的元素\n\n```java\n\npublic interface Set<E> extends Collection<E> {\n    // Query Operations\n\n    // 返回此集合中的元素数\n    int size();\n\n    // 如果此集合不包含元素，则返回 true 。\n    boolean isEmpty();\n\n    // 如果此集合包含指定的元素，则返回 true\n    boolean contains(Object o);\n\n    // 返回此集合中元素的迭代器。\n    Iterator<E> iterator();\n\n    // 返回一个包含此集合中所有元素的数组\n    Object[] toArray();\n\n    // 返回的数组的运行时类型是指定数组的运行时类型。\n    <T> T[] toArray(T[] a);\n\n\n    // 修改操作\n\n    // 	如果指定的元素不存在，则将其指定的元素添加\n    boolean add(E e);\n\n   // 	如果存在，则从该集合中删除指定的元素\n    boolean remove(Object o);\n\n\n    // 批量操作\n\n    // 返回 true如果此集合包含所有指定集合的元素\n    boolean containsAll(Collection<?> c);\n\n   // 将指定集合中的所有元素添加到此集合\n    boolean addAll(Collection<? extends E> c);\n\n    // 仅保留该集合中包含在指定集合中的元素\n    boolean retainAll(Collection<?> c);\n\n   // 从此集合中删除指定集合中包含的所有元素\n    boolean removeAll(Collection<?> c);\n\n    // 从此集合中删除所有元素\n    void clear();\n\n\n    // Comparison and hashing\n    boolean equals(Object o);\n    int hashCode();\n\n    // 在此集合中的元素上创建一个 Spliterator\n    @Override\n    default Spliterator<E> spliterator() {\n        return Spliterators.spliterator(this, Spliterator.DISTINCT);\n    }\n}\n\n```\n\n## AbstractCollection\nAbstractCollection定义如下：\n```java\npublic abstract class AbstractCollection<E> implements Collection<E> {}\n```\n\nAbstractCollection是一个抽象类，它实现了Collection中除iterator()和size()之外的函数。\nAbstractCollection的主要作用：它实现了Collection接口中的大部分函数。从而方便其它类实现Collection，比如ArrayList、LinkedList等，它们这些类想要实现Collection接口，通过继承AbstractCollection就已经实现了大部分的接口了。\n\n## AbstractList\nAbstractList的定义如下：\n```java\npublic abstract class AbstractList<E> extends AbstractCollection<E> implements List<E> {}\n\n```\n\nAbstractList是一个继承于AbstractCollection，并且实现List接口的抽象类。它实现了List中除size()、get(int location)之外的函数。\nAbstractList的主要作用：它实现了List接口中的大部分函数。从而方便其它类继承List。\n另外，和AbstractCollection相比，AbstractList抽象类中，实现了iterator()接口。\n\n## AbstractSet\nAbstractSet的定义如下：\n```java\npublic abstract class AbstractSet<E> extends AbstractCollection<E> implements Set<E> {}\n\n```\nAbstractSet是一个继承于AbstractCollection，并且实现Set接口的抽象类。由于Set接口和Collection接口中的API完全一样，Set也就没有自己单独的API。和AbstractCollection一样，它实现了List中除iterator()和size()之外的函数。\nAbstractSet的主要作用：它实现了Set接口中的大部分函数。从而方便其它类实现Set接口。\n\n## Iterator\nIterator的定义如下：\n```java\npublic interface Iterator<E> {}\n\n```\nIterator是一个接口，它是集合的迭代器。集合可以通过Iterator去遍历集合中的元素。Iterator提供的API接口，包括：是否存在下一个元素、获取下一个元素、删除当前元素。\n\n```java\n// Iterator的API\nabstract boolean hasNext()\nabstract E next()\nabstract void remove()\n```\n\n## ListIterator\nListIterator的定义如下：\n```java\npublic interface ListIterator<E> extends Iterator<E> {}\n```\n\nListIterator是一个继承于Iterator的接口，它是队列迭代器。专门用于便利List，能提供向前/向后遍历。相比于Iterator，它新增了添加、是否存在上一个元素、获取上一个元素等等API接口。\n\n```java\n// ListIterator的API\n// 继承于Iterator的接口\nabstract boolean hasNext()\nabstract E next()\nabstract void remove()\n// 新增API接口\nabstract void add(E object)\nabstract boolean hasPrevious()\nabstract int nextIndex()\nabstract E previous()\nabstract int previousIndex()\nabstract void set(E object)\n```','<h2 id=\"-\">概要</h2>\n<p>Collection是一个接口，它主要的两个分支是：List 和 Set。\n<img src=\"http://oss.dblearn.cn/dbblog/20190903/a8a003a1642a48368ddfa1286f5b6821.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>List和Set都是接口，它们继承于Collection。List是有序的队列，List中可以有重复的元素；而Set是数学概念中的集合，Set中没有重复元素！</p>\n</li>\n<li><p>AbstractCollection抽象类，它实现了Collection中的绝大部分函数；这样，在Collection的实现类中，我们就可以通过继承AbstractCollection省去重复编码。AbstractList和AbstractSet都继承于AbstractCollection，具体的List实现类继承于AbstractList，而Set的实现类则继承于AbstractSet。</p>\n</li>\n<li><p>另外，Collection中有一个iterator()函数，它的作用是返回一个Iterator接口。通常，我们通过Iterator迭代器来遍历集合。ListIterator是List接口所特有的，在List接口中，通过ListIterator()返回一个ListIterator对象。</p>\n</li>\n</ul>\n<h2 id=\"collection-\">Collection简介</h2>\n<p>Collection 定义如下：</p>\n<pre><code class=\"language-java\">public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; {}</code></pre>\n<p>它是一个接口，是高度抽象出来的集合，它包含了集合的基本操作：添加、删除、清空、遍历(读取)、是否为空、获取大小、是否保护某元素等等。</p>\n<pre><code class=\"language-java\">public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; {\n    // Query Operations\n\n    // 返回此集合中的元素数\n    int size();\n\n    // 如果此集合不包含元素，则返回 true\n    boolean isEmpty();\n\n    // 如果此集合包含指定的元素，则返回 true\n    boolean contains(Object o);\n\n    // 返回此集合中的元素的迭代器\n    Iterator&lt;E&gt; iterator();\n\n    // 返回一个包含此集合中所有元素的数组\n    Object[] toArray();\n\n    // 返回包含此集合中所有元素的数组; 返回的数组的运行时类型是指定数组的运行时类型。\n    &lt;T&gt; T[] toArray(T[] a);\n\n    // Modification Operations\n\n    // 向集合中添加一个元素\n    boolean add(E e);\n\n    // 从该集合中删除指定元素的单个实例（如果存在）\n    boolean remove(Object o);\n\n\n    // 以下均为批量操作\n\n    // 如果此集合包含指定 集合中的所有元素，则返回true。\n    boolean containsAll(Collection&lt;?&gt; c);\n\n    // 将指定集合中的所有元素添加到此集合\n    boolean addAll(Collection&lt;? extends E&gt; c);\n\n    // 删除指定集合中包含的所有此集合的元素\n    boolean removeAll(Collection&lt;?&gt; c);\n\n    // 删除满足给定谓词的此集合的所有元素。(1.8 后)\n    default boolean removeIf(Predicate&lt;? super E&gt; filter) {\n        Objects.requireNonNull(filter);\n        boolean removed = false;\n        final Iterator&lt;E&gt; each = iterator();\n        while (each.hasNext()) {\n            if (filter.test(each.next())) {\n                each.remove();\n                removed = true;\n            }\n        }\n        return removed;\n    }\n\n    // 仅保留此集合中包含在指定集合中的元素\n    boolean retainAll(Collection&lt;?&gt; c);\n\n    // 从此集合中删除所有元素\n    void clear();\n\n    // 比较和散列\n    boolean equals(Object o);\n    int hashCode();\n\n    // 创建一个并行迭代器。(，1.8后)\n    @Override\n    default Spliterator&lt;E&gt; spliterator() {\n        return Spliterators.spliterator(this, 0);\n    }\n\n    // 返回一个Stream\n    default Stream&lt;E&gt; stream() {\n        return StreamSupport.stream(spliterator(), false);\n    }\n\n    // 返回可并行的 Stream\n    default Stream&lt;E&gt; parallelStream() {\n        return StreamSupport.stream(spliterator(), true);\n    }\n}\n</code></pre>\n<h2 id=\"list-\">List简介</h2>\n<p>List的接口定义如下：</p>\n<pre><code class=\"language-java\">public interface List&lt;E&gt; extends Collection&lt;E&gt; {}</code></pre>\n<p>List是一个继承于Collection的接口。List是有序的队列，List中的每一个元素都有一个索引；第一个元素的索引值是0，往后的元素的索引值依次+1。和Set不同，List中允许有重复的元素。</p>\n<pre><code class=\"language-java\">public interface List&lt;E&gt; extends Collection&lt;E&gt; {\n    // 以下是查询操作\n\n    // 返回此集合中的元素数\n    int size();\n\n    // 如果此集合不包含元素，则返回 true\n    boolean isEmpty();\n\n    // 如果此集合包含指定的元素，则返回 true\n    boolean contains(Object o);\n\n    // 返回此集合中的元素的迭代器\n    Iterator&lt;E&gt; iterator();\n\n    // 返回一个包含此集合中所有元素的数组\n    Object[] toArray();\n\n    // 返回的数组的运行时类型是指定数组的运行时类型。\n    &lt;T&gt; T[] toArray(T[] a);\n\n\n    // 以下是修改操作\n\n    // 向集合中添加一个元素\n    boolean add(E e);\n\n    // 从该集合中删除指定元素的单个实例（如果存在）\n    boolean remove(Object o);\n\n\n    // Bulk Modification Operations\n\n    // 如果此集合包含指定 集合中的所有元素，则返回true。\n    boolean containsAll(Collection&lt;?&gt; c);\n\n    // 将指定集合中的所有元素添加到此集合\n    boolean addAll(Collection&lt;? extends E&gt; c);\n\n    // 将指定集合中的所有元素插入到此列表中的指定位置\n    boolean addAll(int index, Collection&lt;? extends E&gt; c);\n\n    // 删除指定集合中包含的所有此集合的元素\n    boolean removeAll(Collection&lt;?&gt; c);\n\n    // 仅保留此集合中包含在指定集合中的元素\n    boolean retainAll(Collection&lt;?&gt; c);\n\n    // 将该列表的每个元素替换为将该运算符应用于该元素的结果。\n    default void replaceAll(UnaryOperator&lt;E&gt; operator) {\n        Objects.requireNonNull(operator);\n        final ListIterator&lt;E&gt; li = this.listIterator();\n        while (li.hasNext()) {\n            li.set(operator.apply(li.next()));\n        }\n    }\n\n    // 使用随附的 Comparator排序此列表来比较元素。\n    @SuppressWarnings({&quot;unchecked&quot;, &quot;rawtypes&quot;})\n    default void sort(Comparator&lt;? super E&gt; c) {\n        Object[] a = this.toArray();\n        Arrays.sort(a, (Comparator) c);\n        ListIterator&lt;E&gt; i = this.listIterator();\n        for (Object e : a) {\n            i.next();\n            i.set((E) e);\n        }\n    }\n\n    // 从此集合中删除所有元素\n    void clear();\n\n    // 比较和散列\n    boolean equals(Object o);\n\n    int hashCode();\n\n\n    // 以下是位置访问操作\n\n    // 返回此列表中指定位置的元素。\n    E get(int index);\n\n    // 用指定的元素（可选操作）替换此列表中指定位置的元素。\n    E set(int index, E element);\n\n    // 将指定的元素插入此列表中的指定位置\n    void add(int index, E element);\n\n   // 删除该列表中指定位置的元素\n    E remove(int index);\n\n\n    // 以下是搜索操作\n\n    // 返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1\n    int indexOf(Object o);\n\n    // 返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1\n    int lastIndexOf(Object o);\n\n\n    // 以下是List迭代器\n\n    // 返回列表中的列表迭代器\n    ListIterator&lt;E&gt; listIterator();\n\n    // 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。\n    ListIterator&lt;E&gt; listIterator(int index);\n\n    // 以下是视图\n\n    // 返回此列表中指定的 fromIndex （含）和 toIndex之间的视图\n    java.util.List&lt;E&gt; subList(int fromIndex, int toIndex);\n\n    //  创建一个并行迭代器\n    @Override\n    default Spliterator&lt;E&gt; spliterator() {\n        return Spliterators.spliterator(this, Spliterator.ORDERED);\n    }\n}</code></pre>\n<h2 id=\"set-\">Set简介</h2>\n<p>Set的定义如下：</p>\n<pre><code class=\"language-java\">public interface Set&lt;E&gt; extends Collection&lt;E&gt; {}</code></pre>\n<p>Set是一个继承于Collection的接口。Set是无序列表，且不允许有重复的元素</p>\n<pre><code class=\"language-java\">\npublic interface Set&lt;E&gt; extends Collection&lt;E&gt; {\n    // Query Operations\n\n    // 返回此集合中的元素数\n    int size();\n\n    // 如果此集合不包含元素，则返回 true 。\n    boolean isEmpty();\n\n    // 如果此集合包含指定的元素，则返回 true\n    boolean contains(Object o);\n\n    // 返回此集合中元素的迭代器。\n    Iterator&lt;E&gt; iterator();\n\n    // 返回一个包含此集合中所有元素的数组\n    Object[] toArray();\n\n    // 返回的数组的运行时类型是指定数组的运行时类型。\n    &lt;T&gt; T[] toArray(T[] a);\n\n\n    // 修改操作\n\n    //     如果指定的元素不存在，则将其指定的元素添加\n    boolean add(E e);\n\n   //     如果存在，则从该集合中删除指定的元素\n    boolean remove(Object o);\n\n\n    // 批量操作\n\n    // 返回 true如果此集合包含所有指定集合的元素\n    boolean containsAll(Collection&lt;?&gt; c);\n\n   // 将指定集合中的所有元素添加到此集合\n    boolean addAll(Collection&lt;? extends E&gt; c);\n\n    // 仅保留该集合中包含在指定集合中的元素\n    boolean retainAll(Collection&lt;?&gt; c);\n\n   // 从此集合中删除指定集合中包含的所有元素\n    boolean removeAll(Collection&lt;?&gt; c);\n\n    // 从此集合中删除所有元素\n    void clear();\n\n\n    // Comparison and hashing\n    boolean equals(Object o);\n    int hashCode();\n\n    // 在此集合中的元素上创建一个 Spliterator\n    @Override\n    default Spliterator&lt;E&gt; spliterator() {\n        return Spliterators.spliterator(this, Spliterator.DISTINCT);\n    }\n}\n</code></pre>\n<h2 id=\"abstractcollection\">AbstractCollection</h2>\n<p>AbstractCollection定义如下：</p>\n<pre><code class=\"language-java\">public abstract class AbstractCollection&lt;E&gt; implements Collection&lt;E&gt; {}</code></pre>\n<p>AbstractCollection是一个抽象类，它实现了Collection中除iterator()和size()之外的函数。\nAbstractCollection的主要作用：它实现了Collection接口中的大部分函数。从而方便其它类实现Collection，比如ArrayList、LinkedList等，它们这些类想要实现Collection接口，通过继承AbstractCollection就已经实现了大部分的接口了。</p>\n<h2 id=\"abstractlist\">AbstractList</h2>\n<p>AbstractList的定义如下：</p>\n<pre><code class=\"language-java\">public abstract class AbstractList&lt;E&gt; extends AbstractCollection&lt;E&gt; implements List&lt;E&gt; {}\n</code></pre>\n<p>AbstractList是一个继承于AbstractCollection，并且实现List接口的抽象类。它实现了List中除size()、get(int location)之外的函数。\nAbstractList的主要作用：它实现了List接口中的大部分函数。从而方便其它类继承List。\n另外，和AbstractCollection相比，AbstractList抽象类中，实现了iterator()接口。</p>\n<h2 id=\"abstractset\">AbstractSet</h2>\n<p>AbstractSet的定义如下：</p>\n<pre><code class=\"language-java\">public abstract class AbstractSet&lt;E&gt; extends AbstractCollection&lt;E&gt; implements Set&lt;E&gt; {}\n</code></pre>\n<p>AbstractSet是一个继承于AbstractCollection，并且实现Set接口的抽象类。由于Set接口和Collection接口中的API完全一样，Set也就没有自己单独的API。和AbstractCollection一样，它实现了List中除iterator()和size()之外的函数。\nAbstractSet的主要作用：它实现了Set接口中的大部分函数。从而方便其它类实现Set接口。</p>\n<h2 id=\"iterator\">Iterator</h2>\n<p>Iterator的定义如下：</p>\n<pre><code class=\"language-java\">public interface Iterator&lt;E&gt; {}\n</code></pre>\n<p>Iterator是一个接口，它是集合的迭代器。集合可以通过Iterator去遍历集合中的元素。Iterator提供的API接口，包括：是否存在下一个元素、获取下一个元素、删除当前元素。</p>\n<pre><code class=\"language-java\">// Iterator的API\nabstract boolean hasNext()\nabstract E next()\nabstract void remove()</code></pre>\n<h2 id=\"listiterator\">ListIterator</h2>\n<p>ListIterator的定义如下：</p>\n<pre><code class=\"language-java\">public interface ListIterator&lt;E&gt; extends Iterator&lt;E&gt; {}</code></pre>\n<p>ListIterator是一个继承于Iterator的接口，它是队列迭代器。专门用于便利List，能提供向前/向后遍历。相比于Iterator，它新增了添加、是否存在上一个元素、获取上一个元素等等API接口。</p>\n<pre><code class=\"language-java\">// ListIterator的API\n// 继承于Iterator的接口\nabstract boolean hasNext()\nabstract E next()\nabstract void remove()\n// 新增API接口\nabstract void add(E object)\nabstract boolean hasPrevious()\nabstract int nextIndex()\nabstract E previous()\nabstract int previousIndex()\nabstract void set(E object)</code></pre>\n',59,4,2,NULL,'2019-09-03 04:27:25','2019-09-05 04:46:16',0,'9,11,38',1,0),(42,'Java集合03——ArrayList','ArrayList 是一个数组队列，相当于 动态数组。与Java中的数组相比，它的容量能动态增长。它继承于AbstractList，实现了List, RandomAccess, Cloneable, java.io.Serializable这些接口。','Bobbi','## ArrayList简介\n\nArrayList 是一个数组队列，相当于 动态数组。与Java中的数组相比，它的容量能动态增长。它继承于AbstractList，实现了List, RandomAccess, Cloneable, java.io.Serializable这些接口。\n\nArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。\n\nArrayList 实现了RandmoAccess接口，即提供了随机访问功能。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在ArrayList中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。\n\nArrayList 实现了Cloneable接口，即覆盖了函数clone()，能被克隆。\n\nArrayList 实现java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输。\n\n## 数据结构\n\n![image.png](http://oss.dblearn.cn/dbblog/20190916/a7edbb90c6284df5b8c94a32c5a55617.png)\n\nArrayList包含了两个重要的对象：elementData 和 size。\n\n(1) elementData 是\"Object[]类型的数组\"，它保存了添加到ArrayList中的元素。实际上，elementData是个动态数组，我们能通过构造函数 ArrayList(int initialCapacity)来执行它的初始容量为initialCapacity；如果通过不含参数的构造函数ArrayList()来创建ArrayList，则elementData的容量默认是××10××。elementData数组的大小会根据ArrayList容量的增长而动态的增长\n\n```java\n// 存储ArrayList元素的数组缓冲区\ntransient Object[] elementData; \n```\n\n(2) size 则是动态数组的实际大小。\n\n## 构造方法\n\n```java\n/**\n* 构造具有指定初始容量的空列表\n*/\npublic ArrayList(int initialCapacity) {\n        if (initialCapacity > 0) {\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                               initialCapacity);\n        }\n    }\n\n    /**\n     * 构造一个初始容量为10的空列表。\n     */\n    public ArrayList() {\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * 创建一个包含collection的ArrayList\n     */\n    public ArrayList(Collection<? extends E> c) {\n        elementData = c.toArray();\n        if ((size = elementData.length) != 0) {\n            // c.toArray might (incorrectly) not return Object[] (see 6260652)\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // replace with empty array.\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n```\n\nArrayList 提供了三种方式的构造器,可以构造一个默认初始容量为 10 的空列表、构造\n一个指定初始容量的空列表以及构造一个包含指定 collection 的元素的列表,这些元素按照\n该 collection 的迭代器返回它们的顺序排列的。\n\n## API列表\n\n```java\n    /// Collection中定义的API\n\n    // 将指定的元素追加到此列表的末尾。\n    boolean add(E e)\n    // 将指定集合中的所有元素添加到此集合。\n    boolean addAll(Collection<? extends E> c)\n    // 返回此列表中的元素数。\n    int size()\n    // 如果此列表包含指定的元素，则返回 true 。\n    boolean contains(Object o)\n    // 从列表中删除所有元素。\n    void clear()\n    // 如果此列表不包含元素，则返回 true 。\n    boolean isEmpty()\n    // 返回该列表中的元素的迭代器。\n    Iterator<E> iterator()\n    // 从列表中删除指定元素的第一个出现（如果存在）。\n    boolean remove(Object o)\n    // 从此列表中删除指定集合中包含的所有元素。\n    boolean removeAll(Collection<?> c)\n    // 仅保留此列表中包含在指定集合中的元素。\n    boolean retainAll(Collection<?> c)\n    // 以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。\n    Object[] toArray()\n    // 以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; 返回的数组的运行时类型是指定数组的运行时类型。\n    <T> T[] toArray(T[] a)\n\n\n    /// AbstractCollection中定义的API\n\n    // 在此列表中的指定位置插入指定的元素。\n    void add(int index, E element)\n    // 将指定集合中的所有元素插入到此列表中，从指定的位置开始。\n    boolean addAll(int index, Collection<? extends E> c)\n    // 返回此列表中指定位置的元素。\n    E get(int index)\n    // 返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。\n    int indexOf(Object o)\n    // 返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。\n    int lastIndexOf(Object o)\n    // 返回列表中的列表迭代器（按适当的顺序）。\n    ListIterator<E> listIterator()\n    // 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。\n    ListIterator<E> listIterator(int index)\n    // 删除该列表中指定位置的元素。\n    E remove(int index)\n    // 用指定的元素替换此列表中指定位置的元素。\n    E set(int index, E element)\n    // 返回此列表中指定的 fromIndex （包括）和 toIndex之间的独占视图。\n    List<E> subList(int fromIndex, int toIndex)\n\n    /// ArrayList中新增的API\n\n    // 返回此 ArrayList实例的浅拷贝。\n    Object clone()\n    // 如果需要，增加此 ArrayList实例的容量，以确保它可以至少保存最小容量参数指定的元素数。\n    void ensureCapacity(int minCapacity)\n    // java8遍历操作\n    void forEach(Consumer<? super E> action)\n    // 删除满足给定谓词的此集合的所有元素。\n    boolean removeIf(Predicate<? super E> filter)\n    // 从这个列表中删除所有索引在 fromIndex （含）和 toIndex之间的元素。\n    protected void removeRange(int fromIndex, int toIndex)\n    // 将该列表的每个元素替换为将该运算符应用于该元素的结果。\n    void replaceAll(UnaryOperator<E> operator)\n    // 使用提供的 Comparator对此列表进行排序以比较元素。\n    void sort(Comparator<? super E> c)\n    // 在此列表中的元素上创建Spliterator 。\n    Spliterator<E> spliterator()\n    //  去掉预留元素的大小。\n    void trimToSize()\n\n```\n\n## 存储\n\nArrayList 提供了 set(int index, E element)、add(E e)、add(int index, E element)、\naddAll(Collection<? extends E> c)、addAll(int index, Collection<? extends E> c)这些添加元素的方法\n\n#### set(int index,E element)\n\n用指定的元素替换此列表中指定位置的元素\n\n```java\n    // 用指定的元素替换此列表中指定位置的元素\n    public E set(int index, E element) {\n	    // 检查给定索引是否在范围内(与size比较)\n        rangeCheck(index);\n		// 替换指定位置的元素，并返回旧元素 \n        E oldValue = elementData(index);\n        elementData[index] = element;\n        return oldValue;\n    }\n```\n\n#### add(E e)\n\n将指定的元素追加到此列表的末尾。\n\n```java\n   // 将指定的元素追加到此列表的末尾。 \n   public boolean add(E e) {\n       // 检查并扩容\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n       // 向列表末尾添加元素\n        elementData[size++] = e;\n        return true;\n    }\n```\n\n#### add(int index, E element)\n\n在此列表中的指定位置插入指定的元素。\n\n```java\n    public void add(int index, E element) {\n        // 检查index是否越界\n        rangeCheckForAdd(index);\n		// 检查并扩容\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        // 复制数组\n        System.arraycopy(elementData, index, elementData, index + 1,\n                         size - index);\n        // 向指定位置添加元素\n        elementData[index] = element;\n        size++;\n    }\n```\n\n#### allAll(Collection<? extends E> c)\n\n```java\n    public boolean addAll(Collection<? extends E> c) {\n        // 将list转为Object[] 数组\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        // 检查并扩容\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        // 复制数组元素到size后的位置\n        System.arraycopy(a, 0, elementData, size, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n```\n\n#### allAll(int index, Collection<? extends E> c)\n\n```java\n    public boolean addAll(int index, Collection<? extends E> c) {\n        // 检查index是否越界\n        rangeCheckForAdd(index);\n		// 将list转为Object[] 数组\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        // 检查并扩容\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n		// 复制数组元素到index位置\n        int numMoved = size - index;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index, elementData, index + numNew,\n                             numMoved);\n\n        System.arraycopy(a, 0, elementData, index, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n```\n\n#### System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)\n\nsrc:源数组;\n\nsrcPos:源数组要复制的起始位置;\n\ndest:目的数组;\n\ndestPos:目的数组放置的起始位置;\n\nlength:复制的长度.\n\n\n\n### 自动扩容机制\n\n我们可以看到他的实现其实最核心的内容就是`ensureCapacityInternal`。这个函数其实就是**自动扩容机制的核心**。我们依次来看一下他的具体实现\n\n```java\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n// 计算实际元素个数\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    // 如果是空，则实际元素个数 是默认容量或初始容量的最大值\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\nprivate void ensureExplicitCapacity(int minCapacity) {\n    // modCount值+1\n    modCount++;\n    // 如果实际元素个数大于数组容量，则扩容\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    // 扩展为原来的1.5倍（右移一位 除以2）\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    // 如果扩为1.5倍还不满足需求，直接扩为需求值\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // 将老数组内容拷贝到新数组\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n\n从上面介绍的向 ArrayList 中存储元素的代码中,我们看到,每当向数组中添加元素时,\n都要去检查添加后元素的个数是否会超出当前数组的长度,如果超出,数组将会进行扩容,\n以满足添加数据的需求。\n\n\n\n数组进行扩容时,会将老数组中的元素重新拷贝一份到新的数组中,每次数组容量的增长是其原容量的 1.5 倍。这种操作的代价是很高的,因此在实际使用时,我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时,要在构造 ArrayList 实例时,就指定其容量,以避免数组扩容的发生。\n\n## 读取\n\n```java\n    public E get(int index) {\n    	// 检查是否越界\n        rangeCheck(index);\n\n        return elementData(index);\n    }\n```\n\n### 遍历方式比较\n\n(1) 第一种，**通过迭代器遍历**。即通过Iterator去遍历。\n\n```java\nInteger value = null;\nIterator iter = list.iterator();\nwhile (iter.hasNext()) {\n    value = (Integer)iter.next();\n}\n```\n\n(2) 第二种，随机访问，通过索引值去遍历\n\n```java\nInteger value = null;\nint size = list.size();\nfor (int i=0; i<size; i++) {\n    value = (Integer)list.get(i);        \n}\n```\n\n(3) 第三种，**for循环遍历**。如下：\n\n```java\nInteger value = null;\nfor (Integer integ:list) {\n    value = integ;\n}\n```\n\n(4) 第四种，Java8遍历\n\n```java\nlist.forEach(item -> System.out.print(item))\n```\n\n下面通过一个实例，比较这四种方式的效率：\n\n```java\npublic class Tetst {\n\n    public static void main(String[] args) {\n        List list = new ArrayList();\n        for (int i=0; i<10000000; i++)\n            list.add(i);\n        iteratorThroughFor2(list) ;\n        iteratorThroughIterator(list) ;\n        iteratorThroughRandomAccess(list) ;\n        iteratorThroughForJava8(list) ;\n\n    }\n\n\n\n    public static void iteratorThroughRandomAccess(List list) {\n\n        long startTime;\n        long endTime;\n        startTime = System.currentTimeMillis();\n        for (int i=0; i<list.size(); i++) {\n            list.get(i);\n        }\n        endTime = System.currentTimeMillis();\n        long interval = endTime - startTime;\n        System.out.println(\"iteratorThroughRandomAccess：\" + interval+\" ms\");\n    }\n\n    public static void iteratorThroughIterator(List list) {\n\n        long startTime;\n        long endTime;\n        startTime = System.currentTimeMillis();\n        for(Iterator iter = list.iterator(); iter.hasNext(); ) {\n            iter.next();\n        }\n        endTime = System.currentTimeMillis();\n        long interval = endTime - startTime;\n        System.out.println(\"iteratorThroughIterator：\" + interval+\" ms\");\n    }\n\n\n    public static void iteratorThroughFor2(List list) {\n\n        long startTime;\n        long endTime;\n        startTime = System.currentTimeMillis();\n        for(Object obj:list)\n            ;\n        endTime = System.currentTimeMillis();\n        long interval = endTime - startTime;\n        System.out.println(\"iteratorThroughFor2：\" + interval+\" ms\");\n    }\n\n    public static void iteratorThroughForJava8(List list) {\n\n        long startTime;\n        long endTime;\n        startTime = System.currentTimeMillis();\n        list.forEach(item -> {});\n        endTime = System.currentTimeMillis();\n        long interval = endTime - startTime;\n        System.out.println(\"iteratorThroughForJava8：\" + interval+\" ms\");\n    }\n\n}\n\n```\n\n运行结果：\n\n```java\niteratorThroughFor2：7 ms\niteratorThroughIterator：10 ms\niteratorThroughRandomAccess：6 ms\niteratorThroughForJava8：58 ms\n```\n\n由此可见，**遍历ArrayList时，使用随机访问(即，通过索引序号访问)效率最高，而使用Java8的forEach遍历的效率最低！**\n\n\n\n## 删除\n\nArrayList 提供了根据下标或者指定对象两种方式的删除功能。如下:\n\n根据索引删除\n\n```java\n    public E remove(int index) {\n        // 检查index是否越界\n        rangeCheck(index);\n		// 增加modCount\n        modCount++;\n        // 获取index旧值并返回\n        E oldValue = elementData(index);\n		// 通过数组覆盖删除\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        // 释放多余空间\n        elementData[--size] = null; // clear to let GC do its work\n\n        return oldValue;\n    }\n\n```\n\n根据对象删除\n\n```java\n    public boolean remove(Object o) {\n        if (o == null) {\n            // object为空的情况，删除第一个null值\n            for (int index = 0; index < size; index++)\n                if (elementData[index] == null) {\n                    fastRemove(index);\n                    return true;\n                }\n        } else {\n            // 遍历list，如果值相等则删除，只删除第一个\n            for (int index = 0; index < size; index++)\n                if (o.equals(elementData[index])) {\n                    fastRemove(index);\n                    return true;\n                }\n        }\n        return false;\n    }\n\n    private void fastRemove(int index) {\n        // 增加modCount\n        modCount++;\n        // 通过数组覆盖删除\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        // 释放多余空间\n        elementData[--size] = null; // clear to let GC do its work\n    }\n```\n\n\n\n','<h2 id=\"arraylist-\">ArrayList简介</h2>\n<p>ArrayList 是一个数组队列，相当于 动态数组。与Java中的数组相比，它的容量能动态增长。它继承于AbstractList，实现了List, RandomAccess, Cloneable, java.io.Serializable这些接口。</p>\n<p>ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p>\n<p>ArrayList 实现了RandmoAccess接口，即提供了随机访问功能。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在ArrayList中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。</p>\n<p>ArrayList 实现了Cloneable接口，即覆盖了函数clone()，能被克隆。</p>\n<p>ArrayList 实现java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输。</p>\n<h2 id=\"-\">数据结构</h2>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190916/a7edbb90c6284df5b8c94a32c5a55617.png\" alt=\"image.png\"></p>\n<p>ArrayList包含了两个重要的对象：elementData 和 size。</p>\n<p>(1) elementData 是&quot;Object[]类型的数组&quot;，它保存了添加到ArrayList中的元素。实际上，elementData是个动态数组，我们能通过构造函数 ArrayList(int initialCapacity)来执行它的初始容量为initialCapacity；如果通过不含参数的构造函数ArrayList()来创建ArrayList，则elementData的容量默认是××10××。elementData数组的大小会根据ArrayList容量的增长而动态的增长</p>\n<pre><code class=\"language-java\">// 存储ArrayList元素的数组缓冲区\ntransient Object[] elementData; </code></pre>\n<p>(2) size 则是动态数组的实际大小。</p>\n<h2 id=\"-\">构造方法</h2>\n<pre><code class=\"language-java\">/**\n* 构造具有指定初始容量的空列表\n*/\npublic ArrayList(int initialCapacity) {\n        if (initialCapacity &gt; 0) {\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+\n                                               initialCapacity);\n        }\n    }\n\n    /**\n     * 构造一个初始容量为10的空列表。\n     */\n    public ArrayList() {\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * 创建一个包含collection的ArrayList\n     */\n    public ArrayList(Collection&lt;? extends E&gt; c) {\n        elementData = c.toArray();\n        if ((size = elementData.length) != 0) {\n            // c.toArray might (incorrectly) not return Object[] (see 6260652)\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // replace with empty array.\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }</code></pre>\n<p>ArrayList 提供了三种方式的构造器,可以构造一个默认初始容量为 10 的空列表、构造\n一个指定初始容量的空列表以及构造一个包含指定 collection 的元素的列表,这些元素按照\n该 collection 的迭代器返回它们的顺序排列的。</p>\n<h2 id=\"api-\">API列表</h2>\n<pre><code class=\"language-java\">    /// Collection中定义的API\n\n    // 将指定的元素追加到此列表的末尾。\n    boolean add(E e)\n    // 将指定集合中的所有元素添加到此集合。\n    boolean addAll(Collection&lt;? extends E&gt; c)\n    // 返回此列表中的元素数。\n    int size()\n    // 如果此列表包含指定的元素，则返回 true 。\n    boolean contains(Object o)\n    // 从列表中删除所有元素。\n    void clear()\n    // 如果此列表不包含元素，则返回 true 。\n    boolean isEmpty()\n    // 返回该列表中的元素的迭代器。\n    Iterator&lt;E&gt; iterator()\n    // 从列表中删除指定元素的第一个出现（如果存在）。\n    boolean remove(Object o)\n    // 从此列表中删除指定集合中包含的所有元素。\n    boolean removeAll(Collection&lt;?&gt; c)\n    // 仅保留此列表中包含在指定集合中的元素。\n    boolean retainAll(Collection&lt;?&gt; c)\n    // 以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。\n    Object[] toArray()\n    // 以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; 返回的数组的运行时类型是指定数组的运行时类型。\n    &lt;T&gt; T[] toArray(T[] a)\n\n\n    /// AbstractCollection中定义的API\n\n    // 在此列表中的指定位置插入指定的元素。\n    void add(int index, E element)\n    // 将指定集合中的所有元素插入到此列表中，从指定的位置开始。\n    boolean addAll(int index, Collection&lt;? extends E&gt; c)\n    // 返回此列表中指定位置的元素。\n    E get(int index)\n    // 返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。\n    int indexOf(Object o)\n    // 返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。\n    int lastIndexOf(Object o)\n    // 返回列表中的列表迭代器（按适当的顺序）。\n    ListIterator&lt;E&gt; listIterator()\n    // 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。\n    ListIterator&lt;E&gt; listIterator(int index)\n    // 删除该列表中指定位置的元素。\n    E remove(int index)\n    // 用指定的元素替换此列表中指定位置的元素。\n    E set(int index, E element)\n    // 返回此列表中指定的 fromIndex （包括）和 toIndex之间的独占视图。\n    List&lt;E&gt; subList(int fromIndex, int toIndex)\n\n    /// ArrayList中新增的API\n\n    // 返回此 ArrayList实例的浅拷贝。\n    Object clone()\n    // 如果需要，增加此 ArrayList实例的容量，以确保它可以至少保存最小容量参数指定的元素数。\n    void ensureCapacity(int minCapacity)\n    // java8遍历操作\n    void forEach(Consumer&lt;? super E&gt; action)\n    // 删除满足给定谓词的此集合的所有元素。\n    boolean removeIf(Predicate&lt;? super E&gt; filter)\n    // 从这个列表中删除所有索引在 fromIndex （含）和 toIndex之间的元素。\n    protected void removeRange(int fromIndex, int toIndex)\n    // 将该列表的每个元素替换为将该运算符应用于该元素的结果。\n    void replaceAll(UnaryOperator&lt;E&gt; operator)\n    // 使用提供的 Comparator对此列表进行排序以比较元素。\n    void sort(Comparator&lt;? super E&gt; c)\n    // 在此列表中的元素上创建Spliterator 。\n    Spliterator&lt;E&gt; spliterator()\n    //  去掉预留元素的大小。\n    void trimToSize()\n</code></pre>\n<h2 id=\"-\">存储</h2>\n<p>ArrayList 提供了 set(int index, E element)、add(E e)、add(int index, E element)、\naddAll(Collection&lt;? extends E&gt; c)、addAll(int index, Collection&lt;? extends E&gt; c)这些添加元素的方法</p>\n<h4 id=\"set-int-index-e-element-\">set(int index,E element)</h4>\n<p>用指定的元素替换此列表中指定位置的元素</p>\n<pre><code class=\"language-java\">    // 用指定的元素替换此列表中指定位置的元素\n    public E set(int index, E element) {\n        // 检查给定索引是否在范围内(与size比较)\n        rangeCheck(index);\n        // 替换指定位置的元素，并返回旧元素 \n        E oldValue = elementData(index);\n        elementData[index] = element;\n        return oldValue;\n    }</code></pre>\n<h4 id=\"add-e-e-\">add(E e)</h4>\n<p>将指定的元素追加到此列表的末尾。</p>\n<pre><code class=\"language-java\">   // 将指定的元素追加到此列表的末尾。 \n   public boolean add(E e) {\n       // 检查并扩容\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n       // 向列表末尾添加元素\n        elementData[size++] = e;\n        return true;\n    }</code></pre>\n<h4 id=\"add-int-index-e-element-\">add(int index, E element)</h4>\n<p>在此列表中的指定位置插入指定的元素。</p>\n<pre><code class=\"language-java\">    public void add(int index, E element) {\n        // 检查index是否越界\n        rangeCheckForAdd(index);\n        // 检查并扩容\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        // 复制数组\n        System.arraycopy(elementData, index, elementData, index + 1,\n                         size - index);\n        // 向指定位置添加元素\n        elementData[index] = element;\n        size++;\n    }</code></pre>\n<h4 id=\"allall-collection-extends-e-c-\">allAll(Collection&lt;? extends E&gt; c)</h4>\n<pre><code class=\"language-java\">    public boolean addAll(Collection&lt;? extends E&gt; c) {\n        // 将list转为Object[] 数组\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        // 检查并扩容\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        // 复制数组元素到size后的位置\n        System.arraycopy(a, 0, elementData, size, numNew);\n        size += numNew;\n        return numNew != 0;\n    }</code></pre>\n<h4 id=\"allall-int-index-collection-extends-e-c-\">allAll(int index, Collection&lt;? extends E&gt; c)</h4>\n<pre><code class=\"language-java\">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) {\n        // 检查index是否越界\n        rangeCheckForAdd(index);\n        // 将list转为Object[] 数组\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        // 检查并扩容\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        // 复制数组元素到index位置\n        int numMoved = size - index;\n        if (numMoved &gt; 0)\n            System.arraycopy(elementData, index, elementData, index + numNew,\n                             numMoved);\n\n        System.arraycopy(a, 0, elementData, index, numNew);\n        size += numNew;\n        return numNew != 0;\n    }</code></pre>\n<h4 id=\"system-arraycopy-object-src-int-srcpos-object-dest-int-destpos-int-length-\">System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</h4>\n<p>src:源数组;</p>\n<p>srcPos:源数组要复制的起始位置;</p>\n<p>dest:目的数组;</p>\n<p>destPos:目的数组放置的起始位置;</p>\n<p>length:复制的长度.</p>\n<h3 id=\"-\">自动扩容机制</h3>\n<p>我们可以看到他的实现其实最核心的内容就是<code>ensureCapacityInternal</code>。这个函数其实就是<strong>自动扩容机制的核心</strong>。我们依次来看一下他的具体实现</p>\n<pre><code class=\"language-java\">private void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n// 计算实际元素个数\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    // 如果是空，则实际元素个数 是默认容量或初始容量的最大值\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\nprivate void ensureExplicitCapacity(int minCapacity) {\n    // modCount值+1\n    modCount++;\n    // 如果实际元素个数大于数组容量，则扩容\n    if (minCapacity - elementData.length &gt; 0)\n        grow(minCapacity);\n}\n\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    // 扩展为原来的1.5倍（右移一位 除以2）\n    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);\n    // 如果扩为1.5倍还不满足需求，直接扩为需求值\n    if (newCapacity - minCapacity &lt; 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // 将老数组内容拷贝到新数组\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}</code></pre>\n<p>从上面介绍的向 ArrayList 中存储元素的代码中,我们看到,每当向数组中添加元素时,\n都要去检查添加后元素的个数是否会超出当前数组的长度,如果超出,数组将会进行扩容,\n以满足添加数据的需求。</p>\n<p>数组进行扩容时,会将老数组中的元素重新拷贝一份到新的数组中,每次数组容量的增长是其原容量的 1.5 倍。这种操作的代价是很高的,因此在实际使用时,我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时,要在构造 ArrayList 实例时,就指定其容量,以避免数组扩容的发生。</p>\n<h2 id=\"-\">读取</h2>\n<pre><code class=\"language-java\">    public E get(int index) {\n        // 检查是否越界\n        rangeCheck(index);\n\n        return elementData(index);\n    }</code></pre>\n<h3 id=\"-\">遍历方式比较</h3>\n<p>(1) 第一种，<strong>通过迭代器遍历</strong>。即通过Iterator去遍历。</p>\n<pre><code class=\"language-java\">Integer value = null;\nIterator iter = list.iterator();\nwhile (iter.hasNext()) {\n    value = (Integer)iter.next();\n}</code></pre>\n<p>(2) 第二种，随机访问，通过索引值去遍历</p>\n<pre><code class=\"language-java\">Integer value = null;\nint size = list.size();\nfor (int i=0; i&lt;size; i++) {\n    value = (Integer)list.get(i);        \n}</code></pre>\n<p>(3) 第三种，<strong>for循环遍历</strong>。如下：</p>\n<pre><code class=\"language-java\">Integer value = null;\nfor (Integer integ:list) {\n    value = integ;\n}</code></pre>\n<p>(4) 第四种，Java8遍历</p>\n<pre><code class=\"language-java\">list.forEach(item -&gt; System.out.print(item))</code></pre>\n<p>下面通过一个实例，比较这四种方式的效率：</p>\n<pre><code class=\"language-java\">public class Tetst {\n\n    public static void main(String[] args) {\n        List list = new ArrayList();\n        for (int i=0; i&lt;10000000; i++)\n            list.add(i);\n        iteratorThroughFor2(list) ;\n        iteratorThroughIterator(list) ;\n        iteratorThroughRandomAccess(list) ;\n        iteratorThroughForJava8(list) ;\n\n    }\n\n\n\n    public static void iteratorThroughRandomAccess(List list) {\n\n        long startTime;\n        long endTime;\n        startTime = System.currentTimeMillis();\n        for (int i=0; i&lt;list.size(); i++) {\n            list.get(i);\n        }\n        endTime = System.currentTimeMillis();\n        long interval = endTime - startTime;\n        System.out.println(&quot;iteratorThroughRandomAccess：&quot; + interval+&quot; ms&quot;);\n    }\n\n    public static void iteratorThroughIterator(List list) {\n\n        long startTime;\n        long endTime;\n        startTime = System.currentTimeMillis();\n        for(Iterator iter = list.iterator(); iter.hasNext(); ) {\n            iter.next();\n        }\n        endTime = System.currentTimeMillis();\n        long interval = endTime - startTime;\n        System.out.println(&quot;iteratorThroughIterator：&quot; + interval+&quot; ms&quot;);\n    }\n\n\n    public static void iteratorThroughFor2(List list) {\n\n        long startTime;\n        long endTime;\n        startTime = System.currentTimeMillis();\n        for(Object obj:list)\n            ;\n        endTime = System.currentTimeMillis();\n        long interval = endTime - startTime;\n        System.out.println(&quot;iteratorThroughFor2：&quot; + interval+&quot; ms&quot;);\n    }\n\n    public static void iteratorThroughForJava8(List list) {\n\n        long startTime;\n        long endTime;\n        startTime = System.currentTimeMillis();\n        list.forEach(item -&gt; {});\n        endTime = System.currentTimeMillis();\n        long interval = endTime - startTime;\n        System.out.println(&quot;iteratorThroughForJava8：&quot; + interval+&quot; ms&quot;);\n    }\n\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-java\">iteratorThroughFor2：7 ms\niteratorThroughIterator：10 ms\niteratorThroughRandomAccess：6 ms\niteratorThroughForJava8：58 ms</code></pre>\n<p>由此可见，<strong>遍历ArrayList时，使用随机访问(即，通过索引序号访问)效率最高，而使用Java8的forEach遍历的效率最低！</strong></p>\n<h2 id=\"-\">删除</h2>\n<p>ArrayList 提供了根据下标或者指定对象两种方式的删除功能。如下:</p>\n<p>根据索引删除</p>\n<pre><code class=\"language-java\">    public E remove(int index) {\n        // 检查index是否越界\n        rangeCheck(index);\n        // 增加modCount\n        modCount++;\n        // 获取index旧值并返回\n        E oldValue = elementData(index);\n        // 通过数组覆盖删除\n        int numMoved = size - index - 1;\n        if (numMoved &gt; 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        // 释放多余空间\n        elementData[--size] = null; // clear to let GC do its work\n\n        return oldValue;\n    }\n</code></pre>\n<p>根据对象删除</p>\n<pre><code class=\"language-java\">    public boolean remove(Object o) {\n        if (o == null) {\n            // object为空的情况，删除第一个null值\n            for (int index = 0; index &lt; size; index++)\n                if (elementData[index] == null) {\n                    fastRemove(index);\n                    return true;\n                }\n        } else {\n            // 遍历list，如果值相等则删除，只删除第一个\n            for (int index = 0; index &lt; size; index++)\n                if (o.equals(elementData[index])) {\n                    fastRemove(index);\n                    return true;\n                }\n        }\n        return false;\n    }\n\n    private void fastRemove(int index) {\n        // 增加modCount\n        modCount++;\n        // 通过数组覆盖删除\n        int numMoved = size - index - 1;\n        if (numMoved &gt; 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        // 释放多余空间\n        elementData[--size] = null; // clear to let GC do its work\n    }</code></pre>\n',35,1,2,NULL,'2019-09-06 04:54:17','2019-09-16 13:10:47',0,'9,11,38',1,0),(43,'Java集合04——fail-fast总结','fail-fast 机制是java集合(Collection)中的一种错误机制。当在迭代集合的过程中该集合在结构上发生改变的时候，就有可能会发生fail-fast，即抛出ConcurrentModificationException异常。','Bobbi','## fail-fast简介\nfail-fast 机制是java集合(Collection)中的一种错误机制。当在迭代集合的过程中该集合在结构上发生改变的时候，就有可能会发生fail-fast，即抛出ConcurrentModificationException异常。\n\n## fail-fast场景\n在多线程和单线程环境下都有可能出现快速失败。\n### 单线程环境下的fail-fast\n```java\npublic class FailFastTest {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            list.add(i);\n        }\n        Iterator<Integer> iterator = list.iterator();\n        while(iterator.hasNext()) {\n            Integer next = iterator.next();\n            System.out.println(\"当前元素为 \"+ next);\n            if(next == 2) {\n                list.remove(next);\n                System.out.println(\"移除元素2后\");\n            }\n        }\n    }\n\n}\n\n```\n运行结果：\n\n```shell\n当前元素为 0\n当前元素为 1\n当前元素为 2\n移除元素2后\nException in thread \"main\" java.util.ConcurrentModificationException\n	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)\n	at java.util.ArrayList$Itr.next(ArrayList.java:859)\n	at chap03.FailFastTest.main(FailFastTest.java:21)\n```\n\n上述代码创建了长度为10的list，遍历list时，当值为2时，调用list的remove方法，移除该元素，当移除元素2后，再次调用next()方法时,抛出ConcurrentModificationException,即产生了fail-fast\n\n### 多线程环境下的fail-fast\n```java\npublic class FailFastTest {\n\n    private static List<Integer> list = new ArrayList<>();\n\n    public static void main(String[] args) {\n        new Thread1().start();\n        new Thread2().start();\n    }\n\n    private static class Thread1 extends Thread {\n        @Override\n        public void run() {\n            int  i = 0;\n            while (i<6 ) {\n                list.add(i);\n                printAll();\n                i++;\n            }\n\n        }\n    }\n    private static class Thread2 extends Thread {\n        @Override\n        public void run() {\n            int  i = 10;\n            while (i<16 ) {\n                list.add(i);\n                printAll();\n                i++;\n            }\n\n        }\n    }\n    private static void printAll() {\n        Iterator<Integer> iterator = list.iterator();\n        while (iterator.hasNext()) {\n            Integer next = iterator.next();\n            System.out.print(next + \", \");\n        }\n        System.out.println();\n    }\n\n}\n```\n运行结果:\n\n```shell\n0, \n0, 10, \n0, 10, 1, \n0, 10, 1, 11, \n0, 10, 1, 11, 2, \n0, 10, 1, 11, 2, 12, \n0, 0, 10, 1, 11, 2, 12, 13, 3, \nException in thread \"Thread-1\" java.util.ConcurrentModificationException\n	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)\n	at java.util.ArrayList$Itr.next(ArrayList.java:859)\n	at chap03.FailFastTest.printAll(FailFastTest.java:59)\n	at chap03.FailFastTest.access$300(FailFastTest.java:13)\n	at chap03.FailFastTest$Thread2.run(FailFastTest.java:50)\n0, 10, 1, 11, 2, 12, 13, 3, 4, \n0, 10, 1, 11, 2, 12, 13, 3, 4, 5, \n\n```\n结果说明：\n(1) FastFailTest中通过 new Thread1().start() 和 new Thread2().start() 同时启动两个线程去操作list。\n    Thread1线程：向list中依次添加0,1,2,3,4,5。每添加一个数之后，就通过printAll()遍历整个list。\n    Thread2线程：向list中依次添加10,11,12,13,14,15。每添加一个数之后，就通过printAll()遍历整个list。<br>\n(2) 当某一个线程遍历list的过程中，list的内容被另外一个线程所改变了；就会抛出ConcurrentModificationException异常，产生fail-fast事件。\n\n## fail-fast原理\n产生fail-fast事件，是通过抛出ConcurrentModificationException异常来触发的。\n那么，ArrayList是如何抛出ConcurrentModificationException异常的呢?\n\n我们知道，ConcurrentModificationException是在操作Iterator时抛出的异常。我们先看看Iterator的源码。ArrayList的Iterator是在父类AbstractList.java中实现的。代码如下:\n```java\n    // 返回List对应的迭代器。实际上，是返回Itr对象\n    public Iterator<E> iterator() {\n        return new Itr();\n    }\n\n    // Itr是Iterator的实现类\n    private class Itr implements Iterator<E> {\n        /**\n         * 后续调用next返回的元素索引\n         */\n        int cursor = 0;\n\n        /**\n         * 最近调用next或previous返回的元素索引。\n         */\n        int lastRet = -1;\n\n        /**\n         * 迭代器所期望的modCount值。\n         * 每次新建Itr()对象时，都会保存新建该对象时对应的modCount；\n         * 以后每次遍历List中的元素的时候，都会比较expectedModCount和modCount是否相等；\n	 * 若不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件。\n         */\n        int expectedModCount = modCount;\n\n        public boolean hasNext() {\n            return cursor != size();\n        }\n\n        public E next() {\n	    // 获取下一个元素之前，都会判断“新建Itr对象时保存的modCount”和“当前的modCount”是否相等；\n	    // 若不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件。\n            checkForComodification();\n            try {\n                int i = cursor;\n                E next = get(i);\n                lastRet = i;\n                cursor = i + 1;\n                return next;\n            } catch (IndexOutOfBoundsException e) {\n                checkForComodification();\n                throw new NoSuchElementException();\n            }\n        }\n\n        public void remove() {\n            if (lastRet < 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                AbstractList.this.remove(lastRet);\n                if (lastRet < cursor)\n                    cursor--;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException e) {\n                throw new ConcurrentModificationException();\n            }\n        }\n	// 检查是否修改\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n    }\n```\n从中，我们可以发现在调用 next() 和 remove()时，都会执行 checkForComodification()。可以看出，该方法才是判断是否抛出ConcurrentModificationException异常的关键。在该段代码中，当modCount != expectedModCount\n时，就会抛出该异常。\n\n从Itr类中，我们知道 expectedModCount 在创建Itr对象时，被赋值为 modCount。通过Itr，我们知道：expectedModCount不可能被修改为不等于 modCount。所以，需要考证的就是modCount何时会被修改。\n\n接下来，我们查看ArrayList的源码，来看看modCount是如何被修改的。\n[ArrayList源码解析>>](http://www.dblearn.cn/article/42)\n\n从中，我们发现：无论是add()、remove()，只要涉及到修改集合中的元素个数时，都会改变modCount的值。所以当另一个线程(并发修改)或者同一个线程遍历过程中，调用相关方法使集合的个数发生改变，就会使modCount发生变化，这样在checkForComodification方法中就会抛出ConcurrentModificationException异常。\n\n## fail-fast解决\n\n### 使用迭代器的remove方法\n在单线程的遍历过程中，如果要进行remove操作，可以调用迭代器的remove方法而不是集合类的remove方法。看看ArrayList中迭代器的remove方法的源码：\n```java\n        public void remove() {\n            if (lastRet < 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                ArrayList.this.remove(lastRet);\n                cursor = lastRet;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException ex) {\n                throw new ConcurrentModificationException();\n            }\n        }\n```\n可以看到，该remove方法并不会修改modCount的值，并且不会对后面的遍历造成影响，因为该方法remove不能指定元素，只能remove当前遍历过的那个元素，所以调用该方法并不会发生fail-fast现象。\n\n### 使用java.util.concurrent包下对应的类\n若在多线程环境下使用fail-fast机制的集合，建议使用“java.util.concurrent包下的类”去取代“java.util包下的类”\n所以，本例中只需要将ArrayList替换成java.util.concurrent包下对应的类即可。\n即，将代码\n```java\nprivate static List<String> list = new ArrayList<String>();\n```\n\n替换为\n```java\nprivate static List<String> list = new CopyOnWriteArrayList<String>();\n```\n则可以解决该办法。\n\n','<h2 id=\"fail-fast-\">fail-fast简介</h2>\n<p>fail-fast 机制是java集合(Collection)中的一种错误机制。当在迭代集合的过程中该集合在结构上发生改变的时候，就有可能会发生fail-fast，即抛出ConcurrentModificationException异常。</p>\n<h2 id=\"fail-fast-\">fail-fast场景</h2>\n<p>在多线程和单线程环境下都有可能出现快速失败。</p>\n<h3 id=\"-fail-fast\">单线程环境下的fail-fast</h3>\n<pre><code class=\"language-java\">public class FailFastTest {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; 10; i++) {\n            list.add(i);\n        }\n        Iterator&lt;Integer&gt; iterator = list.iterator();\n        while(iterator.hasNext()) {\n            Integer next = iterator.next();\n            System.out.println(&quot;当前元素为 &quot;+ next);\n            if(next == 2) {\n                list.remove(next);\n                System.out.println(&quot;移除元素2后&quot;);\n            }\n        }\n    }\n\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">当前元素为 0\n当前元素为 1\n当前元素为 2\n移除元素2后\nException in thread &quot;main&quot; java.util.ConcurrentModificationException\n    at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)\n    at java.util.ArrayList$Itr.next(ArrayList.java:859)\n    at chap03.FailFastTest.main(FailFastTest.java:21)</code></pre>\n<p>上述代码创建了长度为10的list，遍历list时，当值为2时，调用list的remove方法，移除该元素，当移除元素2后，再次调用next()方法时,抛出ConcurrentModificationException,即产生了fail-fast</p>\n<h3 id=\"-fail-fast\">多线程环境下的fail-fast</h3>\n<pre><code class=\"language-java\">public class FailFastTest {\n\n    private static List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n\n    public static void main(String[] args) {\n        new Thread1().start();\n        new Thread2().start();\n    }\n\n    private static class Thread1 extends Thread {\n        @Override\n        public void run() {\n            int  i = 0;\n            while (i&lt;6 ) {\n                list.add(i);\n                printAll();\n                i++;\n            }\n\n        }\n    }\n    private static class Thread2 extends Thread {\n        @Override\n        public void run() {\n            int  i = 10;\n            while (i&lt;16 ) {\n                list.add(i);\n                printAll();\n                i++;\n            }\n\n        }\n    }\n    private static void printAll() {\n        Iterator&lt;Integer&gt; iterator = list.iterator();\n        while (iterator.hasNext()) {\n            Integer next = iterator.next();\n            System.out.print(next + &quot;, &quot;);\n        }\n        System.out.println();\n    }\n\n}</code></pre>\n<p>运行结果:</p>\n<pre><code class=\"language-shell\">0, \n0, 10, \n0, 10, 1, \n0, 10, 1, 11, \n0, 10, 1, 11, 2, \n0, 10, 1, 11, 2, 12, \n0, 0, 10, 1, 11, 2, 12, 13, 3, \nException in thread &quot;Thread-1&quot; java.util.ConcurrentModificationException\n    at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)\n    at java.util.ArrayList$Itr.next(ArrayList.java:859)\n    at chap03.FailFastTest.printAll(FailFastTest.java:59)\n    at chap03.FailFastTest.access$300(FailFastTest.java:13)\n    at chap03.FailFastTest$Thread2.run(FailFastTest.java:50)\n0, 10, 1, 11, 2, 12, 13, 3, 4, \n0, 10, 1, 11, 2, 12, 13, 3, 4, 5, \n</code></pre>\n<p>结果说明：\n(1) FastFailTest中通过 new Thread1().start() 和 new Thread2().start() 同时启动两个线程去操作list。\n    Thread1线程：向list中依次添加0,1,2,3,4,5。每添加一个数之后，就通过printAll()遍历整个list。\n    Thread2线程：向list中依次添加10,11,12,13,14,15。每添加一个数之后，就通过printAll()遍历整个list。<br>\n(2) 当某一个线程遍历list的过程中，list的内容被另外一个线程所改变了；就会抛出ConcurrentModificationException异常，产生fail-fast事件。</p>\n<h2 id=\"fail-fast-\">fail-fast原理</h2>\n<p>产生fail-fast事件，是通过抛出ConcurrentModificationException异常来触发的。\n那么，ArrayList是如何抛出ConcurrentModificationException异常的呢?</p>\n<p>我们知道，ConcurrentModificationException是在操作Iterator时抛出的异常。我们先看看Iterator的源码。ArrayList的Iterator是在父类AbstractList.java中实现的。代码如下:</p>\n<pre><code class=\"language-java\">    // 返回List对应的迭代器。实际上，是返回Itr对象\n    public Iterator&lt;E&gt; iterator() {\n        return new Itr();\n    }\n\n    // Itr是Iterator的实现类\n    private class Itr implements Iterator&lt;E&gt; {\n        /**\n         * 后续调用next返回的元素索引\n         */\n        int cursor = 0;\n\n        /**\n         * 最近调用next或previous返回的元素索引。\n         */\n        int lastRet = -1;\n\n        /**\n         * 迭代器所期望的modCount值。\n         * 每次新建Itr()对象时，都会保存新建该对象时对应的modCount；\n         * 以后每次遍历List中的元素的时候，都会比较expectedModCount和modCount是否相等；\n     * 若不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件。\n         */\n        int expectedModCount = modCount;\n\n        public boolean hasNext() {\n            return cursor != size();\n        }\n\n        public E next() {\n        // 获取下一个元素之前，都会判断“新建Itr对象时保存的modCount”和“当前的modCount”是否相等；\n        // 若不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件。\n            checkForComodification();\n            try {\n                int i = cursor;\n                E next = get(i);\n                lastRet = i;\n                cursor = i + 1;\n                return next;\n            } catch (IndexOutOfBoundsException e) {\n                checkForComodification();\n                throw new NoSuchElementException();\n            }\n        }\n\n        public void remove() {\n            if (lastRet &lt; 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                AbstractList.this.remove(lastRet);\n                if (lastRet &lt; cursor)\n                    cursor--;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException e) {\n                throw new ConcurrentModificationException();\n            }\n        }\n    // 检查是否修改\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n    }</code></pre>\n<p>从中，我们可以发现在调用 next() 和 remove()时，都会执行 checkForComodification()。可以看出，该方法才是判断是否抛出ConcurrentModificationException异常的关键。在该段代码中，当modCount != expectedModCount\n时，就会抛出该异常。</p>\n<p>从Itr类中，我们知道 expectedModCount 在创建Itr对象时，被赋值为 modCount。通过Itr，我们知道：expectedModCount不可能被修改为不等于 modCount。所以，需要考证的就是modCount何时会被修改。</p>\n<p>接下来，我们查看ArrayList的源码，来看看modCount是如何被修改的。\n<a href=\"http://www.dblearn.cn/article/42\">ArrayList源码解析&gt;&gt;</a></p>\n<p>从中，我们发现：无论是add()、remove()，只要涉及到修改集合中的元素个数时，都会改变modCount的值。所以当另一个线程(并发修改)或者同一个线程遍历过程中，调用相关方法使集合的个数发生改变，就会使modCount发生变化，这样在checkForComodification方法中就会抛出ConcurrentModificationException异常。</p>\n<h2 id=\"fail-fast-\">fail-fast解决</h2>\n<h3 id=\"-remove-\">使用迭代器的remove方法</h3>\n<p>在单线程的遍历过程中，如果要进行remove操作，可以调用迭代器的remove方法而不是集合类的remove方法。看看ArrayList中迭代器的remove方法的源码：</p>\n<pre><code class=\"language-java\">        public void remove() {\n            if (lastRet &lt; 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                ArrayList.this.remove(lastRet);\n                cursor = lastRet;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException ex) {\n                throw new ConcurrentModificationException();\n            }\n        }</code></pre>\n<p>可以看到，该remove方法并不会修改modCount的值，并且不会对后面的遍历造成影响，因为该方法remove不能指定元素，只能remove当前遍历过的那个元素，所以调用该方法并不会发生fail-fast现象。</p>\n<h3 id=\"-java-util-concurrent-\">使用java.util.concurrent包下对应的类</h3>\n<p>若在多线程环境下使用fail-fast机制的集合，建议使用“java.util.concurrent包下的类”去取代“java.util包下的类”\n所以，本例中只需要将ArrayList替换成java.util.concurrent包下对应的类即可。\n即，将代码</p>\n<pre><code class=\"language-java\">private static List&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></pre>\n<p>替换为</p>\n<pre><code class=\"language-java\">private static List&lt;String&gt; list = new CopyOnWriteArrayList&lt;String&gt;();</code></pre>\n<p>则可以解决该办法。</p>\n',47,2,2,NULL,'2019-09-16 14:24:36','2019-09-16 14:24:36',0,'9,11,38',1,0),(44,'Java集合05——LinkedList','LinkedList 是一个继承于AbstractSequentialList的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。','Bobbi','## LinkedList介绍\n```java\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n```\nLinkedList 是一个继承于AbstractSequentialList的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。\nLinkedList 实现 List 接口，能对它进行队列操作。\nLinkedList 实现 Deque 接口，即能将LinkedList当作双端队列使用。\nLinkedList 实现了Cloneable接口，即覆盖了函数clone()，能克隆。\nLinkedList 实现java.io.Serializable接口，这意味着LinkedList支持序列化，能通过序列化去传输。\nLinkedList 是非同步的。\n\n### AbstractSequentialList简介\nLinkedList是AbstractSequentialList的子类。\nAbstractSequentialList 实现了get(int index)、set(int index, E element)、add(int index, E element) 和 remove(int index)这些函数。这些接口都是随机访问List的，LinkedList是双向链表；既然它继承于AbstractSequentialList，就相当于已经实现了“get(int index)这些接口”。\n\n此外，我们若需要通过AbstractSequentialList自己实现一个列表，只需要扩展此类，并提供 listIterator() 和 size() 方法的实现即可。若要实现不可修改的列表，则需要实现列表迭代器的 hasNext、next、hasPrevious、previous 和 index 方法即可。\n\n## LinkedList数据结构\n\n![image.png](http://oss.dblearn.cn/dbblog/20190919/8319505fb5434989bd5e0839caabbf50.png)\n\nLinkedList的本质是双向链表。\n\n1. LinkedList继承于AbstractSequentialList，并且实现了Dequeue接口。 \n2. LinkedList包含三个重要的成员：first、last 和 size。<br>\n　　first是双向链表的表头，last是双向列表的表尾。它们是是双向链表节点所对应的类Node的实例。Node中包含成员变量： previous, next, item。其中，previous是该节点的上一个节点，next是该节点的下一个节点，item是该节点所包含的值。 <br>\n　　size是双向链表中节点的个数。\n\n## 构造方法\n```java\n    public LinkedList() {\n    }\n\n    /**\n     * 创建一个包含collection的LinkedList\n     */\n    public LinkedList(Collection<? extends E> c) {\n        this();\n        addAll(c);\n    }\n```\nLinkedList() 构造一个空列表。\n\nLinkedList(Collection<? extends E> c)： 构造一个包含指定 collection 中的元素的列表，这些元素按其 collection 的迭代器返回的顺序排列。该构造函数首先会调用 LinkedList()，构造一个空列表，然后调用了 addAll() 方法将 Collection 中的所有元素添加到列表中。以下是 addAll() 的源代码：\n```java\n    public boolean addAll(Collection<? extends E> c) {\n        return addAll(size, c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        // 检查插入位置index是否越界\n        checkPositionIndex(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        if (numNew == 0)\n            return false;\n\n        // 获取上一个节点,及插入位置的节点\n        LinkedList.Node<E> pred, succ;\n        //如果插入位置为尾部，succ则为null，原来链表的last设置为此刻的pred节点\n        if (index == size) {\n            succ = null;\n            pred = last;\n        } else {\n            succ = node(index);\n            pred = succ.prev;\n        }\n\n        // 执行插入操作\n        for (Object o : a) {\n            @SuppressWarnings(\"unchecked\") E e = (E) o;\n            LinkedList.Node<E> newNode = new LinkedList.Node<>(pred, e, null);\n            // 如果pred为空，此Node就为first节点\n            if (pred == null)\n                first = newNode;\n            else\n                // 尾插法\n                pred.next = newNode;\n            pred = newNode;\n        }\n        // 如果succ为空（末尾），就把插入的最后一个节点设为last\n        if (succ == null) {\n            last = pred;\n        } else {\n            //否则，把之前保存的succ接到pred后面,并且把succ的前向指针指向插入的最后一个元素\n            pred.next = succ;\n            succ.prev = pred;\n        }\n\n        size += numNew;\n        modCount++;\n        return true;\n    }\n\n```	\n经过上边的代码注释可以了解到，LinkedList 批量添加节点的方法大体分下面几个步骤：\n\n1. 检查索引值是否合法，不合法将抛出角标越界异常\n2. 保存 index 位置的节点，和 index-1 位置的节点，用于链表的增删操作\n3. 将参数集合转化为数组，循环将数组中的元素封装为节点添加到链表中。\n4. 更新链表长度并返回添加 true 表示添加成功。\n\n\n## LinkedList的API\n```java\n    // 将指定的元素追加到此列表的末尾。\n    boolean	add(E e);\n    // 在此列表中的指定位置插入指定的元素。\n    void	add(int index, E element);\n    // 将集合中的所有元素追加到此列表的末尾。\n    boolean	addAll(Collection<? extends E> c);\n    // 将指定集合中的所有元素插入到此列表中，从指定的位置开始。\n    boolean	addAll(int index, Collection<? extends E> c);\n    // 在该列表开头插入指定的元素。\n    void	addFirst(E e);\n    // 将指定的元素追加到此列表的末尾。\n    void	addLast(E e);\n    // 从列表中删除所有元素。\n    void	clear();\n    // 返回此 LinkedList的浅版本。\n    Object	clone();\n    // 如果此列表包含指定的元素，则返回 true 。\n    boolean	contains(Object o);\n    // 以相反的顺序返回此deque中的元素的迭代器。\n    Iterator<E>	descendingIterator();\n    // 检索但不删除此列表的头（第一个元素）。\n    E	element();\n    // 返回此列表中指定位置的元素。\n    E	get(int index);\n    // 返回此列表中的第一个元素。\n    E	getFirst();\n    // 返回此列表中的最后一个元素。\n    E	getLast();\n    // 返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。\n    int	indexOf(Object o);\n    // 返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。\n    int	lastIndexOf(Object o);\n    // 从列表中的指定位置开始，返回此列表中元素的列表迭代器（按适当的顺序）。\n    ListIterator<E>	listIterator(int index);\n    // 将指定的元素添加为此列表的尾部（最后一个元素）。\n    boolean	offer(E e);\n    // 在此列表的前面插入指定的元素。\n    boolean	offerFirst(E e);\n    // 在该列表的末尾插入指定的元素。\n    boolean	offerLast(E e);\n    // 检索但不删除此列表的头（第一个元素）。\n    E	peek();\n    // 检索但不删除此列表的第一个元素，如果此列表为空，则返回 null 。\n    E	peekFirst();\n    // 检索但不删除此列表的最后一个元素，如果此列表为空，则返回 null 。\n    E	peekLast();\n    // 检索并删除此列表的头（第一个元素）。\n    E	poll();\n    // 检索并删除此列表的第一个元素，如果此列表为空，则返回 null 。\n    E	pollFirst();\n    // 检索并删除此列表的最后一个元素，如果此列表为空，则返回 null 。\n    E	pollLast();\n    // 从此列表头弹出一个元素。 removeFirst\n    E	pop();\n    // 将元素推送到由此列表头上。 addFirst\n    void	push(E e);\n    // 检索并删除此列表的头（第一个元素）。\n    E	remove();\n    // 删除该列表中指定位置的元素。\n    E	remove(int index);\n    // 从列表中删除指定元素的第一个出现（如果存在）。\n    boolean	remove(Object o);\n    // 从此列表中删除并返回第一个元素。\n    E	removeFirst();\n    // 删除此列表中指定元素的第一个出现（从头到尾遍历列表时）。\n    boolean	removeFirstOccurrence(Object o);\n    // 从此列表中删除并返回最后一个元素。\n    E	removeLast();\n    // 删除此列表中指定元素的最后一次出现（从头到尾遍历列表时）。\n    boolean	removeLastOccurrence(Object o);\n    // 用指定的元素替换此列表中指定位置的元素。\n    E	set(int index, E element);\n    // 返回此列表中的元素数。\n    int	size();\n    // 在此列表中的元素上创建并发迭代器Spliterator 。\n    Spliterator<E>	spliterator();\n    // 以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。\n    Object[]	toArray();\n    // 以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; 返回的数组的运行时类型是指定数组的运行时类型。\n    <T> T[]	toArray(T[] a)\n```\n\n## LinkedList 添加节点\nLinkedList 作为链表数据结构的实现，不同于数组，它可以方便的在头尾插入一个节点，而 add 方法默认在链表尾部添加节点：\n\n\n```java\n   \n    public void addFirst(E e) {\n        linkFirst(e);\n    }\n    public void addLast(E e) {\n        linkLast(e);\n    }\n    public boolean add(E e) {\n        linkLast(e);\n        return true;\n    }\n```\n这一系方法都调用用了 linkXXX 方法\n```java\n    // 链接e作为第一个\n    private void linkFirst(E e) {\n	// 暂存原列头元素\n        final Node<E> f = first;\n	// 以添加的元素为节点值构建新的节点 并将 next 指针指向之前的头节点\n        final Node<E> newNode = new Node<>(null, e, f);\n        // 将first节点覆盖为新节点\n	first = newNode;\n	// 如果原头节点为空，则之前是空链，此时为单节点链表，尾结点为新节点\n        if (f == null)\n            last = newNode;\n        else\n       // 否则将原头节点的prev指针指向新的节点 \n            f.prev = newNode;\n        size++;\n        modCount++;\n    }\n\n    // 链接e作为最后一个元素\n    void linkLast(E e) {\n	// 暂存原列表末端元素\n        final Node<E> l = last;\n	// 以添加的元素为节点值构建新的节点 并将 prev 指针指向之前的尾节点\n        final Node<E> newNode = new Node<>(l, e, null);\n        // 将last节点覆盖为新节点\n	last = newNode;\n        // 如果原尾节点为空，则之前是空链，此时为单节点链表，头结点为新节点\n        if (l == null)\n            first = newNode;\n        else\n       // 否则将原尾节点的next指针指向新的节点\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n\n    // 在非null节点succ之前插入元素e\n    void linkBefore(E e, Node<E> succ) {\n        // assert succ != null;\n	// 由于 succ 一定不为空，所以可以直接获取 prev 节点\n        final Node<E> pred = succ.prev;\n        // 新节点 prev 节点为 pred，next 节点为 succ\n        final Node<E> newNode = new Node<>(pred, e, succ);\n	// 原节点的 prev 指向新节点\n        succ.prev = newNode;\n       // 如果 pred 为空即头节点处插入了一个节点，则将新的节点赋值给 first 索引\n        if (pred == null)\n            first = newNode;\n        else\n	   //否则 pred 的下一个节点改为新节点\n            pred.next = newNode;\n        size++;\n        modCount++;\n    }\n```\n\n## LinkedList 删除节点\n```java\n   /**\n     * 从此列表中删除并返回第一个元素\n     */\n    public E removeFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return unlinkFirst(f);\n    }\n\n    /**\n     * 从此列表中删除并返回最后一个元素\n     */\n    public E removeLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return unlinkLast(l);\n    }\n\n    /**\n    * 从此列表中删除指定元素的第一个匹配项，如果存在，则删\n    */\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item)) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n```\n可以看出最终调用的方法为 unlinkFirst，unlinkLast 方法：\n\n```java\n    /**\n     * 取消链接非空的第一个节点f\n     */\n    private E unlinkFirst(Node<E> f) {\n        // assert f == first && f != null;\n	// 头节点的 element 这里作为返回值使用\n        final E element = f.item;\n        // 暂存头结点的下一个节点next\n        final Node<E> next = f.next;\n	// 释放头结点释放头结点next指针，帮助GC\n        f.item = null;\n        f.next = null; // help GC\n	// 将next覆盖first节点\n        first = next;\n        // 如果 next 节点为空，即链表只有一个节点的时候，last 指向 null\n        if (next == null)\n            last = null;\n        else\n	    //否则 next 的 prev 指针指向 null\n            next.prev = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n    /**\n     * 取消链接非空的最后一个节点l\n     */\n    private E unlinkLast(Node<E> l) {\n        // assert l == last && l != null;\n	// 获取末节点元素，这里做返回值使用\n        final E element = l.item;\n	// 暂存末节点的上一个节点 prev\n        final Node<E> prev = l.prev;\n	// 释放末节点，和末节点的prev指针，帮助GC\n        l.item = null; \n        l.prev = null; // help GC\n	// 将prev覆盖last节点\n        last = prev;\n	// 如果链表只有一个节点的时候，first 指向 null\n        if (prev == null)\n            first = null;\n        else\n	    // 否则prev的next指针指向null\n            prev.next = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n    /**\n     * 取消链接非空节点x.\n     */\n    E unlink(Node<E> x) {\n        // assert x != null;\n	// 获取移除元素，做返回值使用\n        final E element = x.item;\n	// 获取移除元素的前后两个节点 prev next\n        final Node<E> next = x.next;\n        final Node<E> prev = x.prev;\n\n	// 如果节点为头节点，则做 unlinkFirst 操作\n        if (prev == null) {\n            first = next;\n        } else {\n	    //否则将上一个节点的 next 指针指向下个节点\n            prev.next = next;\n            x.prev = null;\n        }\n	 // 如果节点为尾节点，则做unlinkLast操作\n        if (next == null) {\n            last = prev;\n        } else {\n	    //否则下个节点 prev 指针指向上个节点\n            next.prev = prev;\n            x.next = null;\n        }\n\n        x.item = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n```\nLinkedList 实现了 List 接口的 clear 操作，用于删除链表所有的节点：\n```java\n    /**\n     * 删除所有元素\n     */\n    public void clear() {\n        // 依次清除节点，帮助释放内存空间\n        for (Node<E> x = first; x != null; ) {\n            Node<E> next = x.next;\n            x.item = null;\n            x.next = null;\n            x.prev = null;\n            x = next;\n        }\n        first = last = null;\n        size = 0;\n        modCount++;\n    }\n```\n\n## LinkedList 查询节点\nLinkedList 查询节点的方法，可分为根据指定的索引查询，获取头节点，获取未节点三种。值得注意的是，根据索引去获取节点内容的效率并不高，所以如果查询操作多余增删操作的时候建议用 ArrayList 去替代。\n\n```java\n/**\n* 根据索引查询\n*/\npublic E get(int index) {\n   checkElementIndex(index);\n   return node(index).item;\n}\n\n/**\n* 返回 first 索引指向的节点的内容\n*/\npublic E getFirst() {\n   final Node<E> f = first;\n   if (f == null)\n       throw new NoSuchElementException();\n   return f.item;\n}\n\n/**\n* 返回 last 索引指向的节点的内容\n*/\npublic E getLast() {\n   final Node<E> l = last;\n   if (l == null)\n       throw new NoSuchElementException();\n   return l.item;\n}\n\n```\n其中node(index)方法如下：\n```java\n    // 返回指定元素索引处的（非null）节点。\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n	// 如果 index < size/2 则从0开始寻找指定角标的节点\n        if (index < (size >> 1)) {\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {\n	 // 如果 index >= size/2 则从 size-1 开始寻找指定角标的节点\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n\n```\nnode 方法可以用于根据指定 index 去以 size/2 为界限搜索index 位置的 Node;\n\n## LinkedList 修改节点\nLinkedList 只提供了 set(int index, E element) 一个方法。\n```java\npublic E set(int index, E element) {\n   // 判断角标是否越界\n   checkElementIndex(index);\n   // 采用 node 方法查找对应索引的节点\n   Node<E> x = node(index);\n   //保存节点原有的内容值\n   E oldVal = x.item;\n   // 设置新值\n   x.item = element;\n   // 返回旧的值\n   return oldVal;\n}\n\n```\n\n## LinkedList 双向队列\n\n### Deque 双端队列\n我们先来认识一下 Java 中的 双端队列，我们都知道 Queue 是一个队列，遵循 FIFO 准则，我们也知道 Stack 是一个栈结构，遵循 FILO 准则。 而Deque 这个双端队列就厉害了,它既可以实现栈的操作，也可以实现队列的操作，换句话说，实现了这个接口的类，既可以作为栈使用也可以作为队列使用。\n\n### LinkedList FIFO队列\nQueue中的方法：\n\n- offer() 和 add() 都是在队列中插入一个元素\n- remove() 和 poll() 方法都是从队列中删除第一个元素\n- element() 和 peek() 用于在队列的头部查询元素\n\nLinkedList可以作为FIFO(先进先出)的队列，作为FIFO的队列时，下表的方法等价\n\n``` shell\n队列方法       等效方法\nadd(e)        addLast(e)\noffer(e)      offerLast(e)\nremove()      removeFirst()\npoll()        pollFirst()\nelement()     getFirst()\npeek()        peekFirst()\n```\n\n### LinkedList LIFO栈\nStack中的方法：\n- push 往栈中压入一个元素\n- pop 从栈顶获取一个元素，同时删除该元素\n- peek 从栈顶获取一个元素，但不删除元素\n\nLinkedList可以作为LIFO(后进先出)的栈，作为LIFO的栈时，下表的方法等价：\n\n```shell\n栈方法        等效方法\npush(e)      addFirst(e)\npop()        removeFirst()\npeek()       peekFirst()\n```\n\n## LinkedList遍历方式\n\n1. 迭代器遍历\n```java\nfor(Iterator iter = list.iterator(); iter.hasNext();)\n    iter.next();\n```\n2. 快速随机访问遍历\n```java\nint size = list.size();\nfor (int i=0; i<size; i++) {\n    list.get(i);        \n}\n```\n3. foreach循环遍历\n```java\nfor (Integer integ:list) \n    ;\n```\n4. 通过pollFirst()来遍历\n```java\nwhile(list.pollFirst() != null)\n    ;\n```\n5. 通过pollLast()来遍历\n```java\nwhile(list.pollLast() != null)\n    ;\n```\n6. 通过removeFirst()来遍历\n```java\ntry {\n    while(list.removeFirst() != null)\n        ;\n} catch (NoSuchElementException e) {\n}\n```\n7. 通过removeLast()来遍历\n```java\ntry {\n    while(list.removeLast() != null)\n        ;\n} catch (NoSuchElementException e) {\n}\n```\n\n### 遍历方式效率比较\n```java\npublic class LinkedListTest {\n\n    public static void main(String[] args) {\n        // 通过Iterator遍历LinkedList\n        iteratorLinkedListThruIterator(getLinkedList()) ;\n\n        // 通过快速随机访问遍历LinkedList\n        iteratorLinkedListThruForeach(getLinkedList()) ;\n\n        // 通过for循环的变种来访问遍历LinkedList\n        iteratorThroughFor2(getLinkedList()) ;\n\n        // 通过PollFirst()遍历LinkedList\n        iteratorThroughPollFirst(getLinkedList()) ;\n\n        // 通过PollLast()遍历LinkedList\n        iteratorThroughPollLast(getLinkedList()) ;\n\n        // 通过removeFirst()遍历LinkedList\n        iteratorThroughRemoveFirst(getLinkedList()) ;\n\n        // 通过removeLast()遍历LinkedList\n        iteratorThroughRemoveLast(getLinkedList()) ;\n    }\n\n    private static LinkedList getLinkedList() {\n        LinkedList llist = new LinkedList();\n        for (int i=0; i<100000; i++)\n            llist.addLast(i);\n\n        return llist;\n    }\n    /**\n     * 通过快迭代器遍历LinkedList\n     */\n    private static void iteratorLinkedListThruIterator(LinkedList<Integer> list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n\n        for(Iterator iter = list.iterator(); iter.hasNext();)\n            iter.next();\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(\"iteratorLinkedListThruIterator：\" + interval+\" ms\");\n    }\n\n    /**\n     * 通过快速随机访问遍历LinkedList\n     */\n    private static void iteratorLinkedListThruForeach(LinkedList<Integer> list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n\n        int size = list.size();\n        for (int i=0; i<size; i++) {\n            list.get(i);\n        }\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(\"iteratorLinkedListThruForeach：\" + interval+\" ms\");\n    }\n\n    /**\n     * 通过另外一种for循环来遍历LinkedList\n     */\n    private static void iteratorThroughFor2(LinkedList<Integer> list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n\n        for (Integer integ:list)\n            ;\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(\"iteratorThroughFor2：\" + interval+\" ms\");\n    }\n\n    /**\n     * 通过pollFirst()来遍历LinkedList\n     */\n    private static void iteratorThroughPollFirst(LinkedList<Integer> list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n        while(list.pollFirst() != null)\n            ;\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(\"iteratorThroughPollFirst：\" + interval+\" ms\");\n    }\n\n    /**\n     * 通过pollLast()来遍历LinkedList\n     */\n    private static void iteratorThroughPollLast(LinkedList<Integer> list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n        while(list.pollLast() != null)\n            ;\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(\"iteratorThroughPollLast：\" + interval+\" ms\");\n    }\n\n    /**\n     * 通过removeFirst()来遍历LinkedList\n     */\n    private static void iteratorThroughRemoveFirst(LinkedList<Integer> list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n        try {\n            while(list.removeFirst() != null)\n                ;\n        } catch (NoSuchElementException e) {\n        }\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(\"iteratorThroughRemoveFirst：\" + interval+\" ms\");\n    }\n\n    /**\n     * 通过removeLast()来遍历LinkedList\n     */\n    private static void iteratorThroughRemoveLast(LinkedList<Integer> list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n        try {\n            while(list.removeLast() != null)\n                ;\n        } catch (NoSuchElementException e) {\n        }\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(\"iteratorThroughRemoveLast：\" + interval+\" ms\");\n    }\n\n\n\n}\n\n```\n运行结果：\n```shell\niteratorLinkedListThruIterator：10 ms\niteratorLinkedListThruForeach：4945 ms\niteratorThroughFor2：6 ms\niteratorThroughPollFirst：4 ms\niteratorThroughPollLast：4 ms\niteratorThroughRemoveFirst：3 ms\niteratorThroughRemoveLast：4 ms\n```\n结果说明：\n由此可见，遍历LinkedList时，使用removeFist()或removeLast()效率最高。但用它们遍历时，会删除原始数据；若单纯只读取，而不删除，应该使用foreach遍历方式。\n\n**无论如何，千万不要通过随机访问去遍历LinkedList!!**\n\n','<h2 id=\"linkedlist-\">LinkedList介绍</h2>\n<pre><code class=\"language-java\">public class LinkedList&lt;E&gt;\n    extends AbstractSequentialList&lt;E&gt;\n    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</code></pre>\n<p>LinkedList 是一个继承于AbstractSequentialList的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。\nLinkedList 实现 List 接口，能对它进行队列操作。\nLinkedList 实现 Deque 接口，即能将LinkedList当作双端队列使用。\nLinkedList 实现了Cloneable接口，即覆盖了函数clone()，能克隆。\nLinkedList 实现java.io.Serializable接口，这意味着LinkedList支持序列化，能通过序列化去传输。\nLinkedList 是非同步的。</p>\n<h3 id=\"abstractsequentiallist-\">AbstractSequentialList简介</h3>\n<p>LinkedList是AbstractSequentialList的子类。\nAbstractSequentialList 实现了get(int index)、set(int index, E element)、add(int index, E element) 和 remove(int index)这些函数。这些接口都是随机访问List的，LinkedList是双向链表；既然它继承于AbstractSequentialList，就相当于已经实现了“get(int index)这些接口”。</p>\n<p>此外，我们若需要通过AbstractSequentialList自己实现一个列表，只需要扩展此类，并提供 listIterator() 和 size() 方法的实现即可。若要实现不可修改的列表，则需要实现列表迭代器的 hasNext、next、hasPrevious、previous 和 index 方法即可。</p>\n<h2 id=\"linkedlist-\">LinkedList数据结构</h2>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190919/8319505fb5434989bd5e0839caabbf50.png\" alt=\"image.png\"></p>\n<p>LinkedList的本质是双向链表。</p>\n<ol>\n<li>LinkedList继承于AbstractSequentialList，并且实现了Dequeue接口。 </li>\n<li>LinkedList包含三个重要的成员：first、last 和 size。<br>\n　　first是双向链表的表头，last是双向列表的表尾。它们是是双向链表节点所对应的类Node的实例。Node中包含成员变量： previous, next, item。其中，previous是该节点的上一个节点，next是该节点的下一个节点，item是该节点所包含的值。 <br>\n　　size是双向链表中节点的个数。</li>\n</ol>\n<h2 id=\"-\">构造方法</h2>\n<pre><code class=\"language-java\">    public LinkedList() {\n    }\n\n    /**\n     * 创建一个包含collection的LinkedList\n     */\n    public LinkedList(Collection&lt;? extends E&gt; c) {\n        this();\n        addAll(c);\n    }</code></pre>\n<p>LinkedList() 构造一个空列表。</p>\n<p>LinkedList(Collection&lt;? extends E&gt; c)： 构造一个包含指定 collection 中的元素的列表，这些元素按其 collection 的迭代器返回的顺序排列。该构造函数首先会调用 LinkedList()，构造一个空列表，然后调用了 addAll() 方法将 Collection 中的所有元素添加到列表中。以下是 addAll() 的源代码：</p>\n<pre><code class=\"language-java\">    public boolean addAll(Collection&lt;? extends E&gt; c) {\n        return addAll(size, c);\n    }\n\n    public boolean addAll(int index, Collection&lt;? extends E&gt; c) {\n        // 检查插入位置index是否越界\n        checkPositionIndex(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        if (numNew == 0)\n            return false;\n\n        // 获取上一个节点,及插入位置的节点\n        LinkedList.Node&lt;E&gt; pred, succ;\n        //如果插入位置为尾部，succ则为null，原来链表的last设置为此刻的pred节点\n        if (index == size) {\n            succ = null;\n            pred = last;\n        } else {\n            succ = node(index);\n            pred = succ.prev;\n        }\n\n        // 执行插入操作\n        for (Object o : a) {\n            @SuppressWarnings(&quot;unchecked&quot;) E e = (E) o;\n            LinkedList.Node&lt;E&gt; newNode = new LinkedList.Node&lt;&gt;(pred, e, null);\n            // 如果pred为空，此Node就为first节点\n            if (pred == null)\n                first = newNode;\n            else\n                // 尾插法\n                pred.next = newNode;\n            pred = newNode;\n        }\n        // 如果succ为空（末尾），就把插入的最后一个节点设为last\n        if (succ == null) {\n            last = pred;\n        } else {\n            //否则，把之前保存的succ接到pred后面,并且把succ的前向指针指向插入的最后一个元素\n            pred.next = succ;\n            succ.prev = pred;\n        }\n\n        size += numNew;\n        modCount++;\n        return true;\n    }\n</code></pre>\n<p>经过上边的代码注释可以了解到，LinkedList 批量添加节点的方法大体分下面几个步骤：</p>\n<ol>\n<li>检查索引值是否合法，不合法将抛出角标越界异常</li>\n<li>保存 index 位置的节点，和 index-1 位置的节点，用于链表的增删操作</li>\n<li>将参数集合转化为数组，循环将数组中的元素封装为节点添加到链表中。</li>\n<li>更新链表长度并返回添加 true 表示添加成功。</li>\n</ol>\n<h2 id=\"linkedlist-api\">LinkedList的API</h2>\n<pre><code class=\"language-java\">    // 将指定的元素追加到此列表的末尾。\n    boolean    add(E e);\n    // 在此列表中的指定位置插入指定的元素。\n    void    add(int index, E element);\n    // 将集合中的所有元素追加到此列表的末尾。\n    boolean    addAll(Collection&lt;? extends E&gt; c);\n    // 将指定集合中的所有元素插入到此列表中，从指定的位置开始。\n    boolean    addAll(int index, Collection&lt;? extends E&gt; c);\n    // 在该列表开头插入指定的元素。\n    void    addFirst(E e);\n    // 将指定的元素追加到此列表的末尾。\n    void    addLast(E e);\n    // 从列表中删除所有元素。\n    void    clear();\n    // 返回此 LinkedList的浅版本。\n    Object    clone();\n    // 如果此列表包含指定的元素，则返回 true 。\n    boolean    contains(Object o);\n    // 以相反的顺序返回此deque中的元素的迭代器。\n    Iterator&lt;E&gt;    descendingIterator();\n    // 检索但不删除此列表的头（第一个元素）。\n    E    element();\n    // 返回此列表中指定位置的元素。\n    E    get(int index);\n    // 返回此列表中的第一个元素。\n    E    getFirst();\n    // 返回此列表中的最后一个元素。\n    E    getLast();\n    // 返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。\n    int    indexOf(Object o);\n    // 返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。\n    int    lastIndexOf(Object o);\n    // 从列表中的指定位置开始，返回此列表中元素的列表迭代器（按适当的顺序）。\n    ListIterator&lt;E&gt;    listIterator(int index);\n    // 将指定的元素添加为此列表的尾部（最后一个元素）。\n    boolean    offer(E e);\n    // 在此列表的前面插入指定的元素。\n    boolean    offerFirst(E e);\n    // 在该列表的末尾插入指定的元素。\n    boolean    offerLast(E e);\n    // 检索但不删除此列表的头（第一个元素）。\n    E    peek();\n    // 检索但不删除此列表的第一个元素，如果此列表为空，则返回 null 。\n    E    peekFirst();\n    // 检索但不删除此列表的最后一个元素，如果此列表为空，则返回 null 。\n    E    peekLast();\n    // 检索并删除此列表的头（第一个元素）。\n    E    poll();\n    // 检索并删除此列表的第一个元素，如果此列表为空，则返回 null 。\n    E    pollFirst();\n    // 检索并删除此列表的最后一个元素，如果此列表为空，则返回 null 。\n    E    pollLast();\n    // 从此列表头弹出一个元素。 removeFirst\n    E    pop();\n    // 将元素推送到由此列表头上。 addFirst\n    void    push(E e);\n    // 检索并删除此列表的头（第一个元素）。\n    E    remove();\n    // 删除该列表中指定位置的元素。\n    E    remove(int index);\n    // 从列表中删除指定元素的第一个出现（如果存在）。\n    boolean    remove(Object o);\n    // 从此列表中删除并返回第一个元素。\n    E    removeFirst();\n    // 删除此列表中指定元素的第一个出现（从头到尾遍历列表时）。\n    boolean    removeFirstOccurrence(Object o);\n    // 从此列表中删除并返回最后一个元素。\n    E    removeLast();\n    // 删除此列表中指定元素的最后一次出现（从头到尾遍历列表时）。\n    boolean    removeLastOccurrence(Object o);\n    // 用指定的元素替换此列表中指定位置的元素。\n    E    set(int index, E element);\n    // 返回此列表中的元素数。\n    int    size();\n    // 在此列表中的元素上创建并发迭代器Spliterator 。\n    Spliterator&lt;E&gt;    spliterator();\n    // 以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。\n    Object[]    toArray();\n    // 以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; 返回的数组的运行时类型是指定数组的运行时类型。\n    &lt;T&gt; T[]    toArray(T[] a)</code></pre>\n<h2 id=\"linkedlist-\">LinkedList 添加节点</h2>\n<p>LinkedList 作为链表数据结构的实现，不同于数组，它可以方便的在头尾插入一个节点，而 add 方法默认在链表尾部添加节点：</p>\n<pre><code class=\"language-java\">\n    public void addFirst(E e) {\n        linkFirst(e);\n    }\n    public void addLast(E e) {\n        linkLast(e);\n    }\n    public boolean add(E e) {\n        linkLast(e);\n        return true;\n    }</code></pre>\n<p>这一系方法都调用用了 linkXXX 方法</p>\n<pre><code class=\"language-java\">    // 链接e作为第一个\n    private void linkFirst(E e) {\n    // 暂存原列头元素\n        final Node&lt;E&gt; f = first;\n    // 以添加的元素为节点值构建新的节点 并将 next 指针指向之前的头节点\n        final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);\n        // 将first节点覆盖为新节点\n    first = newNode;\n    // 如果原头节点为空，则之前是空链，此时为单节点链表，尾结点为新节点\n        if (f == null)\n            last = newNode;\n        else\n       // 否则将原头节点的prev指针指向新的节点 \n            f.prev = newNode;\n        size++;\n        modCount++;\n    }\n\n    // 链接e作为最后一个元素\n    void linkLast(E e) {\n    // 暂存原列表末端元素\n        final Node&lt;E&gt; l = last;\n    // 以添加的元素为节点值构建新的节点 并将 prev 指针指向之前的尾节点\n        final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);\n        // 将last节点覆盖为新节点\n    last = newNode;\n        // 如果原尾节点为空，则之前是空链，此时为单节点链表，头结点为新节点\n        if (l == null)\n            first = newNode;\n        else\n       // 否则将原尾节点的next指针指向新的节点\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n\n    // 在非null节点succ之前插入元素e\n    void linkBefore(E e, Node&lt;E&gt; succ) {\n        // assert succ != null;\n    // 由于 succ 一定不为空，所以可以直接获取 prev 节点\n        final Node&lt;E&gt; pred = succ.prev;\n        // 新节点 prev 节点为 pred，next 节点为 succ\n        final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);\n    // 原节点的 prev 指向新节点\n        succ.prev = newNode;\n       // 如果 pred 为空即头节点处插入了一个节点，则将新的节点赋值给 first 索引\n        if (pred == null)\n            first = newNode;\n        else\n       //否则 pred 的下一个节点改为新节点\n            pred.next = newNode;\n        size++;\n        modCount++;\n    }</code></pre>\n<h2 id=\"linkedlist-\">LinkedList 删除节点</h2>\n<pre><code class=\"language-java\">   /**\n     * 从此列表中删除并返回第一个元素\n     */\n    public E removeFirst() {\n        final Node&lt;E&gt; f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return unlinkFirst(f);\n    }\n\n    /**\n     * 从此列表中删除并返回最后一个元素\n     */\n    public E removeLast() {\n        final Node&lt;E&gt; l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return unlinkLast(l);\n    }\n\n    /**\n    * 从此列表中删除指定元素的第一个匹配项，如果存在，则删\n    */\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (Node&lt;E&gt; x = first; x != null; x = x.next) {\n                if (x.item == null) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        } else {\n            for (Node&lt;E&gt; x = first; x != null; x = x.next) {\n                if (o.equals(x.item)) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }</code></pre>\n<p>可以看出最终调用的方法为 unlinkFirst，unlinkLast 方法：</p>\n<pre><code class=\"language-java\">    /**\n     * 取消链接非空的第一个节点f\n     */\n    private E unlinkFirst(Node&lt;E&gt; f) {\n        // assert f == first &amp;&amp; f != null;\n    // 头节点的 element 这里作为返回值使用\n        final E element = f.item;\n        // 暂存头结点的下一个节点next\n        final Node&lt;E&gt; next = f.next;\n    // 释放头结点释放头结点next指针，帮助GC\n        f.item = null;\n        f.next = null; // help GC\n    // 将next覆盖first节点\n        first = next;\n        // 如果 next 节点为空，即链表只有一个节点的时候，last 指向 null\n        if (next == null)\n            last = null;\n        else\n        //否则 next 的 prev 指针指向 null\n            next.prev = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n    /**\n     * 取消链接非空的最后一个节点l\n     */\n    private E unlinkLast(Node&lt;E&gt; l) {\n        // assert l == last &amp;&amp; l != null;\n    // 获取末节点元素，这里做返回值使用\n        final E element = l.item;\n    // 暂存末节点的上一个节点 prev\n        final Node&lt;E&gt; prev = l.prev;\n    // 释放末节点，和末节点的prev指针，帮助GC\n        l.item = null; \n        l.prev = null; // help GC\n    // 将prev覆盖last节点\n        last = prev;\n    // 如果链表只有一个节点的时候，first 指向 null\n        if (prev == null)\n            first = null;\n        else\n        // 否则prev的next指针指向null\n            prev.next = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n    /**\n     * 取消链接非空节点x.\n     */\n    E unlink(Node&lt;E&gt; x) {\n        // assert x != null;\n    // 获取移除元素，做返回值使用\n        final E element = x.item;\n    // 获取移除元素的前后两个节点 prev next\n        final Node&lt;E&gt; next = x.next;\n        final Node&lt;E&gt; prev = x.prev;\n\n    // 如果节点为头节点，则做 unlinkFirst 操作\n        if (prev == null) {\n            first = next;\n        } else {\n        //否则将上一个节点的 next 指针指向下个节点\n            prev.next = next;\n            x.prev = null;\n        }\n     // 如果节点为尾节点，则做unlinkLast操作\n        if (next == null) {\n            last = prev;\n        } else {\n        //否则下个节点 prev 指针指向上个节点\n            next.prev = prev;\n            x.next = null;\n        }\n\n        x.item = null;\n        size--;\n        modCount++;\n        return element;\n    }\n</code></pre>\n<p>LinkedList 实现了 List 接口的 clear 操作，用于删除链表所有的节点：</p>\n<pre><code class=\"language-java\">    /**\n     * 删除所有元素\n     */\n    public void clear() {\n        // 依次清除节点，帮助释放内存空间\n        for (Node&lt;E&gt; x = first; x != null; ) {\n            Node&lt;E&gt; next = x.next;\n            x.item = null;\n            x.next = null;\n            x.prev = null;\n            x = next;\n        }\n        first = last = null;\n        size = 0;\n        modCount++;\n    }</code></pre>\n<h2 id=\"linkedlist-\">LinkedList 查询节点</h2>\n<p>LinkedList 查询节点的方法，可分为根据指定的索引查询，获取头节点，获取未节点三种。值得注意的是，根据索引去获取节点内容的效率并不高，所以如果查询操作多余增删操作的时候建议用 ArrayList 去替代。</p>\n<pre><code class=\"language-java\">/**\n* 根据索引查询\n*/\npublic E get(int index) {\n   checkElementIndex(index);\n   return node(index).item;\n}\n\n/**\n* 返回 first 索引指向的节点的内容\n*/\npublic E getFirst() {\n   final Node&lt;E&gt; f = first;\n   if (f == null)\n       throw new NoSuchElementException();\n   return f.item;\n}\n\n/**\n* 返回 last 索引指向的节点的内容\n*/\npublic E getLast() {\n   final Node&lt;E&gt; l = last;\n   if (l == null)\n       throw new NoSuchElementException();\n   return l.item;\n}\n</code></pre>\n<p>其中node(index)方法如下：</p>\n<pre><code class=\"language-java\">    // 返回指定元素索引处的（非null）节点。\n    Node&lt;E&gt; node(int index) {\n        // assert isElementIndex(index);\n    // 如果 index &lt; size/2 则从0开始寻找指定角标的节点\n        if (index &lt; (size &gt;&gt; 1)) {\n            Node&lt;E&gt; x = first;\n            for (int i = 0; i &lt; index; i++)\n                x = x.next;\n            return x;\n        } else {\n     // 如果 index &gt;= size/2 则从 size-1 开始寻找指定角标的节点\n            Node&lt;E&gt; x = last;\n            for (int i = size - 1; i &gt; index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n</code></pre>\n<p>node 方法可以用于根据指定 index 去以 size/2 为界限搜索index 位置的 Node;</p>\n<h2 id=\"linkedlist-\">LinkedList 修改节点</h2>\n<p>LinkedList 只提供了 set(int index, E element) 一个方法。</p>\n<pre><code class=\"language-java\">public E set(int index, E element) {\n   // 判断角标是否越界\n   checkElementIndex(index);\n   // 采用 node 方法查找对应索引的节点\n   Node&lt;E&gt; x = node(index);\n   //保存节点原有的内容值\n   E oldVal = x.item;\n   // 设置新值\n   x.item = element;\n   // 返回旧的值\n   return oldVal;\n}\n</code></pre>\n<h2 id=\"linkedlist-\">LinkedList 双向队列</h2>\n<h3 id=\"deque-\">Deque 双端队列</h3>\n<p>我们先来认识一下 Java 中的 双端队列，我们都知道 Queue 是一个队列，遵循 FIFO 准则，我们也知道 Stack 是一个栈结构，遵循 FILO 准则。 而Deque 这个双端队列就厉害了,它既可以实现栈的操作，也可以实现队列的操作，换句话说，实现了这个接口的类，既可以作为栈使用也可以作为队列使用。</p>\n<h3 id=\"linkedlist-fifo-\">LinkedList FIFO队列</h3>\n<p>Queue中的方法：</p>\n<ul>\n<li>offer() 和 add() 都是在队列中插入一个元素</li>\n<li>remove() 和 poll() 方法都是从队列中删除第一个元素</li>\n<li>element() 和 peek() 用于在队列的头部查询元素</li>\n</ul>\n<p>LinkedList可以作为FIFO(先进先出)的队列，作为FIFO的队列时，下表的方法等价</p>\n<pre><code class=\"language-shell\">队列方法       等效方法\nadd(e)        addLast(e)\noffer(e)      offerLast(e)\nremove()      removeFirst()\npoll()        pollFirst()\nelement()     getFirst()\npeek()        peekFirst()</code></pre>\n<h3 id=\"linkedlist-lifo-\">LinkedList LIFO栈</h3>\n<p>Stack中的方法：</p>\n<ul>\n<li>push 往栈中压入一个元素</li>\n<li>pop 从栈顶获取一个元素，同时删除该元素</li>\n<li>peek 从栈顶获取一个元素，但不删除元素</li>\n</ul>\n<p>LinkedList可以作为LIFO(后进先出)的栈，作为LIFO的栈时，下表的方法等价：</p>\n<pre><code class=\"language-shell\">栈方法        等效方法\npush(e)      addFirst(e)\npop()        removeFirst()\npeek()       peekFirst()</code></pre>\n<h2 id=\"linkedlist-\">LinkedList遍历方式</h2>\n<ol>\n<li>迭代器遍历<pre><code class=\"language-java\">for(Iterator iter = list.iterator(); iter.hasNext();)\n iter.next();</code></pre>\n</li>\n<li>快速随机访问遍历<pre><code class=\"language-java\">int size = list.size();\nfor (int i=0; i&lt;size; i++) {\n list.get(i);        \n}</code></pre>\n</li>\n<li>foreach循环遍历<pre><code class=\"language-java\">for (Integer integ:list) \n ;</code></pre>\n</li>\n<li>通过pollFirst()来遍历<pre><code class=\"language-java\">while(list.pollFirst() != null)\n ;</code></pre>\n</li>\n<li>通过pollLast()来遍历<pre><code class=\"language-java\">while(list.pollLast() != null)\n ;</code></pre>\n</li>\n<li>通过removeFirst()来遍历<pre><code class=\"language-java\">try {\n while(list.removeFirst() != null)\n     ;\n} catch (NoSuchElementException e) {\n}</code></pre>\n</li>\n<li>通过removeLast()来遍历<pre><code class=\"language-java\">try {\n while(list.removeLast() != null)\n     ;\n} catch (NoSuchElementException e) {\n}</code></pre>\n</li>\n</ol>\n<h3 id=\"-\">遍历方式效率比较</h3>\n<pre><code class=\"language-java\">public class LinkedListTest {\n\n    public static void main(String[] args) {\n        // 通过Iterator遍历LinkedList\n        iteratorLinkedListThruIterator(getLinkedList()) ;\n\n        // 通过快速随机访问遍历LinkedList\n        iteratorLinkedListThruForeach(getLinkedList()) ;\n\n        // 通过for循环的变种来访问遍历LinkedList\n        iteratorThroughFor2(getLinkedList()) ;\n\n        // 通过PollFirst()遍历LinkedList\n        iteratorThroughPollFirst(getLinkedList()) ;\n\n        // 通过PollLast()遍历LinkedList\n        iteratorThroughPollLast(getLinkedList()) ;\n\n        // 通过removeFirst()遍历LinkedList\n        iteratorThroughRemoveFirst(getLinkedList()) ;\n\n        // 通过removeLast()遍历LinkedList\n        iteratorThroughRemoveLast(getLinkedList()) ;\n    }\n\n    private static LinkedList getLinkedList() {\n        LinkedList llist = new LinkedList();\n        for (int i=0; i&lt;100000; i++)\n            llist.addLast(i);\n\n        return llist;\n    }\n    /**\n     * 通过快迭代器遍历LinkedList\n     */\n    private static void iteratorLinkedListThruIterator(LinkedList&lt;Integer&gt; list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n\n        for(Iterator iter = list.iterator(); iter.hasNext();)\n            iter.next();\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(&quot;iteratorLinkedListThruIterator：&quot; + interval+&quot; ms&quot;);\n    }\n\n    /**\n     * 通过快速随机访问遍历LinkedList\n     */\n    private static void iteratorLinkedListThruForeach(LinkedList&lt;Integer&gt; list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n\n        int size = list.size();\n        for (int i=0; i&lt;size; i++) {\n            list.get(i);\n        }\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(&quot;iteratorLinkedListThruForeach：&quot; + interval+&quot; ms&quot;);\n    }\n\n    /**\n     * 通过另外一种for循环来遍历LinkedList\n     */\n    private static void iteratorThroughFor2(LinkedList&lt;Integer&gt; list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n\n        for (Integer integ:list)\n            ;\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(&quot;iteratorThroughFor2：&quot; + interval+&quot; ms&quot;);\n    }\n\n    /**\n     * 通过pollFirst()来遍历LinkedList\n     */\n    private static void iteratorThroughPollFirst(LinkedList&lt;Integer&gt; list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n        while(list.pollFirst() != null)\n            ;\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(&quot;iteratorThroughPollFirst：&quot; + interval+&quot; ms&quot;);\n    }\n\n    /**\n     * 通过pollLast()来遍历LinkedList\n     */\n    private static void iteratorThroughPollLast(LinkedList&lt;Integer&gt; list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n        while(list.pollLast() != null)\n            ;\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(&quot;iteratorThroughPollLast：&quot; + interval+&quot; ms&quot;);\n    }\n\n    /**\n     * 通过removeFirst()来遍历LinkedList\n     */\n    private static void iteratorThroughRemoveFirst(LinkedList&lt;Integer&gt; list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n        try {\n            while(list.removeFirst() != null)\n                ;\n        } catch (NoSuchElementException e) {\n        }\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(&quot;iteratorThroughRemoveFirst：&quot; + interval+&quot; ms&quot;);\n    }\n\n    /**\n     * 通过removeLast()来遍历LinkedList\n     */\n    private static void iteratorThroughRemoveLast(LinkedList&lt;Integer&gt; list) {\n        if (list == null)\n            return ;\n\n        // 记录开始时间\n        long start = System.currentTimeMillis();\n        try {\n            while(list.removeLast() != null)\n                ;\n        } catch (NoSuchElementException e) {\n        }\n\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        long interval = end - start;\n        System.out.println(&quot;iteratorThroughRemoveLast：&quot; + interval+&quot; ms&quot;);\n    }\n\n\n\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">iteratorLinkedListThruIterator：10 ms\niteratorLinkedListThruForeach：4945 ms\niteratorThroughFor2：6 ms\niteratorThroughPollFirst：4 ms\niteratorThroughPollLast：4 ms\niteratorThroughRemoveFirst：3 ms\niteratorThroughRemoveLast：4 ms</code></pre>\n<p>结果说明：\n由此可见，遍历LinkedList时，使用removeFist()或removeLast()效率最高。但用它们遍历时，会删除原始数据；若单纯只读取，而不删除，应该使用foreach遍历方式。</p>\n<p><strong>无论如何，千万不要通过随机访问去遍历LinkedList!!</strong></p>\n',53,0,2,NULL,'2019-09-19 04:55:10','2019-09-19 15:18:35',0,'9,11,38',1,0),(45,'Java集合06——Map框架','Map 是一个键值对(key-value)映射接口。Map映射中不能包含重复的键；每个键最多只能映射到一个值','Bobbi','## Map数据结构\n![image.png](http://oss.dblearn.cn/dbblog/20190921/4febbfebff854dbf8bafc06f9dd0143c.png)\n\n1.Map 是映射接口，Map中存储的内容是键值对(key-value)。\n2. AbstractMap 是继承于Map的抽象类，它实现了Map中的大部分API。其它Map的实现类可以通过继承AbstractMap来减少重复编码。\n3. SortedMap 是继承于Map的接口。SortedMap中的内容是排序的键值对，排序的方法是通过比较器(Comparator)。\n4. NavigableMap 是继承于SortedMap的接口。相比于SortedMap，NavigableMap有一系列的导航方法；如\"获取大于/等于某对象的键值对\"、“获取小于/等于某对象的键值对”等等。 \n5. TreeMap 继承于AbstractMap，且实现了NavigableMap接口；因此，TreeMap中的内容是“有序的键值对”！\n6. HashMap 继承于AbstractMap，但没实现NavigableMap接口；因此，HashMap的内容是“键值对，但不保证次序”！\n7. Hashtable 虽然不是继承于AbstractMap，但它继承于Dictionary(Dictionary也是键值对的接口)，而且也实现Map接口；因此，Hashtable的内容也是“键值对，也不保证次序”。但和HashMap相比，Hashtable是线程安全的\n8. WeakHashMap 继承于AbstractMap。它和HashMap的键类型不同，WeakHashMap的键是“弱键”。\n\n## Map 简介\nMap的定义如下：\n```java\npublic interface Map<K,V> { }\n```\n\nMap 是一个键值对(key-value)映射接口。Map映射中不能包含重复的键；每个键最多只能映射到一个值。\n\nMap 接口提供三种collection 视图，允许以键集、值集或键-值映射关系集的形式查看某个映射的内容。\n\nMap 映射顺序。有些实现类，可以明确保证其顺序，如 TreeMap；另一些映射实现则不保证顺序，如 HashMap 类。\n\nMap 的实现类应该提供2个“标准的”构造方法：第一个，void（无参数）构造方法，用于创建空映射；第二个，带有单个 Map 类型参数的构造方法，用于创建一个与其参数具有相同键-值映射关系的新映射。实际上，后一个构造方法允许用户复制任意映射，生成所需类的一个等价映射。尽管无法强制执行此建议（因为接口不能包含构造方法），但是 JDK 中所有通用的映射实现都遵从它。\n\n### Map的API\n```java\n    // 以下是查询操作\n\n    /**\n     * 返回此Map的键值对数量\n     */\n    int size();\n\n    /**\n     * 判断Map中是否包含键值对\n     */\n    boolean isEmpty();\n\n    /**\n     * 如果此映射包含指定键的映射，则返回 true\n     */\n    boolean containsKey(Object key);\n\n    /**\n     * 如果此映射包含指定键的映射，则返回 true 。\n     */\n    boolean containsValue(Object value);\n\n    /**\n     * 返回到指定键所映射的值。\n     */\n    V get(Object key);\n\n    // 以下为修改操作\n\n    /**\n     * 将指定的值与该映射中的指定键相关联\n     */\n    V put(K key, V value);\n\n    /**\n     * 从该Map中删除一个键的映射。\n     */\n    V remove(Object key);\n\n\n    // 以下是批量操作\n\n    /**\n     * 将指定映射中的所有映射复制到此映射\n     */\n    void putAll(Map<? extends K, ? extends V> m);\n\n    /**\n     * 从此映射中删除所有映射\n     */\n    void clear();\n\n\n    // 以下是视图\n\n    /**\n     * 返回此映射中包含的键的视图。\n     */\n    Set<K> keySet();\n\n    /**\n     * 返回此映射中包含的值的视图。\n     */\n    Collection<V> values();\n\n    /**\n     * 返回此映射中包含的映射的视图。\n     */\n    Set<Map.Entry<K, V>> entrySet();\n\n\n    // 可违约的方法 defaulable\n\n    /**\n     * 返回指定键所映射到的值；如果此映射不包含该键的映射，则返回defaultValue。\n     */\n    default V getOrDefault(Object key, V defaultValue) {\n        V v;\n        return (((v = get(key)) != null) || containsKey(key))\n                ? v\n                : defaultValue;\n    }\n\n    /**\n     * Java8 forEach 遍历\n     */\n    default void forEach(BiConsumer<? super K, ? super V> action) {\n        Objects.requireNonNull(action);\n        for (Map.Entry<K, V> entry : entrySet()) {\n            K k;\n            V v;\n            try {\n                k = entry.getKey();\n                v = entry.getValue();\n            } catch(IllegalStateException ise) {\n                // this usually means the entry is no longer in the map.\n                throw new ConcurrentModificationException(ise);\n            }\n            action.accept(k, v);\n        }\n    }\n\n    /**\n     * 将所有条目的值替换为对该条目调用给定函数的结果，直到处理完所有条目为止\n     */\n    default void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n        Objects.requireNonNull(function);\n        for (Map.Entry<K, V> entry : entrySet()) {\n            K k;\n            V v;\n            try {\n                k = entry.getKey();\n                v = entry.getValue();\n            } catch(IllegalStateException ise) {\n                // this usually means the entry is no longer in the map.\n                throw new ConcurrentModificationException(ise);\n            }\n\n            // ise thrown from function is not a cme.\n            v = function.apply(k, v);\n\n            try {\n                entry.setValue(v);\n            } catch(IllegalStateException ise) {\n                // this usually means the entry is no longer in the map.\n                throw new ConcurrentModificationException(ise);\n            }\n        }\n    }\n\n    /**\n     * 如果指定的键尚未与某个值相关联（或映射到 null ）将其与给定值相关联并返回 null ，否则返回当前值。\n     */\n    default V putIfAbsent(K key, V value) {\n        V v = get(key);\n        if (v == null) {\n            v = put(key, value);\n        }\n\n        return v;\n    }\n\n    /**\n     * 仅当指定的密钥当前映射到指定的值时删除该条目。\n     */\n    default boolean remove(Object key, Object value) {\n        Object curValue = get(key);\n        if (!Objects.equals(curValue, value) ||\n                (curValue == null && !containsKey(key))) {\n            return false;\n        }\n        remove(key);\n        return true;\n    }\n\n    /**\n     * 仅当当前映射到指定的值时，才能替换指定键的条目。\n     */\n    default boolean replace(K key, V oldValue, V newValue) {\n        Object curValue = get(key);\n        if (!Objects.equals(curValue, oldValue) ||\n                (curValue == null && !containsKey(key))) {\n            return false;\n        }\n        put(key, newValue);\n        return true;\n    }\n\n    /**\n     * 只有当目标映射到某个值时，才能替换指定键的条目。\n     */\n    default V replace(K key, V value) {\n        V curValue;\n        if (((curValue = get(key)) != null) || containsKey(key)) {\n            curValue = put(key, value);\n        }\n        return curValue;\n    }\n\n    /**\n     * 如果指定的键尚未与值相关联（或映射到 null ），则尝试使用给定的映射函数计算其值，并将其输入到此映射中，除非 null 。\n     */\n    default V computeIfAbsent(K key,\n                              Function<? super K, ? extends V> mappingFunction) {\n        Objects.requireNonNull(mappingFunction);\n        V v;\n        if ((v = get(key)) == null) {\n            V newValue;\n            if ((newValue = mappingFunction.apply(key)) != null) {\n                put(key, newValue);\n                return newValue;\n            }\n        }\n\n        return v;\n    }\n\n    /**\n     * 如果指定的密钥的值存在且非空，则尝试计算给定密钥及其当前映射值的新映射。\n     */\n    default V computeIfPresent(K key,\n                               BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n        Objects.requireNonNull(remappingFunction);\n        V oldValue;\n        if ((oldValue = get(key)) != null) {\n            V newValue = remappingFunction.apply(key, oldValue);\n            if (newValue != null) {\n                put(key, newValue);\n                return newValue;\n            } else {\n                remove(key);\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * 尝试计算指定键的映射及其当前映射的值（如果没有当前映射， null ）。\n     */\n    default V compute(K key,\n                      BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n        Objects.requireNonNull(remappingFunction);\n        V oldValue = get(key);\n\n        V newValue = remappingFunction.apply(key, oldValue);\n        if (newValue == null) {\n            // delete mapping\n            if (oldValue != null || containsKey(key)) {\n                // something to remove\n                remove(key);\n                return null;\n            } else {\n                // nothing to do. Leave things as they were.\n                return null;\n            }\n        } else {\n            // add or replace old mapping\n            put(key, newValue);\n            return newValue;\n        }\n    }\n\n    /**\n     * 如果指定的键尚未与值相关联或与null相关联，则将其与给定的非空值相关联。\n     */\n    default V merge(K key, V value,\n                    BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n        Objects.requireNonNull(remappingFunction);\n        Objects.requireNonNull(value);\n        V oldValue = get(key);\n        V newValue = (oldValue == null) ? value :\n                remappingFunction.apply(oldValue, value);\n        if(newValue == null) {\n            remove(key);\n        } else {\n            put(key, newValue);\n        }\n        return newValue;\n    }\n```\n##  Map.Entry\nMap.Entry的定义如下：\n```java\ninterface Entry<K,V> { }\n```\nMap.Entry是Map中内部的一个接口，Map.Entry是键值对，Map通过 entrySet() 获取Map.Entry的键值对集合，从而通过该集合实现对键值对的操作。\n\n### Map.Entity的API\n```java\n   /**\n     * 返回此Entity对应的key。\n     */\n    K getKey();\n\n    /**\n     * 返回此Entity对应的value。\n     */\n    V getValue();\n\n    /**\n     * 替换此Entity的value\n     */\n    V setValue(V value);\n\n    /**\n     * equals方法\n     */\n    boolean equals(Object o);\n\n    /**\n     * 获取hashCode\n     */\n    int hashCode();\n\n    /**\n     * 返回一个比较器，该比较器以自然顺序比较key。\n     */\n    public static <K extends Comparable<? super K>, V> Comparator<Map.Entry<K,V>> comparingByKey() {\n        return (Comparator<Map.Entry<K, V>> & Serializable)\n                (c1, c2) -> c1.getKey().compareTo(c2.getKey());\n    }\n\n    /**\n     * 返回一个比较器，该比较器以自然顺序比较value。\n     */\n    public static <K, V extends Comparable<? super V>> Comparator<Map.Entry<K,V>> comparingByValue() {\n        return (Comparator<Map.Entry<K, V>> & Serializable)\n                (c1, c2) -> c1.getValue().compareTo(c2.getValue());\n    }\n\n    /**\n     * 返回一个比较器，该比较器使用给定的Comparator按key比较\n     */\n    public static <K, V> Comparator<Map.Entry<K, V>> comparingByKey(Comparator<? super K> cmp) {\n        Objects.requireNonNull(cmp);\n        return (Comparator<Map.Entry<K, V>> & Serializable)\n                (c1, c2) -> cmp.compare(c1.getKey(), c2.getKey());\n    }\n\n    /**\n     * 返回一个比较器，该比较器使用给定的Comparator按value比较\n     */\n    public static <K, V> Comparator<Map.Entry<K, V>> comparingByValue(Comparator<? super V> cmp) {\n        Objects.requireNonNull(cmp);\n        return (Comparator<Map.Entry<K, V>> & Serializable)\n                (c1, c2) -> cmp.compare(c1.getValue(), c2.getValue());\n    }\n\n```\n\n## AbstractMap\nAbstractMap的定义如下：\n```java\npublic abstract class AbstractMap<K,V> implements Map<K,V> {}\n```\nAbstractMap类提供 Map 接口的骨干实现，以最大限度地减少实现此接口所需的工作。\n\n### AbstractMap的API\n```java\n    // 从该Map中删除所有的映射（可选操作）。\n    void	clear()\n    // 返回此 AbstractMap实例的浅拷贝：键和值本身不被克隆。\n    protected Object	clone()\n    // 如果此映射包含指定键的映射，则返回 true 。\n    boolean	containsKey(Object key)\n    // 如果此映射将一个或多个键映射到指定的值，则返回 true 。\n    boolean	containsValue(Object value)\n    // 返回此Map中包含的映射的Set视图。\n    abstract Set<Map.Entry<K,V>>	entrySet()\n\n    boolean	equals(Object o)\n    int	hashCode()\n    String	toString()\n\n    // 返回到指定键所映射的值\n    V	get(Object key)\n    // 如果此Map不包含键值映射，则返回 true 。\n    boolean	isEmpty()\n    // 返回此地图中包含的键的Set视图。\n    Set<K>	keySet()\n    // 将指定的值与该映射中的指定键相关联（可选操作）。\n    V	put(K key, V value)\n    // 将指定Map的所有映射复制到此映射（可选操作）。\n    void	putAll(Map<? extends K,? extends V> m)\n    // 如果存在（从可选的操作），从该Map中删除一个键的映射。\n    V	remove(Object key)\n    // 返回此Map中键值映射的数量。\n    int	size()\n    // 返回此Map中包含的值的Collection视图。\n    Collection<V>	values()\n```\n\n## SortedMap\nSortedMap的定义如下：\n```java\npublic interface SortedMap<K,V> extends Map<K,V> { }\n```\nSortedMap是一个继承于Map接口的接口。它是一个有序的SortedMap键值映射。\nSortedMap的排序方式有两种：自然排序 或者 用户指定比较器。 插入有序 SortedMap 的所有元素都必须实现 Comparable 接口（或者被指定的比较器所接受）。\n\n### SortedMap的API\n```java\n    // 返回用于订购此Map中的键的比较器\n    Comparator<? super K>	comparator()\n    // 返回此Map中包含的映射的Set视图。\n    Set<Map.Entry<K,V>>	entrySet()\n    // 返回此Map中当前的第一个键。\n    K	firstKey()\n    // 返回该Map的部分key严格小于 toKey 。\n    SortedMap<K,V>	headMap(K toKey)\n    // 返回此Map中包含的键的Set视图。\n    Set<K>	keySet()\n    // 返回当前在此Map中的最后（最高）键。\n    K	lastKey()\n    // 返回此Map部分的视图，其关键字范围为 fromKey （含）到 toKey（不含）。\n    SortedMap<K,V>	subMap(K fromKey, K toKey)\n    // 返回此Map部分的视图，其键大于或等于 fromKey 。\n    SortedMap<K,V>	tailMap(K fromKey)\n    // 返回此地图中包含的值的Collection视图。\n    Collection<V>	values()\n```\n\n## NavigableMap\nNavigableMap的定义如下：\n```java\npublic interface NavigableMap<K,V> extends SortedMap<K,V> { }\n```\nNavigableMap是继承于SortedMap的接口。它是一个可导航的键-值对集合，具有了为给定搜索目标报告最接近匹配项的导航方法。\nNavigableMap分别提供了获取“键”、“键-值对”、“键集”、“键-值对集”的相关方法。\n\n### NavigableMap的API\n```java\n    // 返回与大于或等于给定键的最小键相关联的键值映射\n    K	ceilingKey(K key)\n    // 返回大于或等于给定键的 null键\n    Map.Entry<K,V>	ceilingEntry(K key)\n    // 返回此Map中包含的键的相反顺序NavigableSet 。\n    NavigableSet<K>	descendingKeySet()\n    // 返回此映射中包含的映射的反向排序视图。\n    NavigableMap<K,V>	descendingMap()\n    // 返回与该Map中的最小键相关联的键值映射，如果Map为空，则返回 null 。\n    Map.Entry<K,V>	firstEntry()\n    // 返回与小于或等于给定键的最大键相关联的键值映射，如果没有此键，则 null 。\n    Map.Entry<K,V>	floorEntry(K key)\n    // 返回小于或等于给定键的最大键，如果没有这样的键，则返回 null 。\n    K	floorKey(K key)\n    // 返回此Map部分的视图，其密钥严格小于 toKey 。\n    SortedMap<K,V>	headMap(K toKey)\n    // 返回该Map部分的视图，其键值小于（或等于，如果 inclusive为真） toKey 。\n    NavigableMap<K,V>	headMap(K toKey, boolean inclusive)\n    // 返回与最小密钥相关联的密钥值映射严格大于给定密钥，如果没有这样的密钥则 null 。\n    Map.Entry<K,V>	higherEntry(K key)\n    // 返回严格大于给定键的最小键，如果没有这样的键，则返回 null 。\n    K	higherKey(K key)\n    // 返回与该Map中最大键相关联的键值映射，如果Map为空，则返回 null 。\n    Map.Entry<K,V>	lastEntry()\n    // 返回与最大密钥相关联的密钥值映射严格小于给定密钥，如果没有这样的密钥则 null 。\n    Map.Entry<K,V>	lowerEntry(K key)\n    // 返回严格小于给定键的最大键，如果没有这样的键，则返回 null 。\n    K	lowerKey(K key)\n    // 返回此Map中包含的键的NavigableSet视图。\n    NavigableSet<K>	navigableKeySet()\n    // 删除并返回与该Map中的最小键相关联的键值映射，如果Map为空，则返回 null 。\n    Map.Entry<K,V>	pollFirstEntry()\n    // 删除并返回与该Map中最大键相关联的键值映射，如果Map为空，则返回 null 。\n    Map.Entry<K,V>	pollLastEntry()\n    // 返回此Map部分的视图，其关键字范围为 fromKey至 toKey 。\n    NavigableMap<K,V>	subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)\n    // 返回此Map部分的视图，其关键字范围为 fromKey （含），不 toKey toKey。\n    SortedMap<K,V>	subMap(K fromKey, K toKey)\n    // 返回此Map部分的视图，其键大于或等于 fromKey 。\n    SortedMap<K,V>	tailMap(K fromKey)\n    // 返回此Map部分的视图，其键大于（或等于，如果 inclusive为真） fromKey 。\n    NavigableMap<K,V>	tailMap(K fromKey, boolean inclusive)\n```\n\nNavigableMap除了继承SortedMap的特性外，它的提供的功能可以分为4类：<br>\n第1类，提供操作键-值对的方法。<br>\n               lowerEntry、floorEntry、ceilingEntry 和 higherEntry 方法，它们分别返回与小于、小于等于、大于等于、大于给定键的键关联的 Map.Entry 对象。<br>\n               firstEntry、pollFirstEntry、lastEntry 和 pollLastEntry 方法，它们返回和/或移除最小和最大的映射关系（如果存在），否则返回 null。<br>\n\n第2类，提供操作键的方法。这个和第1类比较类似<br>\n               lowerKey、floorKey、ceilingKey 和 higherKey 方法，它们分别返回与小于、小于等于、大于等于、大于给定键的键。<br>\n第3类，获取键集。<br>\n              navigableKeySet、descendingKeySet分别获取正序/反序的键集。<br>\n第4类，获取键-值对的子集\n \n## Dictionary\nDictionary的定义如下：\n```java\npublic abstract class Dictionary<K,V> {}\n```\nDictionary是JDK 1.0定义的键值对的接口，它也包括了操作键值对的基本函数。\n\n### Dictionary的API\n```java\n    // 返回此字典中值的枚举。\n    abstract Enumeration<V>	elements()\n    // 返回该字典中键映射到的值。\n    abstract V	get(Object key)\n    // 测试这个字典是否将键值映射到值。\n    abstract boolean	isEmpty()\n    // 返回此字典中键的枚举。\n    abstract Enumeration<K>	keys()\n    // 将指定的key key到本字典中 value的value。\n    abstract V	put(K key, V value)\n    // 从该字典中删除 key （及其对应的 value ）。\n    abstract V	remove(Object key)\n    // 返回此字典中的条目数（不同的键）。\n    abstract int	size()\n```','<h2 id=\"map-\">Map数据结构</h2>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190921/4febbfebff854dbf8bafc06f9dd0143c.png\" alt=\"image.png\"></p>\n<p>1.Map 是映射接口，Map中存储的内容是键值对(key-value)。</p>\n<ol start=\"2\">\n<li>AbstractMap 是继承于Map的抽象类，它实现了Map中的大部分API。其它Map的实现类可以通过继承AbstractMap来减少重复编码。</li>\n<li>SortedMap 是继承于Map的接口。SortedMap中的内容是排序的键值对，排序的方法是通过比较器(Comparator)。</li>\n<li>NavigableMap 是继承于SortedMap的接口。相比于SortedMap，NavigableMap有一系列的导航方法；如&quot;获取大于/等于某对象的键值对&quot;、“获取小于/等于某对象的键值对”等等。 </li>\n<li>TreeMap 继承于AbstractMap，且实现了NavigableMap接口；因此，TreeMap中的内容是“有序的键值对”！</li>\n<li>HashMap 继承于AbstractMap，但没实现NavigableMap接口；因此，HashMap的内容是“键值对，但不保证次序”！</li>\n<li>Hashtable 虽然不是继承于AbstractMap，但它继承于Dictionary(Dictionary也是键值对的接口)，而且也实现Map接口；因此，Hashtable的内容也是“键值对，也不保证次序”。但和HashMap相比，Hashtable是线程安全的</li>\n<li>WeakHashMap 继承于AbstractMap。它和HashMap的键类型不同，WeakHashMap的键是“弱键”。</li>\n</ol>\n<h2 id=\"map-\">Map 简介</h2>\n<p>Map的定义如下：</p>\n<pre><code class=\"language-java\">public interface Map&lt;K,V&gt; { }</code></pre>\n<p>Map 是一个键值对(key-value)映射接口。Map映射中不能包含重复的键；每个键最多只能映射到一个值。</p>\n<p>Map 接口提供三种collection 视图，允许以键集、值集或键-值映射关系集的形式查看某个映射的内容。</p>\n<p>Map 映射顺序。有些实现类，可以明确保证其顺序，如 TreeMap；另一些映射实现则不保证顺序，如 HashMap 类。</p>\n<p>Map 的实现类应该提供2个“标准的”构造方法：第一个，void（无参数）构造方法，用于创建空映射；第二个，带有单个 Map 类型参数的构造方法，用于创建一个与其参数具有相同键-值映射关系的新映射。实际上，后一个构造方法允许用户复制任意映射，生成所需类的一个等价映射。尽管无法强制执行此建议（因为接口不能包含构造方法），但是 JDK 中所有通用的映射实现都遵从它。</p>\n<h3 id=\"map-api\">Map的API</h3>\n<pre><code class=\"language-java\">    // 以下是查询操作\n\n    /**\n     * 返回此Map的键值对数量\n     */\n    int size();\n\n    /**\n     * 判断Map中是否包含键值对\n     */\n    boolean isEmpty();\n\n    /**\n     * 如果此映射包含指定键的映射，则返回 true\n     */\n    boolean containsKey(Object key);\n\n    /**\n     * 如果此映射包含指定键的映射，则返回 true 。\n     */\n    boolean containsValue(Object value);\n\n    /**\n     * 返回到指定键所映射的值。\n     */\n    V get(Object key);\n\n    // 以下为修改操作\n\n    /**\n     * 将指定的值与该映射中的指定键相关联\n     */\n    V put(K key, V value);\n\n    /**\n     * 从该Map中删除一个键的映射。\n     */\n    V remove(Object key);\n\n\n    // 以下是批量操作\n\n    /**\n     * 将指定映射中的所有映射复制到此映射\n     */\n    void putAll(Map&lt;? extends K, ? extends V&gt; m);\n\n    /**\n     * 从此映射中删除所有映射\n     */\n    void clear();\n\n\n    // 以下是视图\n\n    /**\n     * 返回此映射中包含的键的视图。\n     */\n    Set&lt;K&gt; keySet();\n\n    /**\n     * 返回此映射中包含的值的视图。\n     */\n    Collection&lt;V&gt; values();\n\n    /**\n     * 返回此映射中包含的映射的视图。\n     */\n    Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();\n\n\n    // 可违约的方法 defaulable\n\n    /**\n     * 返回指定键所映射到的值；如果此映射不包含该键的映射，则返回defaultValue。\n     */\n    default V getOrDefault(Object key, V defaultValue) {\n        V v;\n        return (((v = get(key)) != null) || containsKey(key))\n                ? v\n                : defaultValue;\n    }\n\n    /**\n     * Java8 forEach 遍历\n     */\n    default void forEach(BiConsumer&lt;? super K, ? super V&gt; action) {\n        Objects.requireNonNull(action);\n        for (Map.Entry&lt;K, V&gt; entry : entrySet()) {\n            K k;\n            V v;\n            try {\n                k = entry.getKey();\n                v = entry.getValue();\n            } catch(IllegalStateException ise) {\n                // this usually means the entry is no longer in the map.\n                throw new ConcurrentModificationException(ise);\n            }\n            action.accept(k, v);\n        }\n    }\n\n    /**\n     * 将所有条目的值替换为对该条目调用给定函数的结果，直到处理完所有条目为止\n     */\n    default void replaceAll(BiFunction&lt;? super K, ? super V, ? extends V&gt; function) {\n        Objects.requireNonNull(function);\n        for (Map.Entry&lt;K, V&gt; entry : entrySet()) {\n            K k;\n            V v;\n            try {\n                k = entry.getKey();\n                v = entry.getValue();\n            } catch(IllegalStateException ise) {\n                // this usually means the entry is no longer in the map.\n                throw new ConcurrentModificationException(ise);\n            }\n\n            // ise thrown from function is not a cme.\n            v = function.apply(k, v);\n\n            try {\n                entry.setValue(v);\n            } catch(IllegalStateException ise) {\n                // this usually means the entry is no longer in the map.\n                throw new ConcurrentModificationException(ise);\n            }\n        }\n    }\n\n    /**\n     * 如果指定的键尚未与某个值相关联（或映射到 null ）将其与给定值相关联并返回 null ，否则返回当前值。\n     */\n    default V putIfAbsent(K key, V value) {\n        V v = get(key);\n        if (v == null) {\n            v = put(key, value);\n        }\n\n        return v;\n    }\n\n    /**\n     * 仅当指定的密钥当前映射到指定的值时删除该条目。\n     */\n    default boolean remove(Object key, Object value) {\n        Object curValue = get(key);\n        if (!Objects.equals(curValue, value) ||\n                (curValue == null &amp;&amp; !containsKey(key))) {\n            return false;\n        }\n        remove(key);\n        return true;\n    }\n\n    /**\n     * 仅当当前映射到指定的值时，才能替换指定键的条目。\n     */\n    default boolean replace(K key, V oldValue, V newValue) {\n        Object curValue = get(key);\n        if (!Objects.equals(curValue, oldValue) ||\n                (curValue == null &amp;&amp; !containsKey(key))) {\n            return false;\n        }\n        put(key, newValue);\n        return true;\n    }\n\n    /**\n     * 只有当目标映射到某个值时，才能替换指定键的条目。\n     */\n    default V replace(K key, V value) {\n        V curValue;\n        if (((curValue = get(key)) != null) || containsKey(key)) {\n            curValue = put(key, value);\n        }\n        return curValue;\n    }\n\n    /**\n     * 如果指定的键尚未与值相关联（或映射到 null ），则尝试使用给定的映射函数计算其值，并将其输入到此映射中，除非 null 。\n     */\n    default V computeIfAbsent(K key,\n                              Function&lt;? super K, ? extends V&gt; mappingFunction) {\n        Objects.requireNonNull(mappingFunction);\n        V v;\n        if ((v = get(key)) == null) {\n            V newValue;\n            if ((newValue = mappingFunction.apply(key)) != null) {\n                put(key, newValue);\n                return newValue;\n            }\n        }\n\n        return v;\n    }\n\n    /**\n     * 如果指定的密钥的值存在且非空，则尝试计算给定密钥及其当前映射值的新映射。\n     */\n    default V computeIfPresent(K key,\n                               BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction) {\n        Objects.requireNonNull(remappingFunction);\n        V oldValue;\n        if ((oldValue = get(key)) != null) {\n            V newValue = remappingFunction.apply(key, oldValue);\n            if (newValue != null) {\n                put(key, newValue);\n                return newValue;\n            } else {\n                remove(key);\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * 尝试计算指定键的映射及其当前映射的值（如果没有当前映射， null ）。\n     */\n    default V compute(K key,\n                      BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction) {\n        Objects.requireNonNull(remappingFunction);\n        V oldValue = get(key);\n\n        V newValue = remappingFunction.apply(key, oldValue);\n        if (newValue == null) {\n            // delete mapping\n            if (oldValue != null || containsKey(key)) {\n                // something to remove\n                remove(key);\n                return null;\n            } else {\n                // nothing to do. Leave things as they were.\n                return null;\n            }\n        } else {\n            // add or replace old mapping\n            put(key, newValue);\n            return newValue;\n        }\n    }\n\n    /**\n     * 如果指定的键尚未与值相关联或与null相关联，则将其与给定的非空值相关联。\n     */\n    default V merge(K key, V value,\n                    BiFunction&lt;? super V, ? super V, ? extends V&gt; remappingFunction) {\n        Objects.requireNonNull(remappingFunction);\n        Objects.requireNonNull(value);\n        V oldValue = get(key);\n        V newValue = (oldValue == null) ? value :\n                remappingFunction.apply(oldValue, value);\n        if(newValue == null) {\n            remove(key);\n        } else {\n            put(key, newValue);\n        }\n        return newValue;\n    }</code></pre>\n<h2 id=\"map-entry\">Map.Entry</h2>\n<p>Map.Entry的定义如下：</p>\n<pre><code class=\"language-java\">interface Entry&lt;K,V&gt; { }</code></pre>\n<p>Map.Entry是Map中内部的一个接口，Map.Entry是键值对，Map通过 entrySet() 获取Map.Entry的键值对集合，从而通过该集合实现对键值对的操作。</p>\n<h3 id=\"map-entity-api\">Map.Entity的API</h3>\n<pre><code class=\"language-java\">   /**\n     * 返回此Entity对应的key。\n     */\n    K getKey();\n\n    /**\n     * 返回此Entity对应的value。\n     */\n    V getValue();\n\n    /**\n     * 替换此Entity的value\n     */\n    V setValue(V value);\n\n    /**\n     * equals方法\n     */\n    boolean equals(Object o);\n\n    /**\n     * 获取hashCode\n     */\n    int hashCode();\n\n    /**\n     * 返回一个比较器，该比较器以自然顺序比较key。\n     */\n    public static &lt;K extends Comparable&lt;? super K&gt;, V&gt; Comparator&lt;Map.Entry&lt;K,V&gt;&gt; comparingByKey() {\n        return (Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)\n                (c1, c2) -&gt; c1.getKey().compareTo(c2.getKey());\n    }\n\n    /**\n     * 返回一个比较器，该比较器以自然顺序比较value。\n     */\n    public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Comparator&lt;Map.Entry&lt;K,V&gt;&gt; comparingByValue() {\n        return (Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)\n                (c1, c2) -&gt; c1.getValue().compareTo(c2.getValue());\n    }\n\n    /**\n     * 返回一个比较器，该比较器使用给定的Comparator按key比较\n     */\n    public static &lt;K, V&gt; Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparingByKey(Comparator&lt;? super K&gt; cmp) {\n        Objects.requireNonNull(cmp);\n        return (Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)\n                (c1, c2) -&gt; cmp.compare(c1.getKey(), c2.getKey());\n    }\n\n    /**\n     * 返回一个比较器，该比较器使用给定的Comparator按value比较\n     */\n    public static &lt;K, V&gt; Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparingByValue(Comparator&lt;? super V&gt; cmp) {\n        Objects.requireNonNull(cmp);\n        return (Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)\n                (c1, c2) -&gt; cmp.compare(c1.getValue(), c2.getValue());\n    }\n</code></pre>\n<h2 id=\"abstractmap\">AbstractMap</h2>\n<p>AbstractMap的定义如下：</p>\n<pre><code class=\"language-java\">public abstract class AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt; {}</code></pre>\n<p>AbstractMap类提供 Map 接口的骨干实现，以最大限度地减少实现此接口所需的工作。</p>\n<h3 id=\"abstractmap-api\">AbstractMap的API</h3>\n<pre><code class=\"language-java\">    // 从该Map中删除所有的映射（可选操作）。\n    void    clear()\n    // 返回此 AbstractMap实例的浅拷贝：键和值本身不被克隆。\n    protected Object    clone()\n    // 如果此映射包含指定键的映射，则返回 true 。\n    boolean    containsKey(Object key)\n    // 如果此映射将一个或多个键映射到指定的值，则返回 true 。\n    boolean    containsValue(Object value)\n    // 返回此Map中包含的映射的Set视图。\n    abstract Set&lt;Map.Entry&lt;K,V&gt;&gt;    entrySet()\n\n    boolean    equals(Object o)\n    int    hashCode()\n    String    toString()\n\n    // 返回到指定键所映射的值\n    V    get(Object key)\n    // 如果此Map不包含键值映射，则返回 true 。\n    boolean    isEmpty()\n    // 返回此地图中包含的键的Set视图。\n    Set&lt;K&gt;    keySet()\n    // 将指定的值与该映射中的指定键相关联（可选操作）。\n    V    put(K key, V value)\n    // 将指定Map的所有映射复制到此映射（可选操作）。\n    void    putAll(Map&lt;? extends K,? extends V&gt; m)\n    // 如果存在（从可选的操作），从该Map中删除一个键的映射。\n    V    remove(Object key)\n    // 返回此Map中键值映射的数量。\n    int    size()\n    // 返回此Map中包含的值的Collection视图。\n    Collection&lt;V&gt;    values()</code></pre>\n<h2 id=\"sortedmap\">SortedMap</h2>\n<p>SortedMap的定义如下：</p>\n<pre><code class=\"language-java\">public interface SortedMap&lt;K,V&gt; extends Map&lt;K,V&gt; { }</code></pre>\n<p>SortedMap是一个继承于Map接口的接口。它是一个有序的SortedMap键值映射。\nSortedMap的排序方式有两种：自然排序 或者 用户指定比较器。 插入有序 SortedMap 的所有元素都必须实现 Comparable 接口（或者被指定的比较器所接受）。</p>\n<h3 id=\"sortedmap-api\">SortedMap的API</h3>\n<pre><code class=\"language-java\">    // 返回用于订购此Map中的键的比较器\n    Comparator&lt;? super K&gt;    comparator()\n    // 返回此Map中包含的映射的Set视图。\n    Set&lt;Map.Entry&lt;K,V&gt;&gt;    entrySet()\n    // 返回此Map中当前的第一个键。\n    K    firstKey()\n    // 返回该Map的部分key严格小于 toKey 。\n    SortedMap&lt;K,V&gt;    headMap(K toKey)\n    // 返回此Map中包含的键的Set视图。\n    Set&lt;K&gt;    keySet()\n    // 返回当前在此Map中的最后（最高）键。\n    K    lastKey()\n    // 返回此Map部分的视图，其关键字范围为 fromKey （含）到 toKey（不含）。\n    SortedMap&lt;K,V&gt;    subMap(K fromKey, K toKey)\n    // 返回此Map部分的视图，其键大于或等于 fromKey 。\n    SortedMap&lt;K,V&gt;    tailMap(K fromKey)\n    // 返回此地图中包含的值的Collection视图。\n    Collection&lt;V&gt;    values()</code></pre>\n<h2 id=\"navigablemap\">NavigableMap</h2>\n<p>NavigableMap的定义如下：</p>\n<pre><code class=\"language-java\">public interface NavigableMap&lt;K,V&gt; extends SortedMap&lt;K,V&gt; { }</code></pre>\n<p>NavigableMap是继承于SortedMap的接口。它是一个可导航的键-值对集合，具有了为给定搜索目标报告最接近匹配项的导航方法。\nNavigableMap分别提供了获取“键”、“键-值对”、“键集”、“键-值对集”的相关方法。</p>\n<h3 id=\"navigablemap-api\">NavigableMap的API</h3>\n<pre><code class=\"language-java\">    // 返回与大于或等于给定键的最小键相关联的键值映射\n    K    ceilingKey(K key)\n    // 返回大于或等于给定键的 null键\n    Map.Entry&lt;K,V&gt;    ceilingEntry(K key)\n    // 返回此Map中包含的键的相反顺序NavigableSet 。\n    NavigableSet&lt;K&gt;    descendingKeySet()\n    // 返回此映射中包含的映射的反向排序视图。\n    NavigableMap&lt;K,V&gt;    descendingMap()\n    // 返回与该Map中的最小键相关联的键值映射，如果Map为空，则返回 null 。\n    Map.Entry&lt;K,V&gt;    firstEntry()\n    // 返回与小于或等于给定键的最大键相关联的键值映射，如果没有此键，则 null 。\n    Map.Entry&lt;K,V&gt;    floorEntry(K key)\n    // 返回小于或等于给定键的最大键，如果没有这样的键，则返回 null 。\n    K    floorKey(K key)\n    // 返回此Map部分的视图，其密钥严格小于 toKey 。\n    SortedMap&lt;K,V&gt;    headMap(K toKey)\n    // 返回该Map部分的视图，其键值小于（或等于，如果 inclusive为真） toKey 。\n    NavigableMap&lt;K,V&gt;    headMap(K toKey, boolean inclusive)\n    // 返回与最小密钥相关联的密钥值映射严格大于给定密钥，如果没有这样的密钥则 null 。\n    Map.Entry&lt;K,V&gt;    higherEntry(K key)\n    // 返回严格大于给定键的最小键，如果没有这样的键，则返回 null 。\n    K    higherKey(K key)\n    // 返回与该Map中最大键相关联的键值映射，如果Map为空，则返回 null 。\n    Map.Entry&lt;K,V&gt;    lastEntry()\n    // 返回与最大密钥相关联的密钥值映射严格小于给定密钥，如果没有这样的密钥则 null 。\n    Map.Entry&lt;K,V&gt;    lowerEntry(K key)\n    // 返回严格小于给定键的最大键，如果没有这样的键，则返回 null 。\n    K    lowerKey(K key)\n    // 返回此Map中包含的键的NavigableSet视图。\n    NavigableSet&lt;K&gt;    navigableKeySet()\n    // 删除并返回与该Map中的最小键相关联的键值映射，如果Map为空，则返回 null 。\n    Map.Entry&lt;K,V&gt;    pollFirstEntry()\n    // 删除并返回与该Map中最大键相关联的键值映射，如果Map为空，则返回 null 。\n    Map.Entry&lt;K,V&gt;    pollLastEntry()\n    // 返回此Map部分的视图，其关键字范围为 fromKey至 toKey 。\n    NavigableMap&lt;K,V&gt;    subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)\n    // 返回此Map部分的视图，其关键字范围为 fromKey （含），不 toKey toKey。\n    SortedMap&lt;K,V&gt;    subMap(K fromKey, K toKey)\n    // 返回此Map部分的视图，其键大于或等于 fromKey 。\n    SortedMap&lt;K,V&gt;    tailMap(K fromKey)\n    // 返回此Map部分的视图，其键大于（或等于，如果 inclusive为真） fromKey 。\n    NavigableMap&lt;K,V&gt;    tailMap(K fromKey, boolean inclusive)</code></pre>\n<p>NavigableMap除了继承SortedMap的特性外，它的提供的功能可以分为4类：<br>\n第1类，提供操作键-值对的方法。<br>\n               lowerEntry、floorEntry、ceilingEntry 和 higherEntry 方法，它们分别返回与小于、小于等于、大于等于、大于给定键的键关联的 Map.Entry 对象。<br>\n               firstEntry、pollFirstEntry、lastEntry 和 pollLastEntry 方法，它们返回和/或移除最小和最大的映射关系（如果存在），否则返回 null。<br></p>\n<p>第2类，提供操作键的方法。这个和第1类比较类似<br>\n               lowerKey、floorKey、ceilingKey 和 higherKey 方法，它们分别返回与小于、小于等于、大于等于、大于给定键的键。<br>\n第3类，获取键集。<br>\n              navigableKeySet、descendingKeySet分别获取正序/反序的键集。<br>\n第4类，获取键-值对的子集</p>\n<h2 id=\"dictionary\">Dictionary</h2>\n<p>Dictionary的定义如下：</p>\n<pre><code class=\"language-java\">public abstract class Dictionary&lt;K,V&gt; {}</code></pre>\n<p>Dictionary是JDK 1.0定义的键值对的接口，它也包括了操作键值对的基本函数。</p>\n<h3 id=\"dictionary-api\">Dictionary的API</h3>\n<pre><code class=\"language-java\">    // 返回此字典中值的枚举。\n    abstract Enumeration&lt;V&gt;    elements()\n    // 返回该字典中键映射到的值。\n    abstract V    get(Object key)\n    // 测试这个字典是否将键值映射到值。\n    abstract boolean    isEmpty()\n    // 返回此字典中键的枚举。\n    abstract Enumeration&lt;K&gt;    keys()\n    // 将指定的key key到本字典中 value的value。\n    abstract V    put(K key, V value)\n    // 从该字典中删除 key （及其对应的 value ）。\n    abstract V    remove(Object key)\n    // 返回此字典中的条目数（不同的键）。\n    abstract int    size()</code></pre>\n',43,1,2,NULL,'2019-09-21 03:30:51','2019-09-21 03:50:29',0,'9,11,38',1,0),(46,'Java集合07——HashMap','HashMap 是一个散列表，它存储的内容是键值对(key-value)映射','Bobbi','## HashMap简介\n```java\npublic class HashMap<K,V> extends AbstractMap<K,V>\n    implements Map<K,V>, Cloneable, Serializable {}\n```\nHashMap 是一个散列表，它存储的内容是键值对(key-value)映射。\n\nHashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。\nHashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。\n\nHashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。\n\n当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。\n\n通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。\n\n## HashMap数据结构\n![image.png](http://oss.dblearn.cn/dbblog/20190921/63e144ec2be4459d9fe94deed0b6400a.png)\n1. HashMap继承于AbstractMap类，实现了Map接口。Map是\"key-value键值对\"接口，AbstractMap实现了\"键值对\"的通用函数接口。 \n2. HashMap是通过\"拉链法\"实现的哈希表,即数组和链表的结合体。它包括几个重要的成员变量：table, size, threshold, loadFactor。\n3. table是一个Node[]数组类型，而Node实际上就是一个单向链表(后续会转化为红黑树)。哈希表的\"key-value键值对\"都是存储在Node数组中的。 \n4. size是HashMap的大小，它是HashMap保存的键值对的数量。 \n5. threshold是HashMap的阈值，用于判断是否需要调整HashMap的容量。threshold的值=\"容量*加载因子\"，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量扩容长度为以前的2倍。\n6. loadFactor就是加载因子。 \n\n### JDK1.8中HashMap数据结构\nJDK1.7前的结构：数组+链表\n![image.png](http://oss.dblearn.cn/dbblog/20190921/8acea641f65e48de94390f2febe2c247.png)\n\nJDK1.8后的结构：数组+链表(或红黑树)\n![image.png](http://oss.dblearn.cn/dbblog/20190921/01daa67c18d448e7a721df85afa966de.png)\n\n在JDK 1.7、1.8中都使用了散列算法，但是在JDK 1.8中引入了红黑树，在链表的长度大于等于8并且hash桶的长度大于等于64的时候，会将链表进行树化。这里的树使用的数据结构是红黑树，红黑树是一个自平衡的二叉查找树，查找效率会从链表的o(n)降低为o(logn)，效率是非常大的提高。\n\n## HashMap初始化变量\n```java\n //默认hash桶初始长度16\n  static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; \n\n  //hash表最大容量2的30次幂\n  static final int MAXIMUM_CAPACITY = 1 << 30;\n\n  //默认负载因子 0.75\n  static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n  //链表的数量大于等于8个并且桶的数量大于等于64时链表树化 \n  static final int TREEIFY_THRESHOLD = 8;\n\n  //hash表某个节点链表的数量小于等于6时树拆分\n  static final int UNTREEIFY_THRESHOLD = 6;\n\n  //树化时最小桶的数量\n  static final int MIN_TREEIFY_CAPACITY = 64;\n\n  //hash桶\n  transient Node<K,V>[] table;                         \n\n  //键值对的数量\n  transient int size;\n\n  //HashMap结构修改的次数\n  transient int modCount;\n\n  //扩容的阀值，当键值对的数量超过这个阀值会产生扩容\n  int threshold;\n\n  //负载因子\n  final float loadFactor; \n\n```\n## HashMap构造函数\n```java\n    /**\n     * 构造一个具有指定的初始容量和负载系数的HashMap。\n     */\n    public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }\n\n    /**\n     * 构造一个空的HashMap，它具有指定的初始容量和默认的负载系数（0.75）。\n     */\n    public HashMap(int initialCapacity) {\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    }\n\n    /**\n     * 使用默认的初始容量（16）和默认的加载因子（0.75）构造一个空的HashMap。\n     */\n    public HashMap() {\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    }\n\n    /**\n     * 构造一个新的HashMap，其映射与指定的Map相同。 使用默认负载因子（0.75）。\n     */\n    public HashMap(Map<? extends K, ? extends V> m) {\n        this.loadFactor = DEFAULT_LOAD_FACTOR;\n        putMapEntries(m, false);\n    }\n```\n\nHashMap有4个构造函数。\n\nhash桶没有在构造函数中初始化，而是在第一次存储键值对的时候进行初始化。 这里重点看tableSizeFor(initialCapacity)方法，这个方法的作用是，将你传入的initialCapacity做计算，返回一个大于等于initialCapacity 最小的2的幂次方。\n\n所以这个操作保证无论你传入的初始化Hash桶长度参数是多少，最后hash表初始化的长度都是2的幂次方。比如你输入的是6，计算出来结果就是8。\n```java\n    /**\n     * 返回一个大于等于initialCapacity 最小的2的幂次方\n     */\n    static final int tableSizeFor(int cap) {\n        int n = cap - 1;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    }\n```\n\n## HashMap存储\n```java\npublic V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,                                     \n               boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    //当table为空时，这里初始化table，不是通过构造函数初始化，而是在插入时通过扩容初始化，有效防止了初始化HashMap没有数据插入造成空间浪费可能造成内存泄露的情况\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    //计算数组中的位置，该位置为空则存放新键值对在数组中\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    // 否则存入链表或红黑树\n    else {\n        Node<K,V> e; K k;\n        //key的hash相等，equals相等，则直接覆盖\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        //如果是红黑树节点，在红黑树中查找覆盖\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n	//将新键值对放在链表的最后（单链表后或红黑树）\n        else {\n            // 遍历链表\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    //当链表的长度大于等于树化阀值8,并且hash桶的长度大于等于MIN_TREEIFY_CAPACITY 64，链表转化为红黑树链表转化为红黑树，插入键值对\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                //链表插入，如果key存在则直接覆盖\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        //map中含有旧key(被覆盖的key)，返回旧值\n        if (e != null) { \n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    //map调整次数加1\n    ++modCount;\n    //键值对的数量达到阈值需要扩容\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\nput的过程如图：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190921/0ef56d86bdc4433586078345856af8d1.png)\n\n总结：\n1. 插入的键值对是新键值对，如果hash表没有初始化会进行初始化，否则将键值对插入链表尾部，可能需要链表树化和扩容\n2. 插入的键值对中的key已经存在，覆盖键值对。在put的方法里我们注意看下hash(key)方法，这是计算键值对hash值的方法:\n\n```java\n    static final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n```\n这里的Hash算法本质上就是三步： \n1. 取key的hashCode值，h = key.hashCode()； \n2. 高位参与运算，h ^ (h >>> 16)； \n3. 取模运算，h & (n-1)。\n\n\nhashCode()是一个int类型的本地方法，也就将key的hashCode无符号右移16位然后与hashCode异或从而得到hash值在putVal方法中（n - 1）& hash计算得到桶的索引位置 ，那么现在有两个疑问，为什么要计算hash值？为什么不用 hash % n?\n\n\n- 为什么要计算hash值，而不用hashCode?\n\n用为通常n是很小的，而hashCode是32位，如果（n - 1）& hashCode那么当n大于2的16次方加1，也就是65537后(n - 1)的高位数据才能与hashCode的高位数据相与，当n很小是只能使用上hashCode低16位的数据，这会产生一个问题，既键值对在hash桶中分布不均匀，导致链表过长，而把hashCode>>>16无符号右移16位让高16位间接的与（n - 1）参加计算，从而让键值对分布均匀。降低hash碰撞。\n\n\n- 为什么使用（n - 1）& hash 而不使用hash% n呢？\n\n其实这两种结果是等价的，当n总是2的n次方时，h& (n-1)运算等价于对n取模，也就是h%n，但是&比%具有更高的效率，如图：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190921/4a2bfbe5e9ac43aa8f21d626a897f100.png)\n\n上图 hash&(n - 1)的结果是2，而其实hash%n 的结果也是2, hash&(n - 1)与hash%n的结果是等价的。\n\n## HashMap扩容\nHashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。那么什么时候回产生扩容呢？\n1. 初始化HashMap时，第一次进行put操作\n2. 当键值对的个数大于threshold阀值时产生扩容，threshold=size*loadFactor\n\n\n```java\nfinal Node<K,V>[] resize() {\n        Node<K,V>[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length;\n        int oldThr = threshold;\n        int newCap, newThr = 0;\n        //如果旧hash桶不为空\n        if (oldCap > 0) {\n            //超过hash桶的最大长度，将阀值设为最大值\n            if (oldCap >= MAXIMUM_CAPACITY) {\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            }\n            //新的hash桶的长度被扩容没有超过最大长度，将新容量阀值扩容为以前的2倍\n            else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                     oldCap >= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr << 1; // double threshold\n        }\n        //如果旧hash桶为空，hash表阈值已经初始化过\n        else if (oldThr > 0) // initial capacity was placed in threshold\n            newCap = oldThr;\n        //如果旧hash桶，并且hash桶容量阈值没有初始化，那么需要初始化新的hash桶的容量和新容量阀值\n        else {              \n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        }\n        //新的局部变量阀值赋值\n        if (newThr == 0) {\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        }\n        //为当前容量阀值赋值\n        threshold = newThr;\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n            //初始化hash桶\n            Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n        table = newTab;\n        //如果旧的hash桶不为空，需要将旧的hash表里的键值对重新映射到新的hash桶中\n        if (oldTab != null) {\n            for (int j = 0; j < oldCap; ++j) {\n                Node<K,V> e;\n                if ((e = oldTab[j]) != null) {\n                    oldTab[j] = null;\n                    //只有一个节点，通过索引位置直接映射\n                    if (e.next == null)\n                        newTab[e.hash & (newCap - 1)] = e;\n                    //如果是红黑树，需要进行树拆分然后映射\n                    else if (e instanceof TreeNode)\n                        ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                    else { \n                    //如果是多个节点的链表，将原链表拆分为两个链表，两个链表的索引位置，一个为原索引，一个为原索引加上旧Hash桶长度的偏移量       \n                        Node<K,V> loHead = null, loTail = null;\n                        Node<K,V> hiHead = null, hiTail = null;\n                        Node<K,V> next;\n                        do {\n                            next = e.next;\n                            //链表1\n                            if ((e.hash & oldCap) == 0) {\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            }\n                            //链表2\n                            else {\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            }\n                        } while ((e = next) != null);\n                        //链表1存于原索引\n                        if (loTail != null) {\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        }\n                        //链表2存于原索引加上原hash桶长度的偏移量\n                        if (hiTail != null) {\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        }\n                    }\n                }\n            }\n        }\n        return newTab;\n    }\n\n```\n经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。 \n这里写图片描述\n![image.png](http://oss.dblearn.cn/dbblog/20190922/b7434b0e5e2345dbbc1f404e76e239ef.png)\n\n元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化： \n![image.png](http://oss.dblearn.cn/dbblog/20190922/e79fd749b4d44acb9656e63b950db052.png)\n因此，我们在扩充HashMap的时候，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图： \n![image.png](http://oss.dblearn.cn/dbblog/20190922/a547991d1dc4406391f101579656824c.png)\n\n这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。\n\n## HashMap读取\n```java\n    public V get(Object key) {\n        Node<K,V> e;\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\n    }\n\n    \n    final Node<K,V> getNode(int hash, Object key) {\n        Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n	// 计算Hash，如果第一个节点命中，则返回\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            (first = tab[(n - 1) & hash]) != null) {\n            if (first.hash == hash && // always check first node\n                ((k = first.key) == key || (key != null && key.equals(k))))\n                return first;\n	    // 有冲突，则分别从红黑树或链表中查找节点\n            if ((e = first.next) != null) {\n                if (first instanceof TreeNode)\n                    return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n                do {\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        return e;\n                } while ((e = e.next) != null);\n            }\n        }\n        return null;\n    }\n```\n有了上面存储时的 hash 算法作为基础,理解起来这段代码就很容易了。从上面的源代码中可以看出\n1. 先对key的hashCode()做hash运算，计算index;\n2. 如果在bucket里的第一个节点里直接命中，则直接返回；\n3. 如果有冲突，则通过key.equals(k)去查找对应的Entry;\n若为树，则在树中通过key.equals(k)查找，O(logn)；\n若为链表，则在链表中通过key.equals(k)查找，O(n)。\n\n## HashMap注意事项\n1. HashMap允许NULL值，NULL键\n2. 不要轻易改变负载因子，负载因子过高会导致链表过长，查找键值对时间复杂度就会增高，负载因子过低会导致hash桶的数量过多，空间复杂度会增高\n4. HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap\n5. 尽量设置HashMap的初始容量，尤其在数据量大的时候，防止多次resize\n6. HashMap在JDK 1.8在做了很好性能的提升，尽量升级到JDK1.8\n','<h2 id=\"hashmap-\">HashMap简介</h2>\n<pre><code class=\"language-java\">public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;\n    implements Map&lt;K,V&gt;, Cloneable, Serializable {}</code></pre>\n<p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p>\n<p>HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。\nHashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</p>\n<p>HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。</p>\n<p>当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。</p>\n<p>通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。</p>\n<h2 id=\"hashmap-\">HashMap数据结构</h2>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190921/63e144ec2be4459d9fe94deed0b6400a.png\" alt=\"image.png\"></p>\n<ol>\n<li>HashMap继承于AbstractMap类，实现了Map接口。Map是&quot;key-value键值对&quot;接口，AbstractMap实现了&quot;键值对&quot;的通用函数接口。 </li>\n<li>HashMap是通过&quot;拉链法&quot;实现的哈希表,即数组和链表的结合体。它包括几个重要的成员变量：table, size, threshold, loadFactor。</li>\n<li>table是一个Node[]数组类型，而Node实际上就是一个单向链表(后续会转化为红黑树)。哈希表的&quot;key-value键值对&quot;都是存储在Node数组中的。 </li>\n<li>size是HashMap的大小，它是HashMap保存的键值对的数量。 </li>\n<li>threshold是HashMap的阈值，用于判断是否需要调整HashMap的容量。threshold的值=&quot;容量*加载因子&quot;，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量扩容长度为以前的2倍。</li>\n<li>loadFactor就是加载因子。 </li>\n</ol>\n<h3 id=\"jdk1-8-hashmap-\">JDK1.8中HashMap数据结构</h3>\n<p>JDK1.7前的结构：数组+链表\n<img src=\"http://oss.dblearn.cn/dbblog/20190921/8acea641f65e48de94390f2febe2c247.png\" alt=\"image.png\"></p>\n<p>JDK1.8后的结构：数组+链表(或红黑树)\n<img src=\"http://oss.dblearn.cn/dbblog/20190921/01daa67c18d448e7a721df85afa966de.png\" alt=\"image.png\"></p>\n<p>在JDK 1.7、1.8中都使用了散列算法，但是在JDK 1.8中引入了红黑树，在链表的长度大于等于8并且hash桶的长度大于等于64的时候，会将链表进行树化。这里的树使用的数据结构是红黑树，红黑树是一个自平衡的二叉查找树，查找效率会从链表的o(n)降低为o(logn)，效率是非常大的提高。</p>\n<h2 id=\"hashmap-\">HashMap初始化变量</h2>\n<pre><code class=\"language-java\"> //默认hash桶初始长度16\n  static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; \n\n  //hash表最大容量2的30次幂\n  static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;\n\n  //默认负载因子 0.75\n  static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n  //链表的数量大于等于8个并且桶的数量大于等于64时链表树化 \n  static final int TREEIFY_THRESHOLD = 8;\n\n  //hash表某个节点链表的数量小于等于6时树拆分\n  static final int UNTREEIFY_THRESHOLD = 6;\n\n  //树化时最小桶的数量\n  static final int MIN_TREEIFY_CAPACITY = 64;\n\n  //hash桶\n  transient Node&lt;K,V&gt;[] table;                         \n\n  //键值对的数量\n  transient int size;\n\n  //HashMap结构修改的次数\n  transient int modCount;\n\n  //扩容的阀值，当键值对的数量超过这个阀值会产生扩容\n  int threshold;\n\n  //负载因子\n  final float loadFactor; \n</code></pre>\n<h2 id=\"hashmap-\">HashMap构造函数</h2>\n<pre><code class=\"language-java\">    /**\n     * 构造一个具有指定的初始容量和负载系数的HashMap。\n     */\n    public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity &lt; 0)\n            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +\n                                               initialCapacity);\n        if (initialCapacity &gt; MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }\n\n    /**\n     * 构造一个空的HashMap，它具有指定的初始容量和默认的负载系数（0.75）。\n     */\n    public HashMap(int initialCapacity) {\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    }\n\n    /**\n     * 使用默认的初始容量（16）和默认的加载因子（0.75）构造一个空的HashMap。\n     */\n    public HashMap() {\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    }\n\n    /**\n     * 构造一个新的HashMap，其映射与指定的Map相同。 使用默认负载因子（0.75）。\n     */\n    public HashMap(Map&lt;? extends K, ? extends V&gt; m) {\n        this.loadFactor = DEFAULT_LOAD_FACTOR;\n        putMapEntries(m, false);\n    }</code></pre>\n<p>HashMap有4个构造函数。</p>\n<p>hash桶没有在构造函数中初始化，而是在第一次存储键值对的时候进行初始化。 这里重点看tableSizeFor(initialCapacity)方法，这个方法的作用是，将你传入的initialCapacity做计算，返回一个大于等于initialCapacity 最小的2的幂次方。</p>\n<p>所以这个操作保证无论你传入的初始化Hash桶长度参数是多少，最后hash表初始化的长度都是2的幂次方。比如你输入的是6，计算出来结果就是8。</p>\n<pre><code class=\"language-java\">    /**\n     * 返回一个大于等于initialCapacity 最小的2的幂次方\n     */\n    static final int tableSizeFor(int cap) {\n        int n = cap - 1;\n        n |= n &gt;&gt;&gt; 1;\n        n |= n &gt;&gt;&gt; 2;\n        n |= n &gt;&gt;&gt; 4;\n        n |= n &gt;&gt;&gt; 8;\n        n |= n &gt;&gt;&gt; 16;\n        return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    }</code></pre>\n<h2 id=\"hashmap-\">HashMap存储</h2>\n<pre><code class=\"language-java\">public V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,                                     \n               boolean evict) {\n    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;\n    //当table为空时，这里初始化table，不是通过构造函数初始化，而是在插入时通过扩容初始化，有效防止了初始化HashMap没有数据插入造成空间浪费可能造成内存泄露的情况\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    //计算数组中的位置，该位置为空则存放新键值对在数组中\n    if ((p = tab[i = (n - 1) &amp; hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    // 否则存入链表或红黑树\n    else {\n        Node&lt;K,V&gt; e; K k;\n        //key的hash相等，equals相等，则直接覆盖\n        if (p.hash == hash &amp;&amp;\n            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))\n            e = p;\n        //如果是红黑树节点，在红黑树中查找覆盖\n        else if (p instanceof TreeNode)\n            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);\n    //将新键值对放在链表的最后（单链表后或红黑树）\n        else {\n            // 遍历链表\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    //当链表的长度大于等于树化阀值8,并且hash桶的长度大于等于MIN_TREEIFY_CAPACITY 64，链表转化为红黑树链表转化为红黑树，插入键值对\n                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                //链表插入，如果key存在则直接覆盖\n                if (e.hash == hash &amp;&amp;\n                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        //map中含有旧key(被覆盖的key)，返回旧值\n        if (e != null) { \n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    //map调整次数加1\n    ++modCount;\n    //键值对的数量达到阈值需要扩容\n    if (++size &gt; threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}</code></pre>\n<p>put的过程如图：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190921/0ef56d86bdc4433586078345856af8d1.png\" alt=\"image.png\"></p>\n<p>总结：</p>\n<ol>\n<li>插入的键值对是新键值对，如果hash表没有初始化会进行初始化，否则将键值对插入链表尾部，可能需要链表树化和扩容</li>\n<li>插入的键值对中的key已经存在，覆盖键值对。在put的方法里我们注意看下hash(key)方法，这是计算键值对hash值的方法:</li>\n</ol>\n<pre><code class=\"language-java\">    static final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n    }</code></pre>\n<p>这里的Hash算法本质上就是三步： </p>\n<ol>\n<li>取key的hashCode值，h = key.hashCode()； </li>\n<li>高位参与运算，h ^ (h &gt;&gt;&gt; 16)； </li>\n<li>取模运算，h &amp; (n-1)。</li>\n</ol>\n<p>hashCode()是一个int类型的本地方法，也就将key的hashCode无符号右移16位然后与hashCode异或从而得到hash值在putVal方法中（n - 1）&amp; hash计算得到桶的索引位置 ，那么现在有两个疑问，为什么要计算hash值？为什么不用 hash % n?</p>\n<ul>\n<li>为什么要计算hash值，而不用hashCode?</li>\n</ul>\n<p>用为通常n是很小的，而hashCode是32位，如果（n - 1）&amp; hashCode那么当n大于2的16次方加1，也就是65537后(n - 1)的高位数据才能与hashCode的高位数据相与，当n很小是只能使用上hashCode低16位的数据，这会产生一个问题，既键值对在hash桶中分布不均匀，导致链表过长，而把hashCode&gt;&gt;&gt;16无符号右移16位让高16位间接的与（n - 1）参加计算，从而让键值对分布均匀。降低hash碰撞。</p>\n<ul>\n<li>为什么使用（n - 1）&amp; hash 而不使用hash% n呢？</li>\n</ul>\n<p>其实这两种结果是等价的，当n总是2的n次方时，h&amp; (n-1)运算等价于对n取模，也就是h%n，但是&amp;比%具有更高的效率，如图：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190921/4a2bfbe5e9ac43aa8f21d626a897f100.png\" alt=\"image.png\"></p>\n<p>上图 hash&amp;(n - 1)的结果是2，而其实hash%n 的结果也是2, hash&amp;(n - 1)与hash%n的结果是等价的。</p>\n<h2 id=\"hashmap-\">HashMap扩容</h2>\n<p>HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。那么什么时候回产生扩容呢？</p>\n<ol>\n<li>初始化HashMap时，第一次进行put操作</li>\n<li>当键值对的个数大于threshold阀值时产生扩容，threshold=size*loadFactor</li>\n</ol>\n<pre><code class=\"language-java\">final Node&lt;K,V&gt;[] resize() {\n        Node&lt;K,V&gt;[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length;\n        int oldThr = threshold;\n        int newCap, newThr = 0;\n        //如果旧hash桶不为空\n        if (oldCap &gt; 0) {\n            //超过hash桶的最大长度，将阀值设为最大值\n            if (oldCap &gt;= MAXIMUM_CAPACITY) {\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            }\n            //新的hash桶的长度被扩容没有超过最大长度，将新容量阀值扩容为以前的2倍\n            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;\n                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr &lt;&lt; 1; // double threshold\n        }\n        //如果旧hash桶为空，hash表阈值已经初始化过\n        else if (oldThr &gt; 0) // initial capacity was placed in threshold\n            newCap = oldThr;\n        //如果旧hash桶，并且hash桶容量阈值没有初始化，那么需要初始化新的hash桶的容量和新容量阀值\n        else {              \n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        }\n        //新的局部变量阀值赋值\n        if (newThr == 0) {\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        }\n        //为当前容量阀值赋值\n        threshold = newThr;\n        @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})\n            //初始化hash桶\n            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];\n        table = newTab;\n        //如果旧的hash桶不为空，需要将旧的hash表里的键值对重新映射到新的hash桶中\n        if (oldTab != null) {\n            for (int j = 0; j &lt; oldCap; ++j) {\n                Node&lt;K,V&gt; e;\n                if ((e = oldTab[j]) != null) {\n                    oldTab[j] = null;\n                    //只有一个节点，通过索引位置直接映射\n                    if (e.next == null)\n                        newTab[e.hash &amp; (newCap - 1)] = e;\n                    //如果是红黑树，需要进行树拆分然后映射\n                    else if (e instanceof TreeNode)\n                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);\n                    else { \n                    //如果是多个节点的链表，将原链表拆分为两个链表，两个链表的索引位置，一个为原索引，一个为原索引加上旧Hash桶长度的偏移量       \n                        Node&lt;K,V&gt; loHead = null, loTail = null;\n                        Node&lt;K,V&gt; hiHead = null, hiTail = null;\n                        Node&lt;K,V&gt; next;\n                        do {\n                            next = e.next;\n                            //链表1\n                            if ((e.hash &amp; oldCap) == 0) {\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            }\n                            //链表2\n                            else {\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            }\n                        } while ((e = next) != null);\n                        //链表1存于原索引\n                        if (loTail != null) {\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        }\n                        //链表2存于原索引加上原hash桶长度的偏移量\n                        if (hiTail != null) {\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        }\n                    }\n                }\n            }\n        }\n        return newTab;\n    }\n</code></pre>\n<p>经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。 \n这里写图片描述\n<img src=\"http://oss.dblearn.cn/dbblog/20190922/b7434b0e5e2345dbbc1f404e76e239ef.png\" alt=\"image.png\"></p>\n<p>元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化： \n<img src=\"http://oss.dblearn.cn/dbblog/20190922/e79fd749b4d44acb9656e63b950db052.png\" alt=\"image.png\">\n因此，我们在扩充HashMap的时候，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图： \n<img src=\"http://oss.dblearn.cn/dbblog/20190922/a547991d1dc4406391f101579656824c.png\" alt=\"image.png\"></p>\n<p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。</p>\n<h2 id=\"hashmap-\">HashMap读取</h2>\n<pre><code class=\"language-java\">    public V get(Object key) {\n        Node&lt;K,V&gt; e;\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\n    }\n\n\n    final Node&lt;K,V&gt; getNode(int hash, Object key) {\n        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;\n    // 计算Hash，如果第一个节点命中，则返回\n        if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;\n            (first = tab[(n - 1) &amp; hash]) != null) {\n            if (first.hash == hash &amp;&amp; // always check first node\n                ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))\n                return first;\n        // 有冲突，则分别从红黑树或链表中查找节点\n            if ((e = first.next) != null) {\n                if (first instanceof TreeNode)\n                    return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);\n                do {\n                    if (e.hash == hash &amp;&amp;\n                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                        return e;\n                } while ((e = e.next) != null);\n            }\n        }\n        return null;\n    }</code></pre>\n<p>有了上面存储时的 hash 算法作为基础,理解起来这段代码就很容易了。从上面的源代码中可以看出</p>\n<ol>\n<li>先对key的hashCode()做hash运算，计算index;</li>\n<li>如果在bucket里的第一个节点里直接命中，则直接返回；</li>\n<li>如果有冲突，则通过key.equals(k)去查找对应的Entry;\n若为树，则在树中通过key.equals(k)查找，O(logn)；\n若为链表，则在链表中通过key.equals(k)查找，O(n)。</li>\n</ol>\n<h2 id=\"hashmap-\">HashMap注意事项</h2>\n<ol>\n<li>HashMap允许NULL值，NULL键</li>\n<li>不要轻易改变负载因子，负载因子过高会导致链表过长，查找键值对时间复杂度就会增高，负载因子过低会导致hash桶的数量过多，空间复杂度会增高</li>\n<li>HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap</li>\n<li>尽量设置HashMap的初始容量，尤其在数据量大的时候，防止多次resize</li>\n<li>HashMap在JDK 1.8在做了很好性能的提升，尽量升级到JDK1.8</li>\n</ol>\n',103,26,2,NULL,'2019-09-21 06:53:02','2019-09-22 05:16:00',0,'9,11,38',1,0),(47,'SpringBoot自动配置源码解析','SpringBoot的出现可谓是大大提升了Java的开发体验。它集成了大量常用的第三方库配置，Spring Boot应用中这些第三方库几乎可以是零配置的开箱即用，大部分的 Spring Boot 应用都只需要非常少量的配置代码（基于 Java 的配置），开发者能够更加专注于业务逻辑。','Bobbi','## 前言\nSpringBoot的出现可谓是大大提升了Java的开发体验。它集成了大量常用的第三方库配置，Spring Boot应用中这些第三方库几乎可以是零配置的开箱即用，大部分的 Spring Boot 应用都只需要非常少量的配置代码（基于 Java 的配置），这让开发者能够更加专注于业务逻辑。那么SpringBoot的核心就在于其自动配置机制\n\n## SpringBoot 自动配置源码解析\n首先从主类SpringBootApplicaion入手\n```java\n@SpringBootApplication\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n\n}\n```\n点击类上的@SpringBootApplication：\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication {\n...\n}\n```\n其中@EnableAutoConfiguration是关键所在：\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration {\n    String ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n    Class<?>[] exclude() default {};\n\n    String[] excludeName() default {};\n}\n```\n@Import注解可以让普通的类导入到Spring的IOC容器中，由Spring进行管理。可以看到导入了一个AutoConfigurationImportSelector类。该类定义如下：\n\n```java\npublic class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered {\n    private static final AutoConfigurationImportSelector.AutoConfigurationEntry EMPTY_ENTRY = new AutoConfigurationImportSelector.AutoConfigurationEntry();\n    private static final String[] NO_IMPORTS = new String[0];\n    private static final Log logger = LogFactory.getLog(AutoConfigurationImportSelector.class);\n    private static final String PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE = \"spring.autoconfigure.exclude\";\n    private ConfigurableListableBeanFactory beanFactory;\n    private Environment environment;\n    private ClassLoader beanClassLoader;\n    private ResourceLoader resourceLoader;\n\n    public AutoConfigurationImportSelector() {\n    }\n\n    public String[] selectImports(AnnotationMetadata annotationMetadata) {\n        if (!this.isEnabled(annotationMetadata)) {\n            return NO_IMPORTS;\n        } else {\n            AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);\n            AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);\n            return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());\n        }\n    }\n\n    protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {\n        if (!this.isEnabled(annotationMetadata)) {\n            return EMPTY_ENTRY;\n        } else {\n            AnnotationAttributes attributes = this.getAttributes(annotationMetadata);\n            List<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n            configurations = this.removeDuplicates(configurations);\n            Set<String> exclusions = this.getExclusions(annotationMetadata, attributes);\n            this.checkExcludedClasses(configurations, exclusions);\n            configurations.removeAll(exclusions);\n            configurations = this.filter(configurations, autoConfigurationMetadata);\n            this.fireAutoConfigurationImportEvents(configurations, exclusions);\n            return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);\n        }\n    }\n\n...\n```\nAutoConfigurationImportSelector类中有一个重要的selectImports方法，其定义如下：\n```java\n    public String[] selectImports(AnnotationMetadata annotationMetadata) {\n        if (!this.isEnabled(annotationMetadata)) {\n            return NO_IMPORTS;\n        } else {\n            AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);\n            AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);\n            return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());\n        }\n    }\n\n```\n该类主体分为两步：\n\n1、 加载元数据配置文件获取AutoConfigurationMetadata\n\n```java\n    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);\n\n    public static AutoConfigurationMetadata loadMetadata(ClassLoader classLoader) {\n        return loadMetadata(classLoader, \"META-INF/spring-autoconfigure-metadata.properties\");\n    }\n\n    static AutoConfigurationMetadata loadMetadata(ClassLoader classLoader, String path) {\n        try {\n            Enumeration<URL> urls = classLoader != null ? classLoader.getResources(path) : ClassLoader.getSystemResources(path);\n            Properties properties = new Properties();\n\n            while(urls.hasMoreElements()) {\n                properties.putAll(PropertiesLoaderUtils.loadProperties(new UrlResource((URL)urls.nextElement())));\n            }\n\n            return loadMetadata(properties);\n        } catch (IOException var4) {\n            throw new IllegalArgumentException(\"Unable to load @ConditionalOnClass location [\" + path + \"]\", var4);\n        }\n    }\n```\n加载META-INF/spring-autoconfigure-metadata.properties配置下的数据并返回配置元数据AutoConfigurationMetadata\n\n2、 传入配置元数据和注解元数据获取配置实体类：AutoConfigurationEntry\n```java\n    protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {\n        if (!this.isEnabled(annotationMetadata)) {\n            return EMPTY_ENTRY;\n        } else {\n            AnnotationAttributes attributes = this.getAttributes(annotationMetadata);\n            List<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n            configurations = this.removeDuplicates(configurations);\n            Set<String> exclusions = this.getExclusions(annotationMetadata, attributes);\n            this.checkExcludedClasses(configurations, exclusions);\n            configurations.removeAll(exclusions);\n            configurations = this.filter(configurations, autoConfigurationMetadata);\n            this.fireAutoConfigurationImportEvents(configurations, exclusions);\n            return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);\n        }\n    }\n```\n\n这里是主要核心流程：分为以下几步：\n```java\n//  1.根据元数据属性值获取候选配置类列表并删除重复项\nAnnotationAttributes attributes = this.getAttributes(annotationMetadata);\nList<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\nconfigurations = this.removeDuplicates(configurations);\n//  2.获取排除的配置类（不需要自动配置的类）并删除\nSet<String> exclusions = this.getExclusions(annotationMetadata, attributes);\nthis.checkExcludedClasses(configurations, exclusions);\nconfigurations.removeAll(exclusions);\n// 3.  利用在spring工厂注册过的AutoConfigurationImportFilter过滤器对候选自动配置类进行过滤\nconfigurations = this.filter(configurations, autoConfigurationMetadata);\n// 4.  通过AutoConfigurationImportListener监听器触发自动配置导入事件\nthis.fireAutoConfigurationImportEvents(configurations, exclusions);\n// 5.  返回经过上述步骤得到的自动配置类的数组\nreturn new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);\n```\n主要流程如下：\n\n1. 获取候选的自动配置类列表\n2. 对候选自动配置类进行过滤\n3. 自动导入配置\n\n#### 获取候选的自动配置类列表\n我们重点看this.getCandidateConfigurations方法\n\n```java\n    protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {\n        List<String> configurations = SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());\n        Assert.notEmpty(configurations, \"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.\");\n        return configurations;\n    }\n```\n其中的getSpringFactoriesLoaderFactoryClass()方法正是返回EnableAutoConfiguration.class。\n\n该方法里面调用了SpringFactoriesLoader.loadFactoryNames()方法扫描加载引入的jar包中包含META-INF/spring.factories文件中的自动配置类。\n\n具体方法如下：\n```java\n    public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {\n        String factoryClassName = factoryClass.getName();\n        return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());\n    }\n\n    private static Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader) {\n        MultiValueMap<String, String> result = (MultiValueMap)cache.get(classLoader);\n        if (result != null) {\n            return result;\n        } else {\n            try {\n                Enumeration<URL> urls = classLoader != null ? classLoader.getResources(\"META-INF/spring.factories\") : ClassLoader.getSystemResources(\"META-INF/spring.factories\");\n                LinkedMultiValueMap result = new LinkedMultiValueMap();\n\n                while(urls.hasMoreElements()) {\n                    URL url = (URL)urls.nextElement();\n                    UrlResource resource = new UrlResource(url);\n                    Properties properties = PropertiesLoaderUtils.loadProperties(resource);\n                    Iterator var6 = properties.entrySet().iterator();\n\n                    while(var6.hasNext()) {\n                        Entry<?, ?> entry = (Entry)var6.next();\n                        String factoryClassName = ((String)entry.getKey()).trim();\n                        String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());\n                        int var10 = var9.length;\n\n                        for(int var11 = 0; var11 < var10; ++var11) {\n                            String factoryName = var9[var11];\n                            result.add(factoryClassName, factoryName.trim());\n                        }\n                    }\n                }\n\n                cache.put(classLoader, result);\n                return result;\n            } catch (IOException var13) {\n                throw new IllegalArgumentException(\"Unable to load factories from location [META-INF/spring.factories]\", var13);\n            }\n        }\n    }\n```\n从以上代码不难看出：\n\n程序将读取META-INF/spring.factories下的内容，这个文件的内容都是键值对的形式，因此将其存入到Map中返回。我们来看看spring.factories，它在spring-boot-autoconfigure这个jar包下：\n![image.png](http://oss.dblearn.cn/dbblog/20190929/7f16abcc2bb34f1291cdae07c68277c2.png)\n\n```java\n# Initializers\norg.springframework.context.ApplicationContextInitializer=\\\norg.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\\\norg.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener\n\n# Application Listeners\norg.springframework.context.ApplicationListener=\\\norg.springframework.boot.autoconfigure.BackgroundPreinitializer\n\n# Auto Configuration Import Listeners\norg.springframework.boot.autoconfigure.AutoConfigurationImportListener=\\\norg.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener\n\n# Auto Configuration Import Filters\norg.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\\\norg.springframework.boot.autoconfigure.condition.OnBeanCondition,\\\norg.springframework.boot.autoconfigure.condition.OnClassCondition,\\\norg.springframework.boot.autoconfigure.condition.OnWebApplicationCondition\n\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\n\n```\n之前传入了EnableAutoConfiguration类作为Key，这正是我们要找的自动配置的类，从文件可以看到，其包括Aop、WebMvc、Jpa、redis、jdbc等自动配置类，因此loadFactoryNames方法返回了配置文件里EnableAutoConfiguration对应的值，也就是自动配置的类\n\n#### 对候选自动配置类进行过滤\n当然上述自动配置类并不是都能自动配置进来的，里面会根据@Conditional等注解控制bean的创建行为。\n只有满足了条件才能自动注入相关的bean。我们追一下filter方法：\n```java\n    private List<String> filter(List<String> configurations, AutoConfigurationMetadata autoConfigurationMetadata) {\n        long startTime = System.nanoTime();\n        String[] candidates = StringUtils.toStringArray(configurations);\n        boolean[] skip = new boolean[candidates.length];\n        boolean skipped = false;\n        Iterator var8 = this.getAutoConfigurationImportFilters().iterator();\n\n        while(var8.hasNext()) {\n            AutoConfigurationImportFilter filter = (AutoConfigurationImportFilter)var8.next();\n            this.invokeAwareMethods(filter);\n            boolean[] match = filter.match(candidates, autoConfigurationMetadata);\n\n            for(int i = 0; i < match.length; ++i) {\n                if (!match[i]) {\n                    skip[i] = true;\n                    candidates[i] = null;\n                    skipped = true;\n                }\n            }\n        }\n\n        if (!skipped) {\n            return configurations;\n        } else {\n            List<String> result = new ArrayList(candidates.length);\n\n            int numberFiltered;\n            for(numberFiltered = 0; numberFiltered < candidates.length; ++numberFiltered) {\n                if (!skip[numberFiltered]) {\n                    result.add(candidates[numberFiltered]);\n                }\n            }\n\n            if (logger.isTraceEnabled()) {\n                numberFiltered = configurations.size() - result.size();\n                logger.trace(\"Filtered \" + numberFiltered + \" auto configuration class in \" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) + \" ms\");\n            }\n\n            return new ArrayList(result);\n        }\n    }\n\n```\n\n这里面有个关键方法：getAutoConfigurationImportFilters\n```java\n    protected List<AutoConfigurationImportFilter> getAutoConfigurationImportFilters() {\n        return SpringFactoriesLoader.loadFactories(AutoConfigurationImportFilter.class, this.beanClassLoader);\n    }\n```\n此处传入了一个过滤器AutoConfigurationImportFilter\n```java\n@FunctionalInterface\npublic interface AutoConfigurationImportFilter {\n    boolean[] match(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata);\n}\n```\n我们看一下这个类的作用：\n\n这是一个可以在spring.factories文件中注册的过滤器，用来限制自动配置类；该接口的设计目的是允许在读取字节码之前快速删除自动配置类。\n\n在上面的spring.factories文件中，我们可以看到：\n```java\n# Auto Configuration Import Filters\norg.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\\\norg.springframework.boot.autoconfigure.condition.OnBeanCondition,\\\norg.springframework.boot.autoconfigure.condition.OnClassCondition,\\\norg.springframework.boot.autoconfigure.condition.OnWebApplicationCondition\n```\n这里注册了过滤的条件：OnClassCondition,意思是当Classpath里有指定的类。\n\nSpring Boot提供的条件化注解有以下几种，当一个类上有以下某种注解时，需要满足此种注解时，才会自动配置。\n![image.png](http://oss.dblearn.cn/dbblog/20190929/ac3821f0d7d84db8b05d55e4ce55d134.png)\n\n以RabbitAutoConfiguration为例，其定义如下：\n```java\n@Configuration\n@ConditionalOnClass({RabbitTemplate.class, Channel.class})\n@EnableConfigurationProperties({RabbitProperties.class})\n@Import({RabbitAnnotationDrivenConfiguration.class})\npublic class RabbitAutoConfiguration {}\n```\n@ConditionalOnClass表示有某个类的情况下才会加载bean，这里需要同时有RabbitTemplate和Channel类，当所有条件满足的情况下，就能产生一个自动配置的bean对象，交由Spring容器来进行管理，这样就能在SpringBoot项目启动的时候实现自动配置。\n\n如果上述2个类提示找不到，可以在pom.xml引入以下依赖解决：\n```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n#### 自动导入默认配置\n\n有了自动配置类，那么自动配置的默认值在哪里呢？\n\n我们看到RabbitAutoConfiguration里有@EnableConfigurationProperties({RabbitProperties.class})，自然，默认的配置文件就是RabbitProperties\n```java\n@ConfigurationProperties(\n    prefix = \"spring.rabbitmq\"\n)\npublic class RabbitProperties {\n    private String host = \"localhost\";\n    private int port = 5672;\n    private String username = \"guest\";\n    private String password = \"guest\";\n    private final RabbitProperties.Ssl ssl = new RabbitProperties.Ssl();\n    private String virtualHost;\n    private String addresses;\n    @DurationUnit(ChronoUnit.SECONDS)\n    private Duration requestedHeartbeat;\n    private boolean publisherConfirms;\n    private boolean publisherReturns;\n    private Duration connectionTimeout;\n    private final RabbitProperties.Cache cache = new RabbitProperties.Cache();\n    private final RabbitProperties.Listener listener = new RabbitProperties.Listener();\n    private final RabbitProperties.Template template = new RabbitProperties.Template();\n    private List<RabbitProperties.Address> parsedAddresses;\n```\n而这些属性值我们同样可以配置在resources下的application.properties文件里面，而配置的这些属性将会覆盖RabbitProperties类里面配置的默认值。\n```java\n#自定义rabbitmq属性值\nspring.rabbitmq.host=198.168.121.1\nspring.rabbitmq.username=root\nspring.rabbitmq.password=123456\n```\n\n## 总结\n自动配置流程如下：\n1. 启动main函数,加载@SpringBootApplication\n2. @SpringBootApplication会拿到META-INF/spring.factories中需要自动配置的类的全名\n3. 根据@Conditional等注解对候选配置类进行过滤\n4. 把自动配置的类放入ImportSelector中,从而创建了自动配置类\n5. 根据@EnableConfigurationProperties实现了自动默认配置，当然也可以配置自定义的属性覆盖对应xxxProperties.class类里面的默认属性值，实现个性化配置。\n\n','<h2 id=\"-\">前言</h2>\n<p>SpringBoot的出现可谓是大大提升了Java的开发体验。它集成了大量常用的第三方库配置，Spring Boot应用中这些第三方库几乎可以是零配置的开箱即用，大部分的 Spring Boot 应用都只需要非常少量的配置代码（基于 Java 的配置），这让开发者能够更加专注于业务逻辑。那么SpringBoot的核心就在于其自动配置机制</p>\n<h2 id=\"springboot-\">SpringBoot 自动配置源码解析</h2>\n<p>首先从主类SpringBootApplicaion入手</p>\n<pre><code class=\"language-java\">@SpringBootApplication\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n\n}</code></pre>\n<p>点击类上的@SpringBootApplication：</p>\n<pre><code class=\"language-java\">@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication {\n...\n}</code></pre>\n<p>其中@EnableAutoConfiguration是关键所在：</p>\n<pre><code class=\"language-java\">@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration {\n    String ENABLED_OVERRIDE_PROPERTY = &quot;spring.boot.enableautoconfiguration&quot;;\n\n    Class&lt;?&gt;[] exclude() default {};\n\n    String[] excludeName() default {};\n}</code></pre>\n<p>@Import注解可以让普通的类导入到Spring的IOC容器中，由Spring进行管理。可以看到导入了一个AutoConfigurationImportSelector类。该类定义如下：</p>\n<pre><code class=\"language-java\">public class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered {\n    private static final AutoConfigurationImportSelector.AutoConfigurationEntry EMPTY_ENTRY = new AutoConfigurationImportSelector.AutoConfigurationEntry();\n    private static final String[] NO_IMPORTS = new String[0];\n    private static final Log logger = LogFactory.getLog(AutoConfigurationImportSelector.class);\n    private static final String PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE = &quot;spring.autoconfigure.exclude&quot;;\n    private ConfigurableListableBeanFactory beanFactory;\n    private Environment environment;\n    private ClassLoader beanClassLoader;\n    private ResourceLoader resourceLoader;\n\n    public AutoConfigurationImportSelector() {\n    }\n\n    public String[] selectImports(AnnotationMetadata annotationMetadata) {\n        if (!this.isEnabled(annotationMetadata)) {\n            return NO_IMPORTS;\n        } else {\n            AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);\n            AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);\n            return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());\n        }\n    }\n\n    protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {\n        if (!this.isEnabled(annotationMetadata)) {\n            return EMPTY_ENTRY;\n        } else {\n            AnnotationAttributes attributes = this.getAttributes(annotationMetadata);\n            List&lt;String&gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n            configurations = this.removeDuplicates(configurations);\n            Set&lt;String&gt; exclusions = this.getExclusions(annotationMetadata, attributes);\n            this.checkExcludedClasses(configurations, exclusions);\n            configurations.removeAll(exclusions);\n            configurations = this.filter(configurations, autoConfigurationMetadata);\n            this.fireAutoConfigurationImportEvents(configurations, exclusions);\n            return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);\n        }\n    }\n\n...</code></pre>\n<p>AutoConfigurationImportSelector类中有一个重要的selectImports方法，其定义如下：</p>\n<pre><code class=\"language-java\">    public String[] selectImports(AnnotationMetadata annotationMetadata) {\n        if (!this.isEnabled(annotationMetadata)) {\n            return NO_IMPORTS;\n        } else {\n            AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);\n            AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);\n            return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());\n        }\n    }\n</code></pre>\n<p>该类主体分为两步：</p>\n<p>1、 加载元数据配置文件获取AutoConfigurationMetadata</p>\n<pre><code class=\"language-java\">    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);\n\n    public static AutoConfigurationMetadata loadMetadata(ClassLoader classLoader) {\n        return loadMetadata(classLoader, &quot;META-INF/spring-autoconfigure-metadata.properties&quot;);\n    }\n\n    static AutoConfigurationMetadata loadMetadata(ClassLoader classLoader, String path) {\n        try {\n            Enumeration&lt;URL&gt; urls = classLoader != null ? classLoader.getResources(path) : ClassLoader.getSystemResources(path);\n            Properties properties = new Properties();\n\n            while(urls.hasMoreElements()) {\n                properties.putAll(PropertiesLoaderUtils.loadProperties(new UrlResource((URL)urls.nextElement())));\n            }\n\n            return loadMetadata(properties);\n        } catch (IOException var4) {\n            throw new IllegalArgumentException(&quot;Unable to load @ConditionalOnClass location [&quot; + path + &quot;]&quot;, var4);\n        }\n    }</code></pre>\n<p>加载META-INF/spring-autoconfigure-metadata.properties配置下的数据并返回配置元数据AutoConfigurationMetadata</p>\n<p>2、 传入配置元数据和注解元数据获取配置实体类：AutoConfigurationEntry</p>\n<pre><code class=\"language-java\">    protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {\n        if (!this.isEnabled(annotationMetadata)) {\n            return EMPTY_ENTRY;\n        } else {\n            AnnotationAttributes attributes = this.getAttributes(annotationMetadata);\n            List&lt;String&gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n            configurations = this.removeDuplicates(configurations);\n            Set&lt;String&gt; exclusions = this.getExclusions(annotationMetadata, attributes);\n            this.checkExcludedClasses(configurations, exclusions);\n            configurations.removeAll(exclusions);\n            configurations = this.filter(configurations, autoConfigurationMetadata);\n            this.fireAutoConfigurationImportEvents(configurations, exclusions);\n            return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);\n        }\n    }</code></pre>\n<p>这里是主要核心流程：分为以下几步：</p>\n<pre><code class=\"language-java\">//  1.根据元数据属性值获取候选配置类列表并删除重复项\nAnnotationAttributes attributes = this.getAttributes(annotationMetadata);\nList&lt;String&gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\nconfigurations = this.removeDuplicates(configurations);\n//  2.获取排除的配置类（不需要自动配置的类）并删除\nSet&lt;String&gt; exclusions = this.getExclusions(annotationMetadata, attributes);\nthis.checkExcludedClasses(configurations, exclusions);\nconfigurations.removeAll(exclusions);\n// 3.  利用在spring工厂注册过的AutoConfigurationImportFilter过滤器对候选自动配置类进行过滤\nconfigurations = this.filter(configurations, autoConfigurationMetadata);\n// 4.  通过AutoConfigurationImportListener监听器触发自动配置导入事件\nthis.fireAutoConfigurationImportEvents(configurations, exclusions);\n// 5.  返回经过上述步骤得到的自动配置类的数组\nreturn new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);</code></pre>\n<p>主要流程如下：</p>\n<ol>\n<li>获取候选的自动配置类列表</li>\n<li>对候选自动配置类进行过滤</li>\n<li>自动导入配置</li>\n</ol>\n<h4 id=\"-\">获取候选的自动配置类列表</h4>\n<p>我们重点看this.getCandidateConfigurations方法</p>\n<pre><code class=\"language-java\">    protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {\n        List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());\n        Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);\n        return configurations;\n    }</code></pre>\n<p>其中的getSpringFactoriesLoaderFactoryClass()方法正是返回EnableAutoConfiguration.class。</p>\n<p>该方法里面调用了SpringFactoriesLoader.loadFactoryNames()方法扫描加载引入的jar包中包含META-INF/spring.factories文件中的自动配置类。</p>\n<p>具体方法如下：</p>\n<pre><code class=\"language-java\">    public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) {\n        String factoryClassName = factoryClass.getName();\n        return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());\n    }\n\n    private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) {\n        MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);\n        if (result != null) {\n            return result;\n        } else {\n            try {\n                Enumeration&lt;URL&gt; urls = classLoader != null ? classLoader.getResources(&quot;META-INF/spring.factories&quot;) : ClassLoader.getSystemResources(&quot;META-INF/spring.factories&quot;);\n                LinkedMultiValueMap result = new LinkedMultiValueMap();\n\n                while(urls.hasMoreElements()) {\n                    URL url = (URL)urls.nextElement();\n                    UrlResource resource = new UrlResource(url);\n                    Properties properties = PropertiesLoaderUtils.loadProperties(resource);\n                    Iterator var6 = properties.entrySet().iterator();\n\n                    while(var6.hasNext()) {\n                        Entry&lt;?, ?&gt; entry = (Entry)var6.next();\n                        String factoryClassName = ((String)entry.getKey()).trim();\n                        String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());\n                        int var10 = var9.length;\n\n                        for(int var11 = 0; var11 &lt; var10; ++var11) {\n                            String factoryName = var9[var11];\n                            result.add(factoryClassName, factoryName.trim());\n                        }\n                    }\n                }\n\n                cache.put(classLoader, result);\n                return result;\n            } catch (IOException var13) {\n                throw new IllegalArgumentException(&quot;Unable to load factories from location [META-INF/spring.factories]&quot;, var13);\n            }\n        }\n    }</code></pre>\n<p>从以上代码不难看出：</p>\n<p>程序将读取META-INF/spring.factories下的内容，这个文件的内容都是键值对的形式，因此将其存入到Map中返回。我们来看看spring.factories，它在spring-boot-autoconfigure这个jar包下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190929/7f16abcc2bb34f1291cdae07c68277c2.png\" alt=\"image.png\"></p>\n<pre><code class=\"language-java\"># Initializers\norg.springframework.context.ApplicationContextInitializer=\\\norg.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\\\norg.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener\n\n# Application Listeners\norg.springframework.context.ApplicationListener=\\\norg.springframework.boot.autoconfigure.BackgroundPreinitializer\n\n# Auto Configuration Import Listeners\norg.springframework.boot.autoconfigure.AutoConfigurationImportListener=\\\norg.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener\n\n# Auto Configuration Import Filters\norg.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\\\norg.springframework.boot.autoconfigure.condition.OnBeanCondition,\\\norg.springframework.boot.autoconfigure.condition.OnClassCondition,\\\norg.springframework.boot.autoconfigure.condition.OnWebApplicationCondition\n\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\n</code></pre>\n<p>之前传入了EnableAutoConfiguration类作为Key，这正是我们要找的自动配置的类，从文件可以看到，其包括Aop、WebMvc、Jpa、redis、jdbc等自动配置类，因此loadFactoryNames方法返回了配置文件里EnableAutoConfiguration对应的值，也就是自动配置的类</p>\n<h4 id=\"-\">对候选自动配置类进行过滤</h4>\n<p>当然上述自动配置类并不是都能自动配置进来的，里面会根据@Conditional等注解控制bean的创建行为。\n只有满足了条件才能自动注入相关的bean。我们追一下filter方法：</p>\n<pre><code class=\"language-java\">    private List&lt;String&gt; filter(List&lt;String&gt; configurations, AutoConfigurationMetadata autoConfigurationMetadata) {\n        long startTime = System.nanoTime();\n        String[] candidates = StringUtils.toStringArray(configurations);\n        boolean[] skip = new boolean[candidates.length];\n        boolean skipped = false;\n        Iterator var8 = this.getAutoConfigurationImportFilters().iterator();\n\n        while(var8.hasNext()) {\n            AutoConfigurationImportFilter filter = (AutoConfigurationImportFilter)var8.next();\n            this.invokeAwareMethods(filter);\n            boolean[] match = filter.match(candidates, autoConfigurationMetadata);\n\n            for(int i = 0; i &lt; match.length; ++i) {\n                if (!match[i]) {\n                    skip[i] = true;\n                    candidates[i] = null;\n                    skipped = true;\n                }\n            }\n        }\n\n        if (!skipped) {\n            return configurations;\n        } else {\n            List&lt;String&gt; result = new ArrayList(candidates.length);\n\n            int numberFiltered;\n            for(numberFiltered = 0; numberFiltered &lt; candidates.length; ++numberFiltered) {\n                if (!skip[numberFiltered]) {\n                    result.add(candidates[numberFiltered]);\n                }\n            }\n\n            if (logger.isTraceEnabled()) {\n                numberFiltered = configurations.size() - result.size();\n                logger.trace(&quot;Filtered &quot; + numberFiltered + &quot; auto configuration class in &quot; + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) + &quot; ms&quot;);\n            }\n\n            return new ArrayList(result);\n        }\n    }\n</code></pre>\n<p>这里面有个关键方法：getAutoConfigurationImportFilters</p>\n<pre><code class=\"language-java\">    protected List&lt;AutoConfigurationImportFilter&gt; getAutoConfigurationImportFilters() {\n        return SpringFactoriesLoader.loadFactories(AutoConfigurationImportFilter.class, this.beanClassLoader);\n    }</code></pre>\n<p>此处传入了一个过滤器AutoConfigurationImportFilter</p>\n<pre><code class=\"language-java\">@FunctionalInterface\npublic interface AutoConfigurationImportFilter {\n    boolean[] match(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata);\n}</code></pre>\n<p>我们看一下这个类的作用：</p>\n<p>这是一个可以在spring.factories文件中注册的过滤器，用来限制自动配置类；该接口的设计目的是允许在读取字节码之前快速删除自动配置类。</p>\n<p>在上面的spring.factories文件中，我们可以看到：</p>\n<pre><code class=\"language-java\"># Auto Configuration Import Filters\norg.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\\\norg.springframework.boot.autoconfigure.condition.OnBeanCondition,\\\norg.springframework.boot.autoconfigure.condition.OnClassCondition,\\\norg.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</code></pre>\n<p>这里注册了过滤的条件：OnClassCondition,意思是当Classpath里有指定的类。</p>\n<p>Spring Boot提供的条件化注解有以下几种，当一个类上有以下某种注解时，需要满足此种注解时，才会自动配置。\n<img src=\"http://oss.dblearn.cn/dbblog/20190929/ac3821f0d7d84db8b05d55e4ce55d134.png\" alt=\"image.png\"></p>\n<p>以RabbitAutoConfiguration为例，其定义如下：</p>\n<pre><code class=\"language-java\">@Configuration\n@ConditionalOnClass({RabbitTemplate.class, Channel.class})\n@EnableConfigurationProperties({RabbitProperties.class})\n@Import({RabbitAnnotationDrivenConfiguration.class})\npublic class RabbitAutoConfiguration {}</code></pre>\n<p>@ConditionalOnClass表示有某个类的情况下才会加载bean，这里需要同时有RabbitTemplate和Channel类，当所有条件满足的情况下，就能产生一个自动配置的bean对象，交由Spring容器来进行管理，这样就能在SpringBoot项目启动的时候实现自动配置。</p>\n<p>如果上述2个类提示找不到，可以在pom.xml引入以下依赖解决：</p>\n<pre><code class=\"language-java\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n<h4 id=\"-\">自动导入默认配置</h4>\n<p>有了自动配置类，那么自动配置的默认值在哪里呢？</p>\n<p>我们看到RabbitAutoConfiguration里有@EnableConfigurationProperties({RabbitProperties.class})，自然，默认的配置文件就是RabbitProperties</p>\n<pre><code class=\"language-java\">@ConfigurationProperties(\n    prefix = &quot;spring.rabbitmq&quot;\n)\npublic class RabbitProperties {\n    private String host = &quot;localhost&quot;;\n    private int port = 5672;\n    private String username = &quot;guest&quot;;\n    private String password = &quot;guest&quot;;\n    private final RabbitProperties.Ssl ssl = new RabbitProperties.Ssl();\n    private String virtualHost;\n    private String addresses;\n    @DurationUnit(ChronoUnit.SECONDS)\n    private Duration requestedHeartbeat;\n    private boolean publisherConfirms;\n    private boolean publisherReturns;\n    private Duration connectionTimeout;\n    private final RabbitProperties.Cache cache = new RabbitProperties.Cache();\n    private final RabbitProperties.Listener listener = new RabbitProperties.Listener();\n    private final RabbitProperties.Template template = new RabbitProperties.Template();\n    private List&lt;RabbitProperties.Address&gt; parsedAddresses;</code></pre>\n<p>而这些属性值我们同样可以配置在resources下的application.properties文件里面，而配置的这些属性将会覆盖RabbitProperties类里面配置的默认值。</p>\n<pre><code class=\"language-java\">#自定义rabbitmq属性值\nspring.rabbitmq.host=198.168.121.1\nspring.rabbitmq.username=root\nspring.rabbitmq.password=123456</code></pre>\n<h2 id=\"-\">总结</h2>\n<p>自动配置流程如下：</p>\n<ol>\n<li>启动main函数,加载@SpringBootApplication</li>\n<li>@SpringBootApplication会拿到META-INF/spring.factories中需要自动配置的类的全名</li>\n<li>根据@Conditional等注解对候选配置类进行过滤</li>\n<li>把自动配置的类放入ImportSelector中,从而创建了自动配置类</li>\n<li>根据@EnableConfigurationProperties实现了自动默认配置，当然也可以配置自定义的属性覆盖对应xxxProperties.class类里面的默认属性值，实现个性化配置。</li>\n</ol>\n',107,12,2,NULL,'2019-09-29 15:01:34','2019-09-29 16:43:47',0,'9,24,39',1,0),(48,'Java集合08——Hashtable','Hashtable是一个散列表，它存储的内容是键值对(key-value)映射','Bobbi','## Hashtable简介\n```java\npublic class Hashtable<K,V>\n    extends Dictionary<K,V>\n    implements Map<K,V>, Cloneable, java.io.Serializable {\n```\n\nHashtable 继承于Dictionary，实现了Map、Cloneable、java.io.Serializable接口。和HashMap一样，Hashtable 也是一个散列表，它存储的内容是键值对(key-value)映射。\n\nHashtable 的函数都是同步的，这意味着它是线程安全的。它的key、value都不可以为null。此外，Hashtable中的映射不是有序的。\n\nHashtable 的实例有两个参数影响其性能：初始容量 和 加载因子(初始0.75)。初始容量 就是哈希表创建时的容量。加载因子 是对哈希表在其容量自动增加之前可以达到多满的一个尺度。\n\n## Hashtable数据结构\n![image.png](http://oss.dblearn.cn/dbblog/20191013/6753410a810148ef914ee62166eba540.png)\n从图中可以看出： \n\n1、Hashtable继承于Dictionary类，实现了Map接口。Map是\"key-value键值对\"接口，Dictionary是声明了操作\"键值对\"函数接口的抽象类。 \n\n2、Hashtable是通过\"拉链法\"实现的哈希表。它包括几个重要的成员变量：table, count, threshold, loadFactor, modCount。\n\n- table是一个Entry[]数组类型，而Entry实际上就是一个单向链表。哈希表的\"key-value键值对\"都是存储在Entry数组中的。 \n- count是Hashtable的大小，它是Hashtable保存的键值对的数量。 \n- threshold是Hashtable的阈值，用于判断是否需要调整Hashtable的容量。threshold的值=\"容量*加载因子\"。\n- loadFactor就是加载因子。 \n- modCount是用来实现fail-fast机制的\n\n## Hashtable构造函数\n```java\n// 默认构造函数。\npublic Hashtable() \n\n// 指定“容量大小”的构造函数\npublic Hashtable(int initialCapacity) \n\n// 指定“容量大小”和“加载因子”的构造函数\npublic Hashtable(int initialCapacity, float loadFactor) \n\n// 包含“子Map”的构造函数\npublic Hashtable(Map<? extends K, ? extends V> t)\n```\n\n## Hashtable API\n```java\n    // 清除此散列表，使其不包含键。\n    void	clear()\n    // 创建这个散列表的浅拷贝。\n    Object	clone()\n    // 尝试计算指定键的映射及其当前映射的值\n    V	compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)\n    // 如果指定的键尚未与某个值相关联（或映射到 null ），则尝试使用给定的映射函数计算其值，并将其输入到此映射中\n    V	computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)\n    // 如果指定的键的值存在且非空，则尝试计算给定密钥及其当前映射值的新映射。\n    V	computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)\n    // 测试一些键映射到这个哈希表中的指定值。\n    boolean	contains(Object value)\n    // 测试指定的对象是否在此哈希表中的键。\n    boolean	containsKey(Object key)\n    // 如果此哈希表将一个或多个键映射到此值，则返回true。\n    boolean	containsValue(Object value)\n    // 返回此散列表中值的枚举。\n    Enumeration<V>	elements()\n    // 返回此地图中包含的映射的Set视图。\n    Set<Map.Entry<K,V>>	entrySet()\n    // 返回到指定键所映射的值，或 null如果此映射包含该键的映射。\n    V	get(Object key)\n    // 返回到指定键所映射的值，或 defaultValue如果此映射包含该键的映射。\n    V	getOrDefault(Object key, V defaultValue)\n    // 判断是否为空。\n    boolean	isEmpty()\n    // 返回此散列表中键的枚举。\n    Enumeration<K>	keys()\n    // 返回此地图中包含的键的Set视图。\n    Set<K>	keySet()\n    // 如果指定的键尚未与值相关联或与null相关联，则将其与给定的非空值相关联。\n    V	merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)\n    // 将指定的 key映射到此 key value中指定的value。\n    V	put(K key, V value)\n    // 将所有从指定地图的映射复制到此散列表。\n    void	putAll(Map<? extends K,? extends V> t)\n    // 如果指定的键尚未与值相关联（或映射到 null ）将其与给定值相关联并返回 null ，否则返回当前值。\n    V	putIfAbsent(K key, V value)\n    // 增加这个散列表的内部重组能力，从而更有效地适应和访问其条目。\n    protected void	rehash()\n    // 从此散列表中删除键（及其对应的值）。\n    V	remove(Object key)\n    // 仅当指定的密钥当前映射到指定的值时删除该条目。\n    boolean	remove(Object key, Object value)\n    // 只有当目标映射到某个值时，才能替换指定键的条目。\n    V	replace(K key, V value)\n    // 仅当当前映射到指定的值时，才能替换指定键的条目。\n    boolean	replace(K key, V oldValue, V newValue)\n    // 将每个条目的值替换为对该条目调用给定函数的结果，直到所有条目都被处理或该函数抛出异常。\n    void	replaceAll(BiFunction<? super K,? super V,? extends V> function)\n    // 返回此哈希表中的键数。\n    int	size()\n    // 返回此地图中包含的值的Collection视图。\n    Collection<V>	values()\n```\n\n','<h2 id=\"hashtable-\">Hashtable简介</h2>\n<pre><code class=\"language-java\">public class Hashtable&lt;K,V&gt;\n    extends Dictionary&lt;K,V&gt;\n    implements Map&lt;K,V&gt;, Cloneable, java.io.Serializable {</code></pre>\n<p>Hashtable 继承于Dictionary，实现了Map、Cloneable、java.io.Serializable接口。和HashMap一样，Hashtable 也是一个散列表，它存储的内容是键值对(key-value)映射。</p>\n<p>Hashtable 的函数都是同步的，这意味着它是线程安全的。它的key、value都不可以为null。此外，Hashtable中的映射不是有序的。</p>\n<p>Hashtable 的实例有两个参数影响其性能：初始容量 和 加载因子(初始0.75)。初始容量 就是哈希表创建时的容量。加载因子 是对哈希表在其容量自动增加之前可以达到多满的一个尺度。</p>\n<h2 id=\"hashtable-\">Hashtable数据结构</h2>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191013/6753410a810148ef914ee62166eba540.png\" alt=\"image.png\">\n从图中可以看出： </p>\n<p>1、Hashtable继承于Dictionary类，实现了Map接口。Map是&quot;key-value键值对&quot;接口，Dictionary是声明了操作&quot;键值对&quot;函数接口的抽象类。 </p>\n<p>2、Hashtable是通过&quot;拉链法&quot;实现的哈希表。它包括几个重要的成员变量：table, count, threshold, loadFactor, modCount。</p>\n<ul>\n<li>table是一个Entry[]数组类型，而Entry实际上就是一个单向链表。哈希表的&quot;key-value键值对&quot;都是存储在Entry数组中的。 </li>\n<li>count是Hashtable的大小，它是Hashtable保存的键值对的数量。 </li>\n<li>threshold是Hashtable的阈值，用于判断是否需要调整Hashtable的容量。threshold的值=&quot;容量*加载因子&quot;。</li>\n<li>loadFactor就是加载因子。 </li>\n<li>modCount是用来实现fail-fast机制的</li>\n</ul>\n<h2 id=\"hashtable-\">Hashtable构造函数</h2>\n<pre><code class=\"language-java\">// 默认构造函数。\npublic Hashtable() \n\n// 指定“容量大小”的构造函数\npublic Hashtable(int initialCapacity) \n\n// 指定“容量大小”和“加载因子”的构造函数\npublic Hashtable(int initialCapacity, float loadFactor) \n\n// 包含“子Map”的构造函数\npublic Hashtable(Map&lt;? extends K, ? extends V&gt; t)</code></pre>\n<h2 id=\"hashtable-api\">Hashtable API</h2>\n<pre><code class=\"language-java\">    // 清除此散列表，使其不包含键。\n    void    clear()\n    // 创建这个散列表的浅拷贝。\n    Object    clone()\n    // 尝试计算指定键的映射及其当前映射的值\n    V    compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)\n    // 如果指定的键尚未与某个值相关联（或映射到 null ），则尝试使用给定的映射函数计算其值，并将其输入到此映射中\n    V    computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)\n    // 如果指定的键的值存在且非空，则尝试计算给定密钥及其当前映射值的新映射。\n    V    computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)\n    // 测试一些键映射到这个哈希表中的指定值。\n    boolean    contains(Object value)\n    // 测试指定的对象是否在此哈希表中的键。\n    boolean    containsKey(Object key)\n    // 如果此哈希表将一个或多个键映射到此值，则返回true。\n    boolean    containsValue(Object value)\n    // 返回此散列表中值的枚举。\n    Enumeration&lt;V&gt;    elements()\n    // 返回此地图中包含的映射的Set视图。\n    Set&lt;Map.Entry&lt;K,V&gt;&gt;    entrySet()\n    // 返回到指定键所映射的值，或 null如果此映射包含该键的映射。\n    V    get(Object key)\n    // 返回到指定键所映射的值，或 defaultValue如果此映射包含该键的映射。\n    V    getOrDefault(Object key, V defaultValue)\n    // 判断是否为空。\n    boolean    isEmpty()\n    // 返回此散列表中键的枚举。\n    Enumeration&lt;K&gt;    keys()\n    // 返回此地图中包含的键的Set视图。\n    Set&lt;K&gt;    keySet()\n    // 如果指定的键尚未与值相关联或与null相关联，则将其与给定的非空值相关联。\n    V    merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)\n    // 将指定的 key映射到此 key value中指定的value。\n    V    put(K key, V value)\n    // 将所有从指定地图的映射复制到此散列表。\n    void    putAll(Map&lt;? extends K,? extends V&gt; t)\n    // 如果指定的键尚未与值相关联（或映射到 null ）将其与给定值相关联并返回 null ，否则返回当前值。\n    V    putIfAbsent(K key, V value)\n    // 增加这个散列表的内部重组能力，从而更有效地适应和访问其条目。\n    protected void    rehash()\n    // 从此散列表中删除键（及其对应的值）。\n    V    remove(Object key)\n    // 仅当指定的密钥当前映射到指定的值时删除该条目。\n    boolean    remove(Object key, Object value)\n    // 只有当目标映射到某个值时，才能替换指定键的条目。\n    V    replace(K key, V value)\n    // 仅当当前映射到指定的值时，才能替换指定键的条目。\n    boolean    replace(K key, V oldValue, V newValue)\n    // 将每个条目的值替换为对该条目调用给定函数的结果，直到所有条目都被处理或该函数抛出异常。\n    void    replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)\n    // 返回此哈希表中的键数。\n    int    size()\n    // 返回此地图中包含的值的Collection视图。\n    Collection&lt;V&gt;    values()</code></pre>\n',0,0,2,NULL,'2019-10-13 09:48:32','2019-10-13 09:58:37',0,'9,11,38',0,0),(49,'Java多线程JUC锁09——AbstractQueuedSynchronizer','AQS为继承它的实现类提供基础设施，如构建等待队列、控制同步状态等；其内部除了提供并发操作的核心方法以及等待队列操作外，还提供了一些模板方法让子类自己实现，AQS只关注内部公共方法实现，并不关心外部不同模式的实现。','Bobbi','## AQS的基础设计\n> AbstractQueuedSynchronizer简称为AQS\n\n```java\npublic abstract class AbstractQueuedSynchronizer\n    extends AbstractOwnableSynchronizer\n    implements java.io.Serializable {\n```\nAQS是一个抽象类，继承自AbstractOwnableSynchronizer类，并实现了Serializable接口。虽然AQS是一个抽象类，但其内部并没有抽象方法，这是典型的模板设计模式的应用。AQS作为一个基础组件为继承它的实现类提供基础设施，如构建等待队列、控制同步状态等；其内部除了提供并发操作的核心方法以及等待队列操作外，还提供了一些模板方法让子类自己实现，AQS只关注内部公共方法实现，并不关心外部不同模式的实现。\n\n\n通过这种方式，AQS的实现类可以根据自身需求来完成共享模式或独占模式的同步功能；如实现独占模式的同步功能，只需要重写tryAcquire()方法和tryRelease()方法即可；而实现共享模式的同步功能，只需要重写tryAcquireShared()方法和tryReleaseShared()方法。无论是共享模式还是独占模式，基础实现都是基于AQS，不同的是用于同步状态逻辑的控制模板方法的具体实现。AQS提供给独占模式和共享模式的模板方法如下：\n\n```java\n/**\n     * 尝试获取独占锁\n     *\n     */\n    protected boolean tryAcquire(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 尝试释放独占锁\n     */\n    protected boolean tryRelease(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 尝试获取共享锁\n     *\n     */\n    protected int tryAcquireShared(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 尝试释放共享锁\n     *\n     */\n    protected boolean tryReleaseShared(int arg) {\n        throw new UnsupportedOperationException();\n    }\n```\n\n同时AQS内部还提供了一个int类型的state成员变量，用于控制同步状态；state变量由volatile内存语义修饰，同时compareAndSetState()方法还实现了对state变量的CAS原子性修改操作，源码如下：\n\n```java\n// 同步器状态标识，存在volatile内存语义\nprivate volatile int state;\n\n// 获取当前同步器状态标识\nprotected final int getState() {\n    return state;\n}\n\n// 设置同步器状态标识\nprotected final void setState(int newState) {\n    state = newState;\n}\n\n// 原子性操作，当state的值为expect，将其更新为update，更新成功返回true\nprotected final boolean compareAndSetState(int expect, int update) {\n    return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n}\n```\n\n## 等待队列模型\n在正式讲解AQS类之前，我们还需要了解在AQS中存在的重要的数据结构。\n\nAQS类的内部维护了一个等待队列来存放所有的未获取到同步状态的线程，该队列实际上是以双向链表的数据结构实现的，链表的节点是AQS类的内部类Node的一个实例，我们首先关注Node类的实现，这也是深入理解AQS类实现的首要条件。\n\n其实Node类的实现非常简单，它的源代码如下：\n\n```java\n// 等待队列节点类\nstatic final class Node {\n    /*********** 以下属性用于标识队列的类型：共享或者独占 ***********/\n    // 表明是共享模式节点\n    static final Node SHARED = new Node();\n    // 表明是独占（排他）模式节点\n    static final Node EXCLUSIVE = null;\n\n    /*********** 以下属性用于节点的等待状态，也即是成员变量waitStatus的值 ***********/\n    // 标识当前Node对应的线程已处于结束状态，即线程已经取消了获取同步状态的请求\n    static final int CANCELLED = 1;\n    // 该值用于标识当前节点的后继节点对应的线程需要被唤醒\n    static final int SIGNAL = -1;\n    // 标识条件状态；指示线程正在等待状态\n    static final int CONDITION = -2;\n    // 在共享模式中使用时表示获得的同步状态会被传播；\n    static final int PROPAGATE = -3;\n\n    /*********** 等待状态，可能为CANCELLED、SIGNAL、CONDITION、PROPAGATE ***********/\n    volatile int waitStatus;\n\n    /*********** 维护双向链表的前后指针 ***********/\n    // 指向前驱节点\n    volatile Node prev;\n    // 指向后继节点\n    volatile Node next;\n\n    /*********** 存放尝试获取同步状态的线程 ***********/\n    volatile Thread thread;\n\n    // 等待队列的后继节点\n    Node nextWaiter;\n\n    // 是否为共享模式\n    final boolean isShared() {\n        return nextWaiter == SHARED;\n    }\n\n    // 获取前驱节点\n    final Node predecessor() throws NullPointerException {\n        Node p = prev;\n        if (p == null)\n            throw new NullPointerException();\n        else\n            return p;\n    }\n\n    // 无参构造\n    Node() {\n    }\n\n    // 有参构造\n    Node(Thread thread, Node mode) {\n        this.nextWaiter = mode;\n        this.thread = thread;\n    }\n\n    // 有参构造\n    Node(Thread thread, int waitStatus) {\n        this.waitStatus = waitStatus;\n        this.thread = thread;\n    }\n}\n```\n\n每个Node类的实例代表了等待队列中一个节点，而每个节点中包装了一个线程（即thread成员变量）。AQS类设计为可以让多个线程同时并发地请求同步状态，因此它需要处理在竞争情况下没有获取到同步状态的线程，而处理方式正是使用Node实例来包装这些线程，然后装入等待队列，等到合适的时机再将其唤醒。\n\n### 等待队列模型图\n```java\n// 指向队列头节点\nprivate transient volatile Node head;\n// 指向队列尾节点\nprivate transient volatile Node tail;\n```\n从变量名就可以得知，head将指向等待队列的头节点，而tail则会指向等待队列的尾节点。有了上面的理解，我们就可以推断出等待队列的大致结构，示意图如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191016/739793731fb5434794fea4d267b2468b.png)\n\n## 同步状态的竞争和获取\n由于AQS设计为一个抽象类，我们需要从它的实现类来分析具体的流程实现，这里以公平模式下的独占锁ReentrantLock为例。作为日常使用次数最多的独占锁，ReentrantLock中的内部类Sync即为其使用的同步器，继承了AQS类：\n```java\npublic class ReentrantLock implements Lock, java.io.Serializable {\n    ...\n    private final Sync sync;\n    abstract static class Sync extends AbstractQueuedSynchronizer {\n        ...\n    }\n    ...\n}\n```\n但Sync也是一个抽象类，真正的同步器是由Sync的两个子类实现的，以分别实现公平锁和非公平锁两种机制：\n\n```java\n// 公平同步器\nstatic final class FairSync extends Sync {\n    ...\n}\n// 非公平同步器\nstatic final class NonfairSync extends Sync {\n    ...\n}\n```\n默认情况下，ReentrantLock使用的是非公平同步器NonfairSync来控制同步操作，另外通过给构造方法传入true可以指定使用公平同步器：\n\n```java\npublic ReentrantLock() {\n    sync = new NonfairSync();\n}\n\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\n在之前使用ReentrantLock时，调用ReentrantLock实例的lock()方法可以实现上锁，其实是调用了同步器Sync的lock()方法:\n```java\npublic void lock() {\n        sync.lock();\n    }\n```\n\n这里我们以FairSync为研究对象：\n\n```java\nstatic final class FairSync extends Sync {\n    private static final long serialVersionUID = -3000897897090466540L;\n    final void lock() {\n        acquire(1);\n    }\n    ...\n}\n```\nlock方法里的acquire(1)，其实调用了父类AQS的acquire()方法，传入的参数为1；AQS类的acquire()方法源码如下：\n```java\n    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n```\n源码解释：\n\n方法里的tryAcquire()会尝试获取同步状态，如果没有获取到，将会调用addWaiter()方法将当前线程包装为一个Node节点加入等待队列，然后对节点调用acquireQueue()方法使其进入自旋尝试获取同步的状态，加入成功后将中断当前线程\n\n\n### tryAcquire()方法\n从AQS的acquire()方法源码可以看出，这里的if的判断条件存在三种操作：tryAcquire()、addWaiter()及acquireQueued()；当tryAcquire()的返回值为false时才会执行后面两个方法。\n\n我们先考察tryAcquire()；AQS的tryAcquire()方法体直接抛出UnsupportedOperationException异常，而在FairSync同步器中重写的tryAcquire()方法的源码如下:\n\n```java\n// AQS的tryAcquire()方法\nprotected boolean tryAcquire(int arg) {\n    throw new UnsupportedOperationException();\n}\n\n// FairSync中重写的tryAcquire()方法\nprotected final boolean tryAcquire(int acquires) {\n    // 获取当前线程\n    final Thread current = Thread.currentThread();\n    // 获取state\n    int c = getState();\n    if (c == 0) {\n        /**\n         * 此时state为0，表示没有线程持有锁。\n         * 先调用hasQueuedPredecessors()查看是否有线程已经等待了很久，\n         * 如果没有，就是用CAS操作修改state为acquires的值，\n         * 修改成功后设置独占线程为当前线程，并返回true表示获取锁成功，\n         * 如果修改失败，说明可能正好被其他的某个线程抢先修改了。\n         */\n        if (!hasQueuedPredecessors() &&\n                compareAndSetState(0, acquires)) {\n            // 设置独占线程为当前线程\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    } else if (current == getExclusiveOwnerThread()) {\n        /**\n         * state不为0，且当前线程就为拥有锁的线程，\n         * 表示是以重入的方式在获取锁，\n         * 将state修改为state + acquires，并返回true表示获取锁成功。\n         */\n        int nextc = c + acquires;\n        if (nextc < 0)\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    /**\n     * 返回false，代表获取锁失败；能走到这里存在两种情况：\n        - 虽然是第一个尝试获取锁的线程，但修改state失败，即可能正好被其他的某个线程抢先修改了；\n        - 不是第一个尝试获取锁的线程，且也不是重入的方式获取。\n     */\n    return false;\n}\n```\nFairSync重写的方法体其实比较简单，其中hasQueuedPredecessors()方法用于查看是否有线程已经等待了很久，这是为了实现公平性需要做的工作；tryAcquire()的返回值存在三种不同的结果。首先获取了AQS提供的同步状态变量state，并判断其是否为0，如果为0表示此时还没有线程获取过同步状态，因此将尝试使用CAS操作将state更新为传入的acquires的值，如果修改成功，就使用setExclusiveOwnerThread()方法将记录独占线程的变量exclusiveOwnerThread设置为当前线程，并返回true代表获取同步状态成功；如果修改state失败则会直接返回false代表获取同步状态失败。\n\n其中setExclusiveOwnerThread()方法来自于AQS的父类AbstractOwnableSynchronizer，相关源码如下：\n\n```java\n// 拥有独占模式同步状态的线程\nprivate transient Thread exclusiveOwnerThread;\n\n// 设置拥有独占模式同步状态的线程\nprotected final void setExclusiveOwnerThread(Thread t) {\n    exclusiveOwnerThread = t;\n}\n\n// 获取拥有独占模式同步状态的线程\nprotected final Thread getExclusiveOwnerThread() {\n    return exclusiveOwnerThread;\n}\n```\n当state不为0时，还会判断getExclusiveOwnerThread()得到的拥有独占模式同步状态的线程是否就是当前线程；这一步的判断是为了可重入而实现的，当同一个线程多次尝试获取同步状态，理应让其顺利获取；因此在if (getExclusiveOwnerThread() == currentThread)分支中，会设置state值为state + acquires，并返回true表示获取同步状态成功。\n\n当tryAcquire()方法的返回值为true时代表获取锁成功，因此整个过程就结束了；但当tryAcquire()方法的返回值为false时则表示获取锁失败，这时才会调用\nacquireQueued(addWaiter(Node.EXCLUSIVE), 1)；\n### addWaiter()\n下面先分析addWaiter(Node.EXCLUSIVE)，它的源码如下：\n```java\n/**\n * 以当前线程及给定的模式（共享或独占）创建一个入队节点\n *\n * @param mode 可以是Node.EXCLUSIVE（独占模式）或Node.SHARED（共享模式）\n * @return 新节点\n */\nprivate Node addWaiter(Node mode) {\n    // 创建新节点\n    Node node = new Node(Thread.currentThread(), mode);\n    // Try the fast path of enq; backup to full enq on failure\n    // 尝试快速在尾部添加新节点\n    Node pred = tail;\n    if (pred != null) {\n        /**\n         * 队列不为空，队中已有节点。\n         * 先将node的前驱设置为当前尾节点（即tail变量指向的节点），\n         * 然后将tail变量指向node，此时node就变为尾节点了，\n         * 如果设置成功，就将原来尾节点的后继节点设置为node，如下图：\n         * 原始：head <-> node(1) <-> ... <-> node(n-1) <-> node(n) <-> tail\n         * 1. head <-> node(1) <-> ... <-> node(n) <-> tail(pred) <- node(new)\n         * 2. head <-> node(1) <-> ... <-> node(n) <-> node(pred) <-> tail(new)\n         */\n        node.prev = pred;\n        if (compareAndSetTail(pred, node)) {\n            pred.next = node;\n            // 返回新节点\n            return node;\n        }\n    }\n    /**\n     * 快速添加尾新节点失败，\n     * 说明队列为空，或者由于有并发线程在竞争入队，导致CAS修改tail失败，\n     * 那么进入enq，以自旋方式修改。\n     */\n    enq(node);\n    return node;\n}\n```\naddWaiter(Node.EXCLUSIVE)调用后，会以当前线程为参数使用Node类的构造方法创建一个独占模式（由于mode参数传入的是Node.EXCLUSIVE）的Node节点；然后尝试在等待队列的尾部插入该节点。\n\n上面分析过等待队列的结构，这里进行分情况讲解。\n1. 默认情况下，AQS的head和tail成员变量都为空，也即是表示整个等待队列为空。此时上面addWaiter()代码中会直接调用enq(node)添加节点，enq()方法源码如下：\n```java\n/**\n * Node节点入队\n * 节点将通过自旋的方式插入到队列尾部\n *\n * @param node 需要入队的节点\n * @return 节点的前驱\n */\nprivate Node enq(final Node node) {\n    for (; ; ) {\n        Node t = tail;\n        if (t == null) { // Must initialize\n            if (compareAndSetHead(new Node()))\n                /**\n                 * 当tail为空，表示此时队列中没有节点，\n                 * 就将一个空节点设置为头节点，\n                 * 并且将尾节点也指向头节点。\n                 */\n                tail = head;\n        } else {\n            /**\n             * 否则队列中已有节点\n             * 先将node的前驱设置为尾节点\n             * 然后将尾节点设置为node\n             * 如果设置成功，就将原来尾节点的后继节点设置为node，如下图：\n             * 原始：head <-> node(1) <-> ... <-> node(n-1) <-> node(n) <-> tail\n             * 1. head <-> node(1) <-> ... <-> node(n) <-> tail(t) <- node(new)\n             * 2. head <-> node(1) <-> ... <-> node(n) <-> node(t) <-> tail(new)\n             */\n            node.prev = t;\n            if (compareAndSetTail(t, node)) {\n                t.next = node;\n                // 返回原来的尾节点，即现在尾节点的前驱节点\n                return t;\n            }\n        }\n    }\n}\n```\n注意上述的方法内部其实是一个for无限循环，只有在存在返回值的时候才会结束。因此当由于等待队列为空的原因而进入了enq()方法后，会执行if (t == null)为true的分支，即CAS方式设置等待队列头节点指针变量head为一个空节点，然后将tail也指向该节点。需要注意的是，由于Node的默认构造方法创建的节点的waitStatus变量值为0，因此此时head头节点的waitStatus即为0。\n\n2. 当这一次循环结束，由于此时head和tail都不为空了，下次循环就会进入else分支，先将传入的新节点的前驱指针指向当前tail指向的节点，然后以CAS方式修改tail指向新节点，将原来tail指向的节点的后继指针指向新节点，最后返回原来的尾节点。如果修改不成功，将在下次循环继续修改，自旋直到修改成功后返回。\n\n### acquireQueued()\nenq()方法结束之后，回到addWaiter()中，addWaiter()会将刚刚添加到等待队列的节点返回然后结束，此时就到了acquireQueued(addWaiter(Node.EXCLUSIVE), 1)的过程了，acquireQueued()方法的源码如下：\n```java\n/**\n * 在独占模式下，挂起刚刚被添加到等待队列的节点\n *\n * @param node 添加到等待队列的节点\n * @param arg  acquire操作的数值\n * @return 如果在等待期间线程发生了中断，返回值将为true，否则为false\n */\nfinal boolean acquireQueued(final Node node, int arg) {\n    boolean failed = true;\n    try {\n        // 记录当前线程在自旋等待期间是否存在被中断操作\n        boolean interrupted = false;\n        // 这里会让节点进入自旋状态\n        for (; ; ) {\n            /**\n             * 获取自己的前驱节点\n             * 如果前驱节点为head节点，就可以尝试获取锁\n             * 由于所有等待的节点都会调用该方法进入自旋\n             * 而只有前驱节点为head节点的等待节点才能尝试获取锁\n             * 这样就能保证永远是队首的节点获取锁\n             */\n            final Node p = node.predecessor();\n            if (p == head && tryAcquire(arg)) {\n                // 获取锁成功\n                setHead(node);\n                p.next = null; // help GC\n                failed = false;\n                return interrupted;\n            }\n            // 执行到此处，说明上面尝试获取锁失败了，因此可以尝试将当前线程挂起\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n\n```\nacquireQueued()方法的主要作用是用于挂起线程，但在挂起线程之前，它额外做了两件事情。首先在挂起之前，如果当前节点的前驱节点是头节点，acquireQueued()方法会调用tryAcquire()重新尝试获取锁，这一步其实是为了之后的唤醒操作而准备的；在acquireQueued()方法后面的代码中会根据情况挂起线程，一旦某个线程挂起，该线程就会阻塞在acquireQueued()方法内直到被唤醒；因此acquireQueued()将方法体的大部分代码都放置于无限循环体内，这样某个线程被唤醒后就会重复执行循环体前面获取锁的动作，获取成功就继续执行，获取失败会被再次挂起。\n\nacquireQueued()方法在挂起操作前额外做的第二件事情，是检查前驱节点的waitStatus状态，这部分代码由shouldParkAfterFailedAcquire()方法体现，代码如下：\n```java\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    // 获取前驱节点的waitStatus\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL) // SINGAL为-1\n        /*\n         * This node has already set status asking a release to signal it, so it can safely park.\n         * 如果前驱节点的waitStatus为SIGNAL，表示当前节点已经设置了要求释放锁的线程将其唤醒的状态，可以安全阻塞\n         * 上面的解释非常绕，用通俗的话来讲，当一个节点的前驱节点的waitStatus为SIGNAL时，前驱节点在释放锁时会将其唤醒\n         */\n        return true;\n    if (ws > 0) {\n        /*\n         * \n         * 如果前驱节点的waitStatus大于0，表示前驱节点已经取消了排队等待，\n         * 尝试向前查找一个waitStatus不大于0的节点作为当前节点的前驱节点，并把该节点的后继节点设置为当前节点，\n         * 上面向前查找的过程即do ... while循环的作用，\n         * 这个不断向前查找的过程，可以将当前节点前面所有取消了排队的节点全部剔除略过，减小链表的长度\n         */\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus > 0);\n        pred.next = node;\n    } else {\n        /*\n         * 当执行到这里，前驱节点的waitStatus只会为0，CONDITION（-2）、PROPAGATE（-3），\n         * 此时则尝试将前驱节点的waitStatus状态设置为SIGNAL，\n         * 做这一步操作，主要是用于在后面某个线程释放锁时，\n         * 如果该线程的waitStatus状态为SIGNAL，且其为等待队列的头节点，就会尝试唤醒其后继节点。\n         */\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}\n```\n\nshouldParkAfterFailedAcquire()方法中，分为三种情况：\n1. 只有当前节点的前驱节点的waitStatus状态值为SINGAL（值为-1）的情况下才会返回true，此时当前节点包装的线程才会执行挂起操作；\n2. 当前驱节点waitStatus状态值大于0时，表示此时前驱节点已经取消了排队，因此需要为当前节点往前寻找一个waitStatus状态正常的节点作前驱节点（这一步在后面唤醒会有用处，此时若无法理解可以不必关注）；\n3. 如果当前节点的前驱节点的waitStatus状态值为CONDITION（值为-2）或PROPAGATE（值为-3），则使用CAS方式修改前驱节点的waitStatus状态值为SIGNAL。\n\n上面这些操作的作用，其实是保证在被挂起的线程能在未来正确的被唤醒，因为在公平模式的独占锁中，被唤醒的线程永远是同步队列第一个节点的所包装的线程。\n\n当shouldParkAfterFailedAcquire()返回值为true时，就代表此时可以安全地挂起线程了，因此会继续执行parkAndCheckInterrupt()方法，源码如下：\n```java\nprivate final boolean parkAndCheckInterrupt() {\n    // 使用LockSupport挂起线程\n    // 执行到这里之后，线程会被挂起阻塞，等待被唤醒\n    LockSupport.park(this);\n    return Thread.interrupted();\n}\n```\nparkAndCheckInterrupt()方法使用LockSupport.park()来挂起线程，使用的是Unsafe类相关的方法，源码如下：\n```java\npublic static void park(Object blocker) {\n        Thread t = Thread.currentThread();\n        setBlocker(t, blocker);\n        UNSAFE.park(false, 0L);\n        setBlocker(t, null);\n    }\n```\nparkAndCheckInterrupt()方法的返回值为Thread.interrupted()，用于告诉acquireQueued()方法线程是否发生过中断。我们需要注意的是，shouldParkAfterFailedAcquire()和parkAndCheckInterrupt()这两个方法可能会重复执行，因此在每次重复挂起线程后，一旦线程发生过中断，就会立即更新记录线程是否发生过中断的变量interrupted，这个变量会在acquireQueued()方法中当线程成功获取到锁时作为返回值返回，而我们回顾到最开始的AQS类的acquire()方法：\n```java\npublic final void acquire(int arg) {\n    /**\n     * 这里的tryAcquire()会尝试获取同步状态\n     * 如果没有获取到，将会调用addWaiter()方法将当前线程包装为一个Node节点加入等待队列\n     * 然后对节点调用acquireQueued()方法使其进入自旋尝试获取同步的状态\n     * 加入成功后将中断当前线程\n     */\n    if (!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n        selfInterrupt();\n}\n```\n会发现当acquireQueued()方法返回值为true，也即是当前线程已经成功获取到锁，但发生了中断，会执行selfInterrupt()对当前线程执行中断：\n```java\nprivate static void selfInterrupt() {\n    Thread.currentThread().interrupt();\n}\n```\n以上即是以ReentrantLock锁为例对同步状态的竞争和获取的详细解释，但只涉及到独占锁在公平模式下的情况。至于其他情况，会在后面的内容中讲解。下面我们先来了解同步状态的释放，依旧是以ReentrantLock为例。\n\n## 同步状态的释放\n在使用ReentrantLock时，当需要控制同步的代码块结束后，会调用锁实例的unlock()方法来释放锁，ReentrantLock的unlock()方法如下：\n```java\npublic void unlock() {\n    sync.release(1);\n}\n```\n可以得知，unlock()方法其实调用了同步器sync的release()方法；其实释放锁与加锁操作非常类似，sync的release()方法还是会调用AQS的release()方法：\n```java\npublic final boolean release(int arg) {\n    if (tryRelease(arg)) {\n        Node h = head;\n        if (h != null && h.waitStatus != 0)\n            unparkSuccessor(h);\n        return true;\n    }\n    return false;\n}\n```\n在AQS的release()方法中，依旧会将判断是否成功释放锁的业务交给真正的实现类来处理，以FairSync为例，它的tryRelease()方法是从父类Sync中继承而来的，源码如下：\n```java\nprotected final boolean tryRelease(int releases) {\n    // 计算即将更新的state值\n    int c = getState() - releases;\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        // 如果不是当前拥有独占锁的线程尝试释放释放锁，就抛出异常\n        throw new IllegalMonitorStateException();\n    // 是否完全释放锁的标志，针对重入做的额外判断\n    boolean free = false;\n    if (c == 0) {\n        // 当更新后的state值为0时，可以释放锁\n        free = true;\n        // 设置拥有独占锁的线程为null\n        setExclusiveOwnerThread(null);\n    }\n    // 更新state值\n    setState(c);\n    return free;\n}\n```\n从上面的注释可以得知，其实tryRelease()和tryAcquire()操作正好是相反的，注释解释得已经比较清楚了，这里就不做多的赘述。\n\n当tryRelease()返回值为true时，表示释放锁成功，在前面release()方法中就会进入if (tryRelease(arg))分支，分支体内的代码的作用，就是唤醒头节点的后继节点；当头节点不为空且其waitStatus状态不为0时，会调用unparkSuccessor(h)，唤醒头节点的后继节点，unparkSuccessor()位于AQS类中，代码如下：\n```java\n/**\n * Wakes up node\'s successor, if one exists.\n * 如果node存在后继节点，则唤醒\n * @param node the node\n */\nprivate void unparkSuccessor(Node node) {\n    /*\n     * If status is negative (i.e., possibly needing signal) try\n     * to clear in anticipation of signalling.  It is OK if this\n     * fails or if status is changed by waiting thread.\n     */\n    int ws = node.waitStatus;\n    if (ws < 0)\n        // 将node的waitStatus状态设置为0（初始化状态）\n        compareAndSetWaitStatus(node, ws, 0);\n\n    /*\n     * Thread to unpark is held in successor, which is normally\n     * just the next node.  But if cancelled or apparently null,\n     * traverse backwards from tail to find the actual\n     * non-cancelled successor.\n     * 拿到后继节点\n     */\n    Node s = node.next;\n    // 检查节点状态，当其waitStatus为CANCELLED将视为不符合条件\n    if (s == null || s.waitStatus > 0) {\n        s = null;\n        // 如果后继节点不符合条件，则从尾节点开始往前找，直到找到位于队列最前面的符合条件的节点\n        for (Node t = tail; t != null && t != node; t = t.prev)\n            if (t.waitStatus <= 0)\n                s = t;\n    }\n    if (s != null)\n        // 终止一个挂起的线程\n        LockSupport.unpark(s.thread);\n}\n```\n我们这里传入的是等待队列的头节点，unparkSuccessor()方法首先判断了头节点waitStatus，如果小于0就使用CAS方式将其设置为0。接下来会拿到头节点的后继节点，如果后继节点为空，或者后继节点的waitStatus大于0（大于0表示取消了排队），就认为该后继节点不符合唤醒条件，此时会从尾节点开始从后往前查找位于等待队列最前面的（但不是头节点当前的后继节点），且waitStatus小于或等于0的节点作为待唤醒节点。当拿到合格的待唤醒节点后，使用LockSupport.unpark()方法将该节点所包装的线程唤醒，使用的是Unsafe类相关的方法：\n```java\npublic static void unpark(Thread thread) {\n    if (thread != null)\n        unsafe.unpark(thread);\n}\n```\n当节点被唤醒，且获取到CPU的调度之后，就会继续从之前挂起的地方开始执行：\n\n```\nprivate final boolean parkAndCheckInterrupt() {\n    // 使用LockSupport挂起线程\n    // 执行到这里之后，线程会被挂起阻塞，等待被唤醒\n    // 被唤醒后会从这里开始执行\n    LockSupport.park(this);\n    return Thread.interrupted();\n}\n```\n这里存在一个难以发现的疑问，虽然在unparkSuccessor()方法中出现从后向前遍历查找合格待唤醒节点的过程很少会出现，但一旦出现了，假设现在找到的合格的待唤醒节点处于等待队列中间位置，在唤醒这个节点包装的线程后，会回到acquireQueued()方法的for循环中，但由于此时该节点位于等待队列中间位置，它的前驱节点并不是头节点，所以不会尝试获取锁。那此时等待队列中所有的节点对应的线程都会陷入了阻塞状态？整个等待队列就瘫痪了？\n\n我们先观察unparkSuccessor()方法从后向前遍历的循环：\n```java\n// 如果后继节点不符合条件，则从尾节点开始往前找，直到找到位于队列最前面的符合条件的节点\nfor (Node t = tail; t != null && t != node; t = t.prev)\n    if (t.waitStatus <= 0)\n        s = t;\n```\n需要注意的是，从后向前查找的范围是除头节点和第二个节点之外的所有节点，最后找到的节点必然是处于等待队列第二个节点之后的某个节点，且从头节点到该节点之间的所有节点的状态必然全都大于0。当找到待唤醒的节点后，该节点包装的线程从parkAndCheckInterrupt()唤醒后会重新尝试获取同步状态，失败后又会执行shouldParkAfterFailedAcquire()方法，这个方法设计十分巧妙，我们回顾它的代码：\n```java\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    // 获取前驱节点的waitStatus\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL) // SINGAL为-1\n        /*\n         * 如果前驱节点的waitStatus为SIGNAL，表示当前节点已经设置了要求释放锁的线程将其唤醒的状态，可以安全阻塞\n         * 上面的解释非常绕，用通俗的话来讲，当一个节点的前驱节点的waitStatus为SIGNAL时，前驱节点在释放锁时会将其唤醒\n         */\n        return true;\n    if (ws > 0) {\n        /*\n         * 如果前驱节点的waitStatus大于0，表示前驱节点已经取消了排队等待，\n         * 尝试向前查找一个waitStatus不大于0的节点作为当前节点的前驱节点，并把该节点的后继节点设置为当前节点，\n         * 上面向前查找的过程即do ... while循环的作用，\n         * 这个不断向前查找的过程，可以将当前节点前面所有取消了排队的节点全部剔除略过，减小链表的长度\n         */\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus > 0);\n        pred.next = node;\n    } else {\n        /*\n         * 当执行到这里，前驱节点的waitStatus只会为0，CONDITION（-2）、PROPAGATE（-3），\n         * 此时则尝试将前驱节点的waitStatus状态设置为SIGNAL，\n         * 做这一步操作，主要是用于在后面某个线程释放锁时，\n         * 如果该线程的waitStatus状态为SIGNAL，且其为等待队列的头节点，就会尝试唤醒其后继节点。\n         */\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}\n```\n因为此时从头节点到待唤醒节点的之间的所有节点的状态全部是大于0的，因此会触发if (ws > 0)分支里的do ... while操作将这些节点全部剔除，做完剔除工作之后，待唤醒节点就变成了头节点的后继节点了，且shouldParkAfterFailedAcquire()返回了false，进而会忽略运行parkAndCheckInterrupt()方法直接进行下一次循环，在下一次循环中待唤醒节点就能成功获取到锁了。如果不好理解，可以观察下图：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191017/af255666a01f4740935a3c1d986638b9.png)\n\n至此，其实AQS同步状态相关的简单业务逻辑已经讲解完毕了，不过大部分代码的逻辑都是基于ReentrantLock的FairSync来讲解的，因此下面将补充讲解非公平锁的差别\n\n## 非公平锁\n非公平锁和公平锁在获取锁的方法上流程是一样的，它们的区别主要表现在尝试获取锁的机制不同。简单来说，公平锁在每次尝试获取锁时，会根据等待队列依次排序等待；而非公平锁在每次尝试获取锁时，将无视等待队列，直接尝试获取锁，如果锁是空闲的，即可获取状态，则获取锁。公平与否，是针对等待队列中处于等待状态的线程而言的。\n\nReentrantLock类中NonfairSync类的源码如下：\n```java\nstatic final class NonfairSync extends Sync {\n    private static final long serialVersionUID = 7316153563782823691L;\n\n    final void lock() {\n        if (compareAndSetState(0, 1))\n            setExclusiveOwnerThread(Thread.currentThread());\n        else\n            acquire(1);\n    }\n\n    protected final boolean tryAcquire(int acquires) {\n        return nonfairTryAcquire(acquires);\n    }\n}\n```\n从源码可以得知，NonfairSync的lock()方法与公平同步器FairSync相比，一开始就尝试修改同步状态，如果没有修改成功才会进入acquire(1)方法，acquire(1)会调用tryAcquire()方法，与FairSync不同的是，NonfairSync的tryAcquire()方法调用了父类Sync的nonfairTryAcquire(acquires)：\n```java\nfinal boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        if (compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    } else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0) // overflow\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n```\n与FairSync的tryAcquire()方法对比：\n\n```java\nprotected final boolean tryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        if (!hasQueuedPredecessors() && compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    } else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0)\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n```\n会发现nonfairTryAcquire()中少了一步操作：调用hasQueuedPredecessors()。在FairSync的tryAcquire()方法中，当state为0时，会首先调用hasQueuedPredecessors()方法，如果其返回值为false，才会尝试CAS方式修改state；hasQueuedPredecessors()源码如下：\n```java\npublic final boolean hasQueuedPredecessors() {\n    // The correctness of this depends on head being initialized\n    // before tail and on head.next being accurate if the current\n    // thread is first in queue.\n    Node t = tail; // Read fields in reverse initialization order\n    Node h = head;\n    Node s;\n    // 等待队列为空时，返回false\n    // 等待队列不为空时，分三种情况：\n    //  - 头节点的后继节点为空，返回true\n    //  - 头节点的后继节点不为空，但该后继节点包装的线程是当前线程，返回false\n    //  - 头节点的后继节点不为空，且该后继节点包装的线程并不是当前线程，返回true\n    return h != t && ((s = h.next) == null || s.thread != Thread.currentThread());\n}\n\n```\n从源码可以得知，公平模式下，有两种情况会尝试获取同步状态：\n- 队列为空；此时当然可以直接尝试获取同步状态。\n- 队列不为空，但当前线程就是头节点的后继节点包装的线程；此时当前线程就是即将唤醒的线程，因此也可以直接尝试获取同步状态。\n\n从上面的分析我们可以得出公平模式和非公平模式的差异：公平模式下，线程在尝试获取锁时，即使锁没有被任何线程锁持有，它也会判断自己是不是即将被唤醒的那个线程，如果是才尝试获取锁，如果不是就排队等待。而在非公平模式下不会有这些考虑，直接就尝试获取锁，但如果这两次尝试都不成功的话，就与公平锁一样，需要添加到等待队列尾部等待唤醒。\n\n非公平锁会有更好的性能，但非公平锁让获取锁的时间变得不确定，可能会导致在同步队列中的线程长期处于饥饿状态。\n','<h2 id=\"aqs-\">AQS的基础设计</h2>\n<blockquote>\n<p>AbstractQueuedSynchronizer简称为AQS</p>\n</blockquote>\n<pre><code class=\"language-java\">public abstract class AbstractQueuedSynchronizer\n    extends AbstractOwnableSynchronizer\n    implements java.io.Serializable {</code></pre>\n<p>AQS是一个抽象类，继承自AbstractOwnableSynchronizer类，并实现了Serializable接口。虽然AQS是一个抽象类，但其内部并没有抽象方法，这是典型的模板设计模式的应用。AQS作为一个基础组件为继承它的实现类提供基础设施，如构建等待队列、控制同步状态等；其内部除了提供并发操作的核心方法以及等待队列操作外，还提供了一些模板方法让子类自己实现，AQS只关注内部公共方法实现，并不关心外部不同模式的实现。</p>\n<p>通过这种方式，AQS的实现类可以根据自身需求来完成共享模式或独占模式的同步功能；如实现独占模式的同步功能，只需要重写tryAcquire()方法和tryRelease()方法即可；而实现共享模式的同步功能，只需要重写tryAcquireShared()方法和tryReleaseShared()方法。无论是共享模式还是独占模式，基础实现都是基于AQS，不同的是用于同步状态逻辑的控制模板方法的具体实现。AQS提供给独占模式和共享模式的模板方法如下：</p>\n<pre><code class=\"language-java\">/**\n     * 尝试获取独占锁\n     *\n     */\n    protected boolean tryAcquire(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 尝试释放独占锁\n     */\n    protected boolean tryRelease(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 尝试获取共享锁\n     *\n     */\n    protected int tryAcquireShared(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 尝试释放共享锁\n     *\n     */\n    protected boolean tryReleaseShared(int arg) {\n        throw new UnsupportedOperationException();\n    }</code></pre>\n<p>同时AQS内部还提供了一个int类型的state成员变量，用于控制同步状态；state变量由volatile内存语义修饰，同时compareAndSetState()方法还实现了对state变量的CAS原子性修改操作，源码如下：</p>\n<pre><code class=\"language-java\">// 同步器状态标识，存在volatile内存语义\nprivate volatile int state;\n\n// 获取当前同步器状态标识\nprotected final int getState() {\n    return state;\n}\n\n// 设置同步器状态标识\nprotected final void setState(int newState) {\n    state = newState;\n}\n\n// 原子性操作，当state的值为expect，将其更新为update，更新成功返回true\nprotected final boolean compareAndSetState(int expect, int update) {\n    return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n}</code></pre>\n<h2 id=\"-\">等待队列模型</h2>\n<p>在正式讲解AQS类之前，我们还需要了解在AQS中存在的重要的数据结构。</p>\n<p>AQS类的内部维护了一个等待队列来存放所有的未获取到同步状态的线程，该队列实际上是以双向链表的数据结构实现的，链表的节点是AQS类的内部类Node的一个实例，我们首先关注Node类的实现，这也是深入理解AQS类实现的首要条件。</p>\n<p>其实Node类的实现非常简单，它的源代码如下：</p>\n<pre><code class=\"language-java\">// 等待队列节点类\nstatic final class Node {\n    /*********** 以下属性用于标识队列的类型：共享或者独占 ***********/\n    // 表明是共享模式节点\n    static final Node SHARED = new Node();\n    // 表明是独占（排他）模式节点\n    static final Node EXCLUSIVE = null;\n\n    /*********** 以下属性用于节点的等待状态，也即是成员变量waitStatus的值 ***********/\n    // 标识当前Node对应的线程已处于结束状态，即线程已经取消了获取同步状态的请求\n    static final int CANCELLED = 1;\n    // 该值用于标识当前节点的后继节点对应的线程需要被唤醒\n    static final int SIGNAL = -1;\n    // 标识条件状态；指示线程正在等待状态\n    static final int CONDITION = -2;\n    // 在共享模式中使用时表示获得的同步状态会被传播；\n    static final int PROPAGATE = -3;\n\n    /*********** 等待状态，可能为CANCELLED、SIGNAL、CONDITION、PROPAGATE ***********/\n    volatile int waitStatus;\n\n    /*********** 维护双向链表的前后指针 ***********/\n    // 指向前驱节点\n    volatile Node prev;\n    // 指向后继节点\n    volatile Node next;\n\n    /*********** 存放尝试获取同步状态的线程 ***********/\n    volatile Thread thread;\n\n    // 等待队列的后继节点\n    Node nextWaiter;\n\n    // 是否为共享模式\n    final boolean isShared() {\n        return nextWaiter == SHARED;\n    }\n\n    // 获取前驱节点\n    final Node predecessor() throws NullPointerException {\n        Node p = prev;\n        if (p == null)\n            throw new NullPointerException();\n        else\n            return p;\n    }\n\n    // 无参构造\n    Node() {\n    }\n\n    // 有参构造\n    Node(Thread thread, Node mode) {\n        this.nextWaiter = mode;\n        this.thread = thread;\n    }\n\n    // 有参构造\n    Node(Thread thread, int waitStatus) {\n        this.waitStatus = waitStatus;\n        this.thread = thread;\n    }\n}</code></pre>\n<p>每个Node类的实例代表了等待队列中一个节点，而每个节点中包装了一个线程（即thread成员变量）。AQS类设计为可以让多个线程同时并发地请求同步状态，因此它需要处理在竞争情况下没有获取到同步状态的线程，而处理方式正是使用Node实例来包装这些线程，然后装入等待队列，等到合适的时机再将其唤醒。</p>\n<h3 id=\"-\">等待队列模型图</h3>\n<pre><code class=\"language-java\">// 指向队列头节点\nprivate transient volatile Node head;\n// 指向队列尾节点\nprivate transient volatile Node tail;</code></pre>\n<p>从变量名就可以得知，head将指向等待队列的头节点，而tail则会指向等待队列的尾节点。有了上面的理解，我们就可以推断出等待队列的大致结构，示意图如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191016/739793731fb5434794fea4d267b2468b.png\" alt=\"image.png\"></p>\n<h2 id=\"-\">同步状态的竞争和获取</h2>\n<p>由于AQS设计为一个抽象类，我们需要从它的实现类来分析具体的流程实现，这里以公平模式下的独占锁ReentrantLock为例。作为日常使用次数最多的独占锁，ReentrantLock中的内部类Sync即为其使用的同步器，继承了AQS类：</p>\n<pre><code class=\"language-java\">public class ReentrantLock implements Lock, java.io.Serializable {\n    ...\n    private final Sync sync;\n    abstract static class Sync extends AbstractQueuedSynchronizer {\n        ...\n    }\n    ...\n}</code></pre>\n<p>但Sync也是一个抽象类，真正的同步器是由Sync的两个子类实现的，以分别实现公平锁和非公平锁两种机制：</p>\n<pre><code class=\"language-java\">// 公平同步器\nstatic final class FairSync extends Sync {\n    ...\n}\n// 非公平同步器\nstatic final class NonfairSync extends Sync {\n    ...\n}</code></pre>\n<p>默认情况下，ReentrantLock使用的是非公平同步器NonfairSync来控制同步操作，另外通过给构造方法传入true可以指定使用公平同步器：</p>\n<pre><code class=\"language-java\">public ReentrantLock() {\n    sync = new NonfairSync();\n}\n\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}</code></pre>\n<p>在之前使用ReentrantLock时，调用ReentrantLock实例的lock()方法可以实现上锁，其实是调用了同步器Sync的lock()方法:</p>\n<pre><code class=\"language-java\">public void lock() {\n        sync.lock();\n    }</code></pre>\n<p>这里我们以FairSync为研究对象：</p>\n<pre><code class=\"language-java\">static final class FairSync extends Sync {\n    private static final long serialVersionUID = -3000897897090466540L;\n    final void lock() {\n        acquire(1);\n    }\n    ...\n}</code></pre>\n<p>lock方法里的acquire(1)，其实调用了父类AQS的acquire()方法，传入的参数为1；AQS类的acquire()方法源码如下：</p>\n<pre><code class=\"language-java\">    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &amp;&amp;\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }</code></pre>\n<p>源码解释：</p>\n<p>方法里的tryAcquire()会尝试获取同步状态，如果没有获取到，将会调用addWaiter()方法将当前线程包装为一个Node节点加入等待队列，然后对节点调用acquireQueue()方法使其进入自旋尝试获取同步的状态，加入成功后将中断当前线程</p>\n<h3 id=\"tryacquire-\">tryAcquire()方法</h3>\n<p>从AQS的acquire()方法源码可以看出，这里的if的判断条件存在三种操作：tryAcquire()、addWaiter()及acquireQueued()；当tryAcquire()的返回值为false时才会执行后面两个方法。</p>\n<p>我们先考察tryAcquire()；AQS的tryAcquire()方法体直接抛出UnsupportedOperationException异常，而在FairSync同步器中重写的tryAcquire()方法的源码如下:</p>\n<pre><code class=\"language-java\">// AQS的tryAcquire()方法\nprotected boolean tryAcquire(int arg) {\n    throw new UnsupportedOperationException();\n}\n\n// FairSync中重写的tryAcquire()方法\nprotected final boolean tryAcquire(int acquires) {\n    // 获取当前线程\n    final Thread current = Thread.currentThread();\n    // 获取state\n    int c = getState();\n    if (c == 0) {\n        /**\n         * 此时state为0，表示没有线程持有锁。\n         * 先调用hasQueuedPredecessors()查看是否有线程已经等待了很久，\n         * 如果没有，就是用CAS操作修改state为acquires的值，\n         * 修改成功后设置独占线程为当前线程，并返回true表示获取锁成功，\n         * 如果修改失败，说明可能正好被其他的某个线程抢先修改了。\n         */\n        if (!hasQueuedPredecessors() &amp;&amp;\n                compareAndSetState(0, acquires)) {\n            // 设置独占线程为当前线程\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    } else if (current == getExclusiveOwnerThread()) {\n        /**\n         * state不为0，且当前线程就为拥有锁的线程，\n         * 表示是以重入的方式在获取锁，\n         * 将state修改为state + acquires，并返回true表示获取锁成功。\n         */\n        int nextc = c + acquires;\n        if (nextc &lt; 0)\n            throw new Error(&quot;Maximum lock count exceeded&quot;);\n        setState(nextc);\n        return true;\n    }\n    /**\n     * 返回false，代表获取锁失败；能走到这里存在两种情况：\n        - 虽然是第一个尝试获取锁的线程，但修改state失败，即可能正好被其他的某个线程抢先修改了；\n        - 不是第一个尝试获取锁的线程，且也不是重入的方式获取。\n     */\n    return false;\n}</code></pre>\n<p>FairSync重写的方法体其实比较简单，其中hasQueuedPredecessors()方法用于查看是否有线程已经等待了很久，这是为了实现公平性需要做的工作；tryAcquire()的返回值存在三种不同的结果。首先获取了AQS提供的同步状态变量state，并判断其是否为0，如果为0表示此时还没有线程获取过同步状态，因此将尝试使用CAS操作将state更新为传入的acquires的值，如果修改成功，就使用setExclusiveOwnerThread()方法将记录独占线程的变量exclusiveOwnerThread设置为当前线程，并返回true代表获取同步状态成功；如果修改state失败则会直接返回false代表获取同步状态失败。</p>\n<p>其中setExclusiveOwnerThread()方法来自于AQS的父类AbstractOwnableSynchronizer，相关源码如下：</p>\n<pre><code class=\"language-java\">// 拥有独占模式同步状态的线程\nprivate transient Thread exclusiveOwnerThread;\n\n// 设置拥有独占模式同步状态的线程\nprotected final void setExclusiveOwnerThread(Thread t) {\n    exclusiveOwnerThread = t;\n}\n\n// 获取拥有独占模式同步状态的线程\nprotected final Thread getExclusiveOwnerThread() {\n    return exclusiveOwnerThread;\n}</code></pre>\n<p>当state不为0时，还会判断getExclusiveOwnerThread()得到的拥有独占模式同步状态的线程是否就是当前线程；这一步的判断是为了可重入而实现的，当同一个线程多次尝试获取同步状态，理应让其顺利获取；因此在if (getExclusiveOwnerThread() == currentThread)分支中，会设置state值为state + acquires，并返回true表示获取同步状态成功。</p>\n<p>当tryAcquire()方法的返回值为true时代表获取锁成功，因此整个过程就结束了；但当tryAcquire()方法的返回值为false时则表示获取锁失败，这时才会调用\nacquireQueued(addWaiter(Node.EXCLUSIVE), 1)；</p>\n<h3 id=\"addwaiter-\">addWaiter()</h3>\n<p>下面先分析addWaiter(Node.EXCLUSIVE)，它的源码如下：</p>\n<pre><code class=\"language-java\">/**\n * 以当前线程及给定的模式（共享或独占）创建一个入队节点\n *\n * @param mode 可以是Node.EXCLUSIVE（独占模式）或Node.SHARED（共享模式）\n * @return 新节点\n */\nprivate Node addWaiter(Node mode) {\n    // 创建新节点\n    Node node = new Node(Thread.currentThread(), mode);\n    // Try the fast path of enq; backup to full enq on failure\n    // 尝试快速在尾部添加新节点\n    Node pred = tail;\n    if (pred != null) {\n        /**\n         * 队列不为空，队中已有节点。\n         * 先将node的前驱设置为当前尾节点（即tail变量指向的节点），\n         * 然后将tail变量指向node，此时node就变为尾节点了，\n         * 如果设置成功，就将原来尾节点的后继节点设置为node，如下图：\n         * 原始：head &lt;-&gt; node(1) &lt;-&gt; ... &lt;-&gt; node(n-1) &lt;-&gt; node(n) &lt;-&gt; tail\n         * 1. head &lt;-&gt; node(1) &lt;-&gt; ... &lt;-&gt; node(n) &lt;-&gt; tail(pred) &lt;- node(new)\n         * 2. head &lt;-&gt; node(1) &lt;-&gt; ... &lt;-&gt; node(n) &lt;-&gt; node(pred) &lt;-&gt; tail(new)\n         */\n        node.prev = pred;\n        if (compareAndSetTail(pred, node)) {\n            pred.next = node;\n            // 返回新节点\n            return node;\n        }\n    }\n    /**\n     * 快速添加尾新节点失败，\n     * 说明队列为空，或者由于有并发线程在竞争入队，导致CAS修改tail失败，\n     * 那么进入enq，以自旋方式修改。\n     */\n    enq(node);\n    return node;\n}</code></pre>\n<p>addWaiter(Node.EXCLUSIVE)调用后，会以当前线程为参数使用Node类的构造方法创建一个独占模式（由于mode参数传入的是Node.EXCLUSIVE）的Node节点；然后尝试在等待队列的尾部插入该节点。</p>\n<p>上面分析过等待队列的结构，这里进行分情况讲解。</p>\n<ol>\n<li><p>默认情况下，AQS的head和tail成员变量都为空，也即是表示整个等待队列为空。此时上面addWaiter()代码中会直接调用enq(node)添加节点，enq()方法源码如下：</p>\n<pre><code class=\"language-java\">/**\n* Node节点入队\n* 节点将通过自旋的方式插入到队列尾部\n*\n* @param node 需要入队的节点\n* @return 节点的前驱\n*/\nprivate Node enq(final Node node) {\n for (; ; ) {\n     Node t = tail;\n     if (t == null) { // Must initialize\n         if (compareAndSetHead(new Node()))\n             /**\n              * 当tail为空，表示此时队列中没有节点，\n              * 就将一个空节点设置为头节点，\n              * 并且将尾节点也指向头节点。\n              */\n             tail = head;\n     } else {\n         /**\n          * 否则队列中已有节点\n          * 先将node的前驱设置为尾节点\n          * 然后将尾节点设置为node\n          * 如果设置成功，就将原来尾节点的后继节点设置为node，如下图：\n          * 原始：head &lt;-&gt; node(1) &lt;-&gt; ... &lt;-&gt; node(n-1) &lt;-&gt; node(n) &lt;-&gt; tail\n          * 1. head &lt;-&gt; node(1) &lt;-&gt; ... &lt;-&gt; node(n) &lt;-&gt; tail(t) &lt;- node(new)\n          * 2. head &lt;-&gt; node(1) &lt;-&gt; ... &lt;-&gt; node(n) &lt;-&gt; node(t) &lt;-&gt; tail(new)\n          */\n         node.prev = t;\n         if (compareAndSetTail(t, node)) {\n             t.next = node;\n             // 返回原来的尾节点，即现在尾节点的前驱节点\n             return t;\n         }\n     }\n }\n}</code></pre>\n<p>注意上述的方法内部其实是一个for无限循环，只有在存在返回值的时候才会结束。因此当由于等待队列为空的原因而进入了enq()方法后，会执行if (t == null)为true的分支，即CAS方式设置等待队列头节点指针变量head为一个空节点，然后将tail也指向该节点。需要注意的是，由于Node的默认构造方法创建的节点的waitStatus变量值为0，因此此时head头节点的waitStatus即为0。</p>\n</li>\n<li><p>当这一次循环结束，由于此时head和tail都不为空了，下次循环就会进入else分支，先将传入的新节点的前驱指针指向当前tail指向的节点，然后以CAS方式修改tail指向新节点，将原来tail指向的节点的后继指针指向新节点，最后返回原来的尾节点。如果修改不成功，将在下次循环继续修改，自旋直到修改成功后返回。</p>\n</li>\n</ol>\n<h3 id=\"acquirequeued-\">acquireQueued()</h3>\n<p>enq()方法结束之后，回到addWaiter()中，addWaiter()会将刚刚添加到等待队列的节点返回然后结束，此时就到了acquireQueued(addWaiter(Node.EXCLUSIVE), 1)的过程了，acquireQueued()方法的源码如下：</p>\n<pre><code class=\"language-java\">/**\n * 在独占模式下，挂起刚刚被添加到等待队列的节点\n *\n * @param node 添加到等待队列的节点\n * @param arg  acquire操作的数值\n * @return 如果在等待期间线程发生了中断，返回值将为true，否则为false\n */\nfinal boolean acquireQueued(final Node node, int arg) {\n    boolean failed = true;\n    try {\n        // 记录当前线程在自旋等待期间是否存在被中断操作\n        boolean interrupted = false;\n        // 这里会让节点进入自旋状态\n        for (; ; ) {\n            /**\n             * 获取自己的前驱节点\n             * 如果前驱节点为head节点，就可以尝试获取锁\n             * 由于所有等待的节点都会调用该方法进入自旋\n             * 而只有前驱节点为head节点的等待节点才能尝试获取锁\n             * 这样就能保证永远是队首的节点获取锁\n             */\n            final Node p = node.predecessor();\n            if (p == head &amp;&amp; tryAcquire(arg)) {\n                // 获取锁成功\n                setHead(node);\n                p.next = null; // help GC\n                failed = false;\n                return interrupted;\n            }\n            // 执行到此处，说明上面尝试获取锁失败了，因此可以尝试将当前线程挂起\n            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;\n                    parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n</code></pre>\n<p>acquireQueued()方法的主要作用是用于挂起线程，但在挂起线程之前，它额外做了两件事情。首先在挂起之前，如果当前节点的前驱节点是头节点，acquireQueued()方法会调用tryAcquire()重新尝试获取锁，这一步其实是为了之后的唤醒操作而准备的；在acquireQueued()方法后面的代码中会根据情况挂起线程，一旦某个线程挂起，该线程就会阻塞在acquireQueued()方法内直到被唤醒；因此acquireQueued()将方法体的大部分代码都放置于无限循环体内，这样某个线程被唤醒后就会重复执行循环体前面获取锁的动作，获取成功就继续执行，获取失败会被再次挂起。</p>\n<p>acquireQueued()方法在挂起操作前额外做的第二件事情，是检查前驱节点的waitStatus状态，这部分代码由shouldParkAfterFailedAcquire()方法体现，代码如下：</p>\n<pre><code class=\"language-java\">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    // 获取前驱节点的waitStatus\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL) // SINGAL为-1\n        /*\n         * This node has already set status asking a release to signal it, so it can safely park.\n         * 如果前驱节点的waitStatus为SIGNAL，表示当前节点已经设置了要求释放锁的线程将其唤醒的状态，可以安全阻塞\n         * 上面的解释非常绕，用通俗的话来讲，当一个节点的前驱节点的waitStatus为SIGNAL时，前驱节点在释放锁时会将其唤醒\n         */\n        return true;\n    if (ws &gt; 0) {\n        /*\n         * \n         * 如果前驱节点的waitStatus大于0，表示前驱节点已经取消了排队等待，\n         * 尝试向前查找一个waitStatus不大于0的节点作为当前节点的前驱节点，并把该节点的后继节点设置为当前节点，\n         * 上面向前查找的过程即do ... while循环的作用，\n         * 这个不断向前查找的过程，可以将当前节点前面所有取消了排队的节点全部剔除略过，减小链表的长度\n         */\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus &gt; 0);\n        pred.next = node;\n    } else {\n        /*\n         * 当执行到这里，前驱节点的waitStatus只会为0，CONDITION（-2）、PROPAGATE（-3），\n         * 此时则尝试将前驱节点的waitStatus状态设置为SIGNAL，\n         * 做这一步操作，主要是用于在后面某个线程释放锁时，\n         * 如果该线程的waitStatus状态为SIGNAL，且其为等待队列的头节点，就会尝试唤醒其后继节点。\n         */\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}</code></pre>\n<p>shouldParkAfterFailedAcquire()方法中，分为三种情况：</p>\n<ol>\n<li>只有当前节点的前驱节点的waitStatus状态值为SINGAL（值为-1）的情况下才会返回true，此时当前节点包装的线程才会执行挂起操作；</li>\n<li>当前驱节点waitStatus状态值大于0时，表示此时前驱节点已经取消了排队，因此需要为当前节点往前寻找一个waitStatus状态正常的节点作前驱节点（这一步在后面唤醒会有用处，此时若无法理解可以不必关注）；</li>\n<li>如果当前节点的前驱节点的waitStatus状态值为CONDITION（值为-2）或PROPAGATE（值为-3），则使用CAS方式修改前驱节点的waitStatus状态值为SIGNAL。</li>\n</ol>\n<p>上面这些操作的作用，其实是保证在被挂起的线程能在未来正确的被唤醒，因为在公平模式的独占锁中，被唤醒的线程永远是同步队列第一个节点的所包装的线程。</p>\n<p>当shouldParkAfterFailedAcquire()返回值为true时，就代表此时可以安全地挂起线程了，因此会继续执行parkAndCheckInterrupt()方法，源码如下：</p>\n<pre><code class=\"language-java\">private final boolean parkAndCheckInterrupt() {\n    // 使用LockSupport挂起线程\n    // 执行到这里之后，线程会被挂起阻塞，等待被唤醒\n    LockSupport.park(this);\n    return Thread.interrupted();\n}</code></pre>\n<p>parkAndCheckInterrupt()方法使用LockSupport.park()来挂起线程，使用的是Unsafe类相关的方法，源码如下：</p>\n<pre><code class=\"language-java\">public static void park(Object blocker) {\n        Thread t = Thread.currentThread();\n        setBlocker(t, blocker);\n        UNSAFE.park(false, 0L);\n        setBlocker(t, null);\n    }</code></pre>\n<p>parkAndCheckInterrupt()方法的返回值为Thread.interrupted()，用于告诉acquireQueued()方法线程是否发生过中断。我们需要注意的是，shouldParkAfterFailedAcquire()和parkAndCheckInterrupt()这两个方法可能会重复执行，因此在每次重复挂起线程后，一旦线程发生过中断，就会立即更新记录线程是否发生过中断的变量interrupted，这个变量会在acquireQueued()方法中当线程成功获取到锁时作为返回值返回，而我们回顾到最开始的AQS类的acquire()方法：</p>\n<pre><code class=\"language-java\">public final void acquire(int arg) {\n    /**\n     * 这里的tryAcquire()会尝试获取同步状态\n     * 如果没有获取到，将会调用addWaiter()方法将当前线程包装为一个Node节点加入等待队列\n     * 然后对节点调用acquireQueued()方法使其进入自旋尝试获取同步的状态\n     * 加入成功后将中断当前线程\n     */\n    if (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n        selfInterrupt();\n}</code></pre>\n<p>会发现当acquireQueued()方法返回值为true，也即是当前线程已经成功获取到锁，但发生了中断，会执行selfInterrupt()对当前线程执行中断：</p>\n<pre><code class=\"language-java\">private static void selfInterrupt() {\n    Thread.currentThread().interrupt();\n}</code></pre>\n<p>以上即是以ReentrantLock锁为例对同步状态的竞争和获取的详细解释，但只涉及到独占锁在公平模式下的情况。至于其他情况，会在后面的内容中讲解。下面我们先来了解同步状态的释放，依旧是以ReentrantLock为例。</p>\n<h2 id=\"-\">同步状态的释放</h2>\n<p>在使用ReentrantLock时，当需要控制同步的代码块结束后，会调用锁实例的unlock()方法来释放锁，ReentrantLock的unlock()方法如下：</p>\n<pre><code class=\"language-java\">public void unlock() {\n    sync.release(1);\n}</code></pre>\n<p>可以得知，unlock()方法其实调用了同步器sync的release()方法；其实释放锁与加锁操作非常类似，sync的release()方法还是会调用AQS的release()方法：</p>\n<pre><code class=\"language-java\">public final boolean release(int arg) {\n    if (tryRelease(arg)) {\n        Node h = head;\n        if (h != null &amp;&amp; h.waitStatus != 0)\n            unparkSuccessor(h);\n        return true;\n    }\n    return false;\n}</code></pre>\n<p>在AQS的release()方法中，依旧会将判断是否成功释放锁的业务交给真正的实现类来处理，以FairSync为例，它的tryRelease()方法是从父类Sync中继承而来的，源码如下：</p>\n<pre><code class=\"language-java\">protected final boolean tryRelease(int releases) {\n    // 计算即将更新的state值\n    int c = getState() - releases;\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        // 如果不是当前拥有独占锁的线程尝试释放释放锁，就抛出异常\n        throw new IllegalMonitorStateException();\n    // 是否完全释放锁的标志，针对重入做的额外判断\n    boolean free = false;\n    if (c == 0) {\n        // 当更新后的state值为0时，可以释放锁\n        free = true;\n        // 设置拥有独占锁的线程为null\n        setExclusiveOwnerThread(null);\n    }\n    // 更新state值\n    setState(c);\n    return free;\n}</code></pre>\n<p>从上面的注释可以得知，其实tryRelease()和tryAcquire()操作正好是相反的，注释解释得已经比较清楚了，这里就不做多的赘述。</p>\n<p>当tryRelease()返回值为true时，表示释放锁成功，在前面release()方法中就会进入if (tryRelease(arg))分支，分支体内的代码的作用，就是唤醒头节点的后继节点；当头节点不为空且其waitStatus状态不为0时，会调用unparkSuccessor(h)，唤醒头节点的后继节点，unparkSuccessor()位于AQS类中，代码如下：</p>\n<pre><code class=\"language-java\">/**\n * Wakes up node&#39;s successor, if one exists.\n * 如果node存在后继节点，则唤醒\n * @param node the node\n */\nprivate void unparkSuccessor(Node node) {\n    /*\n     * If status is negative (i.e., possibly needing signal) try\n     * to clear in anticipation of signalling.  It is OK if this\n     * fails or if status is changed by waiting thread.\n     */\n    int ws = node.waitStatus;\n    if (ws &lt; 0)\n        // 将node的waitStatus状态设置为0（初始化状态）\n        compareAndSetWaitStatus(node, ws, 0);\n\n    /*\n     * Thread to unpark is held in successor, which is normally\n     * just the next node.  But if cancelled or apparently null,\n     * traverse backwards from tail to find the actual\n     * non-cancelled successor.\n     * 拿到后继节点\n     */\n    Node s = node.next;\n    // 检查节点状态，当其waitStatus为CANCELLED将视为不符合条件\n    if (s == null || s.waitStatus &gt; 0) {\n        s = null;\n        // 如果后继节点不符合条件，则从尾节点开始往前找，直到找到位于队列最前面的符合条件的节点\n        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)\n            if (t.waitStatus &lt;= 0)\n                s = t;\n    }\n    if (s != null)\n        // 终止一个挂起的线程\n        LockSupport.unpark(s.thread);\n}</code></pre>\n<p>我们这里传入的是等待队列的头节点，unparkSuccessor()方法首先判断了头节点waitStatus，如果小于0就使用CAS方式将其设置为0。接下来会拿到头节点的后继节点，如果后继节点为空，或者后继节点的waitStatus大于0（大于0表示取消了排队），就认为该后继节点不符合唤醒条件，此时会从尾节点开始从后往前查找位于等待队列最前面的（但不是头节点当前的后继节点），且waitStatus小于或等于0的节点作为待唤醒节点。当拿到合格的待唤醒节点后，使用LockSupport.unpark()方法将该节点所包装的线程唤醒，使用的是Unsafe类相关的方法：</p>\n<pre><code class=\"language-java\">public static void unpark(Thread thread) {\n    if (thread != null)\n        unsafe.unpark(thread);\n}</code></pre>\n<p>当节点被唤醒，且获取到CPU的调度之后，就会继续从之前挂起的地方开始执行：</p>\n<pre><code>private final boolean parkAndCheckInterrupt() {\n    // 使用LockSupport挂起线程\n    // 执行到这里之后，线程会被挂起阻塞，等待被唤醒\n    // 被唤醒后会从这里开始执行\n    LockSupport.park(this);\n    return Thread.interrupted();\n}</code></pre><p>这里存在一个难以发现的疑问，虽然在unparkSuccessor()方法中出现从后向前遍历查找合格待唤醒节点的过程很少会出现，但一旦出现了，假设现在找到的合格的待唤醒节点处于等待队列中间位置，在唤醒这个节点包装的线程后，会回到acquireQueued()方法的for循环中，但由于此时该节点位于等待队列中间位置，它的前驱节点并不是头节点，所以不会尝试获取锁。那此时等待队列中所有的节点对应的线程都会陷入了阻塞状态？整个等待队列就瘫痪了？</p>\n<p>我们先观察unparkSuccessor()方法从后向前遍历的循环：</p>\n<pre><code class=\"language-java\">// 如果后继节点不符合条件，则从尾节点开始往前找，直到找到位于队列最前面的符合条件的节点\nfor (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)\n    if (t.waitStatus &lt;= 0)\n        s = t;</code></pre>\n<p>需要注意的是，从后向前查找的范围是除头节点和第二个节点之外的所有节点，最后找到的节点必然是处于等待队列第二个节点之后的某个节点，且从头节点到该节点之间的所有节点的状态必然全都大于0。当找到待唤醒的节点后，该节点包装的线程从parkAndCheckInterrupt()唤醒后会重新尝试获取同步状态，失败后又会执行shouldParkAfterFailedAcquire()方法，这个方法设计十分巧妙，我们回顾它的代码：</p>\n<pre><code class=\"language-java\">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    // 获取前驱节点的waitStatus\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL) // SINGAL为-1\n        /*\n         * 如果前驱节点的waitStatus为SIGNAL，表示当前节点已经设置了要求释放锁的线程将其唤醒的状态，可以安全阻塞\n         * 上面的解释非常绕，用通俗的话来讲，当一个节点的前驱节点的waitStatus为SIGNAL时，前驱节点在释放锁时会将其唤醒\n         */\n        return true;\n    if (ws &gt; 0) {\n        /*\n         * 如果前驱节点的waitStatus大于0，表示前驱节点已经取消了排队等待，\n         * 尝试向前查找一个waitStatus不大于0的节点作为当前节点的前驱节点，并把该节点的后继节点设置为当前节点，\n         * 上面向前查找的过程即do ... while循环的作用，\n         * 这个不断向前查找的过程，可以将当前节点前面所有取消了排队的节点全部剔除略过，减小链表的长度\n         */\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus &gt; 0);\n        pred.next = node;\n    } else {\n        /*\n         * 当执行到这里，前驱节点的waitStatus只会为0，CONDITION（-2）、PROPAGATE（-3），\n         * 此时则尝试将前驱节点的waitStatus状态设置为SIGNAL，\n         * 做这一步操作，主要是用于在后面某个线程释放锁时，\n         * 如果该线程的waitStatus状态为SIGNAL，且其为等待队列的头节点，就会尝试唤醒其后继节点。\n         */\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}</code></pre>\n<p>因为此时从头节点到待唤醒节点的之间的所有节点的状态全部是大于0的，因此会触发if (ws &gt; 0)分支里的do ... while操作将这些节点全部剔除，做完剔除工作之后，待唤醒节点就变成了头节点的后继节点了，且shouldParkAfterFailedAcquire()返回了false，进而会忽略运行parkAndCheckInterrupt()方法直接进行下一次循环，在下一次循环中待唤醒节点就能成功获取到锁了。如果不好理解，可以观察下图：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191017/af255666a01f4740935a3c1d986638b9.png\" alt=\"image.png\"></p>\n<p>至此，其实AQS同步状态相关的简单业务逻辑已经讲解完毕了，不过大部分代码的逻辑都是基于ReentrantLock的FairSync来讲解的，因此下面将补充讲解非公平锁的差别</p>\n<h2 id=\"-\">非公平锁</h2>\n<p>非公平锁和公平锁在获取锁的方法上流程是一样的，它们的区别主要表现在尝试获取锁的机制不同。简单来说，公平锁在每次尝试获取锁时，会根据等待队列依次排序等待；而非公平锁在每次尝试获取锁时，将无视等待队列，直接尝试获取锁，如果锁是空闲的，即可获取状态，则获取锁。公平与否，是针对等待队列中处于等待状态的线程而言的。</p>\n<p>ReentrantLock类中NonfairSync类的源码如下：</p>\n<pre><code class=\"language-java\">static final class NonfairSync extends Sync {\n    private static final long serialVersionUID = 7316153563782823691L;\n\n    final void lock() {\n        if (compareAndSetState(0, 1))\n            setExclusiveOwnerThread(Thread.currentThread());\n        else\n            acquire(1);\n    }\n\n    protected final boolean tryAcquire(int acquires) {\n        return nonfairTryAcquire(acquires);\n    }\n}</code></pre>\n<p>从源码可以得知，NonfairSync的lock()方法与公平同步器FairSync相比，一开始就尝试修改同步状态，如果没有修改成功才会进入acquire(1)方法，acquire(1)会调用tryAcquire()方法，与FairSync不同的是，NonfairSync的tryAcquire()方法调用了父类Sync的nonfairTryAcquire(acquires)：</p>\n<pre><code class=\"language-java\">final boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        if (compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    } else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc &lt; 0) // overflow\n            throw new Error(&quot;Maximum lock count exceeded&quot;);\n        setState(nextc);\n        return true;\n    }\n    return false;\n}</code></pre>\n<p>与FairSync的tryAcquire()方法对比：</p>\n<pre><code class=\"language-java\">protected final boolean tryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        if (!hasQueuedPredecessors() &amp;&amp; compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    } else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc &lt; 0)\n            throw new Error(&quot;Maximum lock count exceeded&quot;);\n        setState(nextc);\n        return true;\n    }\n    return false;\n}</code></pre>\n<p>会发现nonfairTryAcquire()中少了一步操作：调用hasQueuedPredecessors()。在FairSync的tryAcquire()方法中，当state为0时，会首先调用hasQueuedPredecessors()方法，如果其返回值为false，才会尝试CAS方式修改state；hasQueuedPredecessors()源码如下：</p>\n<pre><code class=\"language-java\">public final boolean hasQueuedPredecessors() {\n    // The correctness of this depends on head being initialized\n    // before tail and on head.next being accurate if the current\n    // thread is first in queue.\n    Node t = tail; // Read fields in reverse initialization order\n    Node h = head;\n    Node s;\n    // 等待队列为空时，返回false\n    // 等待队列不为空时，分三种情况：\n    //  - 头节点的后继节点为空，返回true\n    //  - 头节点的后继节点不为空，但该后继节点包装的线程是当前线程，返回false\n    //  - 头节点的后继节点不为空，且该后继节点包装的线程并不是当前线程，返回true\n    return h != t &amp;&amp; ((s = h.next) == null || s.thread != Thread.currentThread());\n}\n</code></pre>\n<p>从源码可以得知，公平模式下，有两种情况会尝试获取同步状态：</p>\n<ul>\n<li>队列为空；此时当然可以直接尝试获取同步状态。</li>\n<li>队列不为空，但当前线程就是头节点的后继节点包装的线程；此时当前线程就是即将唤醒的线程，因此也可以直接尝试获取同步状态。</li>\n</ul>\n<p>从上面的分析我们可以得出公平模式和非公平模式的差异：公平模式下，线程在尝试获取锁时，即使锁没有被任何线程锁持有，它也会判断自己是不是即将被唤醒的那个线程，如果是才尝试获取锁，如果不是就排队等待。而在非公平模式下不会有这些考虑，直接就尝试获取锁，但如果这两次尝试都不成功的话，就与公平锁一样，需要添加到等待队列尾部等待唤醒。</p>\n<p>非公平锁会有更好的性能，但非公平锁让获取锁的时间变得不确定，可能会导致在同步队列中的线程长期处于饥饿状态。</p>\n',86,75,2,NULL,'2019-10-16 13:31:39','2019-10-17 07:19:51',0,'9,14,35',1,0),(50,'Java多线程JUC线程池01——线程池架构','介绍JUC线程池架构及其示例','Bobbi','## 线程池架构图\n\n![image.png](http://oss.dblearn.cn/dbblog/20191023/3dd2fc1adcdb401a89457f7608bf7864.png)\n\n## Executor\n它是\"执行者\"接口，它是来执行任务的。准确的说，Executor提供了execute()接口来执行已提交的 Runnable 任务的对象。Executor存在的目的是提供一种将\"任务提交\"与\"任务如何运行\"分离开来的机制。\n它只包含一个函数接口：\n```java\nvoid execute(Runnable command);\n```\n\n## ExecutorService\nExecutorService继承于Executor。它是\"执行者服务\"接口，它是为\"执行者接口Executor\"服务而存在的；准确的话，ExecutorService提供了\"将任务提交给执行者的接口(submit方法)\"，\"让执行者执行任务(invokeAll, invokeAny方法)\"的接口等等。\n\nExecutorService函数列表\n```java\npublic interface ExecutorService extends Executor {\n\n    /**\n     * 启动一次顺序关闭，执行以前提交的任务，但不接受新任务。\n     */\n    void shutdown();\n\n    /**\n     * 试图停止所有正在执行的活动任务，暂停处理正在等待的任务，并返回等待执行的任务列表。\n     */\n    List<Runnable> shutdownNow();\n\n    /**\n     * 如果关闭后所有任务都已完成，则返回 true。\n     */\n    boolean isTerminated();\n\n    /**\n     * 请求关闭、发生超时或者当前线程中断，无论哪一个首先发生之后，都将导致阻塞，直到所有任务完成执行。\n     */\n    boolean awaitTermination(long timeout, TimeUnit unit)\n        throws InterruptedException;\n\n    /**\n     *  提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。\n     */\n    <T> Future<T> submit(Runnable task, T result);\n\n    /**\n     * 提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。\n     */\n    Future<?> submit(Runnable task);\n\n    /**\n     * 执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。\n     */\n    <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)\n        throws InterruptedException;\n\n    /**\n     * 执行给定的任务，当所有任务完成或超时期满时（无论哪个首先发生），返回保持任务状态和结果的 Future 列表。\n     */\n    <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,\n                                  long timeout, TimeUnit unit)\n        throws InterruptedException;\n\n    /**\n     * 执行给定的任务，如果某个任务已成功完成（也就是未抛出异常），则返回其结果。\n     */\n    <T> T invokeAny(Collection<? extends Callable<T>> tasks)\n        throws InterruptedException, ExecutionException;\n\n    /**\n     * 执行给定的任务，如果在给定的超时期满前某个任务已成功完成（也就是未抛出异常），则返回其结果。\n     */\n    <T> T invokeAny(Collection<? extends Callable<T>> tasks,\n                    long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException;\n}\n```\n\n## AbstractExecutorService\nAbstractExecutorService是一个抽象类，它实现了ExecutorService接口。\nAbstractExecutorService存在的目的是为ExecutorService中的函数接口提供了默认实现。\n\nAbstractExecutorService函数列表\n由于它的函数列表和ExecutorService一样，这里就不再重复列举了。\n\n## ThreadPoolExecutor\nThreadPoolExecutor就是大名鼎鼎的\"线程池\"。它继承于AbstractExecutorService抽象类。\n```java\n// 用给定的初始参数和默认的线程工厂及被拒绝的执行处理程序创建新的 ThreadPoolExecutor。\nThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue)\n// 用给定的初始参数和默认的线程工厂创建新的 ThreadPoolExecutor。\nThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, RejectedExecutionHandler handler)\n// 用给定的初始参数和默认被拒绝的执行处理程序创建新的 ThreadPoolExecutor。\nThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory)\n// 用给定的初始参数创建新的 ThreadPoolExecutor。\nThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)\n\n// 基于完成执行给定 Runnable 所调用的方法。\nprotected void afterExecute(Runnable r, Throwable t)\n// 如果在保持活动时间内没有任务到达，新任务到达时正在替换（如果需要），则设置控制核心线程是超时还是终止的策略。\nvoid allowCoreThreadTimeOut(boolean value)\n// 如果此池允许核心线程超时和终止，如果在 keepAlive 时间内没有任务到达，新任务到达时正在替换（如果需要），则返回 true。\nboolean allowsCoreThreadTimeOut()\n// 请求关闭、发生超时或者当前线程中断，无论哪一个首先发生之后，都将导致阻塞，直到所有任务完成执行。\nboolean awaitTermination(long timeout, TimeUnit unit)\n// 在执行给定线程中的给定 Runnable 之前调用的方法。\nprotected void beforeExecute(Thread t, Runnable r)\n// 在将来某个时间执行给定任务。\nvoid execute(Runnable command)\n// 当不再引用此执行程序时，调用 shutdown。\nprotected void finalize()\n// 返回主动执行任务的近似线程数。\nint getActiveCount()\n// 返回已完成执行的近似任务总数。\nlong getCompletedTaskCount()\n// 返回核心线程数。\nint getCorePoolSize()\n// 返回线程保持活动的时间，该时间就是超过核心池大小的线程可以在终止前保持空闲的时间值。\nlong getKeepAliveTime(TimeUnit unit)\n// 返回曾经同时位于池中的最大线程数。\nint getLargestPoolSize()\n// 返回允许的最大线程数。\nint getMaximumPoolSize()\n// 返回池中的当前线程数。\nint getPoolSize()\n// 返回此执行程序使用的任务队列。\nBlockingQueue<Runnable> getQueue()\n// 返回用于未执行任务的当前处理程序。\nRejectedExecutionHandler getRejectedExecutionHandler()\n// 返回曾计划执行的近似任务总数。\nlong getTaskCount()\n// 返回用于创建新线程的线程工厂。\nThreadFactory getThreadFactory()\n// 如果此执行程序已关闭，则返回 true。\nboolean isShutdown()\n// 如果关闭后所有任务都已完成，则返回 true。\nboolean isTerminated()\n// 如果此执行程序处于在 shutdown 或 shutdownNow 之后正在终止但尚未完全终止的过程中，则返回 true。\nboolean isTerminating()\n// 启动所有核心线程，使其处于等待工作的空闲状态。\nint prestartAllCoreThreads()\n// 启动核心线程，使其处于等待工作的空闲状态。\nboolean prestartCoreThread()\n// 尝试从工作队列移除所有已取消的 Future 任务。\nvoid purge()\n// 从执行程序的内部队列中移除此任务（如果存在），从而如果尚未开始，则其不再运行。\nboolean remove(Runnable task)\n// 设置核心线程数。\nvoid setCorePoolSize(int corePoolSize)\n// 设置线程在终止前可以保持空闲的时间限制。\nvoid setKeepAliveTime(long time, TimeUnit unit)\n// 设置允许的最大线程数。\nvoid setMaximumPoolSize(int maximumPoolSize)\n// 设置用于未执行任务的新处理程序。\nvoid setRejectedExecutionHandler(RejectedExecutionHandler handler)\n// 设置用于创建新线程的线程工厂。\nvoid setThreadFactory(ThreadFactory threadFactory)\n// 按过去执行已提交任务的顺序发起一个有序的关闭，但是不接受新任务。\nvoid shutdown()\n// 尝试停止所有的活动执行任务、暂停等待任务的处理，并返回等待执行的任务列表。\nList<Runnable> shutdownNow()\n// 当 Executor 已经终止时调用的方法。\nprotected void terminated()\n```\n\n## ScheduledExecutorService\nScheduledExecutorService是一个接口，它继承于于ExecutorService。它相当于提供了\"延时\"和\"周期执行\"功能的ExecutorService。\nScheduledExecutorService提供了相应的函数接口，可以安排任务在给定的延迟后执行，也可以让任务周期的执行。\n\nScheduledExecutorService函数列表\n```java\n// 创建并执行在给定延迟后启用的 ScheduledFuture。\n<V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)\n// 创建并执行在给定延迟后启用的一次性操作。\nScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)\n// 创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期；也就是将在 initialDelay 后开始执行，然后在 initialDelay+period 后执行，接着在 initialDelay + 2 * period 后执行，依此类推。\nScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)\n// 创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟。\nScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)\n```\n\n## ScheduledThreadPoolExecutor\nScheduledThreadPoolExecutor继承于ThreadPoolExecutor，并且实现了ScheduledExecutorService接口。它相当于提供了\"延时\"和\"周期执行\"功能的ScheduledExecutorService。\nScheduledThreadPoolExecutor类似于Timer，但是在高并发程序中，ScheduledThreadPoolExecutor的性能要优于Timer。\n\nScheduledThreadPoolExecutor函数列表\n```java\n// 使用给定核心池大小创建一个新 ScheduledThreadPoolExecutor。\nScheduledThreadPoolExecutor(int corePoolSize)\n// 使用给定初始参数创建一个新 ScheduledThreadPoolExecutor。\nScheduledThreadPoolExecutor(int corePoolSize, RejectedExecutionHandler handler)\n// 使用给定的初始参数创建一个新 ScheduledThreadPoolExecutor。\nScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory)\n// 使用给定初始参数创建一个新 ScheduledThreadPoolExecutor。\nScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler)\n\n// 修改或替换用于执行 callable 的任务。\nprotected <V> RunnableScheduledFuture<V> decorateTask(Callable<V> callable, RunnableScheduledFuture<V> task)\n// 修改或替换用于执行 runnable 的任务。\nprotected <V> RunnableScheduledFuture<V> decorateTask(Runnable runnable, RunnableScheduledFuture<V> task)\n// 使用所要求的零延迟执行命令。\nvoid execute(Runnable command)\n// 获取有关在此执行程序已 shutdown 的情况下、是否继续执行现有定期任务的策略。\nboolean getContinueExistingPeriodicTasksAfterShutdownPolicy()\n// 获取有关在此执行程序已 shutdown 的情况下是否继续执行现有延迟任务的策略。\nboolean getExecuteExistingDelayedTasksAfterShutdownPolicy()\n// 返回此执行程序使用的任务队列。\nBlockingQueue<Runnable> getQueue()\n// 从执行程序的内部队列中移除此任务（如果存在），从而如果尚未开始，则其不再运行。\nboolean remove(Runnable task)\n// 创建并执行在给定延迟后启用的 ScheduledFuture。\n<V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)\n// 创建并执行在给定延迟后启用的一次性操作。\nScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)\n// 创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期；也就是将在 initialDelay 后开始执行，然后在 initialDelay+period 后执行，接着在 initialDelay + 2 * period 后执行，依此类推。\nScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)\n// 创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟。\nScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)\n// 设置有关在此执行程序已 shutdown 的情况下是否继续执行现有定期任务的策略。\nvoid setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)\n// 设置有关在此执行程序已 shutdown 的情况下是否继续执行现有延迟任务的策略。\nvoid setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value)\n// 在以前已提交任务的执行中发起一个有序的关闭，但是不接受新任务。\nvoid shutdown()\n// 尝试停止所有正在执行的任务、暂停等待任务的处理，并返回等待执行的任务列表。\nList<Runnable> shutdownNow()\n// 提交一个返回值的任务用于执行，返回一个表示任务的未决结果的 Future。\n<T> Future<T> submit(Callable<T> task)\n// 提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。\nFuture<?> submit(Runnable task)\n// 提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。\n<T> Future<T> submit(Runnable task, T result)\n```\n\n## Executors\nExecutors是个静态工厂类。它通过静态工厂方法返回ExecutorService、ScheduledExecutorService、ThreadFactory 和 Callable 等类的对象。\n\nExecutors函数列表\n```java\n// 返回 Callable 对象，调用它时可运行给定特权的操作并返回其结果。\nstatic Callable<Object> callable(PrivilegedAction<?> action)\n// 返回 Callable 对象，调用它时可运行给定特权的异常操作并返回其结果。\nstatic Callable<Object> callable(PrivilegedExceptionAction<?> action)\n// 返回 Callable 对象，调用它时可运行给定的任务并返回 null。\nstatic Callable<Object> callable(Runnable task)\n// 返回 Callable 对象，调用它时可运行给定的任务并返回给定的结果。\nstatic <T> Callable<T> callable(Runnable task, T result)\n// 返回用于创建新线程的默认线程工厂。\nstatic ThreadFactory defaultThreadFactory()\n// 创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。\nstatic ExecutorService newCachedThreadPool()\n// 创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们，并在需要时使用提供的 ThreadFactory 创建新线程。\nstatic ExecutorService newCachedThreadPool(ThreadFactory threadFactory)\n// 创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。\nstatic ExecutorService newFixedThreadPool(int nThreads)\n// 创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程，在需要时使用提供的 ThreadFactory 创建新线程。\nstatic ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory)\n// 创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。\nstatic ScheduledExecutorService newScheduledThreadPool(int corePoolSize)\n// 创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。\nstatic ScheduledExecutorService newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory)\n// 创建一个使用单个 worker 线程的 Executor，以无界队列方式来运行该线程。\nstatic ExecutorService newSingleThreadExecutor()\n// 创建一个使用单个 worker 线程的 Executor，以无界队列方式来运行该线程，并在需要时使用提供的 ThreadFactory 创建新线程。\nstatic ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory)\n// 创建一个单线程执行程序，它可安排在给定延迟后运行命令或者定期地执行。\nstatic ScheduledExecutorService newSingleThreadScheduledExecutor()\n// 创建一个单线程执行程序，它可安排在给定延迟后运行命令或者定期地执行。\nstatic ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory)\n// 返回 Callable 对象，调用它时可在当前的访问控制上下文中执行给定的 callable 对象。\nstatic <T> Callable<T> privilegedCallable(Callable<T> callable)\n// 返回 Callable 对象，调用它时可在当前的访问控制上下文中，使用当前上下文类加载器作为上下文类加载器来执行给定的 callable 对象。\nstatic <T> Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable)\n// 返回用于创建新线程的线程工厂，这些新线程与当前线程具有相同的权限。\nstatic ThreadFactory privilegedThreadFactory()\n// 返回一个将所有已定义的 ExecutorService 方法委托给指定执行程序的对象，但是使用强制转换可能无法访问其他方法。\nstatic ExecutorService unconfigurableExecutorService(ExecutorService executor)\n// 返回一个将所有已定义的 ExecutorService 方法委托给指定执行程序的对象，但是使用强制转换可能无法访问其他方法。\nstatic ScheduledExecutorService unconfigurableScheduledExecutorService(ScheduledExecutorService executor)\n```\n\n## 线程池示例\n```java\nclass MyThread extends Thread {\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + \" is running\");\n    }\n}\n\npublic class ThreadPoolDemo {\n\n    public static void main(String[] args) {\n        // 创建一个可重用固定线程数的线程池\n        ExecutorService pool = Executors.newFixedThreadPool(2);\n        // 创建实现了Runnable接口对象，Thread对象当然也实现了Runnable接口\n        Thread ta = new MyThread();\n        Thread tb = new MyThread();\n        Thread tc = new MyThread();\n        Thread td = new MyThread();\n        Thread te = new MyThread();\n        // 将线程放入池中进行执行\n        pool.execute(ta);\n        pool.execute(tb);\n        pool.execute(tc);\n        pool.execute(td);\n        pool.execute(te);\n        // 关闭线程池\n        pool.shutdown();\n\n    }\n\n}\n```\n运行结果：\n\n```shell\npool-1-thread-1 is running\npool-1-thread-2 is running\npool-1-thread-1 is running\npool-1-thread-2 is running\npool-1-thread-1 is running\n\n```\n结果说明：\n\n主线程中创建了线程池pool，线程池的容量是2，即线程池中最多能同时运行2个线程，接着将ta、tb、tc、td、te这5个线程添加到线程池，从结果看出，只有两个线程在运行。最后，通过shutdown()关闭线程池','<h2 id=\"-\">线程池架构图</h2>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191023/3dd2fc1adcdb401a89457f7608bf7864.png\" alt=\"image.png\"></p>\n<h2 id=\"executor\">Executor</h2>\n<p>它是&quot;执行者&quot;接口，它是来执行任务的。准确的说，Executor提供了execute()接口来执行已提交的 Runnable 任务的对象。Executor存在的目的是提供一种将&quot;任务提交&quot;与&quot;任务如何运行&quot;分离开来的机制。\n它只包含一个函数接口：</p>\n<pre><code class=\"language-java\">void execute(Runnable command);</code></pre>\n<h2 id=\"executorservice\">ExecutorService</h2>\n<p>ExecutorService继承于Executor。它是&quot;执行者服务&quot;接口，它是为&quot;执行者接口Executor&quot;服务而存在的；准确的话，ExecutorService提供了&quot;将任务提交给执行者的接口(submit方法)&quot;，&quot;让执行者执行任务(invokeAll, invokeAny方法)&quot;的接口等等。</p>\n<p>ExecutorService函数列表</p>\n<pre><code class=\"language-java\">public interface ExecutorService extends Executor {\n\n    /**\n     * 启动一次顺序关闭，执行以前提交的任务，但不接受新任务。\n     */\n    void shutdown();\n\n    /**\n     * 试图停止所有正在执行的活动任务，暂停处理正在等待的任务，并返回等待执行的任务列表。\n     */\n    List&lt;Runnable&gt; shutdownNow();\n\n    /**\n     * 如果关闭后所有任务都已完成，则返回 true。\n     */\n    boolean isTerminated();\n\n    /**\n     * 请求关闭、发生超时或者当前线程中断，无论哪一个首先发生之后，都将导致阻塞，直到所有任务完成执行。\n     */\n    boolean awaitTermination(long timeout, TimeUnit unit)\n        throws InterruptedException;\n\n    /**\n     *  提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。\n     */\n    &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);\n\n    /**\n     * 提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。\n     */\n    Future&lt;?&gt; submit(Runnable task);\n\n    /**\n     * 执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。\n     */\n    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)\n        throws InterruptedException;\n\n    /**\n     * 执行给定的任务，当所有任务完成或超时期满时（无论哪个首先发生），返回保持任务状态和结果的 Future 列表。\n     */\n    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,\n                                  long timeout, TimeUnit unit)\n        throws InterruptedException;\n\n    /**\n     * 执行给定的任务，如果某个任务已成功完成（也就是未抛出异常），则返回其结果。\n     */\n    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)\n        throws InterruptedException, ExecutionException;\n\n    /**\n     * 执行给定的任务，如果在给定的超时期满前某个任务已成功完成（也就是未抛出异常），则返回其结果。\n     */\n    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,\n                    long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException;\n}</code></pre>\n<h2 id=\"abstractexecutorservice\">AbstractExecutorService</h2>\n<p>AbstractExecutorService是一个抽象类，它实现了ExecutorService接口。\nAbstractExecutorService存在的目的是为ExecutorService中的函数接口提供了默认实现。</p>\n<p>AbstractExecutorService函数列表\n由于它的函数列表和ExecutorService一样，这里就不再重复列举了。</p>\n<h2 id=\"threadpoolexecutor\">ThreadPoolExecutor</h2>\n<p>ThreadPoolExecutor就是大名鼎鼎的&quot;线程池&quot;。它继承于AbstractExecutorService抽象类。</p>\n<pre><code class=\"language-java\">// 用给定的初始参数和默认的线程工厂及被拒绝的执行处理程序创建新的 ThreadPoolExecutor。\nThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)\n// 用给定的初始参数和默认的线程工厂创建新的 ThreadPoolExecutor。\nThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, RejectedExecutionHandler handler)\n// 用给定的初始参数和默认被拒绝的执行处理程序创建新的 ThreadPoolExecutor。\nThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory)\n// 用给定的初始参数创建新的 ThreadPoolExecutor。\nThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)\n\n// 基于完成执行给定 Runnable 所调用的方法。\nprotected void afterExecute(Runnable r, Throwable t)\n// 如果在保持活动时间内没有任务到达，新任务到达时正在替换（如果需要），则设置控制核心线程是超时还是终止的策略。\nvoid allowCoreThreadTimeOut(boolean value)\n// 如果此池允许核心线程超时和终止，如果在 keepAlive 时间内没有任务到达，新任务到达时正在替换（如果需要），则返回 true。\nboolean allowsCoreThreadTimeOut()\n// 请求关闭、发生超时或者当前线程中断，无论哪一个首先发生之后，都将导致阻塞，直到所有任务完成执行。\nboolean awaitTermination(long timeout, TimeUnit unit)\n// 在执行给定线程中的给定 Runnable 之前调用的方法。\nprotected void beforeExecute(Thread t, Runnable r)\n// 在将来某个时间执行给定任务。\nvoid execute(Runnable command)\n// 当不再引用此执行程序时，调用 shutdown。\nprotected void finalize()\n// 返回主动执行任务的近似线程数。\nint getActiveCount()\n// 返回已完成执行的近似任务总数。\nlong getCompletedTaskCount()\n// 返回核心线程数。\nint getCorePoolSize()\n// 返回线程保持活动的时间，该时间就是超过核心池大小的线程可以在终止前保持空闲的时间值。\nlong getKeepAliveTime(TimeUnit unit)\n// 返回曾经同时位于池中的最大线程数。\nint getLargestPoolSize()\n// 返回允许的最大线程数。\nint getMaximumPoolSize()\n// 返回池中的当前线程数。\nint getPoolSize()\n// 返回此执行程序使用的任务队列。\nBlockingQueue&lt;Runnable&gt; getQueue()\n// 返回用于未执行任务的当前处理程序。\nRejectedExecutionHandler getRejectedExecutionHandler()\n// 返回曾计划执行的近似任务总数。\nlong getTaskCount()\n// 返回用于创建新线程的线程工厂。\nThreadFactory getThreadFactory()\n// 如果此执行程序已关闭，则返回 true。\nboolean isShutdown()\n// 如果关闭后所有任务都已完成，则返回 true。\nboolean isTerminated()\n// 如果此执行程序处于在 shutdown 或 shutdownNow 之后正在终止但尚未完全终止的过程中，则返回 true。\nboolean isTerminating()\n// 启动所有核心线程，使其处于等待工作的空闲状态。\nint prestartAllCoreThreads()\n// 启动核心线程，使其处于等待工作的空闲状态。\nboolean prestartCoreThread()\n// 尝试从工作队列移除所有已取消的 Future 任务。\nvoid purge()\n// 从执行程序的内部队列中移除此任务（如果存在），从而如果尚未开始，则其不再运行。\nboolean remove(Runnable task)\n// 设置核心线程数。\nvoid setCorePoolSize(int corePoolSize)\n// 设置线程在终止前可以保持空闲的时间限制。\nvoid setKeepAliveTime(long time, TimeUnit unit)\n// 设置允许的最大线程数。\nvoid setMaximumPoolSize(int maximumPoolSize)\n// 设置用于未执行任务的新处理程序。\nvoid setRejectedExecutionHandler(RejectedExecutionHandler handler)\n// 设置用于创建新线程的线程工厂。\nvoid setThreadFactory(ThreadFactory threadFactory)\n// 按过去执行已提交任务的顺序发起一个有序的关闭，但是不接受新任务。\nvoid shutdown()\n// 尝试停止所有的活动执行任务、暂停等待任务的处理，并返回等待执行的任务列表。\nList&lt;Runnable&gt; shutdownNow()\n// 当 Executor 已经终止时调用的方法。\nprotected void terminated()</code></pre>\n<h2 id=\"scheduledexecutorservice\">ScheduledExecutorService</h2>\n<p>ScheduledExecutorService是一个接口，它继承于于ExecutorService。它相当于提供了&quot;延时&quot;和&quot;周期执行&quot;功能的ExecutorService。\nScheduledExecutorService提供了相应的函数接口，可以安排任务在给定的延迟后执行，也可以让任务周期的执行。</p>\n<p>ScheduledExecutorService函数列表</p>\n<pre><code class=\"language-java\">// 创建并执行在给定延迟后启用的 ScheduledFuture。\n&lt;V&gt; ScheduledFuture&lt;V&gt; schedule(Callable&lt;V&gt; callable, long delay, TimeUnit unit)\n// 创建并执行在给定延迟后启用的一次性操作。\nScheduledFuture&lt;?&gt; schedule(Runnable command, long delay, TimeUnit unit)\n// 创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期；也就是将在 initialDelay 后开始执行，然后在 initialDelay+period 后执行，接着在 initialDelay + 2 * period 后执行，依此类推。\nScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)\n// 创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟。\nScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)</code></pre>\n<h2 id=\"scheduledthreadpoolexecutor\">ScheduledThreadPoolExecutor</h2>\n<p>ScheduledThreadPoolExecutor继承于ThreadPoolExecutor，并且实现了ScheduledExecutorService接口。它相当于提供了&quot;延时&quot;和&quot;周期执行&quot;功能的ScheduledExecutorService。\nScheduledThreadPoolExecutor类似于Timer，但是在高并发程序中，ScheduledThreadPoolExecutor的性能要优于Timer。</p>\n<p>ScheduledThreadPoolExecutor函数列表</p>\n<pre><code class=\"language-java\">// 使用给定核心池大小创建一个新 ScheduledThreadPoolExecutor。\nScheduledThreadPoolExecutor(int corePoolSize)\n// 使用给定初始参数创建一个新 ScheduledThreadPoolExecutor。\nScheduledThreadPoolExecutor(int corePoolSize, RejectedExecutionHandler handler)\n// 使用给定的初始参数创建一个新 ScheduledThreadPoolExecutor。\nScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory)\n// 使用给定初始参数创建一个新 ScheduledThreadPoolExecutor。\nScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler)\n\n// 修改或替换用于执行 callable 的任务。\nprotected &lt;V&gt; RunnableScheduledFuture&lt;V&gt; decorateTask(Callable&lt;V&gt; callable, RunnableScheduledFuture&lt;V&gt; task)\n// 修改或替换用于执行 runnable 的任务。\nprotected &lt;V&gt; RunnableScheduledFuture&lt;V&gt; decorateTask(Runnable runnable, RunnableScheduledFuture&lt;V&gt; task)\n// 使用所要求的零延迟执行命令。\nvoid execute(Runnable command)\n// 获取有关在此执行程序已 shutdown 的情况下、是否继续执行现有定期任务的策略。\nboolean getContinueExistingPeriodicTasksAfterShutdownPolicy()\n// 获取有关在此执行程序已 shutdown 的情况下是否继续执行现有延迟任务的策略。\nboolean getExecuteExistingDelayedTasksAfterShutdownPolicy()\n// 返回此执行程序使用的任务队列。\nBlockingQueue&lt;Runnable&gt; getQueue()\n// 从执行程序的内部队列中移除此任务（如果存在），从而如果尚未开始，则其不再运行。\nboolean remove(Runnable task)\n// 创建并执行在给定延迟后启用的 ScheduledFuture。\n&lt;V&gt; ScheduledFuture&lt;V&gt; schedule(Callable&lt;V&gt; callable, long delay, TimeUnit unit)\n// 创建并执行在给定延迟后启用的一次性操作。\nScheduledFuture&lt;?&gt; schedule(Runnable command, long delay, TimeUnit unit)\n// 创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期；也就是将在 initialDelay 后开始执行，然后在 initialDelay+period 后执行，接着在 initialDelay + 2 * period 后执行，依此类推。\nScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)\n// 创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟。\nScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)\n// 设置有关在此执行程序已 shutdown 的情况下是否继续执行现有定期任务的策略。\nvoid setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)\n// 设置有关在此执行程序已 shutdown 的情况下是否继续执行现有延迟任务的策略。\nvoid setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value)\n// 在以前已提交任务的执行中发起一个有序的关闭，但是不接受新任务。\nvoid shutdown()\n// 尝试停止所有正在执行的任务、暂停等待任务的处理，并返回等待执行的任务列表。\nList&lt;Runnable&gt; shutdownNow()\n// 提交一个返回值的任务用于执行，返回一个表示任务的未决结果的 Future。\n&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)\n// 提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。\nFuture&lt;?&gt; submit(Runnable task)\n// 提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。\n&lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result)</code></pre>\n<h2 id=\"executors\">Executors</h2>\n<p>Executors是个静态工厂类。它通过静态工厂方法返回ExecutorService、ScheduledExecutorService、ThreadFactory 和 Callable 等类的对象。</p>\n<p>Executors函数列表</p>\n<pre><code class=\"language-java\">// 返回 Callable 对象，调用它时可运行给定特权的操作并返回其结果。\nstatic Callable&lt;Object&gt; callable(PrivilegedAction&lt;?&gt; action)\n// 返回 Callable 对象，调用它时可运行给定特权的异常操作并返回其结果。\nstatic Callable&lt;Object&gt; callable(PrivilegedExceptionAction&lt;?&gt; action)\n// 返回 Callable 对象，调用它时可运行给定的任务并返回 null。\nstatic Callable&lt;Object&gt; callable(Runnable task)\n// 返回 Callable 对象，调用它时可运行给定的任务并返回给定的结果。\nstatic &lt;T&gt; Callable&lt;T&gt; callable(Runnable task, T result)\n// 返回用于创建新线程的默认线程工厂。\nstatic ThreadFactory defaultThreadFactory()\n// 创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。\nstatic ExecutorService newCachedThreadPool()\n// 创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们，并在需要时使用提供的 ThreadFactory 创建新线程。\nstatic ExecutorService newCachedThreadPool(ThreadFactory threadFactory)\n// 创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。\nstatic ExecutorService newFixedThreadPool(int nThreads)\n// 创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程，在需要时使用提供的 ThreadFactory 创建新线程。\nstatic ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory)\n// 创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。\nstatic ScheduledExecutorService newScheduledThreadPool(int corePoolSize)\n// 创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。\nstatic ScheduledExecutorService newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory)\n// 创建一个使用单个 worker 线程的 Executor，以无界队列方式来运行该线程。\nstatic ExecutorService newSingleThreadExecutor()\n// 创建一个使用单个 worker 线程的 Executor，以无界队列方式来运行该线程，并在需要时使用提供的 ThreadFactory 创建新线程。\nstatic ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory)\n// 创建一个单线程执行程序，它可安排在给定延迟后运行命令或者定期地执行。\nstatic ScheduledExecutorService newSingleThreadScheduledExecutor()\n// 创建一个单线程执行程序，它可安排在给定延迟后运行命令或者定期地执行。\nstatic ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory)\n// 返回 Callable 对象，调用它时可在当前的访问控制上下文中执行给定的 callable 对象。\nstatic &lt;T&gt; Callable&lt;T&gt; privilegedCallable(Callable&lt;T&gt; callable)\n// 返回 Callable 对象，调用它时可在当前的访问控制上下文中，使用当前上下文类加载器作为上下文类加载器来执行给定的 callable 对象。\nstatic &lt;T&gt; Callable&lt;T&gt; privilegedCallableUsingCurrentClassLoader(Callable&lt;T&gt; callable)\n// 返回用于创建新线程的线程工厂，这些新线程与当前线程具有相同的权限。\nstatic ThreadFactory privilegedThreadFactory()\n// 返回一个将所有已定义的 ExecutorService 方法委托给指定执行程序的对象，但是使用强制转换可能无法访问其他方法。\nstatic ExecutorService unconfigurableExecutorService(ExecutorService executor)\n// 返回一个将所有已定义的 ExecutorService 方法委托给指定执行程序的对象，但是使用强制转换可能无法访问其他方法。\nstatic ScheduledExecutorService unconfigurableScheduledExecutorService(ScheduledExecutorService executor)</code></pre>\n<h2 id=\"-\">线程池示例</h2>\n<pre><code class=\"language-java\">class MyThread extends Thread {\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + &quot; is running&quot;);\n    }\n}\n\npublic class ThreadPoolDemo {\n\n    public static void main(String[] args) {\n        // 创建一个可重用固定线程数的线程池\n        ExecutorService pool = Executors.newFixedThreadPool(2);\n        // 创建实现了Runnable接口对象，Thread对象当然也实现了Runnable接口\n        Thread ta = new MyThread();\n        Thread tb = new MyThread();\n        Thread tc = new MyThread();\n        Thread td = new MyThread();\n        Thread te = new MyThread();\n        // 将线程放入池中进行执行\n        pool.execute(ta);\n        pool.execute(tb);\n        pool.execute(tc);\n        pool.execute(td);\n        pool.execute(te);\n        // 关闭线程池\n        pool.shutdown();\n\n    }\n\n}</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">pool-1-thread-1 is running\npool-1-thread-2 is running\npool-1-thread-1 is running\npool-1-thread-2 is running\npool-1-thread-1 is running\n</code></pre>\n<p>结果说明：</p>\n<p>主线程中创建了线程池pool，线程池的容量是2，即线程池中最多能同时运行2个线程，接着将ta、tb、tc、td、te这5个线程添加到线程池，从结果看出，只有两个线程在运行。最后，通过shutdown()关闭线程池</p>\n',45,2,2,NULL,'2019-10-23 10:03:30','2019-10-23 10:03:30',0,'9,14',1,0),(51,'Java多线程JUC线程池02——ThreadPoolExecutor解析(1)','ThreadPoolExecutor是线程池类。对于线程池，可以通俗的将它理解为\"存放一定数量线程的一个线程集合。线程池允许若个线程同时允许，允许同时运行的线程数量就是线程池的容量；当添加的到线程池中的线程超过它的容量时，会有一部分线程阻塞等待。线程池会通过相应的调度策略和拒绝策略，对添加到线程池中的线程进行管理。','Bobbi','## ThreadPoolExecutor简介\nThreadPoolExecutor是线程池类。对于线程池，可以通俗的将它理解为\"存放一定数量线程的一个线程集合。线程池允许若个线程同时允许，允许同时运行的线程数量就是线程池的容量；当添加的到线程池中的线程超过它的容量时，会有一部分线程阻塞等待。线程池会通过相应的调度策略和拒绝策略，对添加到线程池中的线程进行管理。\n## 线程池生命周期\n线程有5种状态：新建状态，就绪状态，运行状态，阻塞状态，死亡状态。线程池也有5种状态；然而，线程池不同于线程，线程池的5种状态是：Running, SHUTDOWN, STOP, TIDYING, TERMINATED。\n\n线程池状态定义代码如下：\n```java\n    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n    private static final int COUNT_BITS = Integer.SIZE - 3;\n    private static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\n    // runState is stored in the high-order bits\n    private static final int RUNNING    = -1 << COUNT_BITS;\n    private static final int SHUTDOWN   =  0 << COUNT_BITS;\n    private static final int STOP       =  1 << COUNT_BITS;\n    private static final int TIDYING    =  2 << COUNT_BITS;\n    private static final int TERMINATED =  3 << COUNT_BITS;\n```\nctl是一个AtomicInteger类型的原子对象。ctl记录了\"线程池中的任务数量\"和\"线程池状态\"2个信息。\n\nctl共包括32位。其中，高3位表示\"线程池状态\"，低29位表示\"线程池中的任务数量\"。\n```java\nRUNNING    -- 对应的高3位值是111。\nSHUTDOWN   -- 对应的高3位值是000。\nSTOP       -- 对应的高3位值是001。\nTIDYING    -- 对应的高3位值是010。\nTERMINATED -- 对应的高3位值是011。\n```\n![image.png](http://oss.dblearn.cn/dbblog/20191024/4feeb270c2824814bf729c0b227bf214.png)\n\n说明：\n#### RUNNING\n1. 状态说明：线程池处在RUNNING状态时，能够接收新任务，以及对已添加的任务进行处理。\n2. 状态切换：线程池的初始化状态是RUNNING。换句话说，线程池被一旦被创建，就处于RUNNING状态！在ctl的初始化代码中(如下)，就将它初始化为RUNNING状态，并且\"任务数量\"初始化为0。\n\n#### SHUTDOWN\n1. 状态说明：线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务。\n2. 状态切换：调用线程池的shutdown()接口时，线程池由RUNNING -> SHUTDOWN。\n\n#### STOP\n1. 状态说明：线程池处在STOP状态时，不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。\n2. 状态切换：调用线程池的shutdownNow()接口时，线程池由(RUNNING or SHUTDOWN ) -> STOP。\n\n#### TIDYING\n1. 状态说明：当所有的任务已终止，ctl记录的\"任务数量\"为0，线程池会变为TIDYING状态。当线程池变为TIDYING状态时，会执行钩子函数terminated()。terminated()在ThreadPoolExecutor类中是空的，若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重载terminated()函数来实现。\n2. 状态切换：当线程池在SHUTDOWN状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN -> TIDYING。\n当线程池在STOP状态下，线程池中执行的任务为空时，就会由STOP -> TIDYING。\n\n#### TERMINATED\n1. 状态说明：线程池彻底终止，就变成TERMINATED状态。\n2. 状态切换：线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -> TERMINATED。\n\n```java\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n```\n\n## ThreadPoolExecutor数据结构\n![image.png](http://oss.dblearn.cn/dbblog/20191023/9b7dc0a276604c8cbd28d6ce34be8041.png)\n### 主要成员变量\n\n各个数据在ThreadPoolExecutor.java中的定义如下：\n```java\n// 阻塞队列。\nprivate final BlockingQueue<Runnable> workQueue;\n// 互斥锁\nprivate final ReentrantLock mainLock = new ReentrantLock();\n// 线程集合。一个Worker对应一个线程。\nprivate final HashSet<Worker> workers = new HashSet<Worker>();\n// “终止条件”，与“mainLock”绑定。\nprivate final Condition termination = mainLock.newCondition();\n// 线程池中线程数量曾经达到过的最大值。\nprivate int largestPoolSize;\n// 已完成任务数量\nprivate long completedTaskCount;\n// ThreadFactory对象，用于创建线程。\nprivate volatile ThreadFactory threadFactory;\n// 拒绝策略的处理句柄。\nprivate volatile RejectedExecutionHandler handler;\n// 保持线程存活时间。\nprivate volatile long keepAliveTime;\n\nprivate volatile boolean allowCoreThreadTimeOut;\n// 核心池大小\nprivate volatile int corePoolSize;\n// 最大池大小\nprivate volatile int maximumPoolSize;\n```\n#### workers\nworkders是HashSet<Work>类型，即它是一个Worker集合。而一个Worker对应一个线程，也就是说线程池通过workers包含了“一个线程集合”。当Worker对应的线程启动时，它会执行线程池中的任务；当执行完一个任务后，它会从线程池的阻塞队列中取出一个阻塞的任务来继续运行。\n#### workQueue\n线程池通过workQueue实现了阻塞等待的功能。workQueue是BlockingQueue类型的阻塞队列。当线程池中的线程数超过它的核心线程池容量的时候，提交的任务会进入阻塞队列进行阻塞等待。\n#### mainLock\nmainLock是互斥锁，通过mainLock实现了对线程池的互斥访问。\n#### corePoolSize、maximumPoolSize\ncorePoolSize是“核心池大小”，maximumPoolSize是“最大池大小”。它们的作用是调整线程池中实际运行的线程的数量。例如：\n\n当新任务提交给线程池时，如果线程池中运行的线程数量<corePoolSize，则创建新线程来处理请求。如果线程池中运行的线程数量> corePoolSize，但是却<maximumPoolSize，则仅当阻塞队列满时才创建新线程。如果设置的 corePoolSize 和 maximumPoolSize 相同，则创建了固定大小的线程池。如果将 maximumPoolSize 设置为基本的无界值（如 Integer.MAX_VALUE），则允许池适应任意数量的并发任务。\n\n#### poolSize\npoolSize是当前线程池的实际大小，即线程池中任务的数量\n\n#### allowCoreThreadTimeOut和keepAliveTime\n allowCoreThreadTimeOut表示是否允许\"线程在空闲状态时，仍然能够存活\"；而keepAliveTime是当线程池处于空闲状态的时候，超过keepAliveTime时间之后，空闲的线程会被终止。\n\n#### threadFactory\nthreadFactory是一个线程工厂类，线程池通过ThreadFactory创建线程\n\n#### handler\nhandler是RejectedExecutionHandler类型。它是\"线程池拒绝策略\"的句柄，也就是说\"当某任务添加到线程池中，而线程池拒绝该任务时，线程池会通过handler进行相应的处理\"。\n\n综上所说，线程池通过workers来管理\"线程集合\"，每个线程在启动后，会执行线程池中的任务；当一个任务执行完后，它会从线程池的阻塞队列中取出任务来继续运行。阻塞队列是管理线程池任务的队列，当添加到线程池中的任务超过线程池的容量时，该任务就会进入阻塞队列进行等待。\n\n### 工作队列\n如果新请求的到达速率超过了线程池的处理速率，那么新到来的请求将累积起来。在线程池中，这些请求会在一个由Executor管理的Runnable队列中等待，而不会像线程那样去竞争CPU资源。常见的工作队列有以下几种，前三种用的最多。\n1. ArrayBlockingQueue：列表形式的工作队列，必须要有初始队列大小，有界队列，先进先出。\n2. LinkedBlockingQueue：链表形式的工作队列，可以选择设置初始队列的大小，有界/无界队列，先进先出\n3. SynchronousQueue：SynchronousQueue不是一个真正的队列，而是一种在线程之间移交的机制。要将一个元素放入SynchronousQueue中，必须有另一个线程正在等待接受这个元素。如果没有线程等待，并且线程池的当前大小小于最大值，那么ThreadPoolExecutor将创建一个线程，否则根据饱和策略，这个任务将被拒绝。使用直接移交将更高效，因为任务会直接移交给执行它的线程，而不是被首先放在队列中，然后由工作者线程从队列中提取任务。只有当线程池是无解的或者可以拒绝任务时，SynchronousQueue才有实际价值。\n4. PriorityBlockingQueue：优先级队列，有界队列，根据优先级来安排任务，任务优先级是通过自然顺序或Comparator（如果任务实现了Comparator）来定义的。\n5. DelayedWorkQueue：延迟的工作队列，无界队列。ScheduledThreadPoolExecutor默认使用的延迟队列。\n\n### 饱和策略\n饱和策略也称为拒绝策略；当有界队列被填满后，饱和策略开始发挥作用。ThreadPoolExecutor的饱和策略可以通过调用setRejectedExecutionHandler()来修改（如果某个任务被提交到一个已被关闭的Executor时，也会用到饱和策略）。饱和策略有以下四种，一般使用默认的AbortPolicy。\n\n1. AbortPolicy：中止策略。默认的饱和策略，抛出未检查的RejectedExecutionException。调用者可以捕获这个异常，然后根据需求编写自己的处理代码。\n2. DiscardPolicy：抛弃策略。当新提交的任务无法保存到队列中等待执行时，该策略会悄悄抛弃该任务。\n3. DiscardOldestPolicy：抛弃最旧的策略。当新提交的任务无法保存到队列中等待执行时，则会抛弃下一个将被执行的任务，然后尝试重新提交新的任务。如果工作队列是一个优先队列，那么该策略将导致抛弃优先级最高的任务，因此最好不要将该策略和优先级队列放在一起使用。\n4. CallerRunsPolicy：调用者运行策略。该策略实现了一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者（调用线程池执行任务的主线程），从而降低新任务的流程。它不会在线程池的某个线程中执行新提交的任务，而是在一个调用了execute(Runnable)的线程中执行该任务。当线程池的所有线程都被占用，并且工作队列被填满后，下一个任务会在调用execute(Runnable)时在主线程中执行（调用线程池执行任务的主线程）。由于执行任务需要一定时间，因此主线程至少在一段时间内不能提交任务，从而使得工作者线程有时间来处理完正在执行的任务。\n\n### 线程工厂\n\n每当线程池需要创建一个线程时，都是通过线程工厂方法来完成的。在ThreadFactory中只定义了一个方法newThread()，每当线程池需要创建一个新线程时都会调用这个方法。Executors提供的线程工厂有两种，一般使用默认的，当然如果有特殊需求，也可以自己定制。\n\n1. DefaultThreadFactory：默认线程工厂，创建一个新的、非守护的线程，并且不包含特殊的配置信息。\n2. PrivilegedThreadFactory：通过这种方式创建出来的线程，将与创建PrivilegedThreadFactory的线程拥有相同的访问权限、AccessControlContext、ContextClassLoader。如果不使用PrivilegedThreadFactory，线程池创建的线程将从在需要新线程时调用execute(Runnable)或submit(Runnable)的客户程序中继承访问权限。\n3. 自定义线程工厂：可以自己实现ThreadFactory接口来定制自己的线程工厂方法。\n\n### 线程池处理流程\n\n1. 默认情况下，创建完线程池后并不会立即创建线程，而是等到有任务提交时才会创建线程来进行处理（除非调用prestartCoreThread()或prestartAllCoreThreads()方法）。\n2. 当线程数小于核心线程数时，每提交一个任务就创建一个线程来执行，即使当前线程池中有线程处于空闲状态，直到当前线程数达到核心线程数。这些线程会通过workers来管理。\n3. 当前线程数达到核心线程数时，如果这个时候还提交任务，这些任务会被放到工作队列里。\n当核心线程池处理完了当前的任务后，会来工作队列中取任务处理。\n4. 当前线程数达到核心线程数并且工作队列也满了，如果这个时候还提交任务，则会继续创建线程来处理，直到线程数达到最大线程数。\n5. 当前线程数达到最大线程数并且队列也满了，如果这个时候还提交任务，则会触发饱和策略。\n6. 如果某个线程的空闲时间超过了keepAliveTime，那么将被标记为可回收的，并且当前线程池的当前大小超过了核心线程数时，这个线程将被终止。\n\n![image.png](http://oss.dblearn.cn/dbblog/20191024/cf6cf270ad404bc3a3bb19f704ffeeee.png)\n\n\n\n','<h2 id=\"threadpoolexecutor-\">ThreadPoolExecutor简介</h2>\n<p>ThreadPoolExecutor是线程池类。对于线程池，可以通俗的将它理解为&quot;存放一定数量线程的一个线程集合。线程池允许若个线程同时允许，允许同时运行的线程数量就是线程池的容量；当添加的到线程池中的线程超过它的容量时，会有一部分线程阻塞等待。线程池会通过相应的调度策略和拒绝策略，对添加到线程池中的线程进行管理。</p>\n<h2 id=\"-\">线程池生命周期</h2>\n<p>线程有5种状态：新建状态，就绪状态，运行状态，阻塞状态，死亡状态。线程池也有5种状态；然而，线程池不同于线程，线程池的5种状态是：Running, SHUTDOWN, STOP, TIDYING, TERMINATED。</p>\n<p>线程池状态定义代码如下：</p>\n<pre><code class=\"language-java\">    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n    private static final int COUNT_BITS = Integer.SIZE - 3;\n    private static final int CAPACITY   = (1 &lt;&lt; COUNT_BITS) - 1;\n\n    // runState is stored in the high-order bits\n    private static final int RUNNING    = -1 &lt;&lt; COUNT_BITS;\n    private static final int SHUTDOWN   =  0 &lt;&lt; COUNT_BITS;\n    private static final int STOP       =  1 &lt;&lt; COUNT_BITS;\n    private static final int TIDYING    =  2 &lt;&lt; COUNT_BITS;\n    private static final int TERMINATED =  3 &lt;&lt; COUNT_BITS;</code></pre>\n<p>ctl是一个AtomicInteger类型的原子对象。ctl记录了&quot;线程池中的任务数量&quot;和&quot;线程池状态&quot;2个信息。</p>\n<p>ctl共包括32位。其中，高3位表示&quot;线程池状态&quot;，低29位表示&quot;线程池中的任务数量&quot;。</p>\n<pre><code class=\"language-java\">RUNNING    -- 对应的高3位值是111。\nSHUTDOWN   -- 对应的高3位值是000。\nSTOP       -- 对应的高3位值是001。\nTIDYING    -- 对应的高3位值是010。\nTERMINATED -- 对应的高3位值是011。</code></pre>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191024/4feeb270c2824814bf729c0b227bf214.png\" alt=\"image.png\"></p>\n<p>说明：</p>\n<h4 id=\"running\">RUNNING</h4>\n<ol>\n<li>状态说明：线程池处在RUNNING状态时，能够接收新任务，以及对已添加的任务进行处理。</li>\n<li>状态切换：线程池的初始化状态是RUNNING。换句话说，线程池被一旦被创建，就处于RUNNING状态！在ctl的初始化代码中(如下)，就将它初始化为RUNNING状态，并且&quot;任务数量&quot;初始化为0。</li>\n</ol>\n<h4 id=\"shutdown\">SHUTDOWN</h4>\n<ol>\n<li>状态说明：线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务。</li>\n<li>状态切换：调用线程池的shutdown()接口时，线程池由RUNNING -&gt; SHUTDOWN。</li>\n</ol>\n<h4 id=\"stop\">STOP</h4>\n<ol>\n<li>状态说明：线程池处在STOP状态时，不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。</li>\n<li>状态切换：调用线程池的shutdownNow()接口时，线程池由(RUNNING or SHUTDOWN ) -&gt; STOP。</li>\n</ol>\n<h4 id=\"tidying\">TIDYING</h4>\n<ol>\n<li>状态说明：当所有的任务已终止，ctl记录的&quot;任务数量&quot;为0，线程池会变为TIDYING状态。当线程池变为TIDYING状态时，会执行钩子函数terminated()。terminated()在ThreadPoolExecutor类中是空的，若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重载terminated()函数来实现。</li>\n<li>状态切换：当线程池在SHUTDOWN状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN -&gt; TIDYING。\n当线程池在STOP状态下，线程池中执行的任务为空时，就会由STOP -&gt; TIDYING。</li>\n</ol>\n<h4 id=\"terminated\">TERMINATED</h4>\n<ol>\n<li>状态说明：线程池彻底终止，就变成TERMINATED状态。</li>\n<li>状态切换：线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -&gt; TERMINATED。</li>\n</ol>\n<pre><code class=\"language-java\">private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));</code></pre>\n<h2 id=\"threadpoolexecutor-\">ThreadPoolExecutor数据结构</h2>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191023/9b7dc0a276604c8cbd28d6ce34be8041.png\" alt=\"image.png\"></p>\n<h3 id=\"-\">主要成员变量</h3>\n<p>各个数据在ThreadPoolExecutor.java中的定义如下：</p>\n<pre><code class=\"language-java\">// 阻塞队列。\nprivate final BlockingQueue&lt;Runnable&gt; workQueue;\n// 互斥锁\nprivate final ReentrantLock mainLock = new ReentrantLock();\n// 线程集合。一个Worker对应一个线程。\nprivate final HashSet&lt;Worker&gt; workers = new HashSet&lt;Worker&gt;();\n// “终止条件”，与“mainLock”绑定。\nprivate final Condition termination = mainLock.newCondition();\n// 线程池中线程数量曾经达到过的最大值。\nprivate int largestPoolSize;\n// 已完成任务数量\nprivate long completedTaskCount;\n// ThreadFactory对象，用于创建线程。\nprivate volatile ThreadFactory threadFactory;\n// 拒绝策略的处理句柄。\nprivate volatile RejectedExecutionHandler handler;\n// 保持线程存活时间。\nprivate volatile long keepAliveTime;\n\nprivate volatile boolean allowCoreThreadTimeOut;\n// 核心池大小\nprivate volatile int corePoolSize;\n// 最大池大小\nprivate volatile int maximumPoolSize;</code></pre>\n<h4 id=\"workers\">workers</h4>\n<p>workders是HashSet<Work>类型，即它是一个Worker集合。而一个Worker对应一个线程，也就是说线程池通过workers包含了“一个线程集合”。当Worker对应的线程启动时，它会执行线程池中的任务；当执行完一个任务后，它会从线程池的阻塞队列中取出一个阻塞的任务来继续运行。</p>\n<h4 id=\"workqueue\">workQueue</h4>\n<p>线程池通过workQueue实现了阻塞等待的功能。workQueue是BlockingQueue类型的阻塞队列。当线程池中的线程数超过它的核心线程池容量的时候，提交的任务会进入阻塞队列进行阻塞等待。</p>\n<h4 id=\"mainlock\">mainLock</h4>\n<p>mainLock是互斥锁，通过mainLock实现了对线程池的互斥访问。</p>\n<h4 id=\"corepoolsize-maximumpoolsize\">corePoolSize、maximumPoolSize</h4>\n<p>corePoolSize是“核心池大小”，maximumPoolSize是“最大池大小”。它们的作用是调整线程池中实际运行的线程的数量。例如：</p>\n<p>当新任务提交给线程池时，如果线程池中运行的线程数量&lt;corePoolSize，则创建新线程来处理请求。如果线程池中运行的线程数量&gt; corePoolSize，但是却&lt;maximumPoolSize，则仅当阻塞队列满时才创建新线程。如果设置的 corePoolSize 和 maximumPoolSize 相同，则创建了固定大小的线程池。如果将 maximumPoolSize 设置为基本的无界值（如 Integer.MAX_VALUE），则允许池适应任意数量的并发任务。</p>\n<h4 id=\"poolsize\">poolSize</h4>\n<p>poolSize是当前线程池的实际大小，即线程池中任务的数量</p>\n<h4 id=\"allowcorethreadtimeout-keepalivetime\">allowCoreThreadTimeOut和keepAliveTime</h4>\n<p> allowCoreThreadTimeOut表示是否允许&quot;线程在空闲状态时，仍然能够存活&quot;；而keepAliveTime是当线程池处于空闲状态的时候，超过keepAliveTime时间之后，空闲的线程会被终止。</p>\n<h4 id=\"threadfactory\">threadFactory</h4>\n<p>threadFactory是一个线程工厂类，线程池通过ThreadFactory创建线程</p>\n<h4 id=\"handler\">handler</h4>\n<p>handler是RejectedExecutionHandler类型。它是&quot;线程池拒绝策略&quot;的句柄，也就是说&quot;当某任务添加到线程池中，而线程池拒绝该任务时，线程池会通过handler进行相应的处理&quot;。</p>\n<p>综上所说，线程池通过workers来管理&quot;线程集合&quot;，每个线程在启动后，会执行线程池中的任务；当一个任务执行完后，它会从线程池的阻塞队列中取出任务来继续运行。阻塞队列是管理线程池任务的队列，当添加到线程池中的任务超过线程池的容量时，该任务就会进入阻塞队列进行等待。</p>\n<h3 id=\"-\">工作队列</h3>\n<p>如果新请求的到达速率超过了线程池的处理速率，那么新到来的请求将累积起来。在线程池中，这些请求会在一个由Executor管理的Runnable队列中等待，而不会像线程那样去竞争CPU资源。常见的工作队列有以下几种，前三种用的最多。</p>\n<ol>\n<li>ArrayBlockingQueue：列表形式的工作队列，必须要有初始队列大小，有界队列，先进先出。</li>\n<li>LinkedBlockingQueue：链表形式的工作队列，可以选择设置初始队列的大小，有界/无界队列，先进先出</li>\n<li>SynchronousQueue：SynchronousQueue不是一个真正的队列，而是一种在线程之间移交的机制。要将一个元素放入SynchronousQueue中，必须有另一个线程正在等待接受这个元素。如果没有线程等待，并且线程池的当前大小小于最大值，那么ThreadPoolExecutor将创建一个线程，否则根据饱和策略，这个任务将被拒绝。使用直接移交将更高效，因为任务会直接移交给执行它的线程，而不是被首先放在队列中，然后由工作者线程从队列中提取任务。只有当线程池是无解的或者可以拒绝任务时，SynchronousQueue才有实际价值。</li>\n<li>PriorityBlockingQueue：优先级队列，有界队列，根据优先级来安排任务，任务优先级是通过自然顺序或Comparator（如果任务实现了Comparator）来定义的。</li>\n<li>DelayedWorkQueue：延迟的工作队列，无界队列。ScheduledThreadPoolExecutor默认使用的延迟队列。</li>\n</ol>\n<h3 id=\"-\">饱和策略</h3>\n<p>饱和策略也称为拒绝策略；当有界队列被填满后，饱和策略开始发挥作用。ThreadPoolExecutor的饱和策略可以通过调用setRejectedExecutionHandler()来修改（如果某个任务被提交到一个已被关闭的Executor时，也会用到饱和策略）。饱和策略有以下四种，一般使用默认的AbortPolicy。</p>\n<ol>\n<li>AbortPolicy：中止策略。默认的饱和策略，抛出未检查的RejectedExecutionException。调用者可以捕获这个异常，然后根据需求编写自己的处理代码。</li>\n<li>DiscardPolicy：抛弃策略。当新提交的任务无法保存到队列中等待执行时，该策略会悄悄抛弃该任务。</li>\n<li>DiscardOldestPolicy：抛弃最旧的策略。当新提交的任务无法保存到队列中等待执行时，则会抛弃下一个将被执行的任务，然后尝试重新提交新的任务。如果工作队列是一个优先队列，那么该策略将导致抛弃优先级最高的任务，因此最好不要将该策略和优先级队列放在一起使用。</li>\n<li>CallerRunsPolicy：调用者运行策略。该策略实现了一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者（调用线程池执行任务的主线程），从而降低新任务的流程。它不会在线程池的某个线程中执行新提交的任务，而是在一个调用了execute(Runnable)的线程中执行该任务。当线程池的所有线程都被占用，并且工作队列被填满后，下一个任务会在调用execute(Runnable)时在主线程中执行（调用线程池执行任务的主线程）。由于执行任务需要一定时间，因此主线程至少在一段时间内不能提交任务，从而使得工作者线程有时间来处理完正在执行的任务。</li>\n</ol>\n<h3 id=\"-\">线程工厂</h3>\n<p>每当线程池需要创建一个线程时，都是通过线程工厂方法来完成的。在ThreadFactory中只定义了一个方法newThread()，每当线程池需要创建一个新线程时都会调用这个方法。Executors提供的线程工厂有两种，一般使用默认的，当然如果有特殊需求，也可以自己定制。</p>\n<ol>\n<li>DefaultThreadFactory：默认线程工厂，创建一个新的、非守护的线程，并且不包含特殊的配置信息。</li>\n<li>PrivilegedThreadFactory：通过这种方式创建出来的线程，将与创建PrivilegedThreadFactory的线程拥有相同的访问权限、AccessControlContext、ContextClassLoader。如果不使用PrivilegedThreadFactory，线程池创建的线程将从在需要新线程时调用execute(Runnable)或submit(Runnable)的客户程序中继承访问权限。</li>\n<li>自定义线程工厂：可以自己实现ThreadFactory接口来定制自己的线程工厂方法。</li>\n</ol>\n<h3 id=\"-\">线程池处理流程</h3>\n<ol>\n<li>默认情况下，创建完线程池后并不会立即创建线程，而是等到有任务提交时才会创建线程来进行处理（除非调用prestartCoreThread()或prestartAllCoreThreads()方法）。</li>\n<li>当线程数小于核心线程数时，每提交一个任务就创建一个线程来执行，即使当前线程池中有线程处于空闲状态，直到当前线程数达到核心线程数。这些线程会通过workers来管理。</li>\n<li>当前线程数达到核心线程数时，如果这个时候还提交任务，这些任务会被放到工作队列里。\n当核心线程池处理完了当前的任务后，会来工作队列中取任务处理。</li>\n<li>当前线程数达到核心线程数并且工作队列也满了，如果这个时候还提交任务，则会继续创建线程来处理，直到线程数达到最大线程数。</li>\n<li>当前线程数达到最大线程数并且队列也满了，如果这个时候还提交任务，则会触发饱和策略。</li>\n<li>如果某个线程的空闲时间超过了keepAliveTime，那么将被标记为可回收的，并且当前线程池的当前大小超过了核心线程数时，这个线程将被终止。</li>\n</ol>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191024/cf6cf270ad404bc3a3bb19f704ffeeee.png\" alt=\"image.png\"></p>\n',37,3,2,NULL,'2019-10-23 15:55:30','2019-10-24 14:47:32',0,'9,14,41',1,0);
INSERT INTO `article` VALUES (52,'Java多线程JUC线程池03——ThreadPoolExecutor解析(2)','上一节中介绍了线程池的生命周期和数据结构，本章会通过分析线程池的源码，对线程池进行说明','Bobbi','上一节中介绍了线程池的生命周期和数据结构，本章会通过分析线程池的源码，对线程池进行说明。\n## 创建“线程池”\n下面以newFixedThreadPool()介绍线程池的创建过程。\n#### newFixedThreadPool()\nnewFixedThreadPool()在Executors.java中定义，源码如下：\n```java\n    public static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>());\n```\nnewFixedThreadPool(int nThreads)的作用是创建一个线程池，线程池的容量是nThreads。\n         newFixedThreadPool()在调用ThreadPoolExecutor()时，会传递一个LinkedBlockingQueue()对象，而LinkedBlockingQueue是单向链表实现的阻塞队列。在线程池中，就是通过该阻塞队列来实现\"当线程池中任务数量超过允许的任务数量时，部分任务会阻塞等待\"。\n\n#### ThreadPoolExecutor()\nThreadPoolExecutor()在ThreadPoolExecutor.java中定义，源码如下：\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue) {\n    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n         Executors.defaultThreadFactory(), defaultHandler);\n}\n```\n\n说明：该函数实际上是调用ThreadPoolExecutor的另外一个构造函数。该函数的源码如下：\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) {\n    if (corePoolSize < 0 ||\n        maximumPoolSize <= 0 ||\n        maximumPoolSize < corePoolSize ||\n        keepAliveTime < 0)\n        throw new IllegalArgumentException();\n    if (workQueue == null || threadFactory == null || handler == null)\n        throw new NullPointerException();\n    // 核心池大小\n    this.corePoolSize = corePoolSize;\n    // 最大池大小\n    this.maximumPoolSize = maximumPoolSize;\n    // 线程池的等待队列\n    this.workQueue = workQueue;\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    // 线程工厂对象\n    this.threadFactory = threadFactory;\n    // 拒绝策略的句柄\n    this.handler = handler;\n}\n```\n说明：在ThreadPoolExecutor()的构造函数中，进行的是初始化工作。\ncorePoolSize, maximumPoolSize, unit, keepAliveTime和workQueue这些变量的值是已知的，它们都是通过newFixedThreadPool()传递而来。下面看看threadFactory和handler对象。\n\n#### ThreadFactory\n线程池中的ThreadFactory是一个线程工厂，线程池创建线程都是通过线程工厂对象(threadFactory)来完成的。\n上面所说的threadFactory对象，是通过 Executors.defaultThreadFactory()返回的。Executors.java中的defaultThreadFactory()源码如下：\n```java\npublic static ThreadFactory defaultThreadFactory() {\n    return new DefaultThreadFactory();\n}\n```\ndefaultThreadFactory()返回DefaultThreadFactory对象。Executors.java中的DefaultThreadFactory()源码如下：\n```java\n    static class DefaultThreadFactory implements ThreadFactory {\n        private static final AtomicInteger poolNumber = new AtomicInteger(1);\n        private final ThreadGroup group;\n        private final AtomicInteger threadNumber = new AtomicInteger(1);\n        private final String namePrefix;\n\n        DefaultThreadFactory() {\n            SecurityManager s = System.getSecurityManager();\n            group = (s != null) ? s.getThreadGroup() :\n                                  Thread.currentThread().getThreadGroup();\n            namePrefix = \"pool-\" +\n                          poolNumber.getAndIncrement() +\n                         \"-thread-\";\n        }\n\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(group, r,\n                                  namePrefix + threadNumber.getAndIncrement(),\n                                  0);\n            if (t.isDaemon())\n                t.setDaemon(false);\n            if (t.getPriority() != Thread.NORM_PRIORITY)\n                t.setPriority(Thread.NORM_PRIORITY);\n            return t;\n        }\n    }\n```\nThreadFactory的作用就是提供创建线程的功能的线程工厂。它是通过newThread()提供创建线程功能的，下面简单说说newThread()。newThread()创建的线程对应的任务是Runnable对象，它创建的线程都是“非守护线程”而且“线程优先级都是Thread.NORM_PRIORITY”。\n\n#### RejectedExecutionHandler\nhandler是ThreadPoolExecutor中拒绝策略的处理句柄。所谓拒绝策略，是指将任务添加到线程池中时，线程池拒绝该任务所采取的相应策略。\n线程池默认会采用的是defaultHandler策略，即AbortPolicy策略。在AbortPolicy策略中，线程池拒绝任务时会抛出异常！\ndefaultHandler的定义如下：\n```java\nprivate static final RejectedExecutionHandler defaultHandler = new AbortPolicy();\n```\nAbortPolicy的源码如下：\n```java\npublic static class AbortPolicy implements RejectedExecutionHandler {\n    public AbortPolicy() { }\n\n    // 抛出异常\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        throw new RejectedExecutionException(\"Task \" + r.toString() +\n                                             \" rejected from \" +\n                                             e.toString());\n    }\n}\n```\n\n## 添加worker任务\n#### execute()\nexecute()定义在ThreadPoolExecutor.java中，源码如下：\n```java\npublic void execute(Runnable command) {\n    // 如果任务为null，则抛出异常。\n    if (command == null)\n        throw new NullPointerException();\n    // 获取ctl对应的int值。该int值保存了\"线程池中任务的数量\"和\"线程池状态\"信息\n    int c = ctl.get();\n    // 当线程池中的任务数量 < \"核心池大小\"时，即线程池中少于corePoolSize个任务。\n    // 则通过addWorker(command, true)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。\n    if (workerCountOf(c) < corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    // 当线程池中的任务数量 >= \"核心池大小\"时，\n    // 而且，\"线程池处于允许状态\"时，则尝试将任务添加到阻塞队列中。\n    if (isRunning(c) && workQueue.offer(command)) {\n        // 再次确认“线程池状态”，若线程池异常终止了，则删除任务；然后通过reject()执行相应的拒绝策略的内容。\n        int recheck = ctl.get();\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        // 否则，如果\"线程池中任务数量\"为0，则通过addWorker(null, false)尝试新建一个线程，新建线程对应的任务为null。\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    // 通过addWorker(command, false)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。\n    // 如果addWorker(command, false)执行失败，则通过reject()执行相应的拒绝策略的内容。\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n说明：execute()的作用是将任务添加到线程池中执行。它会分为3种情况进行处理：\n1. 如果\"线程池中任务数量\" < \"核心池大小\"时，即线程池中少于corePoolSize个任务；此时就新建一个线程，并将该任务添加到线程中进行执行。\n2. 如果\"线程池中任务数量\" >= \"核心池大小\"，并且\"线程池是允许状态\"；此时，则将任务添加到阻塞队列中阻塞等待。在该情况下，会再次确认\"线程池的状态\"，如果\"第2次读到的线程池状态\"和\"第1次读到的线程池状态\"不同，则从阻塞队列中删除该任务。\n3. 非以上两种情况。在这种情况下，尝试新建一个线程，并将该任务添加到线程中进行执行。如果执行失败，则通过reject()拒绝该任务。\n\n#### submit()\n补充说明一点，submit()实际上也是通过调用execute()实现的，源码如下：\n```java\npublic Future<?> submit(Runnable task) {\n    if (task == null) throw new NullPointerException();\n    RunnableFuture<Void> ftask = newTaskFor(task, null);\n    execute(ftask);\n    return ftask;\n}\n```\n\n\n#### addWorker()\n\n从execute(Runnable)方法可知，在提交任务后，其实会根据条件调用addWorker(Runnable, boolean)方法，该方法的源码如下：\n\n\naddWorker()的源码如下：\n```java\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    // 更新\"线程池状态和计数\"标记，即更新ctl。\n    for (;;) {\n        // 获取ctl对应的int值。该int值保存了\"线程池中任务的数量\"和\"线程池状态\"信息\n        int c = ctl.get();\n        // 获取线程池状态。\n        int rs = runStateOf(c);\n\n        // 有效性检查\n        if (rs >= SHUTDOWN &&\n            ! (rs == SHUTDOWN &&\n               firstTask == null &&\n               ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n            // 获取线程池中任务的数量。\n            int wc = workerCountOf(c);\n            // 如果\"线程池中任务的数量\"超过限制，则返回false。\n            if (wc >= CAPACITY ||\n                wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            // 通过CAS函数将c的值+1。操作失败的话，则退出循环。\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            // 检查\"线程池状态\"，如果与之前的状态不同，则从retry重新开始。\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    // 添加任务到线程池，并启动任务所在的线程。\n    try {\n        final ReentrantLock mainLock = this.mainLock;\n        // 新建Worker，并且指定firstTask为Worker的第一个任务。\n        w = new Worker(firstTask);\n        // 获取Worker对应的线程。\n        final Thread t = w.thread;\n        if (t != null) {\n            // 获取锁\n            mainLock.lock();\n            try {\n                int c = ctl.get();\n                int rs = runStateOf(c);\n\n                // 再次确认\"线程池状态\"\n                if (rs < SHUTDOWN ||\n                    (rs == SHUTDOWN && firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    // 将Worker对象(w)添加到\"线程池的Worker集合(workers)\"中\n                    workers.add(w);\n                    // 更新largestPoolSize\n                    int s = workers.size();\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                // 释放锁\n                mainLock.unlock();\n            }\n            // 如果\"成功将任务添加到线程池\"中，则启动任务所在的线程。 \n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    // 返回任务是否启动。\n    return workerStarted;\n}\n```\n\naddWorker(Runnable firstTask, boolean core) 的作用是将任务(firstTask)添加到线程池中，并启动该任务。\n\ncore为true的话，则以corePoolSize为界限，若\"线程池中已有任务数量>=corePoolSize\"，则返回false；core为false的话，则以maximumPoolSize为界限，若\"线程池中已有任务数量>=maximumPoolSize\"，则返回false。addWorker()会先通过for循环不断尝试更新ctl状态，ctl记录了\"线程池中任务数量和线程池状态\"。更新成功之后，再通过try模块来将任务添加到线程池中，并启动任务所在的线程。\n\n从addWorker()中，我们能清晰的发现：线程池在添加任务时，会创建任务对应的Worker对象；而一个Workder对象包含一个Thread对象。(01) 通过将Worker对象添加到\"线程的workers集合\"中，从而实现将任务添加到线程池中。 (02) 通过启动Worker对应的Thread线程，则执行该任务。\n\n## 运行worker任务\n#### runWorker(Worker)\nThreadPoolExecutor的runWorker(Worker)方法负责运行Worker任务，它的源码如下：\n```java\nfinal void runWorker(Worker w) {\n    // 引用worker的firstTask任务，并清除worker的firstTask\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    // 用于标识worker是不是因异常而死亡\n    boolean completedAbruptly = true;\n    try {\n        // worker取任务执行\n        while (task != null || (task = getTask()) != null) {\n            // 加锁\n            w.lock();\n            clearInterruptsForTaskRun();\n            try {\n                // 执行beforeExecute()钩子方法\n                beforeExecute(w.thread, task);\n                // 用于记录运行过程中的异常\n                Throwable thrown = null;\n                try {\n                    // 执行任务\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    // 执行afterExecute()钩子方法\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                // 将执行完的任务清空\n                task = null;\n                // 将worker的完成任务数加1\n                w.completedTasks++;\n                // 解锁\n                w.unlock();\n            }\n        }\n        // 运行到这里表示运行过程中没有出现异常\n        completedAbruptly = false;\n    } finally {\n        // 调用processWorkerExit()方法处理Worker的后续清理和退出流程\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n```\n其实runWorker(Worker)方法的整体逻辑是比较简单的，内部使用了一个while循环不断地获取任务对象，当能够获取到任务对象时，直接调用task.run()来执行任务，同时在任务执行前后都会调用相应的钩子方法beforeExecute(Thread, Runnable)和afterExecute(Runnable, Throwable)，这两个钩子方法的实现是空的，可以交由开发人员进行定制（通过继承）。\n\n#### getTask()\n除了通过Worker对象的firstTask属性获取任务对象，还可以通过getTask()方法获取，且只有在firstTask为空的情况下才会使用该方法获取，此时表示Worker对应的任务被置为了null，这种情况表明Worker所肩负的任务执行完了，因此可以从等待队列中获取了，而getTask()方法的作用正是从等待队列中获取任务，该方法的源码如下：\n\n```java\nprivate Runnable getTask() {\n    // 用于记录poll()方法是否超时\n    boolean timedOut = false; // Did the last poll() time out?\n\n    retry:\n    // 无限循环\n    for (; ; ) {\n        // 获取ctl和runState\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // 检查状态\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            /**\n             * 如果runState为STOP、TIDYING或TERMINATED\n             * 或者runState为SHUTDOWN，且workerQueue为空\n             * 将workerCount减1，返回null结束运行\n             */\n            decrementWorkerCount();\n            return null;\n        }\n\n        // 记录worker是否能够被移除\n        boolean timed;      // Are workers subject to culling?\n\n        // 无限循环\n        for (; ; ) {\n            // 获取workerCount\n            int wc = workerCountOf(c);\n            /**\n             * 判断当前Worker是否可以被移除，即当前Worker是否可以一直等待任务。\n             * 如果allowCoreThreadTimeOut为true，允许回收所有工作线程，包括非核心线程，\n             * 如果allowCoreThreadTimeOut为false，但workerCount大于核心线程数，此时允许回收非核心线程，\n             * 如果允许回收线程，则当前线程是有超时时间的（keepAliveTime），无法一直等待任务。\n             */\n            timed = allowCoreThreadTimeOut || wc > corePoolSize;\n            /**\n             * workerCount小于等于最大核心线程数，且没有超时，则跳出内层循环\n             */\n            if (wc <= maximumPoolSize && !(timedOut && timed))\n                break;\n            /**\n             * 否则表示已超时，将workerCount减1，如果成功直接返回null，这里有两种情况：\n             * 1. workerCount大于最大核心线程数，不管是否超时，都需要清理核心线程。这种情况一般不会出现。\n             * 2. workerCount小于等于最大核心线程数，但是Worker超时了，且允许清理核心线程。\n             */\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            // 走到这里说明上一步workerCount减1失败了，重新读取ctl\n            c = ctl.get();  // Re-read ctl\n            // 如果与之前的runState不同，表示线程池状态发生改变了，跳出到外层循环重试\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n\n        try {\n            /**\n             * 根据线程是否会超时来分别调用相应的方法，\n             * poll()方法附带超时机制；take()方法没有超时机制，并且可能会阻塞等待。\n             * 这里的设计很巧妙，如果timed为true，则表示允许核心线程超时被清理，\n             * 但是需要达到超时时间，此时就使用poll()方法拉取任务，而poll的超时时间就是keepAliveTime，\n             * 当超过keepAliveTime时间poll未能拉取到任务，说明该Worker超时了，此时r就会为null，\n             * 而在下一次循环中，会由if (wc <= maximumPoolSize && !(timedOut && timed))这行代码，\n             * break出循环，返回到runWorker()方法，而runWorker()方法中如果拉取的Task为空，\n             * 也会跳出while循环，此时就会调用processWorkerExit()执行空闲线程清理工作。\n             */\n            Runnable r = timed ?\n                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                    workQueue.take();\n            // 如果获取到的任务不为null则返回\n            if (r != null)\n                return r;\n            // 走到这里表示获取操作超时了\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            // 被中断，可能是超时等待过程中被中断了\n            timedOut = false;\n        }\n    }\n}\n```\n\n通过线程池的配置，Worker从工作队列获取任务，如果allowCoreThreadTimeOut为false且workerCount小于等于corePoolSize，则这些核心线程永远存活，并且一直在尝试获取工作队列的任务；否则，线程会有超时时间（keepAliveTime），当在keepAliveTime时间内使用poll(keepAliveTime, TimeUnit.NANOSECOND)拉取不到任务，该线程的Worker会被移除。\n\n\n## 移除空闲worker任务\n#### processWorkerExit(Worker,boolean)\n移除Worker操作是在processWorkerExit(Worker, boolean方法中实现的，当getTask()方法返回null后，会导致runWorker(Worker)方法中跳出while循环，调用processWorkerExit(Worker, boolean方法将Worker移除。注意在返回null的之前，已经将workerCount进行减1操作，因此在processWorkerExit(Worker, boolean方法中，completedAbruptly为false的情况（即正常超时退出）不需要再将workerCount减1。processWorkerExit(Worker, boolean方法的源码如下：\n```java\nprivate void processWorkerExit(Worker w, boolean completedAbruptly) {\n    // completedAbruptly为true，此时workerCount还没有更新，因此需要手动减1\n    if (completedAbruptly) // If abrupt, then workerCount wasn\'t adjusted\n        decrementWorkerCount();\n\n    // 获取锁\n    final ReentrantLock mainLock = this.mainLock;\n    mainLock.lock();\n    try {\n        // 更新完成的任务数量\n        completedTaskCount += w.completedTasks;\n        // 从workers数组中移除w\n        workers.remove(w);\n    } finally {\n        // 解锁\n        mainLock.unlock();\n    }\n\n    // 尝试终止线程池\n    tryTerminate();\n\n    // 获取ctl\n    int c = ctl.get();\n    // 如果runState状态是SHUTDOWN或RUNNING，即还没有停止\n    if (runStateLessThan(c, STOP)) {\n        // 如果worker处理任务过程中没有出现异常\n        if (!completedAbruptly) {\n            /**\n             * 获取允许的最小核心线程数，逻辑如下：\n             * 1. 如果不允许核心线程超时，则min为核心线程数\n             * 2. 如果允许核心线程超时，且workQueue不为空，则min为1，\n             *    以确保至少有一个worker来处理队列里的任务\n             */\n            int min = allowCoreThreadTimeOut ? 0 : corePoolSize;\n            if (min == 0 && ! workQueue.isEmpty())\n                min = 1;\n            // 当workerCount大于等于min时，直接返回，不需要添加新的Worker。\n            if (workerCountOf(c) >= min)\n                return; // replacement not needed\n        }\n        /**\n         * 添加一个新的Worker线程，走到这里有下面两种情况：\n         * 1. worker中的任务因异常而退出了，此时Worker也会因抛出异常而终止，因此需要添加新的Worker；\n         * 2. workerCount小于计算出来的最小线程数，有可能是因为核心线程超时了，因此需要添加新的Worker。\n         */\n        addWorker(null, false);\n    }\n}\n```\nprocessWorkerExit(Worker, boolean方法在统计完传入的Worker所完成的任务数之后将其从workers集合中移除，然后尝试关闭线程池，tryTerminate()方法源码如下\n\n#### tryTerminate()\n\n```java\nfinal void tryTerminate() {\n    for (;;) {\n        // 获取ctl\n        int c = ctl.get();\n        /**\n         * 判断条件是否满足，如果不满足，直接返回\n         * 1. 是RUNNING或SHUTDOWN状态，不满足；\n         * 2. 是TIDYING或TERMINATED状态，不满足；\n         * 3. 是SHUTDOWN状态，但workQueue不为空，不满足\n         */\n        if (isRunning(c) ||\n                runStateAtLeast(c, TIDYING) ||\n                (runStateOf(c) == SHUTDOWN && ! workQueue.isEmpty()))\n            return;\n        // 如果worker数量不为0\n        if (workerCountOf(c) != 0) { // Eligible to terminate\n            /**\n             * 尝试中断worker中的线程，\n             * ONLY_ONE表示只尝试中断第一个worker中的线程\n             */\n            interruptIdleWorkers(ONLY_ONE);\n            return;\n        }\n\n        // 获取锁\n        final ReentrantLock mainLock = this.mainLock;\n        mainLock.lock();\n        try {\n            // 先修改runState为TIDYING，workerCount为0\n            if (ctl.compareAndSet(c, ctlOf(TIDYING, 0))) {\n                try {\n                    // 修改成功后，尝试调用终止钩子方法\n                    terminated();\n                } finally {\n                    // 最终将runState修改为TERMINATED，workerCount修改为0\n                    ctl.set(ctlOf(TERMINATED, 0));\n                    // 唤醒等待在termination上的所有线程\n                    termination.signalAll();\n                }\n                return;\n            }\n        } finally {\n            // 解锁\n            mainLock.unlock();\n        }\n        // else retry on failed CAS\n    }\n}\n```\ntryTerminate()方法在检查环境合适之后，会尝试关闭线程池，流程尝试修改runState和workerCount，先修改runState为TIDYING，workerCount为0，修改成功后会调用terminated()钩子方法，然后修改runState为TERMINATED，并且唤醒阻塞在termination上的所有线程。\n\n\n\n## 关闭线程池\nThreadPoolExecutor中关于线程池关闭的方法有两类，源码如下：\n#### shutdown()\n```java\npublic void shutdown() {\n    final ReentrantLock mainLock = this.mainLock;\n    // 获取锁\n    mainLock.lock();\n    try {\n        // 检查终止线程池的“线程”是否有权限。\n        checkShutdownAccess();\n        // 设置线程池的状态为关闭状态。\n        advanceRunState(SHUTDOWN);\n        // 中断线程池中空闲的线程。\n        interruptIdleWorkers();\n        // 钩子函数，在ThreadPoolExecutor中没有任何动作。\n        onShutdown(); // hook for ScheduledThreadPoolExecutor\n    } finally {\n        // 释放锁\n        mainLock.unlock();\n    }\n    // 尝试终止线程池\n    tryTerminate();\n}\n```\nshutdown()的作用是关闭线程池。\n\n#### shutdownNow()\n```java\npublic List<Runnable> shutdownNow() {\n    List<Runnable> tasks;\n    // 加锁\n    final ReentrantLock mainLock = this.mainLock;\n    mainLock.lock();\n    try {\n        // 检查可否关闭的权限\n        checkShutdownAccess();\n        // 将runState转换为SHUTDOWN\n        advanceRunState(STOP);\n        // 中断所有的Worker\n        interruptWorkers();\n        // 将队列中的任务全部取出赋值给task\n        tasks = drainQueue();\n    } finally {\n        // 解锁\n        mainLock.unlock();\n    }\n    // 尝试终止线程池\n    tryTerminate();\n    // 返回保存的任务\n    return tasks;\n}\n```\n这两类方法的区别在于，shutdown()方法会将线程池状态切换为SHUTDOWN，中断所有空闲的Worker线程，然后调用tryTerminate()尝试终止线程池，此时虽然线程池关闭了，正在运行的任务并不会立即结束，而是继续正常运行，但任务队列中的任务将会被直接丢弃。shutdownNow()方法则不同，它会将线程池状态切换为STOP，中断所有的Worker线程，然后调用tryTerminate()尝试终止线程池，此时线程池关闭动作会将所有正在运行的任务也一并停止，同时还会将任务队列中的等待执行的任务全部取出放在一个列表中返回给调用者。\n\n## 钩子方法\nThreadPoolExecutor提供了一些钩子方法给开发者进行重写，以获取线程池的不同时刻的状态信息，这些方法如下：\n```java\n/**\n * 线程池关闭后钩子函数\n */\nvoid onShutdown() {\n}\n\n/**\n * 执行前钩子函数\n */\nprotected void beforeExecute(Thread t, Runnable r) { }\n\n/**\n * 执行后钩子函数\n */\nprotected void afterExecute(Runnable r, Throwable t) { }\n\n/**\n * 线程池已终止的钩子函数\n */\nprotected void terminated() { }\n```\n我们可以自定义继承于ThreadPoolExecutor的类，重写这些方法以应用。\n\n\n\n\n\n\n','<p>上一节中介绍了线程池的生命周期和数据结构，本章会通过分析线程池的源码，对线程池进行说明。</p>\n<h2 id=\"-\">创建“线程池”</h2>\n<p>下面以newFixedThreadPool()介绍线程池的创建过程。</p>\n<h4 id=\"newfixedthreadpool-\">newFixedThreadPool()</h4>\n<p>newFixedThreadPool()在Executors.java中定义，源码如下：</p>\n<pre><code class=\"language-java\">    public static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue&lt;Runnable&gt;());</code></pre>\n<p>newFixedThreadPool(int nThreads)的作用是创建一个线程池，线程池的容量是nThreads。\n         newFixedThreadPool()在调用ThreadPoolExecutor()时，会传递一个LinkedBlockingQueue()对象，而LinkedBlockingQueue是单向链表实现的阻塞队列。在线程池中，就是通过该阻塞队列来实现&quot;当线程池中任务数量超过允许的任务数量时，部分任务会阻塞等待&quot;。</p>\n<h4 id=\"threadpoolexecutor-\">ThreadPoolExecutor()</h4>\n<p>ThreadPoolExecutor()在ThreadPoolExecutor.java中定义，源码如下：</p>\n<pre><code class=\"language-java\">public ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue&lt;Runnable&gt; workQueue) {\n    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n         Executors.defaultThreadFactory(), defaultHandler);\n}</code></pre>\n<p>说明：该函数实际上是调用ThreadPoolExecutor的另外一个构造函数。该函数的源码如下：</p>\n<pre><code class=\"language-java\">public ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue&lt;Runnable&gt; workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) {\n    if (corePoolSize &lt; 0 ||\n        maximumPoolSize &lt;= 0 ||\n        maximumPoolSize &lt; corePoolSize ||\n        keepAliveTime &lt; 0)\n        throw new IllegalArgumentException();\n    if (workQueue == null || threadFactory == null || handler == null)\n        throw new NullPointerException();\n    // 核心池大小\n    this.corePoolSize = corePoolSize;\n    // 最大池大小\n    this.maximumPoolSize = maximumPoolSize;\n    // 线程池的等待队列\n    this.workQueue = workQueue;\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    // 线程工厂对象\n    this.threadFactory = threadFactory;\n    // 拒绝策略的句柄\n    this.handler = handler;\n}</code></pre>\n<p>说明：在ThreadPoolExecutor()的构造函数中，进行的是初始化工作。\ncorePoolSize, maximumPoolSize, unit, keepAliveTime和workQueue这些变量的值是已知的，它们都是通过newFixedThreadPool()传递而来。下面看看threadFactory和handler对象。</p>\n<h4 id=\"threadfactory\">ThreadFactory</h4>\n<p>线程池中的ThreadFactory是一个线程工厂，线程池创建线程都是通过线程工厂对象(threadFactory)来完成的。\n上面所说的threadFactory对象，是通过 Executors.defaultThreadFactory()返回的。Executors.java中的defaultThreadFactory()源码如下：</p>\n<pre><code class=\"language-java\">public static ThreadFactory defaultThreadFactory() {\n    return new DefaultThreadFactory();\n}</code></pre>\n<p>defaultThreadFactory()返回DefaultThreadFactory对象。Executors.java中的DefaultThreadFactory()源码如下：</p>\n<pre><code class=\"language-java\">    static class DefaultThreadFactory implements ThreadFactory {\n        private static final AtomicInteger poolNumber = new AtomicInteger(1);\n        private final ThreadGroup group;\n        private final AtomicInteger threadNumber = new AtomicInteger(1);\n        private final String namePrefix;\n\n        DefaultThreadFactory() {\n            SecurityManager s = System.getSecurityManager();\n            group = (s != null) ? s.getThreadGroup() :\n                                  Thread.currentThread().getThreadGroup();\n            namePrefix = &quot;pool-&quot; +\n                          poolNumber.getAndIncrement() +\n                         &quot;-thread-&quot;;\n        }\n\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(group, r,\n                                  namePrefix + threadNumber.getAndIncrement(),\n                                  0);\n            if (t.isDaemon())\n                t.setDaemon(false);\n            if (t.getPriority() != Thread.NORM_PRIORITY)\n                t.setPriority(Thread.NORM_PRIORITY);\n            return t;\n        }\n    }</code></pre>\n<p>ThreadFactory的作用就是提供创建线程的功能的线程工厂。它是通过newThread()提供创建线程功能的，下面简单说说newThread()。newThread()创建的线程对应的任务是Runnable对象，它创建的线程都是“非守护线程”而且“线程优先级都是Thread.NORM_PRIORITY”。</p>\n<h4 id=\"rejectedexecutionhandler\">RejectedExecutionHandler</h4>\n<p>handler是ThreadPoolExecutor中拒绝策略的处理句柄。所谓拒绝策略，是指将任务添加到线程池中时，线程池拒绝该任务所采取的相应策略。\n线程池默认会采用的是defaultHandler策略，即AbortPolicy策略。在AbortPolicy策略中，线程池拒绝任务时会抛出异常！\ndefaultHandler的定义如下：</p>\n<pre><code class=\"language-java\">private static final RejectedExecutionHandler defaultHandler = new AbortPolicy();</code></pre>\n<p>AbortPolicy的源码如下：</p>\n<pre><code class=\"language-java\">public static class AbortPolicy implements RejectedExecutionHandler {\n    public AbortPolicy() { }\n\n    // 抛出异常\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        throw new RejectedExecutionException(&quot;Task &quot; + r.toString() +\n                                             &quot; rejected from &quot; +\n                                             e.toString());\n    }\n}</code></pre>\n<h2 id=\"-worker-\">添加worker任务</h2>\n<h4 id=\"execute-\">execute()</h4>\n<p>execute()定义在ThreadPoolExecutor.java中，源码如下：</p>\n<pre><code class=\"language-java\">public void execute(Runnable command) {\n    // 如果任务为null，则抛出异常。\n    if (command == null)\n        throw new NullPointerException();\n    // 获取ctl对应的int值。该int值保存了&quot;线程池中任务的数量&quot;和&quot;线程池状态&quot;信息\n    int c = ctl.get();\n    // 当线程池中的任务数量 &lt; &quot;核心池大小&quot;时，即线程池中少于corePoolSize个任务。\n    // 则通过addWorker(command, true)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。\n    if (workerCountOf(c) &lt; corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    // 当线程池中的任务数量 &gt;= &quot;核心池大小&quot;时，\n    // 而且，&quot;线程池处于允许状态&quot;时，则尝试将任务添加到阻塞队列中。\n    if (isRunning(c) &amp;&amp; workQueue.offer(command)) {\n        // 再次确认“线程池状态”，若线程池异常终止了，则删除任务；然后通过reject()执行相应的拒绝策略的内容。\n        int recheck = ctl.get();\n        if (! isRunning(recheck) &amp;&amp; remove(command))\n            reject(command);\n        // 否则，如果&quot;线程池中任务数量&quot;为0，则通过addWorker(null, false)尝试新建一个线程，新建线程对应的任务为null。\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    // 通过addWorker(command, false)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。\n    // 如果addWorker(command, false)执行失败，则通过reject()执行相应的拒绝策略的内容。\n    else if (!addWorker(command, false))\n        reject(command);\n}</code></pre>\n<p>说明：execute()的作用是将任务添加到线程池中执行。它会分为3种情况进行处理：</p>\n<ol>\n<li>如果&quot;线程池中任务数量&quot; &lt; &quot;核心池大小&quot;时，即线程池中少于corePoolSize个任务；此时就新建一个线程，并将该任务添加到线程中进行执行。</li>\n<li>如果&quot;线程池中任务数量&quot; &gt;= &quot;核心池大小&quot;，并且&quot;线程池是允许状态&quot;；此时，则将任务添加到阻塞队列中阻塞等待。在该情况下，会再次确认&quot;线程池的状态&quot;，如果&quot;第2次读到的线程池状态&quot;和&quot;第1次读到的线程池状态&quot;不同，则从阻塞队列中删除该任务。</li>\n<li>非以上两种情况。在这种情况下，尝试新建一个线程，并将该任务添加到线程中进行执行。如果执行失败，则通过reject()拒绝该任务。</li>\n</ol>\n<h4 id=\"submit-\">submit()</h4>\n<p>补充说明一点，submit()实际上也是通过调用execute()实现的，源码如下：</p>\n<pre><code class=\"language-java\">public Future&lt;?&gt; submit(Runnable task) {\n    if (task == null) throw new NullPointerException();\n    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, null);\n    execute(ftask);\n    return ftask;\n}</code></pre>\n<h4 id=\"addworker-\">addWorker()</h4>\n<p>从execute(Runnable)方法可知，在提交任务后，其实会根据条件调用addWorker(Runnable, boolean)方法，该方法的源码如下：</p>\n<p>addWorker()的源码如下：</p>\n<pre><code class=\"language-java\">private boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    // 更新&quot;线程池状态和计数&quot;标记，即更新ctl。\n    for (;;) {\n        // 获取ctl对应的int值。该int值保存了&quot;线程池中任务的数量&quot;和&quot;线程池状态&quot;信息\n        int c = ctl.get();\n        // 获取线程池状态。\n        int rs = runStateOf(c);\n\n        // 有效性检查\n        if (rs &gt;= SHUTDOWN &amp;&amp;\n            ! (rs == SHUTDOWN &amp;&amp;\n               firstTask == null &amp;&amp;\n               ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n            // 获取线程池中任务的数量。\n            int wc = workerCountOf(c);\n            // 如果&quot;线程池中任务的数量&quot;超过限制，则返回false。\n            if (wc &gt;= CAPACITY ||\n                wc &gt;= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            // 通过CAS函数将c的值+1。操作失败的话，则退出循环。\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            // 检查&quot;线程池状态&quot;，如果与之前的状态不同，则从retry重新开始。\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    // 添加任务到线程池，并启动任务所在的线程。\n    try {\n        final ReentrantLock mainLock = this.mainLock;\n        // 新建Worker，并且指定firstTask为Worker的第一个任务。\n        w = new Worker(firstTask);\n        // 获取Worker对应的线程。\n        final Thread t = w.thread;\n        if (t != null) {\n            // 获取锁\n            mainLock.lock();\n            try {\n                int c = ctl.get();\n                int rs = runStateOf(c);\n\n                // 再次确认&quot;线程池状态&quot;\n                if (rs &lt; SHUTDOWN ||\n                    (rs == SHUTDOWN &amp;&amp; firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    // 将Worker对象(w)添加到&quot;线程池的Worker集合(workers)&quot;中\n                    workers.add(w);\n                    // 更新largestPoolSize\n                    int s = workers.size();\n                    if (s &gt; largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                // 释放锁\n                mainLock.unlock();\n            }\n            // 如果&quot;成功将任务添加到线程池&quot;中，则启动任务所在的线程。 \n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    // 返回任务是否启动。\n    return workerStarted;\n}</code></pre>\n<p>addWorker(Runnable firstTask, boolean core) 的作用是将任务(firstTask)添加到线程池中，并启动该任务。</p>\n<p>core为true的话，则以corePoolSize为界限，若&quot;线程池中已有任务数量&gt;=corePoolSize&quot;，则返回false；core为false的话，则以maximumPoolSize为界限，若&quot;线程池中已有任务数量&gt;=maximumPoolSize&quot;，则返回false。addWorker()会先通过for循环不断尝试更新ctl状态，ctl记录了&quot;线程池中任务数量和线程池状态&quot;。更新成功之后，再通过try模块来将任务添加到线程池中，并启动任务所在的线程。</p>\n<p>从addWorker()中，我们能清晰的发现：线程池在添加任务时，会创建任务对应的Worker对象；而一个Workder对象包含一个Thread对象。(01) 通过将Worker对象添加到&quot;线程的workers集合&quot;中，从而实现将任务添加到线程池中。 (02) 通过启动Worker对应的Thread线程，则执行该任务。</p>\n<h2 id=\"-worker-\">运行worker任务</h2>\n<h4 id=\"runworker-worker-\">runWorker(Worker)</h4>\n<p>ThreadPoolExecutor的runWorker(Worker)方法负责运行Worker任务，它的源码如下：</p>\n<pre><code class=\"language-java\">final void runWorker(Worker w) {\n    // 引用worker的firstTask任务，并清除worker的firstTask\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    // 用于标识worker是不是因异常而死亡\n    boolean completedAbruptly = true;\n    try {\n        // worker取任务执行\n        while (task != null || (task = getTask()) != null) {\n            // 加锁\n            w.lock();\n            clearInterruptsForTaskRun();\n            try {\n                // 执行beforeExecute()钩子方法\n                beforeExecute(w.thread, task);\n                // 用于记录运行过程中的异常\n                Throwable thrown = null;\n                try {\n                    // 执行任务\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    // 执行afterExecute()钩子方法\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                // 将执行完的任务清空\n                task = null;\n                // 将worker的完成任务数加1\n                w.completedTasks++;\n                // 解锁\n                w.unlock();\n            }\n        }\n        // 运行到这里表示运行过程中没有出现异常\n        completedAbruptly = false;\n    } finally {\n        // 调用processWorkerExit()方法处理Worker的后续清理和退出流程\n        processWorkerExit(w, completedAbruptly);\n    }\n}</code></pre>\n<p>其实runWorker(Worker)方法的整体逻辑是比较简单的，内部使用了一个while循环不断地获取任务对象，当能够获取到任务对象时，直接调用task.run()来执行任务，同时在任务执行前后都会调用相应的钩子方法beforeExecute(Thread, Runnable)和afterExecute(Runnable, Throwable)，这两个钩子方法的实现是空的，可以交由开发人员进行定制（通过继承）。</p>\n<h4 id=\"gettask-\">getTask()</h4>\n<p>除了通过Worker对象的firstTask属性获取任务对象，还可以通过getTask()方法获取，且只有在firstTask为空的情况下才会使用该方法获取，此时表示Worker对应的任务被置为了null，这种情况表明Worker所肩负的任务执行完了，因此可以从等待队列中获取了，而getTask()方法的作用正是从等待队列中获取任务，该方法的源码如下：</p>\n<pre><code class=\"language-java\">private Runnable getTask() {\n    // 用于记录poll()方法是否超时\n    boolean timedOut = false; // Did the last poll() time out?\n\n    retry:\n    // 无限循环\n    for (; ; ) {\n        // 获取ctl和runState\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // 检查状态\n        // Check if queue empty only if necessary.\n        if (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) {\n            /**\n             * 如果runState为STOP、TIDYING或TERMINATED\n             * 或者runState为SHUTDOWN，且workerQueue为空\n             * 将workerCount减1，返回null结束运行\n             */\n            decrementWorkerCount();\n            return null;\n        }\n\n        // 记录worker是否能够被移除\n        boolean timed;      // Are workers subject to culling?\n\n        // 无限循环\n        for (; ; ) {\n            // 获取workerCount\n            int wc = workerCountOf(c);\n            /**\n             * 判断当前Worker是否可以被移除，即当前Worker是否可以一直等待任务。\n             * 如果allowCoreThreadTimeOut为true，允许回收所有工作线程，包括非核心线程，\n             * 如果allowCoreThreadTimeOut为false，但workerCount大于核心线程数，此时允许回收非核心线程，\n             * 如果允许回收线程，则当前线程是有超时时间的（keepAliveTime），无法一直等待任务。\n             */\n            timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;\n            /**\n             * workerCount小于等于最大核心线程数，且没有超时，则跳出内层循环\n             */\n            if (wc &lt;= maximumPoolSize &amp;&amp; !(timedOut &amp;&amp; timed))\n                break;\n            /**\n             * 否则表示已超时，将workerCount减1，如果成功直接返回null，这里有两种情况：\n             * 1. workerCount大于最大核心线程数，不管是否超时，都需要清理核心线程。这种情况一般不会出现。\n             * 2. workerCount小于等于最大核心线程数，但是Worker超时了，且允许清理核心线程。\n             */\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            // 走到这里说明上一步workerCount减1失败了，重新读取ctl\n            c = ctl.get();  // Re-read ctl\n            // 如果与之前的runState不同，表示线程池状态发生改变了，跳出到外层循环重试\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n\n        try {\n            /**\n             * 根据线程是否会超时来分别调用相应的方法，\n             * poll()方法附带超时机制；take()方法没有超时机制，并且可能会阻塞等待。\n             * 这里的设计很巧妙，如果timed为true，则表示允许核心线程超时被清理，\n             * 但是需要达到超时时间，此时就使用poll()方法拉取任务，而poll的超时时间就是keepAliveTime，\n             * 当超过keepAliveTime时间poll未能拉取到任务，说明该Worker超时了，此时r就会为null，\n             * 而在下一次循环中，会由if (wc &lt;= maximumPoolSize &amp;&amp; !(timedOut &amp;&amp; timed))这行代码，\n             * break出循环，返回到runWorker()方法，而runWorker()方法中如果拉取的Task为空，\n             * 也会跳出while循环，此时就会调用processWorkerExit()执行空闲线程清理工作。\n             */\n            Runnable r = timed ?\n                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                    workQueue.take();\n            // 如果获取到的任务不为null则返回\n            if (r != null)\n                return r;\n            // 走到这里表示获取操作超时了\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            // 被中断，可能是超时等待过程中被中断了\n            timedOut = false;\n        }\n    }\n}</code></pre>\n<p>通过线程池的配置，Worker从工作队列获取任务，如果allowCoreThreadTimeOut为false且workerCount小于等于corePoolSize，则这些核心线程永远存活，并且一直在尝试获取工作队列的任务；否则，线程会有超时时间（keepAliveTime），当在keepAliveTime时间内使用poll(keepAliveTime, TimeUnit.NANOSECOND)拉取不到任务，该线程的Worker会被移除。</p>\n<h2 id=\"-worker-\">移除空闲worker任务</h2>\n<h4 id=\"processworkerexit-worker-boolean-\">processWorkerExit(Worker,boolean)</h4>\n<p>移除Worker操作是在processWorkerExit(Worker, boolean方法中实现的，当getTask()方法返回null后，会导致runWorker(Worker)方法中跳出while循环，调用processWorkerExit(Worker, boolean方法将Worker移除。注意在返回null的之前，已经将workerCount进行减1操作，因此在processWorkerExit(Worker, boolean方法中，completedAbruptly为false的情况（即正常超时退出）不需要再将workerCount减1。processWorkerExit(Worker, boolean方法的源码如下：</p>\n<pre><code class=\"language-java\">private void processWorkerExit(Worker w, boolean completedAbruptly) {\n    // completedAbruptly为true，此时workerCount还没有更新，因此需要手动减1\n    if (completedAbruptly) // If abrupt, then workerCount wasn&#39;t adjusted\n        decrementWorkerCount();\n\n    // 获取锁\n    final ReentrantLock mainLock = this.mainLock;\n    mainLock.lock();\n    try {\n        // 更新完成的任务数量\n        completedTaskCount += w.completedTasks;\n        // 从workers数组中移除w\n        workers.remove(w);\n    } finally {\n        // 解锁\n        mainLock.unlock();\n    }\n\n    // 尝试终止线程池\n    tryTerminate();\n\n    // 获取ctl\n    int c = ctl.get();\n    // 如果runState状态是SHUTDOWN或RUNNING，即还没有停止\n    if (runStateLessThan(c, STOP)) {\n        // 如果worker处理任务过程中没有出现异常\n        if (!completedAbruptly) {\n            /**\n             * 获取允许的最小核心线程数，逻辑如下：\n             * 1. 如果不允许核心线程超时，则min为核心线程数\n             * 2. 如果允许核心线程超时，且workQueue不为空，则min为1，\n             *    以确保至少有一个worker来处理队列里的任务\n             */\n            int min = allowCoreThreadTimeOut ? 0 : corePoolSize;\n            if (min == 0 &amp;&amp; ! workQueue.isEmpty())\n                min = 1;\n            // 当workerCount大于等于min时，直接返回，不需要添加新的Worker。\n            if (workerCountOf(c) &gt;= min)\n                return; // replacement not needed\n        }\n        /**\n         * 添加一个新的Worker线程，走到这里有下面两种情况：\n         * 1. worker中的任务因异常而退出了，此时Worker也会因抛出异常而终止，因此需要添加新的Worker；\n         * 2. workerCount小于计算出来的最小线程数，有可能是因为核心线程超时了，因此需要添加新的Worker。\n         */\n        addWorker(null, false);\n    }\n}</code></pre>\n<p>processWorkerExit(Worker, boolean方法在统计完传入的Worker所完成的任务数之后将其从workers集合中移除，然后尝试关闭线程池，tryTerminate()方法源码如下</p>\n<h4 id=\"tryterminate-\">tryTerminate()</h4>\n<pre><code class=\"language-java\">final void tryTerminate() {\n    for (;;) {\n        // 获取ctl\n        int c = ctl.get();\n        /**\n         * 判断条件是否满足，如果不满足，直接返回\n         * 1. 是RUNNING或SHUTDOWN状态，不满足；\n         * 2. 是TIDYING或TERMINATED状态，不满足；\n         * 3. 是SHUTDOWN状态，但workQueue不为空，不满足\n         */\n        if (isRunning(c) ||\n                runStateAtLeast(c, TIDYING) ||\n                (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))\n            return;\n        // 如果worker数量不为0\n        if (workerCountOf(c) != 0) { // Eligible to terminate\n            /**\n             * 尝试中断worker中的线程，\n             * ONLY_ONE表示只尝试中断第一个worker中的线程\n             */\n            interruptIdleWorkers(ONLY_ONE);\n            return;\n        }\n\n        // 获取锁\n        final ReentrantLock mainLock = this.mainLock;\n        mainLock.lock();\n        try {\n            // 先修改runState为TIDYING，workerCount为0\n            if (ctl.compareAndSet(c, ctlOf(TIDYING, 0))) {\n                try {\n                    // 修改成功后，尝试调用终止钩子方法\n                    terminated();\n                } finally {\n                    // 最终将runState修改为TERMINATED，workerCount修改为0\n                    ctl.set(ctlOf(TERMINATED, 0));\n                    // 唤醒等待在termination上的所有线程\n                    termination.signalAll();\n                }\n                return;\n            }\n        } finally {\n            // 解锁\n            mainLock.unlock();\n        }\n        // else retry on failed CAS\n    }\n}</code></pre>\n<p>tryTerminate()方法在检查环境合适之后，会尝试关闭线程池，流程尝试修改runState和workerCount，先修改runState为TIDYING，workerCount为0，修改成功后会调用terminated()钩子方法，然后修改runState为TERMINATED，并且唤醒阻塞在termination上的所有线程。</p>\n<h2 id=\"-\">关闭线程池</h2>\n<p>ThreadPoolExecutor中关于线程池关闭的方法有两类，源码如下：</p>\n<h4 id=\"shutdown-\">shutdown()</h4>\n<pre><code class=\"language-java\">public void shutdown() {\n    final ReentrantLock mainLock = this.mainLock;\n    // 获取锁\n    mainLock.lock();\n    try {\n        // 检查终止线程池的“线程”是否有权限。\n        checkShutdownAccess();\n        // 设置线程池的状态为关闭状态。\n        advanceRunState(SHUTDOWN);\n        // 中断线程池中空闲的线程。\n        interruptIdleWorkers();\n        // 钩子函数，在ThreadPoolExecutor中没有任何动作。\n        onShutdown(); // hook for ScheduledThreadPoolExecutor\n    } finally {\n        // 释放锁\n        mainLock.unlock();\n    }\n    // 尝试终止线程池\n    tryTerminate();\n}</code></pre>\n<p>shutdown()的作用是关闭线程池。</p>\n<h4 id=\"shutdownnow-\">shutdownNow()</h4>\n<pre><code class=\"language-java\">public List&lt;Runnable&gt; shutdownNow() {\n    List&lt;Runnable&gt; tasks;\n    // 加锁\n    final ReentrantLock mainLock = this.mainLock;\n    mainLock.lock();\n    try {\n        // 检查可否关闭的权限\n        checkShutdownAccess();\n        // 将runState转换为SHUTDOWN\n        advanceRunState(STOP);\n        // 中断所有的Worker\n        interruptWorkers();\n        // 将队列中的任务全部取出赋值给task\n        tasks = drainQueue();\n    } finally {\n        // 解锁\n        mainLock.unlock();\n    }\n    // 尝试终止线程池\n    tryTerminate();\n    // 返回保存的任务\n    return tasks;\n}</code></pre>\n<p>这两类方法的区别在于，shutdown()方法会将线程池状态切换为SHUTDOWN，中断所有空闲的Worker线程，然后调用tryTerminate()尝试终止线程池，此时虽然线程池关闭了，正在运行的任务并不会立即结束，而是继续正常运行，但任务队列中的任务将会被直接丢弃。shutdownNow()方法则不同，它会将线程池状态切换为STOP，中断所有的Worker线程，然后调用tryTerminate()尝试终止线程池，此时线程池关闭动作会将所有正在运行的任务也一并停止，同时还会将任务队列中的等待执行的任务全部取出放在一个列表中返回给调用者。</p>\n<h2 id=\"-\">钩子方法</h2>\n<p>ThreadPoolExecutor提供了一些钩子方法给开发者进行重写，以获取线程池的不同时刻的状态信息，这些方法如下：</p>\n<pre><code class=\"language-java\">/**\n * 线程池关闭后钩子函数\n */\nvoid onShutdown() {\n}\n\n/**\n * 执行前钩子函数\n */\nprotected void beforeExecute(Thread t, Runnable r) { }\n\n/**\n * 执行后钩子函数\n */\nprotected void afterExecute(Runnable r, Throwable t) { }\n\n/**\n * 线程池已终止的钩子函数\n */\nprotected void terminated() { }</code></pre>\n<p>我们可以自定义继承于ThreadPoolExecutor的类，重写这些方法以应用。</p>\n',32,3,2,NULL,'2019-10-25 03:32:06','2019-11-10 09:12:34',0,'9,14,41',1,0),(53,'Java多线程JUC线程池04——Callable、Future、FutureTask','Runnable接口是针对单纯的无返回值任务，当我们需要获取线程的执行结果时，就需要用到它们。Callable用于产生结果，Future用于获取结果。','Bobbi','## Callable和Future简介\nRunnable接口是针对单纯的无返回值任务，当我们需要获取线程的执行结果时，就需要用到它们。Callable用于产生结果，Future用于获取结果。\n#### Callable\nCallable是一个泛型接口，它的call()方法可以返回定义时规定的泛型值，或者抛出异常；\n```java\npublic interface Callable<V> {\n    V call() throws Exception;\n}\n```\n#### Future\nFuture接口可用于异步获取执行结果，它提供了检查任务是否完成及获取执行结果的方法。其中获取执行结果的方法有两个，都是阻塞式等待的方法，其中一个方法提供了超时机制；在获取执行结果时如果任务没有执行完成就会进入等待状态，直到任务执行完成返回结果。Future还提供了取消任务的方法，如果执行没有返回值（例如Runnable）的任务，并且希望能够取消任务，可以使用该方法。Future接口的源码如下：\n```java\npublic interface Future<V> {\n    // 试图取消对此任务的执行。\n    boolean     cancel(boolean mayInterruptIfRunning)\n\n    // 如果在任务正常完成前将其取消，则返回 true。\n    boolean     isCancelled()\n\n    // 如果任务已完成，则返回 true。\n    boolean     isDone()\n\n    // 如有必要，等待计算完成，然后获取其结果。\n    V           get() throws InterruptedException, ExecutionException;\n\n    // 如有必要，最多等待为使计算完成所给定的时间之后，获取其结果（如果结果可用）。\n    V             get(long timeout, TimeUnit unit)\n          throws InterruptedException, ExecutionException, TimeoutException;\n}\n```\n#### RunnableFuture\nRunnableFuture继承了Runnable和Future接口，它是一个具有异步执行结果的任务，并且可以通过Future的方法取该任务的执行结果。定义如下：\n```java\npublic interface RunnableFuture<V> extends Runnable, Future<V> {\n    void run();\n}\n```\n\n## FutureTask\nFutureTask是一个可取消的异步任务，实现了Runnable、Future接口，所以FutureTask既能当做一个Runnable直接被Thread执行，也能作为Future用来得到Callable的计算结果。我们先看看Callable, Future, FutureTask它们之间的关系图，如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191025/696fc75a7bf24bcab274d01bb0dca4c3.png)\n\n## FutureTask例子\nFutureTask一般配合ExecutorService来使用，也可以直接通过Thread来使用。\n```java\nclass CallableTask implements Callable<Integer> {\n\n    @Override\n    public Integer call() throws Exception {\n        System.out.println(Thread.currentThread().getName() + \" is running\");\n        int result = 0;\n        for(int i = 0; i < 100;++i) {\n            result += i;\n        }\n        Thread.sleep(3000);\n        return result;\n    }\n}\npublic class FutureTaskDemo {\n    public static void main(String[] args) {\n        ExecutorService service = Executors.newCachedThreadPool();\n        FutureTask<Integer> futureTask = new FutureTask<Integer>(new CallableTask());\n        service.submit(futureTask);\n        try {\n            System.out.println(\"3s后，运行返回结果是：\"+futureTask.get());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n        service.shutdown();\n\n    }\n}\n```\n运行结果：\n```shell\npool-1-thread-1 is running\n3s后，运行返回结果是：4950\n```\n\n说明：新建CallableTask类，并实现Callable接口。在main函数中，使用FutureTask将CallableTask包装并传入线程池中运行。从结果中可以看出，在调用futureTask.get()获取运行结果时，是阻塞式的，延迟获取结果的。\n\n## 构造函数\nFutureTask有两个构造函数，其中一个如下：\n```java\npublic FutureTask(Callable<V> callable) {\n        if (callable == null)\n            throw new NullPointerException();\n        this.callable = callable;\n        this.state = NEW;       // ensure visibility of callable\n}\n```\n\n这个构造函数会把传入的Callable变量保存在this.callable字段中，该字段定义为private Callable<V> callable;用来保存底层的调用，在被执行完成以后会指向null,接着会初始化state字段为NEW。\n\nstate字段用来保存FutureTask内部的任务执行状态，一共有7中状态，每种状态及其对应的值如下：\n```java\n    private volatile int state;\n    private static final int NEW          = 0;\n    private static final int COMPLETING   = 1;\n    private static final int NORMAL       = 2;\n    private static final int EXCEPTIONAL  = 3;\n    private static final int CANCELLED    = 4;\n    private static final int INTERRUPTING = 5;\n    private static final int INTERRUPTED  = 6;\n```\n其中需要注意的是state是volatile类型的，也就是说只要有任何一个线程修改了这个变量，那么其他所有的线程都会知道最新的值。\n\n- NEW:表示是个新的任务或者还没被执行完的任务。这是初始状态。\n\n- COMPLETING:任务已经执行完成或者执行任务的时候发生异常，但是任务执行结果或者异常原因还没有保存到outcome字段(outcome字段用来保存任务执行结果，如果发生异常，则用来保存异常原因)的时候，状态会从NEW变更到COMPLETING。但是这个状态会时间会比较短，属于中间状态。\n- NORMAL:任务已经执行完成并且任务执行结果已经保存到outcome字段，状态会从COMPLETING转换到NORMAL。这是一个最终态。\n- EXCEPTIONAL:任务执行发生异常并且异常原因已经保存到outcome字段中后，状态会从COMPLETING转换到EXCEPTIONAL。这是一个最终态。\n- CANCELLED:任务还没开始执行或者已经开始执行但是还没有执行完成的时候，用户调用了cancel(false)方法取消任务且不中断任务执行线程，这个时候状态会从NEW转化为CANCELLED状态。这是一个最终态。\n- INTERRUPTING: 任务还没开始执行或者已经执行但是还没有执行完成的时候，用户调用了cancel(true)方法取消任务并且要中断任务执行线程但是还没有中断任务执行线程之前，状态会从NEW转化为INTERRUPTING。这是一个中间状态。\n- INTERRUPTED:调用interrupt()中断任务执行线程之后状态会从INTERRUPTING转换到INTERRUPTED。这是一个最终态。\n\nps：所有值大于COMPLETING的状态都表示任务已经执行完成(任务正常执行完成，任务执行异常或者任务被取消)。\n\n```java\n可能的状态转换：\nNEW -> COMPLETING -> NORMAL // 没有发生异常，也没有被canceled\nNEW -> COMPLETING -> EXCEPTIONAL // 执行过程中发生异常\nNEW -> CANCELLED // 执行后被取消\nNEW -> INTERRUPTING -> INTERRUPTED // 被中断\n```\n\n各个状态之间的可能转换关系如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191026/33c36d65cdc24e52afedaa7208377b56.png)\n\n另外一个构造函数如下：\n```java\npublic FutureTask(Runnable runnable, V result) {\n        this.callable = Executors.callable(runnable, result);\n        this.state = NEW;       // ensure visibility of callable\n}\n\npublic static <T> Callable<T> callable(Runnable task, T result) {\n    if (task == null)\n        throw new NullPointerException();\n    return new RunnableAdapter<T>(task, result);\n}\n\nstatic final class RunnableAdapter<T> implements Callable<T> {\n    final Runnable task;\n    final T result;\n    RunnableAdapter(Runnable task, T result) {\n        this.task = task;\n        this.result = result;\n    }\n    public T call() {\n        task.run();\n        return result;\n    }\n}\n```\n这个构造函数会把传入的Runnable封装成一个Callable对象保存在callable字段中，同时如果任务执行成功的话就会返回传入的result。这种情况下如果不需要返回值的话可以传入一个null。\n\n## 任务执行\n在new了一个FutureTask对象之后，接下来就是在另一个线程中执行这个Task,无论是通过直接new一个Thread还是通过线程池，执行的都是run()方法，接下来就看看run()方法的实现。\n```java\npublic void run() {\n    // 状态如果不是NEW，说明任务或者已经执行过，或者已经被取消，直接返回\n    // 状态如果是NEW，则尝试把当前执行线程保存在runner字段(runnerOffset)中，如果赋值失败则直接返回\n    if (state != NEW ||\n        !UNSAFE.compareAndSwapObject(this, runnerOffset,\n                                     null, Thread.currentThread()))\n        return;\n    try {\n        Callable<V> c = callable;\n        if (c != null && state == NEW) {\n            V result;\n            boolean ran;\n            try {\n                // 执行任务  计算逻辑\n                result = c.call();\n                ran = true;\n            } catch (Throwable ex) {\n                result = null;\n                ran = false;\n                // 任务异常\n                setException(ex);\n            }\n            if (ran)\n                // 任务正常执行完毕\n                set(result);\n        }\n    } finally {\n        // runner must be non-null until state is settled to\n        // prevent concurrent calls to run()\n        runner = null;\n        // state must be re-read after nulling runner to prevent\n        // leaked interrupts\n        int s = state;\n        // 如果任务被中断，执行中断处理\n        if (s >= INTERRUPTING)\n            handlePossibleCancellationInterrupt(s);\n    }\n}\n```\n说明：\n1.首先会判断当前任务的state是否等于NEW,如果不为NEW则说明任务或者已经执行过，或者已经被取消，直接返回。\n2. 如果状态为NEW则接着会通过unsafe类把任务执行线程引用CAS的保存在runner字段中，如果保存失败，则直接返回。\n3. 执行任务。\n4. 如果任务执行发生异常，则调用setException()方法保存异常信息。否则执行set()设置结果和状态值。\n5. 任务如果是被中断的，执行 handlePossibleCancellationInterrupt()处理状态和中断响应。\n\n### setException方法\n```java\nprotected void setException(Throwable t) {\n    if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) {\n        outcome = t;\n        UNSAFE.putOrderedInt(this, stateOffset, EXCEPTIONAL); // final state\n        finishCompletion();\n    }\n}\n```\n在setException()方法中\n1. 首先会CAS的把当前的状态从NEW变更为COMPLETING(中间状态)状态。\n2. 把异常原因保存在outcome字段中，outcome字段用来保存任务执行结果或者异常原因。\n3. CAS的把当前任务状态从COMPLETING变更为EXCEPTIONAL。\n4. 调用finishCompletion()。\n\n### set方法\n```java\nprotected void set(V v) {\n    if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) {\n        outcome = v;\n        UNSAFE.putOrderedInt(this, stateOffset, NORMAL); // final state\n        finishCompletion();\n    }\n}\n```\n1. 首先会CAS的把当前的状态从NEW变更为COMPLETING状态。\n2. 把任务执行结果保存在outcome字段中。\n3. CAS的把当前任务状态从COMPLETING变更为NORMAL。这个状态转换对应着上图中的一。\n4. 调用finishCompletion()。 \n\n## 执行结果获取\n发起任务线程(threadpool)跟执行任务线程(main)通常情况下都不会是同一个线程。任务发起线程可以调用get()方法来获取任务执行结果，如果此时任务已经执行完毕则会直接返回任务结果，如果任务还没执行完毕，则调用方会阻塞直到任务执行结束返回结果为止。get()方法实现如下:\n```java\npublic V get() throws InterruptedException, ExecutionException {\n    int s = state;\n    if (s <= COMPLETING)\n        s = awaitDone(false, 0L);\n    return report(s);\n}\n```\n1. 判断任务当前的state <= COMPLETING是否成立。前面分析过，COMPLETING状态是任务是否执行完成的临界状态。\n2. 如果成立，表明任务还没有结束(这里的结束包括任务正常执行完毕，任务执行异常，任务被取消)，则会调用awaitDone()进行阻塞等待。\n3. 如果不成立表明任务已经结束，调用report()返回结果。\n\n#### awaitDone()\n当调用get()获取任务结果但是任务还没执行完成的时候，调用线程会调用awaitDone()方法进行阻塞等待，该方法定义如下:\n```java\nprivate int awaitDone(boolean timed, long nanos)\n        throws InterruptedException {\n    // 计算等待截止时间\n    final long deadline = timed ? System.nanoTime() + nanos : 0L;\n    WaitNode q = null;\n    boolean queued = false;\n    for (;;) {\n        // 1. 判断阻塞线程是否被中断,如果被中断则在等待队列中删除该节点并抛出InterruptedException异常\n        if (Thread.interrupted()) {\n            removeWaiter(q);\n            throw new InterruptedException();\n        }\n        // 2. 获取当前状态，如果状态大于COMPLETING\n        // 说明任务已经结束(要么正常结束，要么异常结束，要么被取消)\n        // 则把thread显示置空，并返回结果\n        int s = state;\n        if (s > COMPLETING) {\n            if (q != null)\n                q.thread = null;\n            return s;\n        }\n        // 3. 如果状态处于中间状态COMPLETING\n        // 表示任务已经结束但是任务执行线程还没来得及给outcome赋值\n        // 这个时候让出执行权让其他线程优先执行\n        else if (s == COMPLETING) // cannot time out yet\n            Thread.yield();\n        // 4. 如果等待节点为空，则构造一个等待节点\n        else if (q == null)\n            q = new WaitNode();\n        // 5. 如果还没有入队列，则把当前节点加入waiters首节点并替换原来waiters\n        else if (!queued)\n            queued = UNSAFE.compareAndSwapObject(this, waitersOffset,\n                    q.next = waiters, q);\n        else if (timed) {\n            // 如果需要等待特定时间，则先计算要等待的时间\n            // 如果已经超时，则删除对应节点并返回对应的状态\n            nanos = deadline - System.nanoTime();\n            if (nanos <= 0L) {\n                removeWaiter(q);\n                return state;\n            }\n            // 6. 阻塞等待特定时间\n            LockSupport.parkNanos(this, nanos);\n        }\n        else\n            // 6. 阻塞等待直到被其他线程唤醒\n            LockSupport.park(this);\n    }\n}\n```\nawaitDone()中有个死循环，每一次循环都会：\n\n1. 判断调用get()的线程是否被其他线程中断，如果是的话则在等待队列中删除对应节点然后抛出InterruptedException异常。\n2. 获取任务当前状态，如果当前任务状态大于COMPLETING则表示任务执行完成，则把thread字段置null并返回结果。\n3. 如果任务处于COMPLETING状态，则表示任务已经处理完成(正常执行完成或者执行出现异常)，但是执行结果或者异常原因还没有保存到outcome字段中。这个时候调用线程让出执行权让其他线程优先执行。\n4. 如果等待节点为空，则构造一个等待节点WaitNode。\n5. 如果第四步中新建的节点还没如队列，则CAS的把该节点加入waiters队列的首节点。\n6. 阻塞等待。\n\n假设当前state=NEW且waiters为NULL,也就是说还没有任何一个线程调用get()获取执行结果，这个时候有两个线程threadA和threadB先后调用get()来获取执行结果。再假设这两个线程在加入阻塞队列进行阻塞等待之前任务都没有执行完成且threadA和threadB都没有被中断的情况下(因为如果threadA和threadB在进行阻塞等待结果之前任务就执行完成或线程本身被中断的话，awaitDone()就执行结束返回了)，执行过程是这样的，以threadA为例:\n\n1. 第一轮for循环，执行的逻辑是q == null,所以这时候会新建一个节点q。第一轮循环结束。\n2. 第二轮for循环，执行的逻辑是!queue，这个时候会把第一轮循环中生成的节点的next指针指向waiters，然后CAS的把节点q替换waiters。也就是把新生成的节点添加到waiters链表的首节点。如果替换成功，queued=true。第二轮循环结束。\n3. 第三轮for循环，进行阻塞等待。要么阻塞特定时间，要么一直阻塞知道被其他线程唤醒。\n![image.png](http://oss.dblearn.cn/dbblog/20191026/046d219e48c845d7b1d8e8a86e26c5cb.png)\n\n#### cancel()\n```java\npublic boolean cancel(boolean mayInterruptIfRunning) {\n    // 1. 如果任务已经结束，则直接返回false  任务已经开始\n    if (state != NEW)\n        return false;\n    // 2. 如果需要中断任务执行线程\n    if (mayInterruptIfRunning) {\n        // 2.1. 把任务状态从NEW转化到INTERRUPTING\n        if (!UNSAFE.compareAndSwapInt(this, stateOffset, NEW, INTERRUPTING))\n            return false;\n        Thread t = runner;\n        // 2.2. 中断任务执行线程\n        if (t != null)\n            t.interrupt();\n        // 2.3. 修改状态为INTERRUPTED\n        UNSAFE.putOrderedInt(this, stateOffset, INTERRUPTED); // final state\n    }\n    // 3. 如果不需要中断任务执行线程，则直接把状态从NEW转化为CANCELLED\n    else if (!UNSAFE.compareAndSwapInt(this, stateOffset, NEW, CANCELLED))\n        return false;\n    finishCompletion();\n    return true;\n}\n\n```\n1. 判断任务当前执行状态，如果任务状态不为NEW，则说明任务或者已经执行完成，或者执行异常，不能被取消，直接返回false表示执行失败。\n2. 判断需要中断任务执行线程，则\n把任务状态从NEW转化到INTERRUPTING。这是个中间状态 ->\n中断任务执行线程 -> 修改任务状态为INTERRUPTED。\n3. 如果不需要中断任务执行线程，直接把任务状态从NEW转化为CANCELLED。如果转化失败则返回false表示取消失败。\n4. 调用finishCompletion()。\n\n#### finishCompletion()\n不管是任务执行异常还是任务正常执行完毕，或者取消任务，最后都会调用finishCompletion()方法\n```java\nprivate void finishCompletion() {\n    // assert state > COMPLETING;\n    for (WaitNode q; (q = waiters) != null;) {\n        if (UNSAFE.compareAndSwapObject(this, waitersOffset, q, null)) {\n            for (;;) {\n                Thread t = q.thread;\n                if (t != null) {\n                    q.thread = null;\n                    LockSupport.unpark(t);\n                }\n                WaitNode next = q.next;\n                if (next == null)\n                    break;\n                q.next = null; // unlink to help gc\n                q = next;\n            }\n            break;\n        }\n    }\n    done();\n    callable = null;        // to reduce footprint\n}\n\n```\n依次遍历waiters链表，唤醒节点中的线程，然后把callable置空。\n\n被唤醒的线程会各自从awaitDone()方法中的LockSupport.park()阻塞中返回，然后会进行新一轮的循环。在新一轮的循环中会返回执行结果(或者更确切的说是返回任务的状态)。 \n\n#### report()\nreport()方法用在get()方法中，作用是把不同的任务状态映射成任务执行结果。\n```java\nprivate V report(int s) throws ExecutionException {\n    Object x = outcome;\n    // 1. 任务正常执行完成，返回任务执行结果\n    if (s == NORMAL)\n        return (V)x;\n    // 2. 任务被取消，抛出CancellationException异常\n    if (s >= CANCELLED)\n        throw new CancellationException();\n    // 3. 其他状态，抛出执行异常ExecutionException\n    throw new ExecutionException((Throwable)x);\n}\n```\n![image.png](http://oss.dblearn.cn/dbblog/20191026/8835006c468843e48cd8de308bb0b2ed.png)\n\n如果任务处于NEW、COMPLETING和INTERRUPTING这三种状态的时候是执行不到report()方法的，所以没必要对这三种状态进行转换。\n\n#### get(long,TimeUnit)\n带超时等待的获取任务结果，实现如下:\n```java\npublic V get(long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException {\n    if (unit == null)\n        throw new NullPointerException();\n    int s = state;\n    if (s <= COMPLETING &&\n        // 如果awaitDone()超时返回之后任务还没结束，则抛出异常\n        (s = awaitDone(true, unit.toNanos(timeout))) <= COMPLETING)\n        throw new TimeoutException();\n    return report(s);\n}\n```\n跟get()不同点在于get(long,TimeUnit)会在awaitDone()超时返回之后抛出TimeoutException异常。\n\n#### isCancelled()和isDone() \n这两个方法分别用来判断任务是否被取消和任务是否执行完成，实现都比较简单，代码如下:\n```java\npublic boolean isCancelled() {\n    return state >= CANCELLED;\n}\n\npublic boolean isDone() {\n    return state != NEW;\n}\n```\n\n## 总结\nFutureTask内部维护一个任务状态，任何操作都是围绕着这个状态进行，并随时更新任务状态。任务发起者调用get()获取执行结果的时候，如果任务还没有执行完毕，则会把自己放入阻塞队列中然后进行阻塞等待。当任务执行完成之后，任务执行线程会依次唤醒阻塞等待的线程。调用cancel()取消任务的时候也只是简单的修改任务状态，如果需要中断任务执行线程的话则调用Thread.interrupt()中断任务执行线程。\n\n有个值得关注的问题就是当任务还在执行的时候用户调用cancel(true)方法能否真正让任务停止执行呢？\n\n当调用cancel(true)方法的时候，实际执行还是Thread.interrupt()方法，而interrupt()方法只是设置中断标志位，如果被中断的任务执行线程处于sleep()、wait()或者join()逻辑中则会抛出InterruptedException异常。因此结论是:cancel(true)并不一定能够停止正在执行的异步任务。\n\n','<h2 id=\"callable-future-\">Callable和Future简介</h2>\n<p>Runnable接口是针对单纯的无返回值任务，当我们需要获取线程的执行结果时，就需要用到它们。Callable用于产生结果，Future用于获取结果。</p>\n<h4 id=\"callable\">Callable</h4>\n<p>Callable是一个泛型接口，它的call()方法可以返回定义时规定的泛型值，或者抛出异常；</p>\n<pre><code class=\"language-java\">public interface Callable&lt;V&gt; {\n    V call() throws Exception;\n}</code></pre>\n<h4 id=\"future\">Future</h4>\n<p>Future接口可用于异步获取执行结果，它提供了检查任务是否完成及获取执行结果的方法。其中获取执行结果的方法有两个，都是阻塞式等待的方法，其中一个方法提供了超时机制；在获取执行结果时如果任务没有执行完成就会进入等待状态，直到任务执行完成返回结果。Future还提供了取消任务的方法，如果执行没有返回值（例如Runnable）的任务，并且希望能够取消任务，可以使用该方法。Future接口的源码如下：</p>\n<pre><code class=\"language-java\">public interface Future&lt;V&gt; {\n    // 试图取消对此任务的执行。\n    boolean     cancel(boolean mayInterruptIfRunning)\n\n    // 如果在任务正常完成前将其取消，则返回 true。\n    boolean     isCancelled()\n\n    // 如果任务已完成，则返回 true。\n    boolean     isDone()\n\n    // 如有必要，等待计算完成，然后获取其结果。\n    V           get() throws InterruptedException, ExecutionException;\n\n    // 如有必要，最多等待为使计算完成所给定的时间之后，获取其结果（如果结果可用）。\n    V             get(long timeout, TimeUnit unit)\n          throws InterruptedException, ExecutionException, TimeoutException;\n}</code></pre>\n<h4 id=\"runnablefuture\">RunnableFuture</h4>\n<p>RunnableFuture继承了Runnable和Future接口，它是一个具有异步执行结果的任务，并且可以通过Future的方法取该任务的执行结果。定义如下：</p>\n<pre><code class=\"language-java\">public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt; {\n    void run();\n}</code></pre>\n<h2 id=\"futuretask\">FutureTask</h2>\n<p>FutureTask是一个可取消的异步任务，实现了Runnable、Future接口，所以FutureTask既能当做一个Runnable直接被Thread执行，也能作为Future用来得到Callable的计算结果。我们先看看Callable, Future, FutureTask它们之间的关系图，如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191025/696fc75a7bf24bcab274d01bb0dca4c3.png\" alt=\"image.png\"></p>\n<h2 id=\"futuretask-\">FutureTask例子</h2>\n<p>FutureTask一般配合ExecutorService来使用，也可以直接通过Thread来使用。</p>\n<pre><code class=\"language-java\">class CallableTask implements Callable&lt;Integer&gt; {\n\n    @Override\n    public Integer call() throws Exception {\n        System.out.println(Thread.currentThread().getName() + &quot; is running&quot;);\n        int result = 0;\n        for(int i = 0; i &lt; 100;++i) {\n            result += i;\n        }\n        Thread.sleep(3000);\n        return result;\n    }\n}\npublic class FutureTaskDemo {\n    public static void main(String[] args) {\n        ExecutorService service = Executors.newCachedThreadPool();\n        FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;Integer&gt;(new CallableTask());\n        service.submit(futureTask);\n        try {\n            System.out.println(&quot;3s后，运行返回结果是：&quot;+futureTask.get());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n        service.shutdown();\n\n    }\n}</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-shell\">pool-1-thread-1 is running\n3s后，运行返回结果是：4950</code></pre>\n<p>说明：新建CallableTask类，并实现Callable接口。在main函数中，使用FutureTask将CallableTask包装并传入线程池中运行。从结果中可以看出，在调用futureTask.get()获取运行结果时，是阻塞式的，延迟获取结果的。</p>\n<h2 id=\"-\">构造函数</h2>\n<p>FutureTask有两个构造函数，其中一个如下：</p>\n<pre><code class=\"language-java\">public FutureTask(Callable&lt;V&gt; callable) {\n        if (callable == null)\n            throw new NullPointerException();\n        this.callable = callable;\n        this.state = NEW;       // ensure visibility of callable\n}</code></pre>\n<p>这个构造函数会把传入的Callable变量保存在this.callable字段中，该字段定义为private Callable<V> callable;用来保存底层的调用，在被执行完成以后会指向null,接着会初始化state字段为NEW。</p>\n<p>state字段用来保存FutureTask内部的任务执行状态，一共有7中状态，每种状态及其对应的值如下：</p>\n<pre><code class=\"language-java\">    private volatile int state;\n    private static final int NEW          = 0;\n    private static final int COMPLETING   = 1;\n    private static final int NORMAL       = 2;\n    private static final int EXCEPTIONAL  = 3;\n    private static final int CANCELLED    = 4;\n    private static final int INTERRUPTING = 5;\n    private static final int INTERRUPTED  = 6;</code></pre>\n<p>其中需要注意的是state是volatile类型的，也就是说只要有任何一个线程修改了这个变量，那么其他所有的线程都会知道最新的值。</p>\n<ul>\n<li><p>NEW:表示是个新的任务或者还没被执行完的任务。这是初始状态。</p>\n</li>\n<li><p>COMPLETING:任务已经执行完成或者执行任务的时候发生异常，但是任务执行结果或者异常原因还没有保存到outcome字段(outcome字段用来保存任务执行结果，如果发生异常，则用来保存异常原因)的时候，状态会从NEW变更到COMPLETING。但是这个状态会时间会比较短，属于中间状态。</p>\n</li>\n<li><p>NORMAL:任务已经执行完成并且任务执行结果已经保存到outcome字段，状态会从COMPLETING转换到NORMAL。这是一个最终态。</p>\n</li>\n<li><p>EXCEPTIONAL:任务执行发生异常并且异常原因已经保存到outcome字段中后，状态会从COMPLETING转换到EXCEPTIONAL。这是一个最终态。</p>\n</li>\n<li><p>CANCELLED:任务还没开始执行或者已经开始执行但是还没有执行完成的时候，用户调用了cancel(false)方法取消任务且不中断任务执行线程，这个时候状态会从NEW转化为CANCELLED状态。这是一个最终态。</p>\n</li>\n<li><p>INTERRUPTING: 任务还没开始执行或者已经执行但是还没有执行完成的时候，用户调用了cancel(true)方法取消任务并且要中断任务执行线程但是还没有中断任务执行线程之前，状态会从NEW转化为INTERRUPTING。这是一个中间状态。</p>\n</li>\n<li><p>INTERRUPTED:调用interrupt()中断任务执行线程之后状态会从INTERRUPTING转换到INTERRUPTED。这是一个最终态。</p>\n</li>\n</ul>\n<p>ps：所有值大于COMPLETING的状态都表示任务已经执行完成(任务正常执行完成，任务执行异常或者任务被取消)。</p>\n<pre><code class=\"language-java\">可能的状态转换：\nNEW -&gt; COMPLETING -&gt; NORMAL // 没有发生异常，也没有被canceled\nNEW -&gt; COMPLETING -&gt; EXCEPTIONAL // 执行过程中发生异常\nNEW -&gt; CANCELLED // 执行后被取消\nNEW -&gt; INTERRUPTING -&gt; INTERRUPTED // 被中断</code></pre>\n<p>各个状态之间的可能转换关系如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191026/33c36d65cdc24e52afedaa7208377b56.png\" alt=\"image.png\"></p>\n<p>另外一个构造函数如下：</p>\n<pre><code class=\"language-java\">public FutureTask(Runnable runnable, V result) {\n        this.callable = Executors.callable(runnable, result);\n        this.state = NEW;       // ensure visibility of callable\n}\n\npublic static &lt;T&gt; Callable&lt;T&gt; callable(Runnable task, T result) {\n    if (task == null)\n        throw new NullPointerException();\n    return new RunnableAdapter&lt;T&gt;(task, result);\n}\n\nstatic final class RunnableAdapter&lt;T&gt; implements Callable&lt;T&gt; {\n    final Runnable task;\n    final T result;\n    RunnableAdapter(Runnable task, T result) {\n        this.task = task;\n        this.result = result;\n    }\n    public T call() {\n        task.run();\n        return result;\n    }\n}</code></pre>\n<p>这个构造函数会把传入的Runnable封装成一个Callable对象保存在callable字段中，同时如果任务执行成功的话就会返回传入的result。这种情况下如果不需要返回值的话可以传入一个null。</p>\n<h2 id=\"-\">任务执行</h2>\n<p>在new了一个FutureTask对象之后，接下来就是在另一个线程中执行这个Task,无论是通过直接new一个Thread还是通过线程池，执行的都是run()方法，接下来就看看run()方法的实现。</p>\n<pre><code class=\"language-java\">public void run() {\n    // 状态如果不是NEW，说明任务或者已经执行过，或者已经被取消，直接返回\n    // 状态如果是NEW，则尝试把当前执行线程保存在runner字段(runnerOffset)中，如果赋值失败则直接返回\n    if (state != NEW ||\n        !UNSAFE.compareAndSwapObject(this, runnerOffset,\n                                     null, Thread.currentThread()))\n        return;\n    try {\n        Callable&lt;V&gt; c = callable;\n        if (c != null &amp;&amp; state == NEW) {\n            V result;\n            boolean ran;\n            try {\n                // 执行任务  计算逻辑\n                result = c.call();\n                ran = true;\n            } catch (Throwable ex) {\n                result = null;\n                ran = false;\n                // 任务异常\n                setException(ex);\n            }\n            if (ran)\n                // 任务正常执行完毕\n                set(result);\n        }\n    } finally {\n        // runner must be non-null until state is settled to\n        // prevent concurrent calls to run()\n        runner = null;\n        // state must be re-read after nulling runner to prevent\n        // leaked interrupts\n        int s = state;\n        // 如果任务被中断，执行中断处理\n        if (s &gt;= INTERRUPTING)\n            handlePossibleCancellationInterrupt(s);\n    }\n}</code></pre>\n<p>说明：\n1.首先会判断当前任务的state是否等于NEW,如果不为NEW则说明任务或者已经执行过，或者已经被取消，直接返回。</p>\n<ol start=\"2\">\n<li>如果状态为NEW则接着会通过unsafe类把任务执行线程引用CAS的保存在runner字段中，如果保存失败，则直接返回。</li>\n<li>执行任务。</li>\n<li>如果任务执行发生异常，则调用setException()方法保存异常信息。否则执行set()设置结果和状态值。</li>\n<li>任务如果是被中断的，执行 handlePossibleCancellationInterrupt()处理状态和中断响应。</li>\n</ol>\n<h3 id=\"setexception-\">setException方法</h3>\n<pre><code class=\"language-java\">protected void setException(Throwable t) {\n    if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) {\n        outcome = t;\n        UNSAFE.putOrderedInt(this, stateOffset, EXCEPTIONAL); // final state\n        finishCompletion();\n    }\n}</code></pre>\n<p>在setException()方法中</p>\n<ol>\n<li>首先会CAS的把当前的状态从NEW变更为COMPLETING(中间状态)状态。</li>\n<li>把异常原因保存在outcome字段中，outcome字段用来保存任务执行结果或者异常原因。</li>\n<li>CAS的把当前任务状态从COMPLETING变更为EXCEPTIONAL。</li>\n<li>调用finishCompletion()。</li>\n</ol>\n<h3 id=\"set-\">set方法</h3>\n<pre><code class=\"language-java\">protected void set(V v) {\n    if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) {\n        outcome = v;\n        UNSAFE.putOrderedInt(this, stateOffset, NORMAL); // final state\n        finishCompletion();\n    }\n}</code></pre>\n<ol>\n<li>首先会CAS的把当前的状态从NEW变更为COMPLETING状态。</li>\n<li>把任务执行结果保存在outcome字段中。</li>\n<li>CAS的把当前任务状态从COMPLETING变更为NORMAL。这个状态转换对应着上图中的一。</li>\n<li>调用finishCompletion()。 </li>\n</ol>\n<h2 id=\"-\">执行结果获取</h2>\n<p>发起任务线程(threadpool)跟执行任务线程(main)通常情况下都不会是同一个线程。任务发起线程可以调用get()方法来获取任务执行结果，如果此时任务已经执行完毕则会直接返回任务结果，如果任务还没执行完毕，则调用方会阻塞直到任务执行结束返回结果为止。get()方法实现如下:</p>\n<pre><code class=\"language-java\">public V get() throws InterruptedException, ExecutionException {\n    int s = state;\n    if (s &lt;= COMPLETING)\n        s = awaitDone(false, 0L);\n    return report(s);\n}</code></pre>\n<ol>\n<li>判断任务当前的state &lt;= COMPLETING是否成立。前面分析过，COMPLETING状态是任务是否执行完成的临界状态。</li>\n<li>如果成立，表明任务还没有结束(这里的结束包括任务正常执行完毕，任务执行异常，任务被取消)，则会调用awaitDone()进行阻塞等待。</li>\n<li>如果不成立表明任务已经结束，调用report()返回结果。</li>\n</ol>\n<h4 id=\"awaitdone-\">awaitDone()</h4>\n<p>当调用get()获取任务结果但是任务还没执行完成的时候，调用线程会调用awaitDone()方法进行阻塞等待，该方法定义如下:</p>\n<pre><code class=\"language-java\">private int awaitDone(boolean timed, long nanos)\n        throws InterruptedException {\n    // 计算等待截止时间\n    final long deadline = timed ? System.nanoTime() + nanos : 0L;\n    WaitNode q = null;\n    boolean queued = false;\n    for (;;) {\n        // 1. 判断阻塞线程是否被中断,如果被中断则在等待队列中删除该节点并抛出InterruptedException异常\n        if (Thread.interrupted()) {\n            removeWaiter(q);\n            throw new InterruptedException();\n        }\n        // 2. 获取当前状态，如果状态大于COMPLETING\n        // 说明任务已经结束(要么正常结束，要么异常结束，要么被取消)\n        // 则把thread显示置空，并返回结果\n        int s = state;\n        if (s &gt; COMPLETING) {\n            if (q != null)\n                q.thread = null;\n            return s;\n        }\n        // 3. 如果状态处于中间状态COMPLETING\n        // 表示任务已经结束但是任务执行线程还没来得及给outcome赋值\n        // 这个时候让出执行权让其他线程优先执行\n        else if (s == COMPLETING) // cannot time out yet\n            Thread.yield();\n        // 4. 如果等待节点为空，则构造一个等待节点\n        else if (q == null)\n            q = new WaitNode();\n        // 5. 如果还没有入队列，则把当前节点加入waiters首节点并替换原来waiters\n        else if (!queued)\n            queued = UNSAFE.compareAndSwapObject(this, waitersOffset,\n                    q.next = waiters, q);\n        else if (timed) {\n            // 如果需要等待特定时间，则先计算要等待的时间\n            // 如果已经超时，则删除对应节点并返回对应的状态\n            nanos = deadline - System.nanoTime();\n            if (nanos &lt;= 0L) {\n                removeWaiter(q);\n                return state;\n            }\n            // 6. 阻塞等待特定时间\n            LockSupport.parkNanos(this, nanos);\n        }\n        else\n            // 6. 阻塞等待直到被其他线程唤醒\n            LockSupport.park(this);\n    }\n}</code></pre>\n<p>awaitDone()中有个死循环，每一次循环都会：</p>\n<ol>\n<li>判断调用get()的线程是否被其他线程中断，如果是的话则在等待队列中删除对应节点然后抛出InterruptedException异常。</li>\n<li>获取任务当前状态，如果当前任务状态大于COMPLETING则表示任务执行完成，则把thread字段置null并返回结果。</li>\n<li>如果任务处于COMPLETING状态，则表示任务已经处理完成(正常执行完成或者执行出现异常)，但是执行结果或者异常原因还没有保存到outcome字段中。这个时候调用线程让出执行权让其他线程优先执行。</li>\n<li>如果等待节点为空，则构造一个等待节点WaitNode。</li>\n<li>如果第四步中新建的节点还没如队列，则CAS的把该节点加入waiters队列的首节点。</li>\n<li>阻塞等待。</li>\n</ol>\n<p>假设当前state=NEW且waiters为NULL,也就是说还没有任何一个线程调用get()获取执行结果，这个时候有两个线程threadA和threadB先后调用get()来获取执行结果。再假设这两个线程在加入阻塞队列进行阻塞等待之前任务都没有执行完成且threadA和threadB都没有被中断的情况下(因为如果threadA和threadB在进行阻塞等待结果之前任务就执行完成或线程本身被中断的话，awaitDone()就执行结束返回了)，执行过程是这样的，以threadA为例:</p>\n<ol>\n<li>第一轮for循环，执行的逻辑是q == null,所以这时候会新建一个节点q。第一轮循环结束。</li>\n<li>第二轮for循环，执行的逻辑是!queue，这个时候会把第一轮循环中生成的节点的next指针指向waiters，然后CAS的把节点q替换waiters。也就是把新生成的节点添加到waiters链表的首节点。如果替换成功，queued=true。第二轮循环结束。</li>\n<li>第三轮for循环，进行阻塞等待。要么阻塞特定时间，要么一直阻塞知道被其他线程唤醒。\n<img src=\"http://oss.dblearn.cn/dbblog/20191026/046d219e48c845d7b1d8e8a86e26c5cb.png\" alt=\"image.png\"></li>\n</ol>\n<h4 id=\"cancel-\">cancel()</h4>\n<pre><code class=\"language-java\">public boolean cancel(boolean mayInterruptIfRunning) {\n    // 1. 如果任务已经结束，则直接返回false  任务已经开始\n    if (state != NEW)\n        return false;\n    // 2. 如果需要中断任务执行线程\n    if (mayInterruptIfRunning) {\n        // 2.1. 把任务状态从NEW转化到INTERRUPTING\n        if (!UNSAFE.compareAndSwapInt(this, stateOffset, NEW, INTERRUPTING))\n            return false;\n        Thread t = runner;\n        // 2.2. 中断任务执行线程\n        if (t != null)\n            t.interrupt();\n        // 2.3. 修改状态为INTERRUPTED\n        UNSAFE.putOrderedInt(this, stateOffset, INTERRUPTED); // final state\n    }\n    // 3. 如果不需要中断任务执行线程，则直接把状态从NEW转化为CANCELLED\n    else if (!UNSAFE.compareAndSwapInt(this, stateOffset, NEW, CANCELLED))\n        return false;\n    finishCompletion();\n    return true;\n}\n</code></pre>\n<ol>\n<li>判断任务当前执行状态，如果任务状态不为NEW，则说明任务或者已经执行完成，或者执行异常，不能被取消，直接返回false表示执行失败。</li>\n<li>判断需要中断任务执行线程，则\n把任务状态从NEW转化到INTERRUPTING。这是个中间状态 -&gt;\n中断任务执行线程 -&gt; 修改任务状态为INTERRUPTED。</li>\n<li>如果不需要中断任务执行线程，直接把任务状态从NEW转化为CANCELLED。如果转化失败则返回false表示取消失败。</li>\n<li>调用finishCompletion()。</li>\n</ol>\n<h4 id=\"finishcompletion-\">finishCompletion()</h4>\n<p>不管是任务执行异常还是任务正常执行完毕，或者取消任务，最后都会调用finishCompletion()方法</p>\n<pre><code class=\"language-java\">private void finishCompletion() {\n    // assert state &gt; COMPLETING;\n    for (WaitNode q; (q = waiters) != null;) {\n        if (UNSAFE.compareAndSwapObject(this, waitersOffset, q, null)) {\n            for (;;) {\n                Thread t = q.thread;\n                if (t != null) {\n                    q.thread = null;\n                    LockSupport.unpark(t);\n                }\n                WaitNode next = q.next;\n                if (next == null)\n                    break;\n                q.next = null; // unlink to help gc\n                q = next;\n            }\n            break;\n        }\n    }\n    done();\n    callable = null;        // to reduce footprint\n}\n</code></pre>\n<p>依次遍历waiters链表，唤醒节点中的线程，然后把callable置空。</p>\n<p>被唤醒的线程会各自从awaitDone()方法中的LockSupport.park()阻塞中返回，然后会进行新一轮的循环。在新一轮的循环中会返回执行结果(或者更确切的说是返回任务的状态)。 </p>\n<h4 id=\"report-\">report()</h4>\n<p>report()方法用在get()方法中，作用是把不同的任务状态映射成任务执行结果。</p>\n<pre><code class=\"language-java\">private V report(int s) throws ExecutionException {\n    Object x = outcome;\n    // 1. 任务正常执行完成，返回任务执行结果\n    if (s == NORMAL)\n        return (V)x;\n    // 2. 任务被取消，抛出CancellationException异常\n    if (s &gt;= CANCELLED)\n        throw new CancellationException();\n    // 3. 其他状态，抛出执行异常ExecutionException\n    throw new ExecutionException((Throwable)x);\n}</code></pre>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191026/8835006c468843e48cd8de308bb0b2ed.png\" alt=\"image.png\"></p>\n<p>如果任务处于NEW、COMPLETING和INTERRUPTING这三种状态的时候是执行不到report()方法的，所以没必要对这三种状态进行转换。</p>\n<h4 id=\"get-long-timeunit-\">get(long,TimeUnit)</h4>\n<p>带超时等待的获取任务结果，实现如下:</p>\n<pre><code class=\"language-java\">public V get(long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException {\n    if (unit == null)\n        throw new NullPointerException();\n    int s = state;\n    if (s &lt;= COMPLETING &amp;&amp;\n        // 如果awaitDone()超时返回之后任务还没结束，则抛出异常\n        (s = awaitDone(true, unit.toNanos(timeout))) &lt;= COMPLETING)\n        throw new TimeoutException();\n    return report(s);\n}</code></pre>\n<p>跟get()不同点在于get(long,TimeUnit)会在awaitDone()超时返回之后抛出TimeoutException异常。</p>\n<h4 id=\"iscancelled-isdone-\">isCancelled()和isDone()</h4>\n<p>这两个方法分别用来判断任务是否被取消和任务是否执行完成，实现都比较简单，代码如下:</p>\n<pre><code class=\"language-java\">public boolean isCancelled() {\n    return state &gt;= CANCELLED;\n}\n\npublic boolean isDone() {\n    return state != NEW;\n}</code></pre>\n<h2 id=\"-\">总结</h2>\n<p>FutureTask内部维护一个任务状态，任何操作都是围绕着这个状态进行，并随时更新任务状态。任务发起者调用get()获取执行结果的时候，如果任务还没有执行完毕，则会把自己放入阻塞队列中然后进行阻塞等待。当任务执行完成之后，任务执行线程会依次唤醒阻塞等待的线程。调用cancel()取消任务的时候也只是简单的修改任务状态，如果需要中断任务执行线程的话则调用Thread.interrupt()中断任务执行线程。</p>\n<p>有个值得关注的问题就是当任务还在执行的时候用户调用cancel(true)方法能否真正让任务停止执行呢？</p>\n<p>当调用cancel(true)方法的时候，实际执行还是Thread.interrupt()方法，而interrupt()方法只是设置中断标志位，如果被中断的任务执行线程处于sleep()、wait()或者join()逻辑中则会抛出InterruptedException异常。因此结论是:cancel(true)并不一定能够停止正在执行的异步任务。</p>\n',34,1,2,NULL,'2019-10-25 12:20:45','2019-10-26 05:16:12',0,'9,14,41',1,0),(54,'Java多线程JUC线程池05——ScheduledThreadPoolExecutor详解(1)','ScheduledThreadPoolExecutor用于执行周期性或延时性的定时任务，它是在ThreadPoolExecutor的基础上实现的任务调度线程池，内部使用延时工作队列DelayedWorkQueue实现对任务的延时调度','Bobbi','## ScheduledThreadPoolExecutor简介\nScheduledThreadPoolExecutor用于执行周期性或延时性的定时任务，它是在ThreadPoolExecutor的基础上实现的任务调度线程池，内部使用延时工作队列DelayedWorkQueue实现对任务的延时调度。DelayedWorkQueue内部使用一个初始容量为16的数组来保存任务，容量不够时会按照现有容量的1.5倍进行扩容，最大容量可达Integer.MAX_VALUE。\n\n\n在讲解ScheduledThreadPoolExecutor之前，我们先理解ScheduledThreadPoolExecutor线程池中涉及到的任务类ScheduledFutureTask和延时等待队列DelayedWorkQueue。\n\n## ScheduledFutureTask数据结构\nScheduledThreadPoolExecutor中的任务都被包装为了ScheduledFutureTask类型的对象，ScheduledFutureTask在普通任务（Runnable或Callable）的基础上扩展了额外的功能。\n\n我们首先关注ScheduledFutureTask的整体结构；\n\n![image.png](http://oss.dblearn.cn/dbblog/20191026/811ddc0b15d54c8b8005235ae3b213d5.png)\n\n该类继承自FutureTask，同时实现了RunnableScheduledFuture接口，定义如下：\n```java\nprivate class ScheduledFutureTask<V> extends FutureTask<V> implements RunnableScheduledFuture<V> {\n    ...\n}\n```\n其中FutureTask类在之前我们已经介绍过了，因此这里我们主要关注RunnableScheduledFuture接口，它的定义如下：\n\n```java\npublic interface RunnableScheduledFuture<V> extends RunnableFuture<V>, ScheduledFuture<V> {\n\n    /**\n     * 判断任务是否是周期性的任务\n     */\n    boolean isPeriodic();\n}\n```\n该接口只提供了一个方法isPeriodic()给实现类实现，用于判断任务是否是周期性的任务。同时该接口还继承了RunnableFuture和ScheduledFuture两个接口，RunnableFuture在前面已经讲解过了，它继承了Runnable和Future接口；这里主要关注ScheduledFuture接口，它的源码如下：\n```java\npublic interface ScheduledFuture<V> extends Delayed, Future<V> {\n}\n```\nScheduledFuture是一个标记接口，没有任何方法的声明，但它继承了Delayed和Future接口，其中Future接口之前讲解过，Delayed接口的源码如下：\n```java\npublic interface Delayed extends Comparable<Delayed> {\n\n    /**\n     * 以给定的时间单位返回与此对象关联的剩余延迟\n     */\n    long getDelay(TimeUnit unit);\n}\n```\nDelayed接口继承了Comparable接口，因此它可以被比较；Delayed接口自己提供的方法仅仅有getDelay(TimeUnit unit)，用于换算和获取任务的延迟时间。\n\n## ScheduleFutureTask成员变量\nScheduledFutureTask在普通任务类的基础上扩展了一些成员变量，用于支撑任务的定时调度，如下：\n```java\n/**\n * 任务在队列中的序号\n * */\nprivate final long sequenceNumber;\n\n/**\n * 任务应该执行的时间，以纳秒计算\n * */\nprivate long time;\n\n/**\n * 任务重复执行的时间间隔，以纳秒计算\n * 当其为正值时，表示固定速率执行\n * 当其为负值时，表示固定延迟执行\n * 当其为0时，表示是非重复任务\n */\nprivate final long period;\n\n/** 记录当前任务 */\nRunnableScheduledFuture<V> outerTask = this;\n\n/**\n * 记录任务在队列中的堆排序顺序\n */\nint heapIndex;\n```\n这里对着几个成员变量进行解释：\n1. sequenceNumber用于标识在等待队列中的顺序，因为可能会碰到多个任务的延时是一样的，所以需要另一个序号进行区分标记；\n2. time字段用于记录计算出来的任务执行时间；\n3. period字段用于标识任务是否是定时任务，当该字段为正值时，表示是周期性重复任务，当该值为负值时，表示是延迟性重复任务，当该值为0时，表示是非重复任务；\n4. outerTask用于记录当前任务，它的默认值就指向自己；该成员变量主要用在重复性任务中，当前一次任务执行结束时，任务会通过outerTask将自己再次加入到等待队列中，以实现重复执行\n5. heapIndex用于记录任务在队列中的堆排序顺序。ScheduledThreadPoolExecutor内部使用DelayedWorkQueue作为任务的等待队列，该队列的具体实现其实是一个小顶堆结构，heapIndex则记录了每个任务在堆中的排序顺序。\n\n## ScheduledFutureTask的方法\n#### 构造方法\n首先关注ScheduledFutureTask的构造方法，有以下三个：\n```java\n/**\n * 根据给定开始时间，创建仅执行一次的任务\n */\nScheduledFutureTask(Runnable r, V result, long ns) {\n    super(r, result);\n    this.time = ns;\n    this.period = 0;\n    this.sequenceNumber = sequencer.getAndIncrement();\n}\n\n/**\n * 根据给定开始时间和间隔时间，创建周期性任务\n */\nScheduledFutureTask(Runnable r, V result, long ns, long period) {\n    super(r, result);\n    this.time = ns;\n    this.period = period;\n    this.sequenceNumber = sequencer.getAndIncrement();\n}\n\n/**\n * 根据给定开始时间，创建仅执行一次的任务\n */\nScheduledFutureTask(Callable<V> callable, long ns) {\n    super(callable);\n    this.time = ns;\n    this.period = 0;\n    this.sequenceNumber = sequencer.getAndIncrement();\n}\n```\n构造方法都比较简单，调用了父类的构造方法后，会对一些成员变量进行赋值，需要注意的是sequenceNumber，它会通过sequencer进行自增获取，sequencer是ScheduledThreadPoolExecutor的常量，是一个Long型的原子类，初值为0，定义如下：\n```java\nprivate static final AtomicLong sequencer = new AtomicLong(0);\n```\n由于sequenceNumber是原子性自增的，因此可以保证每个任务的sequenceNumber会按照初始化顺序严格递增。\n\n#### getDelay(TimeUnit)\ngetDelay(TimeUnit)方法用于通过构造方法中得到的time值计算相对于当前时间的延迟时间，实现如下：\n```java\n// 获取ScheduledFutureTask任务剩余的延迟时间\npublic long getDelay(TimeUnit unit) {\n    return unit.convert(time - now(), TimeUnit.NANOSECONDS);\n}\n```\ngetDelay(TimeUnit)方法每次调用都会重新计算新的延迟时间。\n\n#### setNextRunTime()\nsetNextRunTime()方法则会根据period和time的值，计算出下一次的运行时间：\n```java\n/**\n* 设置下一次执行时间\n*/\nprivate void setNextRunTime() {\n    // 获取周期时间间隔\n    long p = period;\n    if (p > 0)\n    /**\n    * 如果p大于0，表示是周期性执行任务，\n    * 下一次执行任务在本次任务的period时间段后\n    */\n        time += p;\n    else\n    /**\n    * 如果p小于0，表示是间隔性执行任务\n    * 使用triggerTime()计算下一次执行任务的时间\n    */\n        time = triggerTime(-p);\n}\n```\n当period大于0时，表示是周期性执行任务，只需要在time的基础上加上period即可得到任务下一次的运行时间；当period小于或等于0时，将用triggerTime(-p)方法来处理时间，该方法定义在ScheduledThreadPoolExecutor中：\n```java\n/**\n * 根据传入的延迟时间和当前时间，计算最终触发时间\n */\nlong triggerTime(long delay) {\n    /**\n     * 延迟时间delay小于Long.MAX_VALUE >> 1，则返回now() + delay\n     * 延迟时间delay大于Long.MAX_VALUE >> 1，则返回overflowFree()处理的结果，处理过程详见该方法\n     */\n    return now() + ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay));\n}\n```\n其中overflowFree(long)方法的源码如下：\n\n```java\nprivate long overflowFree(long delay) {\n    // 查看延迟等待队列（在ScheduledThreadPoolExecutor中使用的是延迟队列DelayedWorkQueue）中的队首任务\n    Delayed head = (Delayed) super.getQueue().peek();\n    if (head != null) {\n        // 如果队首任务不为null，计算队首任务相对于当前时间还需要延迟的时间headDelay\n        long headDelay = head.getDelay(TimeUnit.NANOSECONDS);\n        /**\n         * 如果headDelay小于0，表示此时队首任务应该出队了，但恰好有任务入队\n         * 且delay - headDelay小于0，则表示此时delay的值小于0或大于Long.MAX_VALUE\n         * 而传入该方法的delay一定是大于0的，因此此时delay大于Long.MAX_VALUE\n         */\n        if (headDelay < 0 && (delay - headDelay < 0))\n        /**\n         * 如果delay大于Long.MAX_VALUE，且队首任务应该要出队了（headDelay为负）\n         * 则将delay置为Long.MAX_VALUE + headDelay\n         */\n            delay = Long.MAX_VALUE + headDelay;\n    }\n    // 返回delay\n    return delay;\n}\n```\n当triggerTime(long delay)中传入的delay小于Long.MAX_VALUE >> 1时会直接取delay，否则交由overflowFree(long delay处理，该方法会根据等待队列的队首任务的延时时间来计算最终下一次任务的执行时间。\n\n#### isPeriodic()和compareTo(Delayed other)\nScheduledFutureTask另外的isPeriodic()和compareTo(Delayed other)主要用于判断任务是否是重复性任务以及与另一个任务比较执行的先后顺序，这个比较方法主要用于在等待队列DelayedWorkQueue进行堆排序，它们的源码如下：\n```java\n/**\n *\n * 判断是否是周期性任务\n *\n * @return true if periodic\n */\npublic boolean isPeriodic() {\n    return period != 0;\n}\n\n/**\n * 与其他ScheduledFutureTask任务进行比较\n * 主要通过time成员变量来比较\n */\npublic int compareTo(Delayed other) {\n    // 判断二者是否是同一个对象，如果是则返回0\n    if (other == this) // compare zero ONLY if same object\n        return 0;\n    // 判断传入的other对象是否是ScheduledFutureTask类型\n    if (other instanceof ScheduledFutureTask) {\n        // 强转\n        ScheduledFutureTask<?> x = (ScheduledFutureTask<?>)other;\n        // 计算二者时间差\n        long diff = time - x.time;\n        // 当前任务在other任务之前执行\n        if (diff < 0)\n            return -1;\n        // 当前任务在other任务之后执行\n        else if (diff > 0)\n            return 1;\n        // 如果两个任务的执行时间相同则比较序号\n        else if (sequenceNumber < x.sequenceNumber)\n        /**\n         * 当前任务与other任务执行时间相同，但序号较小\n         * 因此当前任务先执行\n         */\n            return -1;\n        else\n        /**\n         * 当前任务与other任务执行时间相同，但序号较大\n         * 因此当前任务后执行\n         */\n            return 1;\n    }\n    /**\n     * 走到这里表示传入的other不是ScheduledFutureTask类型\n     * 计算二者的执行时间差，根据该差值决定大小\n     */\n    long d = (getDelay(TimeUnit.NANOSECONDS) - other.getDelay(TimeUnit.NANOSECONDS));\n    return (d == 0) ? 0 : ((d < 0) ? -1 : 1);\n}\n```\n\n## DelayedWorkQueue等待队列\nDelayedWorkQueue是ScheduledThreadPoolExecutor的一个静态内部类，定义如下：\n\n```java\nstatic class DelayedWorkQueue extends AbstractQueue<Runnable> implements BlockingQueue<Runnable> {\n    ...\n}\n```\n从定义可知，DelayedWorkQueue是一个实现了BlockingQueue接口的阻塞队列，同时继承了AbstractQueue抽象类；由于泛型定义指定为Runnable，DelayedWorkQueue入队的元素都是Runnable类型的对象。DelayedWorkQueue中定义的成员变量如下：\n```java\n// 初始容量为16\nprivate static final int INITIAL_CAPACITY = 16;\n// 用于装载任务的数组\nprivate RunnableScheduledFuture[] queue = new RunnableScheduledFuture[INITIAL_CAPACITY];\n// 锁\nprivate final ReentrantLock lock = new ReentrantLock();\n// 大小\nprivate int size = 0;\n\n/**\n * 试图执行队首任务的正处于等待状态的线程对象\n */\nprivate Thread leader = null;\n\n/**\n * 等待条件\n */\nprivate final Condition available = lock.newCondition();\n```\nDelayedWorkQueue内部使用了一个RunnableScheduledFuture[]类型的数组queue装载元素，初始化容量为16（INITIAL_CAPACITY），虽然queue数组有具体大小，但DelayedWorkQueue在添加元素过程中如果queue数组已满就会对其进行扩容，扩容操作后面会讲解。DelayedWorkQueue还是用了可重入锁保证线程并发的安全性，另外还使用了Condition等待条件available来协调元素的入队和出队操作。size表示队列中已有的元素个数，leader变量指向试图执行队首任务的正处于等待状态的线程对象，具体用法会在后面讲解。\n\n#### DelayedWorkQueue基础方法\n我们首先关注DelayedWorkQueue的一些基础方法，分别是indexOf(Object)、contains(Object)、isEmpty()和size()，分别用于查找某个元素在DelayedWorkQueue中的索引、判断DelayedWorkQueue是否包含某个元素、DelayedWorkQueue是否为空以及DelayedWorkQueue的大小；其中contains(Object)内部使用indexOf(Object)实现；它们的源码如下：\n\n```java\n/**\n * 查找给定x在数组中的索引\n */\nprivate int indexOf(Object x) {\n    // x不能为null\n    if (x != null) {\n        // x要是ScheduledFutureTask类型的对象\n        if (x instanceof ScheduledFutureTask) {\n            // 获取x的heapIndex为i\n            int i = ((ScheduledFutureTask) x).heapIndex;\n       \n            // 如果i大于等于0，且i小于size，且queue中i位置的任务与x相等\n            if (i >= 0 && i < size && queue[i] == x)\n                // i即是x在数组中的索引，直接返回\n                return i;\n        } else {\n            /**\n             * 如果x不是ScheduledFutureTask对象\n             * 遍历queue数组，依次查找\n             */\n            for (int i = 0; i < size; i++)\n                // 当查找到的任务与x相同，则返回此时的索引i\n                if (x.equals(queue[i]))\n                    return i;\n        }\n    }\n    // 否则返回-1，表示没找到\n    return -1;\n}\n\n// 判断任务x是否存在于queue中\npublic boolean contains(Object x) {\n    // 加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 使用indexOf()进行查找并判断\n        return indexOf(x) != -1;\n    } finally {\n        // 解锁\n        lock.unlock();\n    }\n}\n\n// 队列是否为空\npublic boolean isEmpty() {\n    return size() == 0;\n}\n\n// 查看队列大小\npublic int size() {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 直接返回size即可\n        return size;\n    } finally {\n        lock.unlock();\n    }\n}\n```\n这里主要关注indexOf(Object)方法，其它的三个方法都比较简单。从indexOf(Object)的源码可知，当获取索引的元素对象为ScheduledFutureTask类型时，其实ScheduledFutureTask对象的heapIndex成员变量记录了自己位于queue数组中的索引，因此可以直接通过该成员变量辅助获取；但当获取索引的元素对象并不是ScheduledFutureTask类型时，会遍历queue数组逐一进行比较。\n\n#### 扩容grow()\nDelayedWorkQueue会在queue数组已满时进行扩容操作，具体体现在grow()方法，源码如下：\n```java\n/**\n * 扩容操作\n */\nprivate void grow() {\n    // 旧的容量\n    int oldCapacity = queue.length;\n    // 新的容量是旧的容量的1.5倍\n    int newCapacity = oldCapacity + (oldCapacity >> 1); // grow 50%\n    // 如果溢出就将其设置为Integer.MAX_VALUE\n    if (newCapacity < 0) // overflow\n        newCapacity = Integer.MAX_VALUE;\n    // 拷贝旧数组的任务到新数组，然后将新数组赋值给queue\n    queue = Arrays.copyOf(queue, newCapacity);\n}\n\n// 剩余容量是无限的\npublic int remainingCapacity() {\n    return Integer.MAX_VALUE;\n}\n```\n源码表示，每次扩容的容量将是当前容量的1.5倍，同时最大容量为Integer.MAX_VALUE\n\n## DelayedWorkQueue的堆结构\nDelayedWorkQueue内部其实是以小顶堆来装载元素，以实现对元素进行从小到大的排序的，装载的元素是RunnableScheduledFuture类型对象，在ScheduledThreadPoolExecutor中则体现为ScheduledFutureTask类型对象；\n\n### 小顶堆数据结构简介\n\n堆结构如下图所示：\n![image.png](http://oss.dblearn.cn/dbblog/20191027/084440416c9041e89bab5b57c5d2a18e.png)\n堆结构可以使用数组表示，可以转换成如下的数组：\n![image.png](http://oss.dblearn.cn/dbblog/20191027/1821929eea5344a19c62084c2ec5f79e.png)\n\n在这种结构中，可以发现有如下特性：\n\n假设，索引值从0开始，子节点的索引值为k，父节点的索引值为p，则：\n\n- 一个节点的左子节点的索引为：k = p * 2 + 1；\n- 一个节点的右子节点的索引为：k = (p + 1) * 2；\n- 一个节点的父节点的索引为：p = (k - 1) / 2。\n\n### 任务入队\n入队的操作如add和put方法都调用了offer方法，下面查看一下offer方法：\n```\n/ 添加任务\npublic boolean offer(Runnable x) {\n    // 检查任务\n    if (x == null)\n        throw new NullPointerException();\n    //将任务转换为RunnableScheduledFuture对象\n    RunnableScheduledFuture e = (RunnableScheduledFuture)x;\n    // 加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        int i = size;\n        if (i >= queue.length)\n            // 如果任务个数大于等于队列数组容量，进行扩容操作\n            grow();\n        // size加1\n        size = i + 1;\n        if (i == 0) {\n            /**\n             * i为0，即原始size为0，没有任务\n             * 将e放在第0位置\n             */\n            queue[0] = e;\n            // 设置e的heapIndex为0\n            setIndex(e, 0);\n        } else {\n            // 否则调用siftUp()对e进行添加及上浮操作\n            siftUp(i, e);\n        }\n        /**\n         * 如果第0个位置的任务是e，\n         * 表示此时入队的是队首元素，可以将leader清空了\n         * 同时可以通知其他线程可以竞争成为leader了\n         */\n        if (queue[0] == e) {\n            // 将leader置为null\n            leader = null;\n            // 唤醒等待在available上的线程\n            available.signal();\n        }\n    } finally {\n        // 解锁\n        lock.unlock();\n    }\n    return true;\n}\n```\noffer(Runnable x)方法会首先将传入的Runnable对象强转为RunnableScheduledFuture对象，然后检查queue数组是否已满，如果已满调用grow()方法进行扩容。接下来主要的代码中，会判断任务添加到queue数组中时位置的索引是否是0，如果是0表示当前queue中没有任务，只需要将任务放入queue索引为0的位置即可，然后调用setIndex(e, 0)将任务的heapIndex设置为0，setIndex(RunnableScheduledFuture, int)的源码如下：\n```java\nprivate void setIndex(RunnableScheduledFuture f, int idx) {\n    // 当传入的f是ScheduledFutureTask类型时，设置其heapIndex\n    if (f instanceof ScheduledFutureTask)\n        ((ScheduledFutureTask)f).heapIndex = idx;\n}\n```\n如果任务添加到queue数组中时位置的索引不是0，表示当前queue数组中已有任务，则调用siftUp(i, e)进行添加；siftUp(int, RunnableScheduledFuture)主要作用是将新的任务添加到queue数组中，然后根据小顶堆的排序方式进行上浮操作，具体代码如下：\n```java\nprivate void siftUp(int k, RunnableScheduledFuture key) {\n    // 循环直到k为0\n    while (k > 0) {\n        // 获取k位置任务的父任务的索引\n        int parent = (k - 1) >>> 1;\n        // 取出父任务\n        RunnableScheduledFuture e = queue[parent];\n        /**\n         * 将key与父任务进行比较，如果key大于等于父任务，\n         * 表示key要在父任务之后或者与父任务同时执行，则跳出循环\n         */\n        if (key.compareTo(e) >= 0)\n            break;\n        /**\n         * 否则key小于父任务，表示key要比父任务早执行\n         * 因此将k位置替换为父任务\n         */\n        queue[k] = e;\n        // 修改父任务的heapIndex为k\n        setIndex(e, k);\n        // 将父任务索引赋值给k，进行下一次循环\n        k = parent;\n    }\n    /**\n     * 走到这里说明key要在父任务之后或者与父任务同时执行\n     * 则已经找到了key所应该在的位置\n     * 将key放在k索引位置\n     */\n    queue[k] = key;\n    // 将key的heapIndex设置为k\n    setIndex(key, k);\n}\n```\n小顶堆的结构是以二叉树构成的，从树的根节点从上往下节点的大小依次递减。当添加了新任务后，它会被放在queue队列的末尾，此时新任务的位置并不是确定的，需要根据任务的执行时间在堆中调整它的位置；调整方式是获取该节点的父节点，然后比较其与父节点的大小，如果比父节点小，就将其与父节点交换位置，重复执行这个操作，直到父节点比自己小，则说明找到合适的位置了。\n\n#### 入队示例\n假设新入队的节点的延迟时间（调用getDelay()方法获得）是5，执行过程如下：\n\n1. 先将新的节点添加到数组的尾部，这时新节点的索引k为7：\n![image.png](http://oss.dblearn.cn/dbblog/20191027/c8196d7598744a69a8c6cb124bf61c4a.png)\n\n2. 计算新父节点的索引：parent = (k - 1) >>> 1，parent = 3，那么queue[3]的时间间隔值为8，因为 5 < 8 ，将执行queue[7] = queue[3]：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/b295bb49d3de48849dc296ba2d098e91.png)\n\n3. 这时将k设置为3，继续循环，再次计算parent为1，queue[1]的时间间隔为3，因为 5 > 3 ，这时退出循环，最终k为3：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/f40cd28a53ae4bd2be4e59531c74ca0d.png)\n\n可见，每次新增节点时，只是根据父节点来判断，而不会影响兄弟节点。\n\n### 任务出队\nDelayedWorkQueue的任务出队操作则相对比较麻烦，它提供了poll()、poll(long timeout, TimeUnit unit)和take()三个出队方法。\n\n#### poll()\n其中poll()方法最简单，它是无阻塞模式的出队操作，如果能获取到符合要求的任务就进行出队，否则直接返回null，源码如下：\n```java\n// 取出队首任务\npublic RunnableScheduledFuture poll() {\n    // 加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 获取queue索引为0位置的任务为first\n        RunnableScheduledFuture first = queue[0];\n        // 如果first任务为null，或者first任务的延迟时间还大于0，就返回null\n        if (first == null || first.getDelay(TimeUnit.NANOSECONDS) > 0)\n            return null;\n        else\n            // 否则调用finishPoll()将first返回，并对堆进行调整\n            return finishPoll(first);\n    } finally {\n        // 解锁\n        lock.unlock();\n    }\n}\n```\n出队的永远是队首任务，因此先获取队首任务为first，然后判断其延迟的时间是否大于0，如果大于0表示还未到执行时间，直接返回null即可。如果first符合出队条件（即已到达执行时间），就调用finishPoll(first)做具体的出队操作，finishPoll(RunnableScheduledFuture f)方法源码如下：\n```java\nprivate RunnableScheduledFuture finishPoll(RunnableScheduledFuture f) {\n    int s = --size;\n    // 取出最后一个任务为x\n    RunnableScheduledFuture x = queue[s];\n    // 将最后索引位置上置为null\n    queue[s] = null;\n    // 如果最后索引不是0，表示堆中元素个数大于1\n    if (s != 0)\n        // 将x从堆顶开始做下沉操作\n        siftDown(0, x);\n    // 设置f的heapIndex为-1，并将其返回\n    setIndex(f, -1);\n    return f;\n}\n```\nfinishPoll(RunnableScheduledFuture)方法主要用于对堆中剩余元素的顺序进行调整，首先会取得queue数组中的最后一个元素为x，并将数组的该索引位置置为null，当堆中元素个数大于1时（即s != 0），就调用siftDown(0, x)进行堆下沉调整，最后将要出队的任务f的heapIndex置为-1后返回。siftDown(int, RunnableScheduledFuture)堆下沉操作的源码如下：\n```java\nprivate void siftDown(int k, RunnableScheduledFuture key) {\n    // 取数组queue中心位置索引half\n    int half = size >>> 1;\n    /**\n     * 循环直到k大于或等于中心索引half时，\n     * 由于从half开始，节点就不再有孩子节点\n     */\n    while (k < half) {\n        // 获取左孩子节点的索引\n        int child = (k << 1) + 1;\n        // 获取左孩子节点\n        RunnableScheduledFuture c = queue[child];\n        // 获取右孩子节点的索引\n        int right = child + 1;\n        /**\n         * 当右孩子节点的索引小于size时，说明右孩子还存在\n         * 比较左孩子与右孩子的大小\n         * 如果左孩子比右孩子大，表明右孩子比左孩子的任务更早执行\n         * 则将c指向右孩子，child指向right索引\n         * 此时c指向的是更早执行的任务所在的那个孩子节点\n         */\n        if (right < size && c.compareTo(queue[right]) > 0)\n            c = queue[child = right];\n        /**\n         * 比较key与c，如果小于等于0，说明key比c还要更早执行，\n         * 说明此时k就是key应该放在的位置，跳出循环\n         */\n        if (key.compareTo(c) <= 0)\n            break;\n        /**\n         * 否则说明key在c后面执行\n         * 将更早执行的c放在k（即c的父节点）位置\n         */\n        queue[k] = c;\n        // 设置c的heapIndex为k\n        setIndex(c, k);\n        // 将k指向child（此时的右孩子的索引），继续下次循环\n        k = child;\n    }\n    // 将key放在queue的k索引位置上\n    queue[k] = key;\n    // 设置key的heapIndex为k\n    setIndex(key, k);\n}\n```\n以finishPoll(RunnableScheduledFuture)方法中调用的siftDown(0, x)为例，x元素是queue数组的最后一个元素，调用siftDown(0, x)即是将x移到队列头，然后逐步下沉。先关注siftDown(int, RunnableScheduledFuture)的while循环体代码，它会根据k获取k位置节点的左孩子节点和右孩子节点的索引，同时找出左孩子节点和右孩子节点中小的那个记为c，然后将传入的RunnableScheduledFuture对象key与c进行对比，如果key比c小，表示key的位置k是合理的，跳出循环即可，否则将c放在索引k位置上，然后将k指向child，继续下一次循环；这种操作能够一直往下直到找到key合适的位置。\n\n#### 出队示例\n假设 k = 0 ，那么执行以下步骤：\n1. 获取左子节点，child = 1 ，获取右子节点， right = 2 ：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/f01a17a0b3c140e788bca8d3c22e2b51.png)\n\n2. 由于 right < size ，这时比较左子节点和右子节点时间间隔的大小，这里 3 < 4 ，所以 c = queue[child] ；\n3. 比较key的时间间隔是否小于c的时间间隔，这里不满足，继续执行，把索引为k的节点设置为c，然后将k设置为child，；\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/c86b8639952848fdb13958c123992832.png)\n\n4. 因为 half = 3 ，k = 1 ，继续执行循环，这时的索引变为：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/954be643d6c0458db8effd96f5bc51fe.png)\n\n5. 这时再经过如上判断后，将k的值为3，最终的结果如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/de49126733704863822881a5d29f63bc.png)\n\n6. 最后，如果在finishPoll方法中调用的话，会把索引为0的节点的索引设置为-1，表示已经删除了该节点，并且size也减了1，最后的结果如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/a2252306de0b49398cc773087eebcd62.png)\n\n可见，siftdown方法在执行完并不是有序的，但可以发现，子节点的下次执行时间一定比父节点的下次执行时间要大，由于每次都会取左子节点和右子节点中下次执行时间最小的节点，所以还是可以保证在take和poll时出队是有序的。\n\n#### pool(long timeout,TimeUnit unit)\npoll(long timeout, TimeUnit unit)出队操作则在poll()方法上附加了超时机制，它的源码如下：\n```java\n// 获取队首任务，带有超时机制\npublic RunnableScheduledFuture poll(long timeout, TimeUnit unit)\n        throws InterruptedException {\n    // 计算超时时间\n    long nanos = unit.toNanos(timeout);\n    // 加锁\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        // 无限循环\n        for (;;) {\n            // 获取queue中索引为0位置的任务（即任务）为first\n            RunnableScheduledFuture first = queue[0];\n            /**\n             * 如果first为null，表示此时queue是空的，\n             * 检查剩余的超时时间，如果剩余时间小于等于0，表示超时了，直接返回null\n             * 否则使用available进入超时等待\n             */\n            if (first == null) {\n                if (nanos <= 0)\n                    return null;\n                else\n                    nanos = available.awaitNanos(nanos);\n            } else {\n                // 走到这里表示取到了first不为null，获取其延迟时间\n                long delay = first.getDelay(TimeUnit.NANOSECONDS);\n                // 如果延迟时间小于等于0，表示该任务应该被执行了\n                if (delay <= 0)\n                    // 调用finishPoll()将其返回并对堆进行调整\n                    return finishPoll(first);\n                // 走到这里表示first任务的延迟时间还大于0，即还没有到执行时间\n                if (nanos <= 0)\n                    // 如果此时超时了，就直接返回null\n                    return null;\n                /**\n                 * 走到这里表示没有超时，\n                 * 如果超时时间小于延迟执行时间delay，\n                 * 或者超时时间虽然大于或等于延迟时间，但leader不为null（表示队首已经有任务在等待了），\n                 * 如果是就进入超时等待，等待时间为nanos\n                 */\n                if (nanos < delay || leader != null)\n                    nanos = available.awaitNanos(nanos);\n                else {\n                    /**\n                     * 走到表示超时时间大于等于延迟时间，且leader为null\n                     * 使用leader记录当前线程\n                     */\n                    Thread thisThread = Thread.currentThread();\n                    leader = thisThread;\n                    try {\n                        // 进入超时等待，超时时间为delay，返回值为未等待的时间（可能中途被中断了，或者被唤醒）\n                        long timeLeft = available.awaitNanos(delay);\n                        // 等待从超时时间中减去已等待的时间，即为剩余的超时时间\n                        nanos -= delay - timeLeft;\n                    } finally {\n                        /**\n                         * 超时等待结束后\n                         * 如果leader还为当前线程，就将leader置为null\n                         */\n                        if (leader == thisThread)\n                            leader = null;\n                    }\n                }\n            }\n        }\n    } finally {\n        /**\n         * 最终当某个任务被返回后\n         * 如果leader为null（表示此时队首没有任务在超时等待过程中），\n         * 且queue首任务不为null（表示还有任务未执行）时，\n         * 则唤醒等待在available上的线程\n         */\n        if (leader == null && queue[0] != null)\n            available.signal();\n        // 解锁\n        lock.unlock();\n    }\n}\n```\n在附带超时机制的出队操作中，首先也会获取queue数组索引0位置的任务为first，当first为null时，会判断是否超时，如果超时将直接返回null，否则调用available.awaitNanos(nanos)进行超时等待。当first不为null时，如果first的延迟时间小于等于0表示first任务已经到达执行时间，直接将其出队即可，如果还未到达执行时间，将判断出队操作是否超时（通过nanos <= 0），如果超时了就直接返回null，否则会尝试进行等待。\n\n在这一次的等待过程中，会根据超时时间nanos、延迟时间delay及leader来判断如何进入等待状态：\n\n1. 当nanos小于delay时，直接进入时间长度为nanos的超时等待即可，不会影响任务的延时执行；\n2. 当nanos大于或等于delay时，如果此时leader不为null，表示其实已经有任务在等待了，此时进入时间长度为nanos的超时等待即可；注意这里虽然等待时长为nanos，可能会大于delay，但leader所在的线程也处于等待状态，也就是说其实前一个任务还没有被执行，当前一个任务解除阻塞顺利出队后，它会唤醒等待在available的线程，所以此处不用担心由于等待时间为nanos而错过了任务的正常执行时间。\n3. 当nanos大于或等于delay的同时，leader也为null，则使用leader记录当前线程，并且尝试进入时间长度为delay的超时等待（此时等待时长还未nanos就不合理了，会错过任务的正常执行时间），在超时等待结束后，会计算新的超时时间，如果leader还指向当前线程就将leader置为null，并进入下一次循环。\n\n另外需要注意的是，在整个方法最外层的try … finally的的finally块中，会判断leader是否为null，如果leader为null且queue数组中还有任务，就会调用available.signal()唤醒在available上等待最久的线程，也就是说，总会有一个合适的leader会唤醒处于等待状态的线程。\n\n#### take()\n我们再来看看take()方法，它的源码如下：\n```java\n// 获取队首任务\npublic RunnableScheduledFuture take() throws InterruptedException {\n    // 加锁，可中断\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        // 无限循环\n        for (;;) {\n            // 获取queue中索引为0位置的任务（即任务）为first\n            RunnableScheduledFuture first = queue[0];\n            // 如果first为null，表示此时queue是空的，进入等待\n            if (first == null)\n                available.await();\n            else {\n                // 走到这里表示取到了first不为null，获取其延迟时间\n                long delay = first.getDelay(TimeUnit.NANOSECONDS);\n                // 如果延迟时间小于等于0，表示该任务应该被执行了\n                if (delay <= 0)\n                    // 调用finishPoll()将其返回并对堆进行调整\n                    return finishPoll(first);\n                else if (leader != null)\n                /**\n                 * 否则表示任务还没有到执行时间，判断leader是否为null，\n                 * 如果leader不为null，表示已经有任务（即leader）在队首进行等待了\n                 * 那么就无条件进入等待状态\n                 */\n                    available.await();\n                else {\n                    /**\n                     * 否则说明leader为null，表示此时还没有任务在队首等待\n                     * 使用leader记录当前线程，然后使当前线程进入超时等待\n                     */\n                    Thread thisThread = Thread.currentThread();\n                    leader = thisThread;\n                    try {\n                        // 然后进入带有超时机制的等待，超时时间为delay\n                        available.awaitNanos(delay);\n                    } finally {\n                        /**\n                         * 超时等待结束后\n                         * 如果leader还为当前线程，就将leader置为null\n                         */\n                        if (leader == thisThread)\n                            leader = null;\n                    }\n                }\n            }\n        }\n    } finally {\n        /**\n         * 最终当某个任务被返回后\n         * 如果leader为null（表示此时队首没有任务在超时等待过程中），\n         * 且queue首任务不为null（表示还有任务未执行）时，\n         * 则唤醒等待在available上的线程\n         */\n        if (leader == null && queue[0] != null)\n            available.signal();\n        // 解锁\n        lock.unlock();\n    }\n}\n```\ntake()方法就不在话下了，take()方法就是无超时机制的出队操作，没有符合条件的出队任务，就一直阻塞。需要注意的是，当线程在进入阻塞时，如果leader为null，则会采取超时阻塞，超时时间为任务的延迟时间。\n\n### 任务移除\nDelayedWorkQueue提供了remove(Object x)方法可以将队列中的任务进行移除，该方法源码如下：\n```java\n// 从queue中移除任务x\npublic boolean remove(Object x) {\n    // 加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 查找x在queue中的索引\n        int i = indexOf(x);\n        // 如果返回值小于0表示没找到，直接返回false\n        if (i < 0)\n            return false;\n\n        /**\n         * 走到此处表示查找到了，i即为x在queue中的索引\n         * 将queue中i位置的任务的heapIndex设置为-1（如果x是ScheduledFutureTask类型的话）\n         */\n        setIndex(queue[i], -1);\n        // 计算移除后的size大小\n        int s = --size;\n        // 获取最后一个任务replacement\n        RunnableScheduledFuture replacement = queue[s];\n        // 将queue中s位置（即最后有任务的位置）上的任务置为null\n        queue[s] = null;\n        /**\n         * 如果s与i不同，表示移除的不是最后一个任务\n         * 此时要将i位置的缺补上\n         * 补缺方式是将最后一个任务放在i位置，然后尝试对其进行下沉或上浮操作\n         * 先尝试下沉，如果下沉结束发现最后一个任务还处于i位置，则表明该任务没有移动\n         * 因此尝试对该任务进行上浮操作\n         */\n        if (s != i) {\n            // 需要将replacement从i位置尝试下沉操作\n            siftDown(i, replacement);\n            /**\n             * 如果下沉操作完成，i位置任务还为replacement\n             * 则表示replacement没有下沉，尝试上浮操作\n             */\n            if (queue[i] == replacement)\n                siftUp(i, replacement);\n        }\n        // 返回true表示移除成功\n        return true;\n    } finally {\n        // 解锁\n        lock.unlock();\n    }\n}\n```\n移除操作的逻辑比较简单，直接通过indexOf(Object)方法找出x在queue中的索引为i，如果能找到表示x的确在queue数组中，只需要将x的heapIndex置为-1，然后将queue中最后一个元素放在i位置进行下沉或上浮操作，调整堆顺序即可\n\n#### 任务移除示例\n假设初始的堆结构如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/4c0653671aed4b0b8529cad93c366c21.png)\n\n这时要删除8的节点，那么这时 k = 1，key为最后一个节点：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/fbf8d0a04d274617b204c0b3d6fcee41.png)\n\n这时通过上文对siftDown方法的分析，siftDown方法执行后的结果如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/09b48218d0de487fa0f459ae442fba8f.png)\n\n这时会发现，最后一个节点的值比父节点还要小，所以这里要执行一次siftUp方法来保证子节点的下次执行时间要比父节点的大，所以最终结果如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20191027/21e18700207346b9807ecb37139c2315.png)','<h2 id=\"scheduledthreadpoolexecutor-\">ScheduledThreadPoolExecutor简介</h2>\n<p>ScheduledThreadPoolExecutor用于执行周期性或延时性的定时任务，它是在ThreadPoolExecutor的基础上实现的任务调度线程池，内部使用延时工作队列DelayedWorkQueue实现对任务的延时调度。DelayedWorkQueue内部使用一个初始容量为16的数组来保存任务，容量不够时会按照现有容量的1.5倍进行扩容，最大容量可达Integer.MAX_VALUE。</p>\n<p>在讲解ScheduledThreadPoolExecutor之前，我们先理解ScheduledThreadPoolExecutor线程池中涉及到的任务类ScheduledFutureTask和延时等待队列DelayedWorkQueue。</p>\n<h2 id=\"scheduledfuturetask-\">ScheduledFutureTask数据结构</h2>\n<p>ScheduledThreadPoolExecutor中的任务都被包装为了ScheduledFutureTask类型的对象，ScheduledFutureTask在普通任务（Runnable或Callable）的基础上扩展了额外的功能。</p>\n<p>我们首先关注ScheduledFutureTask的整体结构；</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191026/811ddc0b15d54c8b8005235ae3b213d5.png\" alt=\"image.png\"></p>\n<p>该类继承自FutureTask，同时实现了RunnableScheduledFuture接口，定义如下：</p>\n<pre><code class=\"language-java\">private class ScheduledFutureTask&lt;V&gt; extends FutureTask&lt;V&gt; implements RunnableScheduledFuture&lt;V&gt; {\n    ...\n}</code></pre>\n<p>其中FutureTask类在之前我们已经介绍过了，因此这里我们主要关注RunnableScheduledFuture接口，它的定义如下：</p>\n<pre><code class=\"language-java\">public interface RunnableScheduledFuture&lt;V&gt; extends RunnableFuture&lt;V&gt;, ScheduledFuture&lt;V&gt; {\n\n    /**\n     * 判断任务是否是周期性的任务\n     */\n    boolean isPeriodic();\n}</code></pre>\n<p>该接口只提供了一个方法isPeriodic()给实现类实现，用于判断任务是否是周期性的任务。同时该接口还继承了RunnableFuture和ScheduledFuture两个接口，RunnableFuture在前面已经讲解过了，它继承了Runnable和Future接口；这里主要关注ScheduledFuture接口，它的源码如下：</p>\n<pre><code class=\"language-java\">public interface ScheduledFuture&lt;V&gt; extends Delayed, Future&lt;V&gt; {\n}</code></pre>\n<p>ScheduledFuture是一个标记接口，没有任何方法的声明，但它继承了Delayed和Future接口，其中Future接口之前讲解过，Delayed接口的源码如下：</p>\n<pre><code class=\"language-java\">public interface Delayed extends Comparable&lt;Delayed&gt; {\n\n    /**\n     * 以给定的时间单位返回与此对象关联的剩余延迟\n     */\n    long getDelay(TimeUnit unit);\n}</code></pre>\n<p>Delayed接口继承了Comparable接口，因此它可以被比较；Delayed接口自己提供的方法仅仅有getDelay(TimeUnit unit)，用于换算和获取任务的延迟时间。</p>\n<h2 id=\"schedulefuturetask-\">ScheduleFutureTask成员变量</h2>\n<p>ScheduledFutureTask在普通任务类的基础上扩展了一些成员变量，用于支撑任务的定时调度，如下：</p>\n<pre><code class=\"language-java\">/**\n * 任务在队列中的序号\n * */\nprivate final long sequenceNumber;\n\n/**\n * 任务应该执行的时间，以纳秒计算\n * */\nprivate long time;\n\n/**\n * 任务重复执行的时间间隔，以纳秒计算\n * 当其为正值时，表示固定速率执行\n * 当其为负值时，表示固定延迟执行\n * 当其为0时，表示是非重复任务\n */\nprivate final long period;\n\n/** 记录当前任务 */\nRunnableScheduledFuture&lt;V&gt; outerTask = this;\n\n/**\n * 记录任务在队列中的堆排序顺序\n */\nint heapIndex;</code></pre>\n<p>这里对着几个成员变量进行解释：</p>\n<ol>\n<li>sequenceNumber用于标识在等待队列中的顺序，因为可能会碰到多个任务的延时是一样的，所以需要另一个序号进行区分标记；</li>\n<li>time字段用于记录计算出来的任务执行时间；</li>\n<li>period字段用于标识任务是否是定时任务，当该字段为正值时，表示是周期性重复任务，当该值为负值时，表示是延迟性重复任务，当该值为0时，表示是非重复任务；</li>\n<li>outerTask用于记录当前任务，它的默认值就指向自己；该成员变量主要用在重复性任务中，当前一次任务执行结束时，任务会通过outerTask将自己再次加入到等待队列中，以实现重复执行</li>\n<li>heapIndex用于记录任务在队列中的堆排序顺序。ScheduledThreadPoolExecutor内部使用DelayedWorkQueue作为任务的等待队列，该队列的具体实现其实是一个小顶堆结构，heapIndex则记录了每个任务在堆中的排序顺序。</li>\n</ol>\n<h2 id=\"scheduledfuturetask-\">ScheduledFutureTask的方法</h2>\n<h4 id=\"-\">构造方法</h4>\n<p>首先关注ScheduledFutureTask的构造方法，有以下三个：</p>\n<pre><code class=\"language-java\">/**\n * 根据给定开始时间，创建仅执行一次的任务\n */\nScheduledFutureTask(Runnable r, V result, long ns) {\n    super(r, result);\n    this.time = ns;\n    this.period = 0;\n    this.sequenceNumber = sequencer.getAndIncrement();\n}\n\n/**\n * 根据给定开始时间和间隔时间，创建周期性任务\n */\nScheduledFutureTask(Runnable r, V result, long ns, long period) {\n    super(r, result);\n    this.time = ns;\n    this.period = period;\n    this.sequenceNumber = sequencer.getAndIncrement();\n}\n\n/**\n * 根据给定开始时间，创建仅执行一次的任务\n */\nScheduledFutureTask(Callable&lt;V&gt; callable, long ns) {\n    super(callable);\n    this.time = ns;\n    this.period = 0;\n    this.sequenceNumber = sequencer.getAndIncrement();\n}</code></pre>\n<p>构造方法都比较简单，调用了父类的构造方法后，会对一些成员变量进行赋值，需要注意的是sequenceNumber，它会通过sequencer进行自增获取，sequencer是ScheduledThreadPoolExecutor的常量，是一个Long型的原子类，初值为0，定义如下：</p>\n<pre><code class=\"language-java\">private static final AtomicLong sequencer = new AtomicLong(0);</code></pre>\n<p>由于sequenceNumber是原子性自增的，因此可以保证每个任务的sequenceNumber会按照初始化顺序严格递增。</p>\n<h4 id=\"getdelay-timeunit-\">getDelay(TimeUnit)</h4>\n<p>getDelay(TimeUnit)方法用于通过构造方法中得到的time值计算相对于当前时间的延迟时间，实现如下：</p>\n<pre><code class=\"language-java\">// 获取ScheduledFutureTask任务剩余的延迟时间\npublic long getDelay(TimeUnit unit) {\n    return unit.convert(time - now(), TimeUnit.NANOSECONDS);\n}</code></pre>\n<p>getDelay(TimeUnit)方法每次调用都会重新计算新的延迟时间。</p>\n<h4 id=\"setnextruntime-\">setNextRunTime()</h4>\n<p>setNextRunTime()方法则会根据period和time的值，计算出下一次的运行时间：</p>\n<pre><code class=\"language-java\">/**\n* 设置下一次执行时间\n*/\nprivate void setNextRunTime() {\n    // 获取周期时间间隔\n    long p = period;\n    if (p &gt; 0)\n    /**\n    * 如果p大于0，表示是周期性执行任务，\n    * 下一次执行任务在本次任务的period时间段后\n    */\n        time += p;\n    else\n    /**\n    * 如果p小于0，表示是间隔性执行任务\n    * 使用triggerTime()计算下一次执行任务的时间\n    */\n        time = triggerTime(-p);\n}</code></pre>\n<p>当period大于0时，表示是周期性执行任务，只需要在time的基础上加上period即可得到任务下一次的运行时间；当period小于或等于0时，将用triggerTime(-p)方法来处理时间，该方法定义在ScheduledThreadPoolExecutor中：</p>\n<pre><code class=\"language-java\">/**\n * 根据传入的延迟时间和当前时间，计算最终触发时间\n */\nlong triggerTime(long delay) {\n    /**\n     * 延迟时间delay小于Long.MAX_VALUE &gt;&gt; 1，则返回now() + delay\n     * 延迟时间delay大于Long.MAX_VALUE &gt;&gt; 1，则返回overflowFree()处理的结果，处理过程详见该方法\n     */\n    return now() + ((delay &lt; (Long.MAX_VALUE &gt;&gt; 1)) ? delay : overflowFree(delay));\n}</code></pre>\n<p>其中overflowFree(long)方法的源码如下：</p>\n<pre><code class=\"language-java\">private long overflowFree(long delay) {\n    // 查看延迟等待队列（在ScheduledThreadPoolExecutor中使用的是延迟队列DelayedWorkQueue）中的队首任务\n    Delayed head = (Delayed) super.getQueue().peek();\n    if (head != null) {\n        // 如果队首任务不为null，计算队首任务相对于当前时间还需要延迟的时间headDelay\n        long headDelay = head.getDelay(TimeUnit.NANOSECONDS);\n        /**\n         * 如果headDelay小于0，表示此时队首任务应该出队了，但恰好有任务入队\n         * 且delay - headDelay小于0，则表示此时delay的值小于0或大于Long.MAX_VALUE\n         * 而传入该方法的delay一定是大于0的，因此此时delay大于Long.MAX_VALUE\n         */\n        if (headDelay &lt; 0 &amp;&amp; (delay - headDelay &lt; 0))\n        /**\n         * 如果delay大于Long.MAX_VALUE，且队首任务应该要出队了（headDelay为负）\n         * 则将delay置为Long.MAX_VALUE + headDelay\n         */\n            delay = Long.MAX_VALUE + headDelay;\n    }\n    // 返回delay\n    return delay;\n}</code></pre>\n<p>当triggerTime(long delay)中传入的delay小于Long.MAX_VALUE &gt;&gt; 1时会直接取delay，否则交由overflowFree(long delay处理，该方法会根据等待队列的队首任务的延时时间来计算最终下一次任务的执行时间。</p>\n<h4 id=\"isperiodic-compareto-delayed-other-\">isPeriodic()和compareTo(Delayed other)</h4>\n<p>ScheduledFutureTask另外的isPeriodic()和compareTo(Delayed other)主要用于判断任务是否是重复性任务以及与另一个任务比较执行的先后顺序，这个比较方法主要用于在等待队列DelayedWorkQueue进行堆排序，它们的源码如下：</p>\n<pre><code class=\"language-java\">/**\n *\n * 判断是否是周期性任务\n *\n * @return true if periodic\n */\npublic boolean isPeriodic() {\n    return period != 0;\n}\n\n/**\n * 与其他ScheduledFutureTask任务进行比较\n * 主要通过time成员变量来比较\n */\npublic int compareTo(Delayed other) {\n    // 判断二者是否是同一个对象，如果是则返回0\n    if (other == this) // compare zero ONLY if same object\n        return 0;\n    // 判断传入的other对象是否是ScheduledFutureTask类型\n    if (other instanceof ScheduledFutureTask) {\n        // 强转\n        ScheduledFutureTask&lt;?&gt; x = (ScheduledFutureTask&lt;?&gt;)other;\n        // 计算二者时间差\n        long diff = time - x.time;\n        // 当前任务在other任务之前执行\n        if (diff &lt; 0)\n            return -1;\n        // 当前任务在other任务之后执行\n        else if (diff &gt; 0)\n            return 1;\n        // 如果两个任务的执行时间相同则比较序号\n        else if (sequenceNumber &lt; x.sequenceNumber)\n        /**\n         * 当前任务与other任务执行时间相同，但序号较小\n         * 因此当前任务先执行\n         */\n            return -1;\n        else\n        /**\n         * 当前任务与other任务执行时间相同，但序号较大\n         * 因此当前任务后执行\n         */\n            return 1;\n    }\n    /**\n     * 走到这里表示传入的other不是ScheduledFutureTask类型\n     * 计算二者的执行时间差，根据该差值决定大小\n     */\n    long d = (getDelay(TimeUnit.NANOSECONDS) - other.getDelay(TimeUnit.NANOSECONDS));\n    return (d == 0) ? 0 : ((d &lt; 0) ? -1 : 1);\n}</code></pre>\n<h2 id=\"delayedworkqueue-\">DelayedWorkQueue等待队列</h2>\n<p>DelayedWorkQueue是ScheduledThreadPoolExecutor的一个静态内部类，定义如下：</p>\n<pre><code class=\"language-java\">static class DelayedWorkQueue extends AbstractQueue&lt;Runnable&gt; implements BlockingQueue&lt;Runnable&gt; {\n    ...\n}</code></pre>\n<p>从定义可知，DelayedWorkQueue是一个实现了BlockingQueue接口的阻塞队列，同时继承了AbstractQueue抽象类；由于泛型定义指定为Runnable，DelayedWorkQueue入队的元素都是Runnable类型的对象。DelayedWorkQueue中定义的成员变量如下：</p>\n<pre><code class=\"language-java\">// 初始容量为16\nprivate static final int INITIAL_CAPACITY = 16;\n// 用于装载任务的数组\nprivate RunnableScheduledFuture[] queue = new RunnableScheduledFuture[INITIAL_CAPACITY];\n// 锁\nprivate final ReentrantLock lock = new ReentrantLock();\n// 大小\nprivate int size = 0;\n\n/**\n * 试图执行队首任务的正处于等待状态的线程对象\n */\nprivate Thread leader = null;\n\n/**\n * 等待条件\n */\nprivate final Condition available = lock.newCondition();</code></pre>\n<p>DelayedWorkQueue内部使用了一个RunnableScheduledFuture[]类型的数组queue装载元素，初始化容量为16（INITIAL_CAPACITY），虽然queue数组有具体大小，但DelayedWorkQueue在添加元素过程中如果queue数组已满就会对其进行扩容，扩容操作后面会讲解。DelayedWorkQueue还是用了可重入锁保证线程并发的安全性，另外还使用了Condition等待条件available来协调元素的入队和出队操作。size表示队列中已有的元素个数，leader变量指向试图执行队首任务的正处于等待状态的线程对象，具体用法会在后面讲解。</p>\n<h4 id=\"delayedworkqueue-\">DelayedWorkQueue基础方法</h4>\n<p>我们首先关注DelayedWorkQueue的一些基础方法，分别是indexOf(Object)、contains(Object)、isEmpty()和size()，分别用于查找某个元素在DelayedWorkQueue中的索引、判断DelayedWorkQueue是否包含某个元素、DelayedWorkQueue是否为空以及DelayedWorkQueue的大小；其中contains(Object)内部使用indexOf(Object)实现；它们的源码如下：</p>\n<pre><code class=\"language-java\">/**\n * 查找给定x在数组中的索引\n */\nprivate int indexOf(Object x) {\n    // x不能为null\n    if (x != null) {\n        // x要是ScheduledFutureTask类型的对象\n        if (x instanceof ScheduledFutureTask) {\n            // 获取x的heapIndex为i\n            int i = ((ScheduledFutureTask) x).heapIndex;\n\n            // 如果i大于等于0，且i小于size，且queue中i位置的任务与x相等\n            if (i &gt;= 0 &amp;&amp; i &lt; size &amp;&amp; queue[i] == x)\n                // i即是x在数组中的索引，直接返回\n                return i;\n        } else {\n            /**\n             * 如果x不是ScheduledFutureTask对象\n             * 遍历queue数组，依次查找\n             */\n            for (int i = 0; i &lt; size; i++)\n                // 当查找到的任务与x相同，则返回此时的索引i\n                if (x.equals(queue[i]))\n                    return i;\n        }\n    }\n    // 否则返回-1，表示没找到\n    return -1;\n}\n\n// 判断任务x是否存在于queue中\npublic boolean contains(Object x) {\n    // 加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 使用indexOf()进行查找并判断\n        return indexOf(x) != -1;\n    } finally {\n        // 解锁\n        lock.unlock();\n    }\n}\n\n// 队列是否为空\npublic boolean isEmpty() {\n    return size() == 0;\n}\n\n// 查看队列大小\npublic int size() {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 直接返回size即可\n        return size;\n    } finally {\n        lock.unlock();\n    }\n}</code></pre>\n<p>这里主要关注indexOf(Object)方法，其它的三个方法都比较简单。从indexOf(Object)的源码可知，当获取索引的元素对象为ScheduledFutureTask类型时，其实ScheduledFutureTask对象的heapIndex成员变量记录了自己位于queue数组中的索引，因此可以直接通过该成员变量辅助获取；但当获取索引的元素对象并不是ScheduledFutureTask类型时，会遍历queue数组逐一进行比较。</p>\n<h4 id=\"-grow-\">扩容grow()</h4>\n<p>DelayedWorkQueue会在queue数组已满时进行扩容操作，具体体现在grow()方法，源码如下：</p>\n<pre><code class=\"language-java\">/**\n * 扩容操作\n */\nprivate void grow() {\n    // 旧的容量\n    int oldCapacity = queue.length;\n    // 新的容量是旧的容量的1.5倍\n    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); // grow 50%\n    // 如果溢出就将其设置为Integer.MAX_VALUE\n    if (newCapacity &lt; 0) // overflow\n        newCapacity = Integer.MAX_VALUE;\n    // 拷贝旧数组的任务到新数组，然后将新数组赋值给queue\n    queue = Arrays.copyOf(queue, newCapacity);\n}\n\n// 剩余容量是无限的\npublic int remainingCapacity() {\n    return Integer.MAX_VALUE;\n}</code></pre>\n<p>源码表示，每次扩容的容量将是当前容量的1.5倍，同时最大容量为Integer.MAX_VALUE</p>\n<h2 id=\"delayedworkqueue-\">DelayedWorkQueue的堆结构</h2>\n<p>DelayedWorkQueue内部其实是以小顶堆来装载元素，以实现对元素进行从小到大的排序的，装载的元素是RunnableScheduledFuture类型对象，在ScheduledThreadPoolExecutor中则体现为ScheduledFutureTask类型对象；</p>\n<h3 id=\"-\">小顶堆数据结构简介</h3>\n<p>堆结构如下图所示：\n<img src=\"http://oss.dblearn.cn/dbblog/20191027/084440416c9041e89bab5b57c5d2a18e.png\" alt=\"image.png\">\n堆结构可以使用数组表示，可以转换成如下的数组：\n<img src=\"http://oss.dblearn.cn/dbblog/20191027/1821929eea5344a19c62084c2ec5f79e.png\" alt=\"image.png\"></p>\n<p>在这种结构中，可以发现有如下特性：</p>\n<p>假设，索引值从0开始，子节点的索引值为k，父节点的索引值为p，则：</p>\n<ul>\n<li>一个节点的左子节点的索引为：k = p * 2 + 1；</li>\n<li>一个节点的右子节点的索引为：k = (p + 1) * 2；</li>\n<li>一个节点的父节点的索引为：p = (k - 1) / 2。</li>\n</ul>\n<h3 id=\"-\">任务入队</h3>\n<p>入队的操作如add和put方法都调用了offer方法，下面查看一下offer方法：</p>\n<pre><code>/ 添加任务\npublic boolean offer(Runnable x) {\n    // 检查任务\n    if (x == null)\n        throw new NullPointerException();\n    //将任务转换为RunnableScheduledFuture对象\n    RunnableScheduledFuture e = (RunnableScheduledFuture)x;\n    // 加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        int i = size;\n        if (i &gt;= queue.length)\n            // 如果任务个数大于等于队列数组容量，进行扩容操作\n            grow();\n        // size加1\n        size = i + 1;\n        if (i == 0) {\n            /**\n             * i为0，即原始size为0，没有任务\n             * 将e放在第0位置\n             */\n            queue[0] = e;\n            // 设置e的heapIndex为0\n            setIndex(e, 0);\n        } else {\n            // 否则调用siftUp()对e进行添加及上浮操作\n            siftUp(i, e);\n        }\n        /**\n         * 如果第0个位置的任务是e，\n         * 表示此时入队的是队首元素，可以将leader清空了\n         * 同时可以通知其他线程可以竞争成为leader了\n         */\n        if (queue[0] == e) {\n            // 将leader置为null\n            leader = null;\n            // 唤醒等待在available上的线程\n            available.signal();\n        }\n    } finally {\n        // 解锁\n        lock.unlock();\n    }\n    return true;\n}</code></pre><p>offer(Runnable x)方法会首先将传入的Runnable对象强转为RunnableScheduledFuture对象，然后检查queue数组是否已满，如果已满调用grow()方法进行扩容。接下来主要的代码中，会判断任务添加到queue数组中时位置的索引是否是0，如果是0表示当前queue中没有任务，只需要将任务放入queue索引为0的位置即可，然后调用setIndex(e, 0)将任务的heapIndex设置为0，setIndex(RunnableScheduledFuture, int)的源码如下：</p>\n<pre><code class=\"language-java\">private void setIndex(RunnableScheduledFuture f, int idx) {\n    // 当传入的f是ScheduledFutureTask类型时，设置其heapIndex\n    if (f instanceof ScheduledFutureTask)\n        ((ScheduledFutureTask)f).heapIndex = idx;\n}</code></pre>\n<p>如果任务添加到queue数组中时位置的索引不是0，表示当前queue数组中已有任务，则调用siftUp(i, e)进行添加；siftUp(int, RunnableScheduledFuture)主要作用是将新的任务添加到queue数组中，然后根据小顶堆的排序方式进行上浮操作，具体代码如下：</p>\n<pre><code class=\"language-java\">private void siftUp(int k, RunnableScheduledFuture key) {\n    // 循环直到k为0\n    while (k &gt; 0) {\n        // 获取k位置任务的父任务的索引\n        int parent = (k - 1) &gt;&gt;&gt; 1;\n        // 取出父任务\n        RunnableScheduledFuture e = queue[parent];\n        /**\n         * 将key与父任务进行比较，如果key大于等于父任务，\n         * 表示key要在父任务之后或者与父任务同时执行，则跳出循环\n         */\n        if (key.compareTo(e) &gt;= 0)\n            break;\n        /**\n         * 否则key小于父任务，表示key要比父任务早执行\n         * 因此将k位置替换为父任务\n         */\n        queue[k] = e;\n        // 修改父任务的heapIndex为k\n        setIndex(e, k);\n        // 将父任务索引赋值给k，进行下一次循环\n        k = parent;\n    }\n    /**\n     * 走到这里说明key要在父任务之后或者与父任务同时执行\n     * 则已经找到了key所应该在的位置\n     * 将key放在k索引位置\n     */\n    queue[k] = key;\n    // 将key的heapIndex设置为k\n    setIndex(key, k);\n}</code></pre>\n<p>小顶堆的结构是以二叉树构成的，从树的根节点从上往下节点的大小依次递减。当添加了新任务后，它会被放在queue队列的末尾，此时新任务的位置并不是确定的，需要根据任务的执行时间在堆中调整它的位置；调整方式是获取该节点的父节点，然后比较其与父节点的大小，如果比父节点小，就将其与父节点交换位置，重复执行这个操作，直到父节点比自己小，则说明找到合适的位置了。</p>\n<h4 id=\"-\">入队示例</h4>\n<p>假设新入队的节点的延迟时间（调用getDelay()方法获得）是5，执行过程如下：</p>\n<ol>\n<li><p>先将新的节点添加到数组的尾部，这时新节点的索引k为7：\n<img src=\"http://oss.dblearn.cn/dbblog/20191027/c8196d7598744a69a8c6cb124bf61c4a.png\" alt=\"image.png\"></p>\n</li>\n<li><p>计算新父节点的索引：parent = (k - 1) &gt;&gt;&gt; 1，parent = 3，那么queue[3]的时间间隔值为8，因为 5 &lt; 8 ，将执行queue[7] = queue[3]：</p>\n</li>\n</ol>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/b295bb49d3de48849dc296ba2d098e91.png\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>这时将k设置为3，继续循环，再次计算parent为1，queue[1]的时间间隔为3，因为 5 &gt; 3 ，这时退出循环，最终k为3：</li>\n</ol>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/f40cd28a53ae4bd2be4e59531c74ca0d.png\" alt=\"image.png\"></p>\n<p>可见，每次新增节点时，只是根据父节点来判断，而不会影响兄弟节点。</p>\n<h3 id=\"-\">任务出队</h3>\n<p>DelayedWorkQueue的任务出队操作则相对比较麻烦，它提供了poll()、poll(long timeout, TimeUnit unit)和take()三个出队方法。</p>\n<h4 id=\"poll-\">poll()</h4>\n<p>其中poll()方法最简单，它是无阻塞模式的出队操作，如果能获取到符合要求的任务就进行出队，否则直接返回null，源码如下：</p>\n<pre><code class=\"language-java\">// 取出队首任务\npublic RunnableScheduledFuture poll() {\n    // 加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 获取queue索引为0位置的任务为first\n        RunnableScheduledFuture first = queue[0];\n        // 如果first任务为null，或者first任务的延迟时间还大于0，就返回null\n        if (first == null || first.getDelay(TimeUnit.NANOSECONDS) &gt; 0)\n            return null;\n        else\n            // 否则调用finishPoll()将first返回，并对堆进行调整\n            return finishPoll(first);\n    } finally {\n        // 解锁\n        lock.unlock();\n    }\n}</code></pre>\n<p>出队的永远是队首任务，因此先获取队首任务为first，然后判断其延迟的时间是否大于0，如果大于0表示还未到执行时间，直接返回null即可。如果first符合出队条件（即已到达执行时间），就调用finishPoll(first)做具体的出队操作，finishPoll(RunnableScheduledFuture f)方法源码如下：</p>\n<pre><code class=\"language-java\">private RunnableScheduledFuture finishPoll(RunnableScheduledFuture f) {\n    int s = --size;\n    // 取出最后一个任务为x\n    RunnableScheduledFuture x = queue[s];\n    // 将最后索引位置上置为null\n    queue[s] = null;\n    // 如果最后索引不是0，表示堆中元素个数大于1\n    if (s != 0)\n        // 将x从堆顶开始做下沉操作\n        siftDown(0, x);\n    // 设置f的heapIndex为-1，并将其返回\n    setIndex(f, -1);\n    return f;\n}</code></pre>\n<p>finishPoll(RunnableScheduledFuture)方法主要用于对堆中剩余元素的顺序进行调整，首先会取得queue数组中的最后一个元素为x，并将数组的该索引位置置为null，当堆中元素个数大于1时（即s != 0），就调用siftDown(0, x)进行堆下沉调整，最后将要出队的任务f的heapIndex置为-1后返回。siftDown(int, RunnableScheduledFuture)堆下沉操作的源码如下：</p>\n<pre><code class=\"language-java\">private void siftDown(int k, RunnableScheduledFuture key) {\n    // 取数组queue中心位置索引half\n    int half = size &gt;&gt;&gt; 1;\n    /**\n     * 循环直到k大于或等于中心索引half时，\n     * 由于从half开始，节点就不再有孩子节点\n     */\n    while (k &lt; half) {\n        // 获取左孩子节点的索引\n        int child = (k &lt;&lt; 1) + 1;\n        // 获取左孩子节点\n        RunnableScheduledFuture c = queue[child];\n        // 获取右孩子节点的索引\n        int right = child + 1;\n        /**\n         * 当右孩子节点的索引小于size时，说明右孩子还存在\n         * 比较左孩子与右孩子的大小\n         * 如果左孩子比右孩子大，表明右孩子比左孩子的任务更早执行\n         * 则将c指向右孩子，child指向right索引\n         * 此时c指向的是更早执行的任务所在的那个孩子节点\n         */\n        if (right &lt; size &amp;&amp; c.compareTo(queue[right]) &gt; 0)\n            c = queue[child = right];\n        /**\n         * 比较key与c，如果小于等于0，说明key比c还要更早执行，\n         * 说明此时k就是key应该放在的位置，跳出循环\n         */\n        if (key.compareTo(c) &lt;= 0)\n            break;\n        /**\n         * 否则说明key在c后面执行\n         * 将更早执行的c放在k（即c的父节点）位置\n         */\n        queue[k] = c;\n        // 设置c的heapIndex为k\n        setIndex(c, k);\n        // 将k指向child（此时的右孩子的索引），继续下次循环\n        k = child;\n    }\n    // 将key放在queue的k索引位置上\n    queue[k] = key;\n    // 设置key的heapIndex为k\n    setIndex(key, k);\n}</code></pre>\n<p>以finishPoll(RunnableScheduledFuture)方法中调用的siftDown(0, x)为例，x元素是queue数组的最后一个元素，调用siftDown(0, x)即是将x移到队列头，然后逐步下沉。先关注siftDown(int, RunnableScheduledFuture)的while循环体代码，它会根据k获取k位置节点的左孩子节点和右孩子节点的索引，同时找出左孩子节点和右孩子节点中小的那个记为c，然后将传入的RunnableScheduledFuture对象key与c进行对比，如果key比c小，表示key的位置k是合理的，跳出循环即可，否则将c放在索引k位置上，然后将k指向child，继续下一次循环；这种操作能够一直往下直到找到key合适的位置。</p>\n<h4 id=\"-\">出队示例</h4>\n<p>假设 k = 0 ，那么执行以下步骤：</p>\n<ol>\n<li>获取左子节点，child = 1 ，获取右子节点， right = 2 ：</li>\n</ol>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/f01a17a0b3c140e788bca8d3c22e2b51.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>由于 right &lt; size ，这时比较左子节点和右子节点时间间隔的大小，这里 3 &lt; 4 ，所以 c = queue[child] ；</li>\n<li>比较key的时间间隔是否小于c的时间间隔，这里不满足，继续执行，把索引为k的节点设置为c，然后将k设置为child，；</li>\n</ol>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/c86b8639952848fdb13958c123992832.png\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li>因为 half = 3 ，k = 1 ，继续执行循环，这时的索引变为：</li>\n</ol>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/954be643d6c0458db8effd96f5bc51fe.png\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>这时再经过如上判断后，将k的值为3，最终的结果如下：</li>\n</ol>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/de49126733704863822881a5d29f63bc.png\" alt=\"image.png\"></p>\n<ol start=\"6\">\n<li>最后，如果在finishPoll方法中调用的话，会把索引为0的节点的索引设置为-1，表示已经删除了该节点，并且size也减了1，最后的结果如下：</li>\n</ol>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/a2252306de0b49398cc773087eebcd62.png\" alt=\"image.png\"></p>\n<p>可见，siftdown方法在执行完并不是有序的，但可以发现，子节点的下次执行时间一定比父节点的下次执行时间要大，由于每次都会取左子节点和右子节点中下次执行时间最小的节点，所以还是可以保证在take和poll时出队是有序的。</p>\n<h4 id=\"pool-long-timeout-timeunit-unit-\">pool(long timeout,TimeUnit unit)</h4>\n<p>poll(long timeout, TimeUnit unit)出队操作则在poll()方法上附加了超时机制，它的源码如下：</p>\n<pre><code class=\"language-java\">// 获取队首任务，带有超时机制\npublic RunnableScheduledFuture poll(long timeout, TimeUnit unit)\n        throws InterruptedException {\n    // 计算超时时间\n    long nanos = unit.toNanos(timeout);\n    // 加锁\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        // 无限循环\n        for (;;) {\n            // 获取queue中索引为0位置的任务（即任务）为first\n            RunnableScheduledFuture first = queue[0];\n            /**\n             * 如果first为null，表示此时queue是空的，\n             * 检查剩余的超时时间，如果剩余时间小于等于0，表示超时了，直接返回null\n             * 否则使用available进入超时等待\n             */\n            if (first == null) {\n                if (nanos &lt;= 0)\n                    return null;\n                else\n                    nanos = available.awaitNanos(nanos);\n            } else {\n                // 走到这里表示取到了first不为null，获取其延迟时间\n                long delay = first.getDelay(TimeUnit.NANOSECONDS);\n                // 如果延迟时间小于等于0，表示该任务应该被执行了\n                if (delay &lt;= 0)\n                    // 调用finishPoll()将其返回并对堆进行调整\n                    return finishPoll(first);\n                // 走到这里表示first任务的延迟时间还大于0，即还没有到执行时间\n                if (nanos &lt;= 0)\n                    // 如果此时超时了，就直接返回null\n                    return null;\n                /**\n                 * 走到这里表示没有超时，\n                 * 如果超时时间小于延迟执行时间delay，\n                 * 或者超时时间虽然大于或等于延迟时间，但leader不为null（表示队首已经有任务在等待了），\n                 * 如果是就进入超时等待，等待时间为nanos\n                 */\n                if (nanos &lt; delay || leader != null)\n                    nanos = available.awaitNanos(nanos);\n                else {\n                    /**\n                     * 走到表示超时时间大于等于延迟时间，且leader为null\n                     * 使用leader记录当前线程\n                     */\n                    Thread thisThread = Thread.currentThread();\n                    leader = thisThread;\n                    try {\n                        // 进入超时等待，超时时间为delay，返回值为未等待的时间（可能中途被中断了，或者被唤醒）\n                        long timeLeft = available.awaitNanos(delay);\n                        // 等待从超时时间中减去已等待的时间，即为剩余的超时时间\n                        nanos -= delay - timeLeft;\n                    } finally {\n                        /**\n                         * 超时等待结束后\n                         * 如果leader还为当前线程，就将leader置为null\n                         */\n                        if (leader == thisThread)\n                            leader = null;\n                    }\n                }\n            }\n        }\n    } finally {\n        /**\n         * 最终当某个任务被返回后\n         * 如果leader为null（表示此时队首没有任务在超时等待过程中），\n         * 且queue首任务不为null（表示还有任务未执行）时，\n         * 则唤醒等待在available上的线程\n         */\n        if (leader == null &amp;&amp; queue[0] != null)\n            available.signal();\n        // 解锁\n        lock.unlock();\n    }\n}</code></pre>\n<p>在附带超时机制的出队操作中，首先也会获取queue数组索引0位置的任务为first，当first为null时，会判断是否超时，如果超时将直接返回null，否则调用available.awaitNanos(nanos)进行超时等待。当first不为null时，如果first的延迟时间小于等于0表示first任务已经到达执行时间，直接将其出队即可，如果还未到达执行时间，将判断出队操作是否超时（通过nanos &lt;= 0），如果超时了就直接返回null，否则会尝试进行等待。</p>\n<p>在这一次的等待过程中，会根据超时时间nanos、延迟时间delay及leader来判断如何进入等待状态：</p>\n<ol>\n<li>当nanos小于delay时，直接进入时间长度为nanos的超时等待即可，不会影响任务的延时执行；</li>\n<li>当nanos大于或等于delay时，如果此时leader不为null，表示其实已经有任务在等待了，此时进入时间长度为nanos的超时等待即可；注意这里虽然等待时长为nanos，可能会大于delay，但leader所在的线程也处于等待状态，也就是说其实前一个任务还没有被执行，当前一个任务解除阻塞顺利出队后，它会唤醒等待在available的线程，所以此处不用担心由于等待时间为nanos而错过了任务的正常执行时间。</li>\n<li>当nanos大于或等于delay的同时，leader也为null，则使用leader记录当前线程，并且尝试进入时间长度为delay的超时等待（此时等待时长还未nanos就不合理了，会错过任务的正常执行时间），在超时等待结束后，会计算新的超时时间，如果leader还指向当前线程就将leader置为null，并进入下一次循环。</li>\n</ol>\n<p>另外需要注意的是，在整个方法最外层的try … finally的的finally块中，会判断leader是否为null，如果leader为null且queue数组中还有任务，就会调用available.signal()唤醒在available上等待最久的线程，也就是说，总会有一个合适的leader会唤醒处于等待状态的线程。</p>\n<h4 id=\"take-\">take()</h4>\n<p>我们再来看看take()方法，它的源码如下：</p>\n<pre><code class=\"language-java\">// 获取队首任务\npublic RunnableScheduledFuture take() throws InterruptedException {\n    // 加锁，可中断\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        // 无限循环\n        for (;;) {\n            // 获取queue中索引为0位置的任务（即任务）为first\n            RunnableScheduledFuture first = queue[0];\n            // 如果first为null，表示此时queue是空的，进入等待\n            if (first == null)\n                available.await();\n            else {\n                // 走到这里表示取到了first不为null，获取其延迟时间\n                long delay = first.getDelay(TimeUnit.NANOSECONDS);\n                // 如果延迟时间小于等于0，表示该任务应该被执行了\n                if (delay &lt;= 0)\n                    // 调用finishPoll()将其返回并对堆进行调整\n                    return finishPoll(first);\n                else if (leader != null)\n                /**\n                 * 否则表示任务还没有到执行时间，判断leader是否为null，\n                 * 如果leader不为null，表示已经有任务（即leader）在队首进行等待了\n                 * 那么就无条件进入等待状态\n                 */\n                    available.await();\n                else {\n                    /**\n                     * 否则说明leader为null，表示此时还没有任务在队首等待\n                     * 使用leader记录当前线程，然后使当前线程进入超时等待\n                     */\n                    Thread thisThread = Thread.currentThread();\n                    leader = thisThread;\n                    try {\n                        // 然后进入带有超时机制的等待，超时时间为delay\n                        available.awaitNanos(delay);\n                    } finally {\n                        /**\n                         * 超时等待结束后\n                         * 如果leader还为当前线程，就将leader置为null\n                         */\n                        if (leader == thisThread)\n                            leader = null;\n                    }\n                }\n            }\n        }\n    } finally {\n        /**\n         * 最终当某个任务被返回后\n         * 如果leader为null（表示此时队首没有任务在超时等待过程中），\n         * 且queue首任务不为null（表示还有任务未执行）时，\n         * 则唤醒等待在available上的线程\n         */\n        if (leader == null &amp;&amp; queue[0] != null)\n            available.signal();\n        // 解锁\n        lock.unlock();\n    }\n}</code></pre>\n<p>take()方法就不在话下了，take()方法就是无超时机制的出队操作，没有符合条件的出队任务，就一直阻塞。需要注意的是，当线程在进入阻塞时，如果leader为null，则会采取超时阻塞，超时时间为任务的延迟时间。</p>\n<h3 id=\"-\">任务移除</h3>\n<p>DelayedWorkQueue提供了remove(Object x)方法可以将队列中的任务进行移除，该方法源码如下：</p>\n<pre><code class=\"language-java\">// 从queue中移除任务x\npublic boolean remove(Object x) {\n    // 加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 查找x在queue中的索引\n        int i = indexOf(x);\n        // 如果返回值小于0表示没找到，直接返回false\n        if (i &lt; 0)\n            return false;\n\n        /**\n         * 走到此处表示查找到了，i即为x在queue中的索引\n         * 将queue中i位置的任务的heapIndex设置为-1（如果x是ScheduledFutureTask类型的话）\n         */\n        setIndex(queue[i], -1);\n        // 计算移除后的size大小\n        int s = --size;\n        // 获取最后一个任务replacement\n        RunnableScheduledFuture replacement = queue[s];\n        // 将queue中s位置（即最后有任务的位置）上的任务置为null\n        queue[s] = null;\n        /**\n         * 如果s与i不同，表示移除的不是最后一个任务\n         * 此时要将i位置的缺补上\n         * 补缺方式是将最后一个任务放在i位置，然后尝试对其进行下沉或上浮操作\n         * 先尝试下沉，如果下沉结束发现最后一个任务还处于i位置，则表明该任务没有移动\n         * 因此尝试对该任务进行上浮操作\n         */\n        if (s != i) {\n            // 需要将replacement从i位置尝试下沉操作\n            siftDown(i, replacement);\n            /**\n             * 如果下沉操作完成，i位置任务还为replacement\n             * 则表示replacement没有下沉，尝试上浮操作\n             */\n            if (queue[i] == replacement)\n                siftUp(i, replacement);\n        }\n        // 返回true表示移除成功\n        return true;\n    } finally {\n        // 解锁\n        lock.unlock();\n    }\n}</code></pre>\n<p>移除操作的逻辑比较简单，直接通过indexOf(Object)方法找出x在queue中的索引为i，如果能找到表示x的确在queue数组中，只需要将x的heapIndex置为-1，然后将queue中最后一个元素放在i位置进行下沉或上浮操作，调整堆顺序即可</p>\n<h4 id=\"-\">任务移除示例</h4>\n<p>假设初始的堆结构如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/4c0653671aed4b0b8529cad93c366c21.png\" alt=\"image.png\"></p>\n<p>这时要删除8的节点，那么这时 k = 1，key为最后一个节点：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/fbf8d0a04d274617b204c0b3d6fcee41.png\" alt=\"image.png\"></p>\n<p>这时通过上文对siftDown方法的分析，siftDown方法执行后的结果如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/09b48218d0de487fa0f459ae442fba8f.png\" alt=\"image.png\"></p>\n<p>这时会发现，最后一个节点的值比父节点还要小，所以这里要执行一次siftUp方法来保证子节点的下次执行时间要比父节点的大，所以最终结果如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20191027/21e18700207346b9807ecb37139c2315.png\" alt=\"image.png\"></p>\n',79,14,2,NULL,'2019-10-26 08:54:22','2019-11-10 07:50:51',0,'9,14,41',1,0),(55,'Java多线程JUC线程池05——ScheduledThreadPoolExecutor详解(2)','ScheduledThreadPoolExecutor用于执行周期性或延时性的定时任务，它是在ThreadPoolExecutor的基础上实现的任务调度线程池，内部使用延时工作队列DelayedWorkQueue实现对任务的延时调度。','Bobbi','## ScheduledThreadPoolExecutor方法\n有了对ScheduledFutureTask任务类和DelayedWorkQueue延时等待队列实现的了解基础后，我们就可以对ScheduledThreadPoolExecutor进行分析了。ScheduledThreadPoolExecutor的方法列表如下：\n\n```java\n// 根据给定的corePoolSize创建一个调度线程池\npublic ScheduledThreadPoolExecutor(int corePoolSize);\n\n// 根据给定的corePoolSize和线程工厂创建一个调度线程池\npublic ScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory);\n\n// 根据给定的corePoolSize和拒绝策略处理器创建一个调度线程池\npublic ScheduledThreadPoolExecutor(int corePoolSize, RejectedExecutionHandler handler);\n\n// 根据给定的corePoolSize、线程工厂和拒绝策略处理器创建一个调度线程池\npublic ScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler);\n\n// 延迟执行任务command，延迟时间由delay和unit决定；只执行一次\npublic ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit);\n\n// 延迟执行会产生执行结果任务command，延迟时间由delay和unit决定；只执行一次\npublic <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit);\n\n/**\n * 该方法在initialDelay时长后第一次执行任务，以后每隔period时长，再次执行任务。\n * 注意，period是从任务开始执行算起的。\n * 开始执行任务后，定时器每隔period时长检查该任务是否完成，\n * 如果完成则再次启动任务，否则等该任务结束后才再次启动任务\n */\npublic ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit);\n\n/**\n* 该方法在initialDelay时长后第一次执行任务，\n* 以后每当任务执行完成后，等待delay时长，再次执行任务\n*/\npublic ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit);\n\n// 执行任务command\npublic void execute(Runnable command);\n\n// 执行任务task\npublic Future<?> submit(Runnable task);\n\n// 执行任务task\npublic <T> Future<T> submit(Runnable task, T result);\n\n// 执行任务task\npublic <T> Future<T> submit(Callable<T> task);\n\n// 设置周期性任务在线程池关闭状态下是否继续运行的策略\npublic void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value);\n\n// 获取周期性任务在线程池关闭状态下是否继续运行的策略\npublic boolean getContinueExistingPeriodicTasksAfterShutdownPolicy();\n\n// 设置延时性任务在线程池关闭状态下是否继续运行的策略\npublic void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value);\n\n// 获取延时性任务在线程池关闭状态下是否继续运行的策略\npublic boolean getExecuteExistingDelayedTasksAfterShutdownPolicy();\n\n// 设置在取消任务时是否将任务移除的策略\npublic void setRemoveOnCancelPolicy(boolean value);\n\n// 获取在取消任务时是否将任务移除的策略\npublic boolean getRemoveOnCancelPolicy();\n\n// 关闭线程池\npublic void shutdown();\n\n// 关闭线程池\npublic List<Runnable> shutdownNow();\n\n// 获取任务队列\npublic BlockingQueue<Runnable> getQueue();\n```\n### 构造方法\n\n我们先查看ScheduledThreadPoolExecutor的构造方法，主要有以下几个：\n\n```java\n    // 根据给定的corePoolSize创建一个调度线程池\n    public ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue());\n    }\n\n    // 根据给定的corePoolSize和线程工厂创建一个调度线程池\n    public ScheduledThreadPoolExecutor(int corePoolSize,\n                                       ThreadFactory threadFactory) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue(), threadFactory);\n    }\n\n    // 根据给定的corePoolSize和拒绝策略处理器创建一个调度线程池\n    public ScheduledThreadPoolExecutor(int corePoolSize,\n                                       RejectedExecutionHandler handler) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue(), handler);\n    }\n\n    // 根据给定的corePoolSize、线程工厂和拒绝策略处理器创建一个调度线程池\n    public ScheduledThreadPoolExecutor(int corePoolSize,\n                                       ThreadFactory threadFactory,\n                                       RejectedExecutionHandler handler) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue(), threadFactory, handler);\n    }\n```\n从构造方法的声明来看，提供的几个重载无非是让核心线程数corePoolSize、线程工厂threadFactory、拒绝策略handler可以自由配置，这几个构造方法内部无一例外地调用的父类的构造方法，等待队列统一使用DelayedWorkQueue，最大线程数统一为Integer.MAX_VALUE，核心线程空闲时保持活跃的时间统一为0；\n\n## 任务的添加\nScheduledThreadPoolExecutor对任务的添加提供了大量的方法，其中有一部分是重写ThreadPoolExecutor的，有一部分是重写AbstractExecutorService类的，还有一部分则是实现ScheduledExecutorService接口提供的，有以下几个：\n\n1. 重写ThreadPoolExecutor类的添加方法\n\n```java\n// 执行任务command\npublic void execute(Runnable command) {\n    schedule(command, 0, TimeUnit.NANOSECONDS);\n}\n```\n\n2. 重写AbstractExecutorService类的添加方法\n\n```java\n// 执行任务task\npublic Future<?> submit(Runnable task) {\n    return schedule(task, 0, TimeUnit.NANOSECONDS);\n}\n\n// 执行任务task\npublic <T> Future<T> submit(Runnable task, T result) {\n    return schedule(Executors.callable(task, result), 0, TimeUnit.NANOSECONDS);\n}\n\n// 执行任务task\npublic <T> Future<T> submit(Callable<T> task) {\n    return schedule(task, 0, TimeUnit.NANOSECONDS);\n}\n```\n\n3. 实现ScheduledExecutorService接口提供的方法\n\n```java\n// 延迟执行任务command，延迟时间由delay和unit决定，只执行一次\npublic ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) {\n    // 检查参数\n    if (command == null || unit == null)\n        throw new NullPointerException();\n    /**\n     * 使用triggerTime()计算执行时间，创建一个RunnableScheduledFuture对象\n     * 默认的decorateTask()方法什么都没做，直接将传入的ScheduledFutureTask返回了\n     */\n    RunnableScheduledFuture<?> t = decorateTask(command,\n            new ScheduledFutureTask<Void>(command, null,\n                    triggerTime(delay, unit)));\n    // 延迟执行任务\n    delayedExecute(t);\n    return t;\n}\n\n// 延迟执行会产生执行结果任务command，延迟时间由delay和unit决定；只执行一次\npublic <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit) {\n    // 检查参数\n    if (callable == null || unit == null)\n        throw new NullPointerException();\n    /**\n     * 使用triggerTime()计算执行时间，创建一个RunnableScheduledFuture对象\n     * 默认的decorateTask()方法什么都没做，直接将传入的ScheduledFutureTask返回了\n     */\n    RunnableScheduledFuture<V> t = decorateTask(callable,\n            new ScheduledFutureTask<V>(callable,\n                    triggerTime(delay, unit)));\n    // 延迟执行任务\n    delayedExecute(t);\n    return t;\n}\n\n/**\n * 该方法在initialDelay时长后第一次执行任务，以后每隔period时长，再次执行任务。\n * 注意，period是从任务开始执行算起的。\n * 开始执行任务后，定时器每隔period时长检查该任务是否完成，\n * 如果完成则再次启动任务，否则等该任务结束后才再次启动任务\n */\npublic ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) {\n    // 检查参数\n    if (command == null || unit == null)\n        throw new NullPointerException();\n    if (period <= 0)\n        throw new IllegalArgumentException();\n    // 使用triggerTime()计算执行时间，创建一个ScheduledFutureTask对象\n    ScheduledFutureTask<Void> sft =\n            new ScheduledFutureTask<Void>(command, null,\n                    triggerTime(initialDelay, unit), unit.toNanos(period));\n    // 使用decorateTask()对ScheduledFutureTask对象进行装饰\n    RunnableScheduledFuture<Void> t = decorateTask(command, sft);\n    sft.outerTask = t;\n    // 执行任务\n    delayedExecute(t);\n    return t;\n}\n\n/**\n * 该方法在initialDelay时长后第一次执行任务，\n * 以后每当任务执行完成后，等待delay时长，再次执行任务\n */\npublic ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) {\n    // 检查参数\n    if (command == null || unit == null)\n        throw new NullPointerException();\n    if (delay <= 0)\n        throw new IllegalArgumentException();\n    // 使用triggerTime()计算执行时间，创建一个ScheduledFutureTask对象\n    ScheduledFutureTask<Void> sft =\n            new ScheduledFutureTask<Void>(command, null,\n                    triggerTime(initialDelay, unit), unit.toNanos(-delay));\n    RunnableScheduledFuture<Void> t = decorateTask(command, sft);\n    sft.outerTask = t;\n    delayedExecute(t);\n    return t;\n}\n```\n从源码可以得知，前面的两类重写都调用了ScheduledExecutorService接口提供schedule(Runnable command, long delay, TimeUnit unit)方法，因此我们主要考察ScheduledExecutorService接口提供四个被重写的方法。\n\n从源码可知，这四个方法的具体代码其实都大同小异，首先都对参数进行了检查，然后根据参数创建了一个ScheduledFutureTask任务，并使用decorateTask(Runnable, RunnableScheduledFuture<V>)或decorateTask(Callable<V>, RunnableScheduledFuture<V>)方法对任务进行了装饰，最后调用delayedExecute(t)执行任务并返回；不同的是，后两个方法中使用sft.outerTask = t记录了被装饰后的任务。ScheduledFutureTask的outerTask其实在之前提到过，它主要用于重复任务的辅助执行。正因为这一行代码的不一样，让前面两个方法和后面两个方法的执行策略变得不一样：\n\n- schedule(Runnable command, long delay, TimeUnit unit)和schedule(Callable<V> callable, long delay, TimeUnit unit)对任务只会执行一次；\n- scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)和scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)会重复执行，除非任务被取消或线程池被关闭。\n\n\n> 注：ScheduledThreadPoolExecutor中的decorateTask(Runnable, RunnableScheduledFuture<V>)和decorateTask(Callable<V>, RunnableScheduledFuture<V>)两个装饰方法未做任何处理，直接返回了传入的RunnableScheduledFuture对象；这个方法是提供给开发者重写的，在自定义继承自ScheduledThreadPoolExecutor的定时调度线程池类中，可以通过重写这两个方法对任务进行特定装饰。\n\n弄清了这几个方法的逻辑，接下来需要分析的重心自然是delayedExecute(RunnableScheduledFuture<?> task)方法了，它的源码如下：\n```java\nprivate void delayedExecute(RunnableScheduledFuture<?> task) {\n    if (isShutdown())\n        // 如果线程池关闭了就拒绝任务\n        reject(task);\n    else {\n        // 将任务添加到等待队列中\n        super.getQueue().add(task);\n        /**\n         * 如果线程池关闭，或者当前状态无法执行任务\n         * 就将任务从等待队列中移除\n         */\n        if (isShutdown() &&\n                !canRunInCurrentRunState(task.isPeriodic()) &&\n                remove(task))\n            // 任务从等待队列移除成功后，取消任务\n            task.cancel(false);\n        else\n            // 走到这里表示可以执行，则预启动Worker线程\n            ensurePrestart();\n    }\n}\n```\ndelayedExecute(RunnableScheduledFuture<?>)方法首先判断线程池是否关闭，如果关闭将使用拒绝策略处理器拒绝任务的提交，否则将会把任务添加到等待队列中，然后重新检查线程池状态，以确保可以运行任务，如果无法运行就将任务从队列移除，然后取消任务的执行，如果可以运行任务将预启动Worker线程。\n\n在上面代码中，super.getQueue().add(task)获取的队列即是在实例化ScheduledThreadPoolExecutor线程池时创建的DelayedWorkQueue队列；从这行代码可以看出，与ThreadPoolExecutor的操作不同，ScheduledThreadPoolExecutor一开始会将任务都放入等待队列中，通过DelayedWorkQueue的特性以保证任务都具有延时执行的特性。\n\nremove(Runnable)和ensurePrestart()都是父类ThreadPoolExecutor的方法。稍后介绍。这里主要关注canRunInCurrentRunState(boolean)方法的用处，它的源码如下：\n\n```java\n//  根据任务类型来判断任务在当前状态下是否可以运行\nboolean canRunInCurrentRunState(boolean periodic) {\n    /**\n     * continueExistingPeriodicTasksAfterShutdown默认是false，是控制周期性任务的\n     * executeExistingDelayedTasksAfterShutdown默认是true，是控制延时性任务的\n     */\n    return isRunningOrShutdown(periodic ?\n            continueExistingPeriodicTasksAfterShutdown :\n            executeExistingDelayedTasksAfterShutdown);\n}\n```\n\n这里会根据periodic参数的不同向isRunningOrShutdown(boolean shutdownOK)方法传入不同的参数，continueExistingPeriodicTasksAfterShutdown和executeExistingDelayedTasksAfterShutdown定义于ScheduledThreadPoolExecutor中：\n\n```java\n/**\n * 当该值为false时，表示应该在线程池关闭时取消周期性任务的执行\n */\nprivate volatile boolean continueExistingPeriodicTasksAfterShutdown;\n\n/**\n * 当该值为false时，表示应该在线程池关闭时取消延迟性任务的执行\n */\nprivate volatile boolean executeExistingDelayedTasksAfterShutdown = true;\n```\n\n这两个参数代表两种策略，分别控制是否应该在线程池关闭时取消周期性任务的执行及是否应该在线程池关闭时取消延迟性任务的执行。isRunningOrShutdown(boolean shutdownOK)方法继承自父类ThreadPoolExecutor，这里回顾一下：\n```java\nfinal boolean isRunningOrShutdown(boolean shutdownOK) {\n    int rs = runStateOf(ctl.get());\n    return rs == RUNNING || (rs == SHUTDOWN && shutdownOK);\n}\n```\n因此canRunInCurrentRunState(boolean)方法的用处其实很简单，就是用于决定如果线程池处于SHUTDOWN状态，是否可以执行当前的定时任务。\n\n\n## 任务的执行\n当ScheduledThreadPoolExecutor将添加的任务都放入DelayedWorkQueue队列中后，如果线程池符合运行状态，会调用ensurePrestart()预启动Worker线程，这个方法位于父类ThreadPoolExecutor中，我们回顾一下：\n\n```java\nvoid ensurePrestart() {\n    // 获取workerCount\n    int wc = workerCountOf(ctl.get());\n    // 如果workerCount小于corePoolSize\n    if (wc < corePoolSize)\n        // 添加核心线程\n        addWorker(null, true);\n    else if (wc == 0)\n        // 添加非核心线程\n        addWorker(null, false);\n}\n```\n该方法会根据当前Worker数量及corePoolSize的大小添加Worker线程，在添加Worker线程后，它最终会启动Worker自线程，即调用Worker的run()方法，而run()方法则会调用ThreadPoolExecutor的runWorker(Worker w)方法并将Worker自己传入，回顾以下runWorker(Worker w)的源码：\n\n```java\nfinal void runWorker(Worker w) {\n    // 引用worker的firstTask任务，并清除worker的firstTask\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    // 用于标识worker是不是因异常而死亡\n    boolean completedAbruptly = true;\n    try {\n        // worker取任务执行\n        while (task != null || (task = getTask()) != null) {\n            // 加锁\n            w.lock();\n            clearInterruptsForTaskRun();\n            try {\n                // 执行beforeExecute()钩子方法\n                beforeExecute(w.thread, task);\n                // 用于记录运行过程中的异常\n                Throwable thrown = null;\n                try {\n                    // 执行任务\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x;\n                    throw x;\n                } catch (Error x) {\n                    thrown = x;\n                    throw x;\n                } catch (Throwable x) {\n                    thrown = x;\n                    throw new Error(x);\n                } finally {\n                    // 执行afterExecute()钩子方法\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                // 将执行完的任务清空\n                task = null;\n                // 将worker的完成任务数加1\n                w.completedTasks++;\n                // 解锁\n                w.unlock();\n            }\n        }\n        // 运行到这里表示运行过程中没有出现异常\n        completedAbruptly = false;\n    } finally {\n        // 调用processWorkerExit()方法处理Worker的后续清理和退出流程\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n```\n\n从源码可知，该方法的while循环条件中会不断取出Worker的firstTask，如果firstTask为null就会调用getTask()方法获取Runnable任务对象并调用其run()方法以实现任务的运行。在ScheduledThreadPoolExecutor中，由于所有Worker都是预创建的，firstTask都为null，因此会调用getTask()方法获取任务；而getTask()方法则实现了从等待队列中获取任务，回顾源码如下：\n\n```java\nprivate Runnable getTask() {\n    // 用于记录poll()方法是否超时\n    boolean timedOut = false; // Did the last poll() time out?\n\n    retry:\n    // 无限循环\n    for (; ; ) {\n        // 获取ctl和runState\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // 检查状态\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            /**\n             * 如果runState为STOP、TIDYING或TERMINATED\n             * 或者runState为SHUTDOWN，且workerQueue为空\n             * 将workerCount减1，返回null结束运行\n             */\n            decrementWorkerCount();\n            return null;\n        }\n\n        // 记录worker是否能够被移除\n        boolean timed;      // Are workers subject to culling?\n\n        // 无限循环\n        for (; ; ) {\n            // 获取workerCount\n            int wc = workerCountOf(c);\n            /**\n             * 判断当前Worker是否可以被移除，即当前Worker是否可以一直等待任务。\n             * 如果allowCoreThreadTimeOut为true，或者workerCount大于核心线程数，\n             * 则当前线程是有超时时间的（keepAliveTime），无法一直等待任务\n             */\n            timed = allowCoreThreadTimeOut || wc > corePoolSize;\n            /**\n             * workerCount小于等于核心线程数，且没有超时，则跳出内层循环\n             */\n            if (wc <= maximumPoolSize && !(timedOut && timed))\n                break;\n            // 否则表示已超时，将workerCount减1，如果成功直接返回null\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            // 走到这里说明上一步workerCount减1失败了，重新读取ctl\n            c = ctl.get();  // Re-read ctl\n            // 如果与之前的runState不同，表示线程池状态发生改变了，跳出到外层循环重试\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n\n        try {\n            /**\n             * 根据线程是否会超时来分别调用相应的方法，\n             * poll()方法附带超时机制；take()方法没有超时机制，并且可能会阻塞等待\n             */\n            Runnable r = timed ?\n                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                    workQueue.take();\n            // 如果获取到的任务不为null则返回\n            if (r != null)\n                return r;\n            // 走到这里表示获取操作超时了\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            // 被中断，可能是超时等待过程中被中断了\n            timedOut = false;\n        }\n    }\n}\n```\n\n这个方法在ThreadPoolExecutor的文章中详细讲解过，这里不赘述。我们只需要知道的是，在ScheduledThreadPoolExecutor中，等待队列workQueue就是之前装入任务的DelayedWorkQueue队列，而此处任务的出队操作，自然是调用了DelayedWorkQueue实例的take()或poll(long timeout, TimeUnit unit)方法，其实这里由于keepAliveTime置为0了，因此并不会调用poll(long timeout, TimeUnit unit)方法。\n\n而任务的延时执行，正是由DelayedWorkQueue的出队操作take()实现的，它会根据任务的延迟时间决定是否可以出队，从而达到延迟执行任务，这部分代码在之前讲解DelayedWorkQueue时已经分析过了。\n\n我们知道，要执行的任务在添加到等待队列中时都被包装为了一个ScheduledFutureTask对象，因此在任务出队后真正开始执行的时候，是调用了ScheduledFutureTask的run()方法的，该方法的源码如下：\n\n```java\npublic void run() {\n    // 任务是否是周期性的\n    boolean periodic = isPeriodic();\n    // 判断当前周期性任务是否可以执行\n    if (!canRunInCurrentRunState(periodic))\n        // 如果不能执行，就取消当前任务\n        cancel(false);\n    else if (!periodic)\n        // 如果不是周期性任务，直接执行即可\n        ScheduledFutureTask.super.run();\n    else if (ScheduledFutureTask.super.runAndReset()) {\n        // 否则执行任务并重置，然后计算并设置下次执行时间\n        setNextRunTime();\n        // 重新添加下一次任务，即将当前ScheduledFutureTask重新入队\n        reExecutePeriodic(outerTask);\n    }\n}\n```\n\n该方法会先检查线程池当前的运行状态是否符合执行任务的要求，如果符合就根据任务是否是重复性任务来决定不同的运行策略。\n\n先观察非重复性任务的执行，会使用ScheduledFutureTask.super.run()直接调用父类的run()方法，即FutureTask的run()方法，FutureTask在之前讲解过了，这个方法最终会调用到我们当时添加的任务的run()方法。\n\n而重复性任务的执行，会调用ScheduledFutureTask.super.runAndReset()执行任务，这个方法也是FutureTask的，之前也有将结果，最终一样会调用到我们当时添加的任务的run()方法。不同的是，该方法会在执行完任务后对线程池状态进行重置，如果任务执行成功且线程池状态重置成功会返回true继而执行else if分支内的代码，如果任务执行过程中抛出了异常会返回false，则不会执行。\n\n## 重复性任务的执行\n根据上面的讲解，最后一个else if分支内的代码则是实现重复性任务的新一次的执行，当任务执行完成并线程池状态重置成功后，会调用setNextRunTime()计算并设置任务的下一次执行执行时间，然后调用reExecutePeriodic(outerTask)重新添加下一次任务，该方法源码如下\n\n```java\nvoid reExecutePeriodic(RunnableScheduledFuture<?> task) {\n    // 判断当前线程池状态是否可以运行周期性任务\n    if (canRunInCurrentRunState(true)) {\n        // 任务重新入队\n        super.getQueue().add(task);\n        /**\n         * 重新检查当前线程池状态是否可以运行周期性任务，如果不行就从队列中移除任务\n         * 并取消任务的执行\n         */\n        if (!canRunInCurrentRunState(true) && remove(task))\n            task.cancel(false);\n        else\n            // 如果可以运行就预启动Worker线程\n            ensurePrestart();\n    }\n}\n```\n\n这里的outerTask在提交重复性任务的时候直接指向了装饰后的任务本身，大家可以回顾之前的代码。该方法也非常简单，在线程池状态符合条件时将任务重新入队，并进行重新检查，如果符合运行条件将预启动Worker线程，接下来任务的运行就和上面讲解的一样了：DelayedWorkQueue队列中任务的延迟出队、出队后执行任务、任务执行完后再次添加新一次的任务，循环往复以实现任务的重复执行。\n\n## 任务的取消\n在线程池状态不满足任务运行时，任务会从等待队列中移除，并且调用任务的cancel(boolean mayInterruptIfRunning)方法取消运行，该方法源码如下：\n```java\n// 取消任务的执行\npublic boolean cancel(boolean mayInterruptIfRunning) {\n    // 调用父类方法取消任务的执行\n    boolean cancelled = super.cancel(mayInterruptIfRunning);\n    // 如果取消成功，且removeOnCancel策略为true，任务的heapIndex大于等于0\n    if (cancelled && removeOnCancel && heapIndex >= 0)\n        // 则将任务从队列中移除\n        remove(this);\n    // 返回是否取消成功的结果\n    return cancelled;\n}\n```\n代码比较简单，调用了父类FutureTask的cancel(boolean mayInterruptIfRunning)方法，内部会根据传入参数决定是否对任务线程进行中断。在任务成功取消后，会根据removeOnCancel和heapIndex决定是否将任务从队列中移除。这里讲解一下removeOnCancel成员变量，它属于ScheduledThreadPoolExecutor类，用于控制任务在取消时是否从队列移除，默认为false，定义如下：\n\n```java\n\n/**\n * True if ScheduledFutureTask.cancel should remove from queue\n * 当该值为true时，表示ScheduledFutureTask的cancel()方法应该将ScheduledFutureTask从队列中移除\n */\nprivate volatile boolean removeOnCancel = false;\n```\n\n## 线程池关闭\nScheduledThreadPoolExecutor重写了ThreadPoolExecutor提供的钩子方法onShutdown()，用于在线程池关闭时对任务进行策略性清理，源码如下：\n```java\n@Override void onShutdown() {\n    // 获取等待队列\n    BlockingQueue<Runnable> q = super.getQueue();\n    // 获取对延时性任务和周期性任务的处理方式\n    boolean keepDelayed = getExecuteExistingDelayedTasksAfterShutdownPolicy();\n    boolean keepPeriodic = getContinueExistingPeriodicTasksAfterShutdownPolicy();\n    if (!keepDelayed && !keepPeriodic) {\n        /**\n         * 如果对延时性任务和周期性任务都不做保留\n         * 则遍历整个等待队列，取消队列中的任务\n         */\n        for (Object e : q.toArray())\n            // 如果任务是RunnableScheduledFuture类型\n            if (e instanceof RunnableScheduledFuture<?>)\n                // 取消任务的执行\n                ((RunnableScheduledFuture<?>) e).cancel(false);\n        // 清理队列\n        q.clear();\n    }\n    else {\n        // Traverse snapshot to avoid iterator exceptions\n        /**\n         * 走到这里说明keepDelayed和keepPeriodic其中有一个或两个为true\n         * 遍历等待队列的所有任务\n         */\n        for (Object e : q.toArray()) {\n            // 如果任务是RunnableScheduledFuture类型\n            if (e instanceof RunnableScheduledFuture) {\n                // 强转\n                RunnableScheduledFuture<?> t = (RunnableScheduledFuture<?>)e;\n                /**\n                 * 根据任务情况进行相应的判断\n                 * 如果是周期性任务，根据keepPeriodic来判断\n                 * 如果是延时性任务，根据keepDelayed来判断\n                 * 或者任务已经被取消了，也应该从队列中移除\n                 */\n                if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) || t.isCancelled()) { // also remove if already cancelled\n                    // 从队列中移除任务\n                    if (q.remove(t))\n                        // 移除成功后对任务进行取消\n                        t.cancel(false);\n                }\n            }\n        }\n    }\n    // 尝试终止线程池\n    tryTerminate();\n}\n```\n该方法实现中，会根据continueExistingPeriodicTasksAfterShutdown和executeExistingDelayedTasksAfterShutdown两个策略决定是否取消和清理相应的任务。','<h2 id=\"scheduledthreadpoolexecutor-\">ScheduledThreadPoolExecutor方法</h2>\n<p>有了对ScheduledFutureTask任务类和DelayedWorkQueue延时等待队列实现的了解基础后，我们就可以对ScheduledThreadPoolExecutor进行分析了。ScheduledThreadPoolExecutor的方法列表如下：</p>\n<pre><code class=\"language-java\">// 根据给定的corePoolSize创建一个调度线程池\npublic ScheduledThreadPoolExecutor(int corePoolSize);\n\n// 根据给定的corePoolSize和线程工厂创建一个调度线程池\npublic ScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory);\n\n// 根据给定的corePoolSize和拒绝策略处理器创建一个调度线程池\npublic ScheduledThreadPoolExecutor(int corePoolSize, RejectedExecutionHandler handler);\n\n// 根据给定的corePoolSize、线程工厂和拒绝策略处理器创建一个调度线程池\npublic ScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler);\n\n// 延迟执行任务command，延迟时间由delay和unit决定；只执行一次\npublic ScheduledFuture&lt;?&gt; schedule(Runnable command, long delay, TimeUnit unit);\n\n// 延迟执行会产生执行结果任务command，延迟时间由delay和unit决定；只执行一次\npublic &lt;V&gt; ScheduledFuture&lt;V&gt; schedule(Callable&lt;V&gt; callable, long delay, TimeUnit unit);\n\n/**\n * 该方法在initialDelay时长后第一次执行任务，以后每隔period时长，再次执行任务。\n * 注意，period是从任务开始执行算起的。\n * 开始执行任务后，定时器每隔period时长检查该任务是否完成，\n * 如果完成则再次启动任务，否则等该任务结束后才再次启动任务\n */\npublic ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit);\n\n/**\n* 该方法在initialDelay时长后第一次执行任务，\n* 以后每当任务执行完成后，等待delay时长，再次执行任务\n*/\npublic ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit);\n\n// 执行任务command\npublic void execute(Runnable command);\n\n// 执行任务task\npublic Future&lt;?&gt; submit(Runnable task);\n\n// 执行任务task\npublic &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);\n\n// 执行任务task\npublic &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);\n\n// 设置周期性任务在线程池关闭状态下是否继续运行的策略\npublic void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value);\n\n// 获取周期性任务在线程池关闭状态下是否继续运行的策略\npublic boolean getContinueExistingPeriodicTasksAfterShutdownPolicy();\n\n// 设置延时性任务在线程池关闭状态下是否继续运行的策略\npublic void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value);\n\n// 获取延时性任务在线程池关闭状态下是否继续运行的策略\npublic boolean getExecuteExistingDelayedTasksAfterShutdownPolicy();\n\n// 设置在取消任务时是否将任务移除的策略\npublic void setRemoveOnCancelPolicy(boolean value);\n\n// 获取在取消任务时是否将任务移除的策略\npublic boolean getRemoveOnCancelPolicy();\n\n// 关闭线程池\npublic void shutdown();\n\n// 关闭线程池\npublic List&lt;Runnable&gt; shutdownNow();\n\n// 获取任务队列\npublic BlockingQueue&lt;Runnable&gt; getQueue();</code></pre>\n<h3 id=\"-\">构造方法</h3>\n<p>我们先查看ScheduledThreadPoolExecutor的构造方法，主要有以下几个：</p>\n<pre><code class=\"language-java\">    // 根据给定的corePoolSize创建一个调度线程池\n    public ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue());\n    }\n\n    // 根据给定的corePoolSize和线程工厂创建一个调度线程池\n    public ScheduledThreadPoolExecutor(int corePoolSize,\n                                       ThreadFactory threadFactory) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue(), threadFactory);\n    }\n\n    // 根据给定的corePoolSize和拒绝策略处理器创建一个调度线程池\n    public ScheduledThreadPoolExecutor(int corePoolSize,\n                                       RejectedExecutionHandler handler) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue(), handler);\n    }\n\n    // 根据给定的corePoolSize、线程工厂和拒绝策略处理器创建一个调度线程池\n    public ScheduledThreadPoolExecutor(int corePoolSize,\n                                       ThreadFactory threadFactory,\n                                       RejectedExecutionHandler handler) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue(), threadFactory, handler);\n    }</code></pre>\n<p>从构造方法的声明来看，提供的几个重载无非是让核心线程数corePoolSize、线程工厂threadFactory、拒绝策略handler可以自由配置，这几个构造方法内部无一例外地调用的父类的构造方法，等待队列统一使用DelayedWorkQueue，最大线程数统一为Integer.MAX_VALUE，核心线程空闲时保持活跃的时间统一为0；</p>\n<h2 id=\"-\">任务的添加</h2>\n<p>ScheduledThreadPoolExecutor对任务的添加提供了大量的方法，其中有一部分是重写ThreadPoolExecutor的，有一部分是重写AbstractExecutorService类的，还有一部分则是实现ScheduledExecutorService接口提供的，有以下几个：</p>\n<ol>\n<li>重写ThreadPoolExecutor类的添加方法</li>\n</ol>\n<pre><code class=\"language-java\">// 执行任务command\npublic void execute(Runnable command) {\n    schedule(command, 0, TimeUnit.NANOSECONDS);\n}</code></pre>\n<ol start=\"2\">\n<li>重写AbstractExecutorService类的添加方法</li>\n</ol>\n<pre><code class=\"language-java\">// 执行任务task\npublic Future&lt;?&gt; submit(Runnable task) {\n    return schedule(task, 0, TimeUnit.NANOSECONDS);\n}\n\n// 执行任务task\npublic &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result) {\n    return schedule(Executors.callable(task, result), 0, TimeUnit.NANOSECONDS);\n}\n\n// 执行任务task\npublic &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task) {\n    return schedule(task, 0, TimeUnit.NANOSECONDS);\n}</code></pre>\n<ol start=\"3\">\n<li>实现ScheduledExecutorService接口提供的方法</li>\n</ol>\n<pre><code class=\"language-java\">// 延迟执行任务command，延迟时间由delay和unit决定，只执行一次\npublic ScheduledFuture&lt;?&gt; schedule(Runnable command, long delay, TimeUnit unit) {\n    // 检查参数\n    if (command == null || unit == null)\n        throw new NullPointerException();\n    /**\n     * 使用triggerTime()计算执行时间，创建一个RunnableScheduledFuture对象\n     * 默认的decorateTask()方法什么都没做，直接将传入的ScheduledFutureTask返回了\n     */\n    RunnableScheduledFuture&lt;?&gt; t = decorateTask(command,\n            new ScheduledFutureTask&lt;Void&gt;(command, null,\n                    triggerTime(delay, unit)));\n    // 延迟执行任务\n    delayedExecute(t);\n    return t;\n}\n\n// 延迟执行会产生执行结果任务command，延迟时间由delay和unit决定；只执行一次\npublic &lt;V&gt; ScheduledFuture&lt;V&gt; schedule(Callable&lt;V&gt; callable, long delay, TimeUnit unit) {\n    // 检查参数\n    if (callable == null || unit == null)\n        throw new NullPointerException();\n    /**\n     * 使用triggerTime()计算执行时间，创建一个RunnableScheduledFuture对象\n     * 默认的decorateTask()方法什么都没做，直接将传入的ScheduledFutureTask返回了\n     */\n    RunnableScheduledFuture&lt;V&gt; t = decorateTask(callable,\n            new ScheduledFutureTask&lt;V&gt;(callable,\n                    triggerTime(delay, unit)));\n    // 延迟执行任务\n    delayedExecute(t);\n    return t;\n}\n\n/**\n * 该方法在initialDelay时长后第一次执行任务，以后每隔period时长，再次执行任务。\n * 注意，period是从任务开始执行算起的。\n * 开始执行任务后，定时器每隔period时长检查该任务是否完成，\n * 如果完成则再次启动任务，否则等该任务结束后才再次启动任务\n */\npublic ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) {\n    // 检查参数\n    if (command == null || unit == null)\n        throw new NullPointerException();\n    if (period &lt;= 0)\n        throw new IllegalArgumentException();\n    // 使用triggerTime()计算执行时间，创建一个ScheduledFutureTask对象\n    ScheduledFutureTask&lt;Void&gt; sft =\n            new ScheduledFutureTask&lt;Void&gt;(command, null,\n                    triggerTime(initialDelay, unit), unit.toNanos(period));\n    // 使用decorateTask()对ScheduledFutureTask对象进行装饰\n    RunnableScheduledFuture&lt;Void&gt; t = decorateTask(command, sft);\n    sft.outerTask = t;\n    // 执行任务\n    delayedExecute(t);\n    return t;\n}\n\n/**\n * 该方法在initialDelay时长后第一次执行任务，\n * 以后每当任务执行完成后，等待delay时长，再次执行任务\n */\npublic ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) {\n    // 检查参数\n    if (command == null || unit == null)\n        throw new NullPointerException();\n    if (delay &lt;= 0)\n        throw new IllegalArgumentException();\n    // 使用triggerTime()计算执行时间，创建一个ScheduledFutureTask对象\n    ScheduledFutureTask&lt;Void&gt; sft =\n            new ScheduledFutureTask&lt;Void&gt;(command, null,\n                    triggerTime(initialDelay, unit), unit.toNanos(-delay));\n    RunnableScheduledFuture&lt;Void&gt; t = decorateTask(command, sft);\n    sft.outerTask = t;\n    delayedExecute(t);\n    return t;\n}</code></pre>\n<p>从源码可以得知，前面的两类重写都调用了ScheduledExecutorService接口提供schedule(Runnable command, long delay, TimeUnit unit)方法，因此我们主要考察ScheduledExecutorService接口提供四个被重写的方法。</p>\n<p>从源码可知，这四个方法的具体代码其实都大同小异，首先都对参数进行了检查，然后根据参数创建了一个ScheduledFutureTask任务，并使用decorateTask(Runnable, RunnableScheduledFuture<V>)或decorateTask(Callable<V>, RunnableScheduledFuture<V>)方法对任务进行了装饰，最后调用delayedExecute(t)执行任务并返回；不同的是，后两个方法中使用sft.outerTask = t记录了被装饰后的任务。ScheduledFutureTask的outerTask其实在之前提到过，它主要用于重复任务的辅助执行。正因为这一行代码的不一样，让前面两个方法和后面两个方法的执行策略变得不一样：</p>\n<ul>\n<li>schedule(Runnable command, long delay, TimeUnit unit)和schedule(Callable<V> callable, long delay, TimeUnit unit)对任务只会执行一次；</li>\n<li>scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)和scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)会重复执行，除非任务被取消或线程池被关闭。</li>\n</ul>\n<blockquote>\n<p>注：ScheduledThreadPoolExecutor中的decorateTask(Runnable, RunnableScheduledFuture<V>)和decorateTask(Callable<V>, RunnableScheduledFuture<V>)两个装饰方法未做任何处理，直接返回了传入的RunnableScheduledFuture对象；这个方法是提供给开发者重写的，在自定义继承自ScheduledThreadPoolExecutor的定时调度线程池类中，可以通过重写这两个方法对任务进行特定装饰。</p>\n</blockquote>\n<p>弄清了这几个方法的逻辑，接下来需要分析的重心自然是delayedExecute(RunnableScheduledFuture&lt;?&gt; task)方法了，它的源码如下：</p>\n<pre><code class=\"language-java\">private void delayedExecute(RunnableScheduledFuture&lt;?&gt; task) {\n    if (isShutdown())\n        // 如果线程池关闭了就拒绝任务\n        reject(task);\n    else {\n        // 将任务添加到等待队列中\n        super.getQueue().add(task);\n        /**\n         * 如果线程池关闭，或者当前状态无法执行任务\n         * 就将任务从等待队列中移除\n         */\n        if (isShutdown() &amp;&amp;\n                !canRunInCurrentRunState(task.isPeriodic()) &amp;&amp;\n                remove(task))\n            // 任务从等待队列移除成功后，取消任务\n            task.cancel(false);\n        else\n            // 走到这里表示可以执行，则预启动Worker线程\n            ensurePrestart();\n    }\n}</code></pre>\n<p>delayedExecute(RunnableScheduledFuture&lt;?&gt;)方法首先判断线程池是否关闭，如果关闭将使用拒绝策略处理器拒绝任务的提交，否则将会把任务添加到等待队列中，然后重新检查线程池状态，以确保可以运行任务，如果无法运行就将任务从队列移除，然后取消任务的执行，如果可以运行任务将预启动Worker线程。</p>\n<p>在上面代码中，super.getQueue().add(task)获取的队列即是在实例化ScheduledThreadPoolExecutor线程池时创建的DelayedWorkQueue队列；从这行代码可以看出，与ThreadPoolExecutor的操作不同，ScheduledThreadPoolExecutor一开始会将任务都放入等待队列中，通过DelayedWorkQueue的特性以保证任务都具有延时执行的特性。</p>\n<p>remove(Runnable)和ensurePrestart()都是父类ThreadPoolExecutor的方法。稍后介绍。这里主要关注canRunInCurrentRunState(boolean)方法的用处，它的源码如下：</p>\n<pre><code class=\"language-java\">//  根据任务类型来判断任务在当前状态下是否可以运行\nboolean canRunInCurrentRunState(boolean periodic) {\n    /**\n     * continueExistingPeriodicTasksAfterShutdown默认是false，是控制周期性任务的\n     * executeExistingDelayedTasksAfterShutdown默认是true，是控制延时性任务的\n     */\n    return isRunningOrShutdown(periodic ?\n            continueExistingPeriodicTasksAfterShutdown :\n            executeExistingDelayedTasksAfterShutdown);\n}</code></pre>\n<p>这里会根据periodic参数的不同向isRunningOrShutdown(boolean shutdownOK)方法传入不同的参数，continueExistingPeriodicTasksAfterShutdown和executeExistingDelayedTasksAfterShutdown定义于ScheduledThreadPoolExecutor中：</p>\n<pre><code class=\"language-java\">/**\n * 当该值为false时，表示应该在线程池关闭时取消周期性任务的执行\n */\nprivate volatile boolean continueExistingPeriodicTasksAfterShutdown;\n\n/**\n * 当该值为false时，表示应该在线程池关闭时取消延迟性任务的执行\n */\nprivate volatile boolean executeExistingDelayedTasksAfterShutdown = true;</code></pre>\n<p>这两个参数代表两种策略，分别控制是否应该在线程池关闭时取消周期性任务的执行及是否应该在线程池关闭时取消延迟性任务的执行。isRunningOrShutdown(boolean shutdownOK)方法继承自父类ThreadPoolExecutor，这里回顾一下：</p>\n<pre><code class=\"language-java\">final boolean isRunningOrShutdown(boolean shutdownOK) {\n    int rs = runStateOf(ctl.get());\n    return rs == RUNNING || (rs == SHUTDOWN &amp;&amp; shutdownOK);\n}</code></pre>\n<p>因此canRunInCurrentRunState(boolean)方法的用处其实很简单，就是用于决定如果线程池处于SHUTDOWN状态，是否可以执行当前的定时任务。</p>\n<h2 id=\"-\">任务的执行</h2>\n<p>当ScheduledThreadPoolExecutor将添加的任务都放入DelayedWorkQueue队列中后，如果线程池符合运行状态，会调用ensurePrestart()预启动Worker线程，这个方法位于父类ThreadPoolExecutor中，我们回顾一下：</p>\n<pre><code class=\"language-java\">void ensurePrestart() {\n    // 获取workerCount\n    int wc = workerCountOf(ctl.get());\n    // 如果workerCount小于corePoolSize\n    if (wc &lt; corePoolSize)\n        // 添加核心线程\n        addWorker(null, true);\n    else if (wc == 0)\n        // 添加非核心线程\n        addWorker(null, false);\n}</code></pre>\n<p>该方法会根据当前Worker数量及corePoolSize的大小添加Worker线程，在添加Worker线程后，它最终会启动Worker自线程，即调用Worker的run()方法，而run()方法则会调用ThreadPoolExecutor的runWorker(Worker w)方法并将Worker自己传入，回顾以下runWorker(Worker w)的源码：</p>\n<pre><code class=\"language-java\">final void runWorker(Worker w) {\n    // 引用worker的firstTask任务，并清除worker的firstTask\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    // 用于标识worker是不是因异常而死亡\n    boolean completedAbruptly = true;\n    try {\n        // worker取任务执行\n        while (task != null || (task = getTask()) != null) {\n            // 加锁\n            w.lock();\n            clearInterruptsForTaskRun();\n            try {\n                // 执行beforeExecute()钩子方法\n                beforeExecute(w.thread, task);\n                // 用于记录运行过程中的异常\n                Throwable thrown = null;\n                try {\n                    // 执行任务\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x;\n                    throw x;\n                } catch (Error x) {\n                    thrown = x;\n                    throw x;\n                } catch (Throwable x) {\n                    thrown = x;\n                    throw new Error(x);\n                } finally {\n                    // 执行afterExecute()钩子方法\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                // 将执行完的任务清空\n                task = null;\n                // 将worker的完成任务数加1\n                w.completedTasks++;\n                // 解锁\n                w.unlock();\n            }\n        }\n        // 运行到这里表示运行过程中没有出现异常\n        completedAbruptly = false;\n    } finally {\n        // 调用processWorkerExit()方法处理Worker的后续清理和退出流程\n        processWorkerExit(w, completedAbruptly);\n    }\n}</code></pre>\n<p>从源码可知，该方法的while循环条件中会不断取出Worker的firstTask，如果firstTask为null就会调用getTask()方法获取Runnable任务对象并调用其run()方法以实现任务的运行。在ScheduledThreadPoolExecutor中，由于所有Worker都是预创建的，firstTask都为null，因此会调用getTask()方法获取任务；而getTask()方法则实现了从等待队列中获取任务，回顾源码如下：</p>\n<pre><code class=\"language-java\">private Runnable getTask() {\n    // 用于记录poll()方法是否超时\n    boolean timedOut = false; // Did the last poll() time out?\n\n    retry:\n    // 无限循环\n    for (; ; ) {\n        // 获取ctl和runState\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // 检查状态\n        // Check if queue empty only if necessary.\n        if (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) {\n            /**\n             * 如果runState为STOP、TIDYING或TERMINATED\n             * 或者runState为SHUTDOWN，且workerQueue为空\n             * 将workerCount减1，返回null结束运行\n             */\n            decrementWorkerCount();\n            return null;\n        }\n\n        // 记录worker是否能够被移除\n        boolean timed;      // Are workers subject to culling?\n\n        // 无限循环\n        for (; ; ) {\n            // 获取workerCount\n            int wc = workerCountOf(c);\n            /**\n             * 判断当前Worker是否可以被移除，即当前Worker是否可以一直等待任务。\n             * 如果allowCoreThreadTimeOut为true，或者workerCount大于核心线程数，\n             * 则当前线程是有超时时间的（keepAliveTime），无法一直等待任务\n             */\n            timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;\n            /**\n             * workerCount小于等于核心线程数，且没有超时，则跳出内层循环\n             */\n            if (wc &lt;= maximumPoolSize &amp;&amp; !(timedOut &amp;&amp; timed))\n                break;\n            // 否则表示已超时，将workerCount减1，如果成功直接返回null\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            // 走到这里说明上一步workerCount减1失败了，重新读取ctl\n            c = ctl.get();  // Re-read ctl\n            // 如果与之前的runState不同，表示线程池状态发生改变了，跳出到外层循环重试\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n\n        try {\n            /**\n             * 根据线程是否会超时来分别调用相应的方法，\n             * poll()方法附带超时机制；take()方法没有超时机制，并且可能会阻塞等待\n             */\n            Runnable r = timed ?\n                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                    workQueue.take();\n            // 如果获取到的任务不为null则返回\n            if (r != null)\n                return r;\n            // 走到这里表示获取操作超时了\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            // 被中断，可能是超时等待过程中被中断了\n            timedOut = false;\n        }\n    }\n}</code></pre>\n<p>这个方法在ThreadPoolExecutor的文章中详细讲解过，这里不赘述。我们只需要知道的是，在ScheduledThreadPoolExecutor中，等待队列workQueue就是之前装入任务的DelayedWorkQueue队列，而此处任务的出队操作，自然是调用了DelayedWorkQueue实例的take()或poll(long timeout, TimeUnit unit)方法，其实这里由于keepAliveTime置为0了，因此并不会调用poll(long timeout, TimeUnit unit)方法。</p>\n<p>而任务的延时执行，正是由DelayedWorkQueue的出队操作take()实现的，它会根据任务的延迟时间决定是否可以出队，从而达到延迟执行任务，这部分代码在之前讲解DelayedWorkQueue时已经分析过了。</p>\n<p>我们知道，要执行的任务在添加到等待队列中时都被包装为了一个ScheduledFutureTask对象，因此在任务出队后真正开始执行的时候，是调用了ScheduledFutureTask的run()方法的，该方法的源码如下：</p>\n<pre><code class=\"language-java\">public void run() {\n    // 任务是否是周期性的\n    boolean periodic = isPeriodic();\n    // 判断当前周期性任务是否可以执行\n    if (!canRunInCurrentRunState(periodic))\n        // 如果不能执行，就取消当前任务\n        cancel(false);\n    else if (!periodic)\n        // 如果不是周期性任务，直接执行即可\n        ScheduledFutureTask.super.run();\n    else if (ScheduledFutureTask.super.runAndReset()) {\n        // 否则执行任务并重置，然后计算并设置下次执行时间\n        setNextRunTime();\n        // 重新添加下一次任务，即将当前ScheduledFutureTask重新入队\n        reExecutePeriodic(outerTask);\n    }\n}</code></pre>\n<p>该方法会先检查线程池当前的运行状态是否符合执行任务的要求，如果符合就根据任务是否是重复性任务来决定不同的运行策略。</p>\n<p>先观察非重复性任务的执行，会使用ScheduledFutureTask.super.run()直接调用父类的run()方法，即FutureTask的run()方法，FutureTask在之前讲解过了，这个方法最终会调用到我们当时添加的任务的run()方法。</p>\n<p>而重复性任务的执行，会调用ScheduledFutureTask.super.runAndReset()执行任务，这个方法也是FutureTask的，之前也有将结果，最终一样会调用到我们当时添加的任务的run()方法。不同的是，该方法会在执行完任务后对线程池状态进行重置，如果任务执行成功且线程池状态重置成功会返回true继而执行else if分支内的代码，如果任务执行过程中抛出了异常会返回false，则不会执行。</p>\n<h2 id=\"-\">重复性任务的执行</h2>\n<p>根据上面的讲解，最后一个else if分支内的代码则是实现重复性任务的新一次的执行，当任务执行完成并线程池状态重置成功后，会调用setNextRunTime()计算并设置任务的下一次执行执行时间，然后调用reExecutePeriodic(outerTask)重新添加下一次任务，该方法源码如下</p>\n<pre><code class=\"language-java\">void reExecutePeriodic(RunnableScheduledFuture&lt;?&gt; task) {\n    // 判断当前线程池状态是否可以运行周期性任务\n    if (canRunInCurrentRunState(true)) {\n        // 任务重新入队\n        super.getQueue().add(task);\n        /**\n         * 重新检查当前线程池状态是否可以运行周期性任务，如果不行就从队列中移除任务\n         * 并取消任务的执行\n         */\n        if (!canRunInCurrentRunState(true) &amp;&amp; remove(task))\n            task.cancel(false);\n        else\n            // 如果可以运行就预启动Worker线程\n            ensurePrestart();\n    }\n}</code></pre>\n<p>这里的outerTask在提交重复性任务的时候直接指向了装饰后的任务本身，大家可以回顾之前的代码。该方法也非常简单，在线程池状态符合条件时将任务重新入队，并进行重新检查，如果符合运行条件将预启动Worker线程，接下来任务的运行就和上面讲解的一样了：DelayedWorkQueue队列中任务的延迟出队、出队后执行任务、任务执行完后再次添加新一次的任务，循环往复以实现任务的重复执行。</p>\n<h2 id=\"-\">任务的取消</h2>\n<p>在线程池状态不满足任务运行时，任务会从等待队列中移除，并且调用任务的cancel(boolean mayInterruptIfRunning)方法取消运行，该方法源码如下：</p>\n<pre><code class=\"language-java\">// 取消任务的执行\npublic boolean cancel(boolean mayInterruptIfRunning) {\n    // 调用父类方法取消任务的执行\n    boolean cancelled = super.cancel(mayInterruptIfRunning);\n    // 如果取消成功，且removeOnCancel策略为true，任务的heapIndex大于等于0\n    if (cancelled &amp;&amp; removeOnCancel &amp;&amp; heapIndex &gt;= 0)\n        // 则将任务从队列中移除\n        remove(this);\n    // 返回是否取消成功的结果\n    return cancelled;\n}</code></pre>\n<p>代码比较简单，调用了父类FutureTask的cancel(boolean mayInterruptIfRunning)方法，内部会根据传入参数决定是否对任务线程进行中断。在任务成功取消后，会根据removeOnCancel和heapIndex决定是否将任务从队列中移除。这里讲解一下removeOnCancel成员变量，它属于ScheduledThreadPoolExecutor类，用于控制任务在取消时是否从队列移除，默认为false，定义如下：</p>\n<pre><code class=\"language-java\">\n/**\n * True if ScheduledFutureTask.cancel should remove from queue\n * 当该值为true时，表示ScheduledFutureTask的cancel()方法应该将ScheduledFutureTask从队列中移除\n */\nprivate volatile boolean removeOnCancel = false;</code></pre>\n<h2 id=\"-\">线程池关闭</h2>\n<p>ScheduledThreadPoolExecutor重写了ThreadPoolExecutor提供的钩子方法onShutdown()，用于在线程池关闭时对任务进行策略性清理，源码如下：</p>\n<pre><code class=\"language-java\">@Override void onShutdown() {\n    // 获取等待队列\n    BlockingQueue&lt;Runnable&gt; q = super.getQueue();\n    // 获取对延时性任务和周期性任务的处理方式\n    boolean keepDelayed = getExecuteExistingDelayedTasksAfterShutdownPolicy();\n    boolean keepPeriodic = getContinueExistingPeriodicTasksAfterShutdownPolicy();\n    if (!keepDelayed &amp;&amp; !keepPeriodic) {\n        /**\n         * 如果对延时性任务和周期性任务都不做保留\n         * 则遍历整个等待队列，取消队列中的任务\n         */\n        for (Object e : q.toArray())\n            // 如果任务是RunnableScheduledFuture类型\n            if (e instanceof RunnableScheduledFuture&lt;?&gt;)\n                // 取消任务的执行\n                ((RunnableScheduledFuture&lt;?&gt;) e).cancel(false);\n        // 清理队列\n        q.clear();\n    }\n    else {\n        // Traverse snapshot to avoid iterator exceptions\n        /**\n         * 走到这里说明keepDelayed和keepPeriodic其中有一个或两个为true\n         * 遍历等待队列的所有任务\n         */\n        for (Object e : q.toArray()) {\n            // 如果任务是RunnableScheduledFuture类型\n            if (e instanceof RunnableScheduledFuture) {\n                // 强转\n                RunnableScheduledFuture&lt;?&gt; t = (RunnableScheduledFuture&lt;?&gt;)e;\n                /**\n                 * 根据任务情况进行相应的判断\n                 * 如果是周期性任务，根据keepPeriodic来判断\n                 * 如果是延时性任务，根据keepDelayed来判断\n                 * 或者任务已经被取消了，也应该从队列中移除\n                 */\n                if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) || t.isCancelled()) { // also remove if already cancelled\n                    // 从队列中移除任务\n                    if (q.remove(t))\n                        // 移除成功后对任务进行取消\n                        t.cancel(false);\n                }\n            }\n        }\n    }\n    // 尝试终止线程池\n    tryTerminate();\n}</code></pre>\n<p>该方法实现中，会根据continueExistingPeriodicTasksAfterShutdown和executeExistingDelayedTasksAfterShutdown两个策略决定是否取消和清理相应的任务。</p>\n',9,1,2,NULL,'2019-11-10 07:50:14','2019-11-10 09:20:56',0,'9,14,41',1,0);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `book`
--

DROP TABLE IF EXISTS `book`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `book` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(100) DEFAULT NULL COMMENT '标题',
  `cover` varchar(255) DEFAULT NULL COMMENT '封面',
  `author` varchar(50) DEFAULT NULL COMMENT '作者',
  `category_id` varchar(20) DEFAULT NULL COMMENT '分类类别',
  `recommend` tinyint(1) DEFAULT '0' COMMENT '是否推荐',
  `publisher` varchar(100) DEFAULT NULL COMMENT '出版社',
  `publish_date` date DEFAULT NULL COMMENT '出版日期',
  `page_num` int(11) DEFAULT NULL COMMENT '页数',
  `grade` double DEFAULT NULL COMMENT '评分',
  `description` text COMMENT '简介',
  `catalogue` text COMMENT '原书目录',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `read_num` int(11) DEFAULT '0' COMMENT '阅读量',
  `like_num` int(11) DEFAULT '0' COMMENT '点赞量',
  `publish` tinyint(1) DEFAULT '0' COMMENT '是否发布',
  `progress` int(11) DEFAULT '0' COMMENT '读书状态',
  `reading` tinyint(1) DEFAULT NULL COMMENT '是否阅读',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COMMENT='图书表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `book`
--

LOCK TABLES `book` WRITE;
/*!40000 ALTER TABLE `book` DISABLE KEYS */;
INSERT INTO `book` VALUES (1,'深入理解Java虚拟机（第2版）','http://oss.dblearn.cn/dbblog/20190303/01c91a28bf944010ade45fd876e94b8c.jpg','周志明','4,5,6',1,'机械工业出版社','2013-09-01',1,4.5,'<p class=\"ql-align-justify\">周志明，资深Java技术专家，对JavaEE企业级应用开发、OSGi、Java虚拟机和工作流等都有深入的研究，并在大量的实践中积累了丰富的经验。尤其精通Java虚拟机，撰写了大量与JVM相关的经典文章，被各大技术社区争相转载，是ITeye等技术社区公认的Java虚拟机方面的领袖人物之一。除本书外，还著有经典著作《深入理解OSGi：Equinox原理、应用与最佳实践》，广获读者好评。现任远光软件股份有限公司开发部总经理兼架构师，先后参与过国家电网、南方电网等多个国家级大型ERP项目的平台架构工作，对软件系统架构也有深刻的认识和体会。</p><p class=\"ql-align-justify\">《深入理解Java虚拟机:JVM高级特性与最佳实践(第2版)》内容简介：第1版两年内印刷近10次，4家网上书店的评论近4?000条，98%以上的评论全部为5星级的好评，是整个Java图书领域公认的经典著作和超级畅销书，繁体版在台湾也十分受欢迎。第2版在第1版的基础上做了很大的改进：根据最新的JDK 1.7对全书内容进行了全面的升级和补充；增加了大量处理各种常见JVM问题的技巧和最佳实践；增加了若干与生产环境相结合的实战案例；对第1版中的错误和不足之处的修正；等等。第2版不仅技术更新、内容更丰富，而且实战性更强。</p><p class=\"ql-align-justify\">《深入理解Java虚拟机:JVM高级特性与最佳实践(第2版)》共分为五大部分，围绕内存管理、执行子系统、程序编译与优化、高效并发等核心主题对JVM进行了全面而深入的分析，深刻揭示了JVM的工作原理。</p><p class=\"ql-align-justify\">第一部分从宏观的角度介绍了整个Java技术体系、Java和JVM的发展历程、模块化，以及JDK的编译，这对理解书中后面内容有重要帮助。</p><p class=\"ql-align-justify\">第二部分讲解了JVM的自动内存管理，包括虚拟机内存区域的划分原理以及各种内存溢出异常产生的原因；常见的垃圾收集算法以及垃圾收集器的特点和工作原理；常见虚拟机监控与故障处理工具的原理和使用方法。</p><p class=\"ql-align-justify\">第三部分分析了虚拟机的执行子系统，包括类文件结构、虚拟机类加载机制、虚拟机字节码执行引擎。</p><p class=\"ql-align-justify\">第四部分讲解了程序的编译与代码的优化，阐述了泛型、自动装箱拆箱、条件编译等语法糖的原理；讲解了虚拟机的热点探测方法、HotSpot的即时编译器、编译触发条件，以及如何从虚拟机外部观察和分析JIT编译的数据和结果；</p><p class=\"ql-align-justify\">第五部分探讨了Java实现高效并发的原理，包括JVM内存模型的结构和操作；原子性、可见性和有序性在Java内存模型中的体现；先行发生原则的规则和使用；线程在Java语言中的实现原理；虚拟机实现高效并发所做的一系列锁优化措施。</p>','<p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">前言</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第一部分走近Java</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第1章走近Java2</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.1概述2</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.2Java技术体系3</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.3Java发展史5</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.4Java虚拟机发展史9</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.4.1SunClassicExactVM9</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.4.2SunHotSpotVM11</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.4.3SunMobile—EmbeddedVMMeta—CircularVM12</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.4.4BEAJRockitIBMJ9VM13</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.4.5AzulVMBEALiquidVM14</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.4.6ApacheHarmonyGoogleAndroidDalvikVM14</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.4.7MicrosoftJVM及其他15</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.5展望Java技术的未来16</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.5.1模块化17</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.5.2混合语言17</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.5.3多核并行19</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.5.4进一步丰富语法20</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.5.564位虚拟机21</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.6实战：自己编译JDK22</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.6.1获取JDK源码22</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.6.2系统需求24</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.6.3构建编译环境25</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.6.4进行编译26</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.6.5在IDE工具中进行源码调试31</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">1.7本章小结35</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第二部分自动内存管理机制</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第2章Java内存区域与内存溢出异常38</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.1概述38</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.2运行时数据区域38</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.2.1程序计数器39</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.2.2Java虚拟机栈39</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.2.3本地方法栈40</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.2.4Java堆41</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.2.5方法区41</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.2.6运行时常量池42</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.2.7直接内存43</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.3HotSpot虚拟机对象探秘43</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.3.1对象的创建44</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.3.2对象的内存布局47</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.3.3对象的访问定位48</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.4实战：OutOfMemoryError异常50</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.4.1Java堆溢出51</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.4.2虚拟机栈和本地方法栈溢出53</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.4.3方法区和运行时常量池溢出56</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.4.4本机直接内存溢出59</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">2.5本章小结60</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第3章垃圾收集器与内存分配策略61</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.1概述61</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.2对象已死吗62</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.2.1引用计数算法62</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.2.2可达性分析算法64</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.2.3再谈引用65</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.2.4生存还是死亡66</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.2.5回收方法区68</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.3垃圾收集算法69</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.3.1标记—清除算法69</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.3.2复制算法70</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.3.3标记—整理算法71</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.3.4分代收集算法72</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.4HotSpot的算法实现72</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.4.1枚举根节点72</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.4.2安全点73</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.4.3安全区域74</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.5垃圾收集器75</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.5.1Serial收集器76</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.5.2ParNew收集器77</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.5.3ParallelScavenge收集器79</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.5.4SerialOld收集器80</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.5.5ParallelOld收集器80</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.5.6CMS收集器81</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.5.7G1收集器84</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.5.8理解GC日志89</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.5.9垃圾收集器参数总结90</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.6内存分配与回收策略91</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.6.1对象优先在Eden分配91</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.6.2大对象直接进入老年代93</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.6.3长期存活的对象将进入老年代95</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.6.4动态对象年龄判定97</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.6.5空间分配担保98</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">3.7本章小结100</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第4章虚拟机性能监控与故障处理工具101</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.1概述101</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.2JDK的命令行工具101</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.2.1jps：虚拟机进程状况工具104</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.2.2jstat：虚拟机统计信息监视工具105</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.2.3jinfo：Java配置信息工具106</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.2.4jmap：Java内存映像工具107</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.2.5jhat：虚拟机堆转储快照分析工具108</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.2.6jstack：Java堆栈跟踪工具109</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.2.7HSDIS：JIT生成代码反汇编111</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.3JDK的可视化工具114</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.3.1JConsole：Java监视与管理控制台115</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.3.2VisualVM：多合一故障处理工具122</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">4.4本章小结131</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第5章调优案例分析与实战132</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.1概述132</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.2案例分析132</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.2.1高性能硬件上的程序部署策略132</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.2.2集群间同步导致的内存溢出135</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.2.3堆外内存导致的溢出错误136</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.2.4外部命令导致系统缓慢137</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.2.5服务器JVM进程崩溃138</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.2.6不恰当数据结构导致内存占用过大139</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.2.7由Windows虚拟内存导致的长时间停顿141</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.3实战：Eclipse运行速度调优142</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.3.1调优前的程序运行状态142</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.3.2升级JDK1.6的性能变化及兼容问题145</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.3.3编译时间和类加载时间的优化150</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.3.4调整内存设置控制垃圾收集频率153</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.3.5选择收集器降低延迟157</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">5.4本章小结160</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第三部分虚拟机执行子系统</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第6章类文件结构162</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.1概述162</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.2无关性的基石162</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.3Class类文件的结构164</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.3.1魔数与Class文件的版本166</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.3.2常量池167</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.3.3访问标志173</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.3.4类索引、父类索引与接口索引集合174</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.3.5字段表集合175</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.3.6方法表集合178</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.3.7属性表集合180</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4字节码指令简介196</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4.1字节码与数据类型197</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4.2加载和存储指令199</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4.3运算指令200</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4.4类型转换指令202</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4.5对象创建与访问指令203</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4.6操作数栈管理指令203</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4.7控制转移指令204</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4.8方法调用和返回指令204</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4.9异常处理指令205</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.4.10同步指令205</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.5公有设计和私有实现206</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.6Class文件结构的发展207</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">6.7本章小结208</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第7章虚拟机类加载机制209</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.1概述209</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.2类加载的时机210</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.3类加载的过程214</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.3.1加载214</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.3.2验证216</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.3.3准备219</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.3.4解析220</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.3.5初始化225</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.4类加载器227</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.4.1类与类加载器228</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.4.2双亲委派模型229</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.4.3破坏双亲委派模型233</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">7.5本章小结235</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第8章虚拟机字节码执行引擎236</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.1概述236</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.2运行时栈帧结构236</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.2.1局部变量表238</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.2.2操作数栈242</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.2.3动态连接243</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.2.4方法返回地址243</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.2.5附加信息244</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.3方法调用244</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.3.1解析244</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.3.2分派246</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.3.3动态类型语言支持258</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.4基于栈的字节码解释执行引擎269</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.4.1解释执行269</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.4.2基于栈的指令集与基于寄存器的指令集270</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.4.3基于栈的解释器执行过程272</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">8.5本章小结275</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第9章类加载及执行子系统的案例与实战276</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.1概述276</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.2案例分析276</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.2.1Tomcat：正统的类加载器架构276</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.2.2OSGi：灵活的类加载器架构279</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.2.3字节码生成技术与动态代理的实现282</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.2.4Retrotranslator：跨越JDK版本286</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.3实战：自己动手实现远程执行功能289</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.3.1目标290</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.3.2思路290</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.3.3实现291</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.3.4验证298</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">9.4本章小结299</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第四部分程序编译与代码优化</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第10章早期（编译期）优化302</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.1概述302</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.2Javac编译器303</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.2.1Javac的源码与调试303</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.2.2解析与填充符号表305</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.2.3注解处理器307</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.2.4语义分析与字节码生成307</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.3Java语法糖的味道311</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.3.1泛型与类型擦除311</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.3.2自动装箱、拆箱与遍历循环315</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.3.3条件编译317</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.4实战：插入式注解处理器318</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.4.1实战目标318</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.4.2代码实现319</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.4.3运行与测试326</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.4.4其他应用案例327</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">10.5本章小结328</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第11章晚期（运行期）优化329</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.1概述329</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.2HotSpot虚拟机内的即时编译器329</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.2.1解释器与编译器330</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.2.2编译对象与触发条件332</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.2.3编译过程337</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.2.4查看及分析即时编译结果339</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.3编译优化技术345</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.3.1优化技术概览346</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.3.2公共子表达式消除350</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.3.3数组边界检查消除351</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.3.4方法内联352</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.3.5逃逸分析354</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.4Java与C/C++的编译器对比356</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">11.5本章小结358</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第五部分高效并发</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第12章Java内存模型与线程360</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.1概述360</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.2硬件的效率与一致性361</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.3Java内存模型362</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.3.1主内存与工作内存363</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.3.2内存间交互操作364</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.3.3对于volatile型变量的特殊规则366</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.3.4对于long和double型变量的特殊规则372</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.3.5原子性、可见性与有序性373</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.3.6先行发生原则375</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.4Java与线程378</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.4.1线程的实现378</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.4.2Java线程调度381</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.4.3状态转换383</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">12.5本章小结384</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">第13章线程安全与锁优化385</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.1概述385</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.2线程安全385</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.2.1Java语言中的线程安全386</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.2.2线程安全的实现方法390</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.3锁优化397</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.3.1自旋锁与自适应自旋398</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.3.2锁消除398</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.3.3锁粗化400</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.3.4轻量级锁400</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.3.5偏向锁402</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">13.4本章小结403</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">附录</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">附录A编译Windows版的OpenJDK406</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">附录B虚拟机字节码指令表414</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">附录CHotSpot虚拟机主要参数表420</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">附录D对象查询语言（OQL）简介424</span></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(250, 250, 250);\">附录EJDK历史版本轨迹430</span></p>','2019-03-03 15:33:11','2019-03-03 23:33:11',536,16,1,100,1),(2,'剑指Offer','http://oss.dblearn.cn/dbblog/20190410/1ef815dc6f1944c98b11db41f3c61cc2.png','何海涛','27,28,29',0,'电子工业出版社','2012-01-01',0,4,'<p>	<span style=\"color: rgb(51, 51, 51);\">《剑指O</span>ffer:名企面试官精讲典型编程题》剖析了50个典型的<span style=\"background-color: rgb(255, 255, 255);\">程序员</span>面试题，从基础知识、代码质量、解题思路、优化效率和综合能力五个方面系统整理了影响面试的5个要点。全书分为7章，主要包括面试的流程，讨论面试流程中每一环节需要注意的问题；面试需要的基础知识，从编程语言、数据结构及算法三方面总结了程序员面试的知识点；高质量的代码，讨论影响代码质量的3个要素（规范性、完整性和<span style=\"background-color: rgb(255, 255, 255);\">鲁棒性</span>	），强调高质量的代码除了能够完成基本的功能之外，还能考虑到特殊情况并对非法输入进行合理的处理；解决面试题的思路，总结在编程面试中解决难题的常用思路，如果在面试过程中遇到了复杂的难题，应聘者可以利用画图、举例和分解复杂问题3种方法化繁为简，先形成清晰的思路再动手编程；优化时间和空间效率，介绍如何优化代码的时间效率和空间效率，读完这一章读者将学会常用的优化时间效率及空间换时间的常用算法，从而在面试中找到最优的解法；面试中的各种能力，本章总结应聘者在面试过程中如何表现学习能力和<span style=\"background-color: rgb(255, 255, 255);\">沟通能力</span>，并通过具体的面试题讨论如何培养<span style=\"background-color: rgb(255, 255, 255);\">知识迁移</span>能力、抽象建模能力和<span style=\"background-color: rgb(255, 255, 255);\">发散思维</span>能力；两个面试案例，这两个案例总结了应聘者在面试过程中哪些举动是不好的行为，而哪些表现又是<span style=\"background-color: rgb(255, 255, 255);\">面试官</span>所期待的行为。</p>','<p> 第1章 面试的流程</p><p> 1.1 面试官谈面试</p><p> 1.2 面试的三种形式</p><p> 1.2.1 电话面试</p><p> 1.2.2 共享桌面远程面试</p><p> 1.2.3 现场面试</p><p> 1.3 面试的三个环节</p><p> 1.3.1 行为面试环节</p><p> 应聘者的项目经验</p><p> 应聘者掌握的技能</p><p> 回答\"为什么跳槽\"</p><p> 1.3.2 技术面试环节</p><p> 扎实的基础知识</p><p> 高质量的代码</p><p> 清晰的思路</p><p> 优化效率的能力</p><p> 优秀的综合能力</p><p> 1.3.3 应聘者提问环节</p><p> 1.4 本章小结</p><p><br></p><p> 第2章 面试需要的基础知识</p><p> 2.1 面试官谈基础知识</p><p> 2.2 编程语言</p><p> 2.2.1 C++</p><p> 面试题1：赋值运算符函数</p><p> 经典的解法，适用于初级程序员</p><p> 考虑异常安全性的解法，高级程序员必备</p><p> 2.2.2 C#</p><p> 面试题2：实现Singleton模式</p><p> 不好的解法一：只适用于单线程</p><p> 不好的解法二：可用于多线程但效率不高</p><p> 可行的解法：同步锁前后两次判断</p><p> 推荐的解法一：利用静态构造函数</p><p> 推荐的解法二：按需创建实例</p><p> 解法比较</p><p> 2.3 数据结构</p><p> 2.3.1 数组</p><p> 面试题3：二维数组中的查找</p><p> 2.3.2 字符串</p><p> 面试题4：替换空格</p><p> O(n2)的解法，不足以拿到Offer</p><p> O(n)的解法，搞定Offer就靠它</p><p> 2.3.3 链表</p><p> 面试题5：从尾到头打印链表</p><p> 2.3.4 树</p><p> 面试题6：重建二叉树</p><p> 2.3.5 栈和队列</p><p> 面试题7：用两个栈实现队列</p><p> 2.4 算法和数据操作</p><p> 2.4.1 查找和排序</p><p> 面试题8：旋转数组的最小数字</p><p> 2.4.2 递归和循环</p><p> 面试题9：斐波那契数列</p><p> 效率很低的解法，面试官不会喜欢</p><p> 面试官期待的实用解法</p><p> O(logn)但不够实用的解法</p><p> 解法比较</p><p> 2.4.3 位运算</p><p> 面试题10：二进制中1的个数</p><p> 可能引起死循环的解法</p><p> 常规解法</p><p> 能给面试官带来惊喜的解法</p><p> 2.5 本章小结</p><p><br></p><p> 第3章 高质量的代码</p><p> 3.1 面试官谈代码质量</p><p> 3.2 代码的规范性</p><p> 3.3 代码的完整性</p><p> 从3方面确保代码的完整性</p><p> 3种错误处理的方法</p><p> 面试题11：数值的整数次方</p><p> 自以为题目简单的解法</p><p> 全面但不够高效的解法，离Offer已经很近了</p><p> 全面又高效的解法，确保能拿到Offer</p><p> 面试题12：打印1到最大的n位数</p><p> 跳进面试官陷阱</p><p> 在字符串上模拟数字加法</p><p> 把问题转换成数字排列</p><p> 面试题13：在O(1)时间删除链表结点</p><p> 面试题14：调整数组顺序使奇数位于偶数前面</p><p> 只完成基本功能的解法，仅适用于初级程序员</p><p> 考虑可扩展性的解法，能秒杀Offer</p><p> 3.4 代码的鲁棒性</p><p> 面试题15：链表中倒数</p><p> 第k个结点</p><p> 面试题16：反转链表</p><p> 面试题17：合并两个排序的链表</p><p> 面试题18：树的子结构</p><p> 3.5 本章小结</p><p><br></p><p> 第4章 解决面试题的思路</p><p> 4.1 面试官谈面试思路</p><p> 面试题19：二叉树的镜像</p><p> 4.2 画图让抽象问题形象化</p><p> 面试题20：顺时针打印矩阵</p><p> 4.3 举例让抽象问题具体化</p><p> 面试题21：包含min函数的栈</p><p> 面试题22：栈的压入、弹出序列</p><p> 面试题23：从上往下打印二叉树</p><p> 面试题24：二叉搜索树的后序遍历序列</p><p> 面试题25：二叉树中和为某一值的路径</p><p> 4.4 分解让复杂问题简单化</p><p> 面试题26：复杂链表的复制</p><p> 面试题27：二叉搜索树与双向链表</p><p> 面试题28：字符串的排列</p><p> 4.5 本章小结</p><p><br></p><p> 第5章 优化时间和空间效率</p><p> 5.1 面试官谈效率</p><p> 5.2 时间效率</p><p> 面试题29：数组中出现次数超过一半的数字</p><p> 基于Partition函数的O(n)算法</p><p> 利用数组特点的O(n)算法</p><p> 解法比较</p><p> 面试题30：最小的k个数</p><p> O(n)的算法，只当可以修改输入数组时可用</p><p> O(nlogk)的算法，适合处理海量数据</p><p> 解法比较</p><p> 面试题31：连续子数组的最大和</p><p> 举例分析数组的规律</p><p> 应用动态规划法</p><p> 面试题32：从1到n整数中1出现的次数</p><p> 不考虑效率的解法，想拿Offer有点难</p><p> 明显提高效率的解法，让面试官耳目一新</p><p> 面试题33：把数组排成最小的数</p><p> 5.3 时间效率与空间效率的平衡</p><p> 面试题34：丑数</p><p> 逐个判断整数是不是丑数的解法</p><p> 创建数组保存已经找到的丑数的解法</p><p> 面试题35：</p><p> 第一个只出现一次的字符</p><p> 面试题36：数组中的逆序对</p><p> 面试题37：两个链表的</p><p> 第一个公共结点</p><p> 5.4 本章小结</p><p><br></p><p> 第6章 面试中的各项能力</p><p> 6.1 面试官谈能力</p><p> 6.2 沟通能力和学习能力</p><p> 沟通能力</p><p> 学习能力</p><p> 善于学习、沟通的人也善于提问</p><p> 6.3 知识迁移能力</p><p> 面试题38：数字在排序数组中出现的次数</p><p> 面试题39：二叉树的深度</p><p> 重复遍历结点的解法，不足以打动面试官</p><p> 只遍历结点一次的解法，正是面试官喜欢的</p><p> 面试题40：数组中只出现一次的数字</p><p> 面试题41：和为s的两个数字VS和为s的连续正数序列</p><p> 面试题42：翻转单词顺序 VS左旋转字符串</p><p> 6.4 抽象建模能力</p><p> 面试题43：n个骰子的点数</p><p> 基于递归求骰子点数，时间效率不够高</p><p> 基于循环求骰子点数，时间性能好</p><p> 面试题44：扑克牌的顺子</p><p> 面试题45：圆圈中最后剩下的数字</p><p> 经典的解法，用循环链表模拟圆圈</p><p> 创新的解法，拿到Offer不在话下</p><p> 6.5 发散思维能力</p><p> 面试题46：求1+2+…+n</p><p> 利用构造函数求解</p><p> 利用虚函数求解</p><p> 利用函数指针求解</p><p> 利用模板类型求解</p><p> 面试题47：不用加减乘除做加法</p><p> 面试题48：不能被继承的类</p><p> 常规的解法：把构造函数设为私有函数</p><p> 新奇的解法：利用虚拟继承</p><p> 6.6 本章小结</p><p><br></p><p> 第7章 两个面试案例</p><p> 7.1 案例一：（面试题49）把字符串转换成整数</p><p> 7.2 案例二：（面试题50）树中两个结点的最低公共祖先</p><p><br></p><p>	第8章 英文版新增面试题</p><p> 8.1 数组</p><p> 面试题51：数组中重复的数字</p><p> 面试题52：构建乘积数组</p><p> 8.2 字符串</p><p> 面试题53：正则表达式匹配</p><p> 面试题54：表示数值的字符串</p><p> 面试题55：字符流中</p><p> 第一个不重复的字符</p><p> 8.3 链表</p><p> 面试题56：链表中环的入口结点</p><p> 面试题57：删除链表中重复的结点</p><p> 8.4 树</p><p> 面试题58：二叉树的下一个结点</p><p> 面试题59：对称的二叉树</p><p> 面试题60：把二叉树打印成多行</p><p> 面试题61：按之字形顺序打印二叉树</p><p> 面试题62：序列化二叉树</p><p> 面试题63：二叉搜索树的</p><p> 第k个结点</p><p> 面试题64：数据流中的中位数</p><p> 8.5 栈和队列</p><p> 面试题65：滑动窗口的最大值</p><p> 8.6 回溯法</p><p> 面试题66：矩阵中的路径</p><p> 面试题67：机器人的运动范围</p>','2019-04-10 03:21:09','2019-04-10 11:21:09',171,15,1,10,0),(3,'Java多线程编程核心技术','http://oss.dblearn.cn/dbblog/20190424/feb067d7c05b48aab5c3159894847bd7.jpg','高洪岩','4,5,30',0,'机械工业出版社','2015-06-01',0,3,'<p>资深Java专家10年经验总结，全程案例式讲解，首本全面介绍Java多线程编程技术的专著</p><p>结合大量实例，全面讲解Java多线程编程中的并发访问、线程间通信、锁等最难突破的核心技术与应用实践。</p>','<h4><span style=\"color: rgb(51, 51, 51);\">前言</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">第1章　Java多线程技能</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.1　进程和多线程的概念及线程的优点</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.2　使用多线程</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.2.1　继承Thread类</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.2.2　实现Runnable接口</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.2.3　实例变量与线程安全</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.2.4　留意i--与System.out.println（）的异常</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.3　currentThread（）方法</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.4　isAlive（）方法</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.5　sleep（）方法</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.6　getId（）方法</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.7　停止线程</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.7.1　停止不了的线程</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.7.2　判断线程是否是停止状态</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.7.3　能停止的线程——异常法</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.7.4　在沉睡中停止</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.7.5　能停止的线程——暴力停止</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.7.6　方法stop（）与java.lang.ThreadDeath异常</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.7.7　释放锁的不良后果</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.7.8　使用return停止线程</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.8　暂停线程</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.8.1　suspend与resume方法的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.8.2　suspend与resume方法的缺点——独占</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.8.3　suspend与resume方法的缺点——不同步</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.9　yield方法</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.10　线程的优先级</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.10.1　线程优先级的继承特性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.10.2　优先级具有规则性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.10.3　优先级具有随机性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.10.4　看谁运行得快</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.11　守护线程</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">1.12　本章小结</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">第2章　对象及变量的并发访问</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.1　synchronized同步方法</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.1.1　方法内的变量为线程安全</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.1.2　实例变量非线程安全</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.1.3　多个对象多个锁</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.1.4　synchronized方法与锁对象</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.1.5　脏读</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.1.6　synchronized锁重入</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.1.7　出现异常，锁自动释放</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.1.8　同步不具有继承性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2　synchronized同步语句块</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.1　synchronized方法的弊端</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.2　synchronized同步代码块的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.3　用同步代码块解决同步方法的弊端</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.4　一半异步，一半同步</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.5　synchronized代码块间的同步性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.6　验证同步synchronized（this）代码块是锁定当前对象的</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.7　将任意对象作为对象监视器</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.8　细化验证3个结论</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.9　静态同步synchronized方法与synchronized（class）代码块</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.10　数据类型String的常量池特性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.11　同步synchronized方法无限等待与解决</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.12　多线程的死锁</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.13　内置类与静态内置类</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.14　内置类与同步：实验1</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.15　内置类与同步：实验2</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.2.16　锁对象的改变</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.3　volatile关键字</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.3.1　关键字volatile与死循环</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.3.2　解决同步死循环</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.3.3　解决异步死循环</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.3.4　volatile非原子的特性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.3.5　使用原子类进行i++操作</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.3.6　原子类也并不完全安全</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.3.7　synchronized代码块有volatile同步的功能</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">2.4　本章总结</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">第3章　线程间通信</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1　等待/通知机制</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.1　不使用等待/通知机制实现线程间通信</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.2　什么是等待/通知机制</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.3　等待/通知机制的实现</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.4　方法wait（）锁释放与notify（）锁不释放</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.5　当interrupt方法遇到wait方法</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.6　只通知一个线程</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.7　唤醒所有线程</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.8　方法wait（long）的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.9　通知过早</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.10　等待wait的条件发生变化</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.11　生产者/消费者模式实现</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.12　通过管道进行线程间通信：字节流</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.13　通过管道进行线程间通信：字符流</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.1.14　实战：等待/通知之交叉备份</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.2　方法join的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.2.1　学习方法join前的铺垫</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.2.2　用join（）方法来解决</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.2.3　方法join与异常</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.2.4　方法join（long）的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.2.5　方法join（long）与sleep（long）的区别</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.2.6　方法join（）后面的代码提前运行：出现意外</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.2.7　方法join（）后面的代码提前运行：解释意外</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.3　类ThreadLocal的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.3.1　方法get（）与null</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.3.2　验证线程变量的隔离性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.3.3　解决get（）返回null问题</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.3.4　再次验证线程变量的隔离性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.4　类InheritableThreadLocal的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.4.1　值继承</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.4.2　值继承再修改</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">3.5　本章总结</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">第4章　Lock的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1　使用ReentrantLock类</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.1　使用ReentrantLock实现同步：测试1</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.2　使用ReentrantLock实现同步：测试2</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.3　使用Condition实现等待/通知：错误用法与解决</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.4　正确使用Condition实现等待/通知</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.5　使用多个Condition实现通知部分线程：错误用法</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.6　使用多个Condition实现通知部分线程：正确用法</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.7　实现生产者/消费者模式：一对一交替打印</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.8　实现生产者/消费者模式：多对多交替打印</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.9　公平锁与非公平锁</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.10　方法getHoldCount（）、getQueueLength（）和getWaitQueueLength（）的测试</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.11　方法hasQueuedThread（）、hasQueuedThreads（）和hasWaiters（）的测试</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.12　方法isFair（）、isHeldByCurrentThread（）和isLocked（）的测试</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.13　方法lockInterruptibly（）、tryLock（）和tryLock（long timeout，TimeUnit unit）的测试</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.14　方法awaitUninterruptibly（）的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.15　方法awaitUntil（）的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.1.16　使用Condition实现顺序执行</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.2　使用ReentrantReadWriteLock类</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.2.1　类ReentrantReadWriteLock的使用：读读共享</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.2.2　类ReentrantReadWriteLock的使用：写写互斥</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.2.3　类ReentrantReadWriteLock的使用：读写互斥</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.2.4　类ReentrantReadWriteLock的使用：写读互斥</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">4.3　本章总结</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">第5章　定时器Timer</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">5.1　定时器Timer的使用</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">5.1.1　方法schedule（TimerTask task，Date time）的测试</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">5.1.2　方法schedule（TimerTask task，Date firstTime，long period）的测试</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">5.1.3　方法schedule（TimerTask task，long delay）的测试</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">5.1.4　方法schedule（TimerTask task，long delay，long period）的测试</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">5.1.5　方法scheduleAtFixedRate（TimerTask task，Date firstTime，long period）的测试</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">5.2　本章总结</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">第6章　单例模式与多线程</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">6.1　立即加载/“饿汉模式”</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">6.2　延迟加载/“懒汉模式”</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">6.3　使用静态内置类实现单例模式</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">6.4　序列化与反序列化的单例模式实现</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">6.5　使用static代码块实现单例模式</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">6.6　使用enum枚举数据类型实现单例模式</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">6.7　完善使用enum枚举实现单例模式</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">6.8　本章总结</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">第7章　拾遗增补</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.1　线程的状态</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.1.1　验证NEW、RUNNABLE和TERMINATED</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.1.2　验证TIMED_WAITING</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.1.3　验证BLOCKED</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.1.4　验证WAITING</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.2　线程组</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.2.1　线程对象关联线程组：1级关联</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.2.2　线程对象关联线程组：多级关联</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.2.3　线程组自动归属特性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.2.4　获取根线程组</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.2.5　线程组里加线程组</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.2.6　组内的线程批量停止</span></h4><h4><span style=\"color: rgb(17, 17, 17);\">7.2.7　递归与非递归取得组内对象</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.3　使线程具有有序性</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.4　SimpleDateFormat非线程安全</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.4.1　出现异常</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.4.2　解决异常方法1</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.4.3　解决异常方法2</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.5　线程中出现异常的处理</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.6　线程组内处理异常</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.7　线程异常处理的传递</span></h4><h4><span style=\"color: rgb(51, 51, 51);\">7.8　本章总结</span></h4>','2019-04-24 12:21:49','2019-04-24 20:21:49',107,2,1,100,NULL);
/*!40000 ALTER TABLE `book` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `book_note`
--

DROP TABLE IF EXISTS `book_note`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `book_note` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(50) NOT NULL COMMENT '笔记标题',
  `description` varchar(255) DEFAULT NULL COMMENT '笔记描述',
  `author` varchar(50) DEFAULT NULL COMMENT '笔记作者',
  `content` longtext COMMENT '笔记内容',
  `content_format` longtext COMMENT 'html的context',
  `read_num` int(11) DEFAULT '0' COMMENT '阅读量',
  `like_num` int(11) DEFAULT '0' COMMENT '点赞量',
  `cover` text COMMENT '封面',
  `book_id` int(11) DEFAULT NULL COMMENT '所属书本',
  `chapter` varchar(255) DEFAULT NULL COMMENT '所属章节',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `recommend` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否推荐笔记',
  `category_id` varchar(50) DEFAULT NULL COMMENT '分类类别存在多级分类，用逗号隔开',
  `publish` tinyint(4) DEFAULT '0' COMMENT '发布状态',
  `cover_type` int(11) DEFAULT NULL COMMENT '封面类型',
  `top` tinyint(1) DEFAULT NULL COMMENT '是否置顶',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COMMENT='笔记';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `book_note`
--

LOCK TABLES `book_note` WRITE;
/*!40000 ALTER TABLE `book_note` DISABLE KEYS */;
INSERT INTO `book_note` VALUES (1,'Java虚拟机01——Java内存数据区域和内存溢出异常','Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁.','Bobbi','## 运行时数据区域\nJava虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。根据《Java虚拟机规范（Java SE 7版）》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如下图所示：\n\n![内存模型.jpeg](http://oss.dblearn.cn/dbblog/20190329/bb2cdd52191d44ada5a420afec9f6d98.jpeg)\n\n我们可以将上面的数据区域分为线程独有、线程共享及其他三大区域：\n### 1.1. 线程独有的数据区域\n\n#### 1. 程序计数器（Program Counter Register）\n1. 当前线程所执行的字节码的行号指示器。\n2. 用于选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复需要依赖这个计数\n\n#### 2. 虚拟机栈（Java Stack）\n- 位于线程私有的内存中，生命周期与线程相同。\n- 描述了Java方法执行的内存模型。\n- 方法执行时使用栈帧（Stack Frame）来存储局部变量表、操作数栈、动态链接、方法出口等信息。\n- 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出**StackOverflowError**异常。\n- 如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出**OutOfMemoryError**异常。\n\n#### 3. 本地方法栈（Native Method Stack）\n- 与虚拟机栈相类似，区域在于本地方法栈为虚拟机使用到的Native方法服务。\n- 可以由虚拟机设计者自己实现。\n- 本地方法栈区域也会抛出**StackOverflowError**和**OutOfMemoryError**异常\n\n### 1.2. 线程共享的数据区域\n#### 1. Java堆（Heap）\n- 是Java虚拟机所管理内存中最大的一块，在虚拟机启动时创建。\n- 在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术导致某些对象并没有分配在堆上。\n- Java GC工作的主要区域。现代收集器基本都采用分代收集算法，所以Java堆中还可以细分为新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。\n- 如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出**OutOfMemoryError**异常。\n\n#### 2. 方法区（Method Area）【Java8中去除了永久代 // TODO】\n- 用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n- 它有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。\n- HotSpot虚拟机选择把GC分代收集扩展至方法区，即使用永久代来实现方法区，因此也有人将此区域称为“永久代”；JDK 1.7的HotSpot中，已经把原本放在永久代的字符串常量池移出，并逐步改为采用Native Memory来实现方法区的规划。\n- 根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出**OutOfMemoryError**异常。\n\n#### 3. 运行时常量池（Runtime Constant Pool）\n- 运行时常量池是方法区的一部分。\n- 用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。\n- 当常量池无法再申请到内存时会抛出**OutOfMemoryError**异常。\n\n### 1.3. 其他区域\n#### 直接内存（Direct Memory）\n- 直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。\n- 这部分内存也可能导致OutOfMemoryError异常出现。\n\n## 对象的创建\nJava是一门面向对象的语言，在Java程序运行的过程中无时不刻都有对象被创建。在语言层面，创建对象通常是一个new关键字，但是，在虚拟机中，创建对象包括如下流程：\n> 类加载 --> 分配内存 --> 内存空间初始化零值 --> 对象头设置 --> init初始化\n\n- 虚拟机遇到一个new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。\n- 在类加载通过后，接下来虚拟机将为新生对象分配内存。对象所需的内存大小在加载后就确定。\n> 分配内存的方式为：<br/>\n&emsp;&emsp;“指针碰撞”：在内存规整情况下，将指针向空闲空间挪动一段与对象大小相等的距离。<br/>\n&emsp;&emsp;“空闲列表”：在内存不规整情况下，虚拟机维护一个记录内存可用的列表，分配的时候从列表中找到一块空间划分给对象。<br/>\n> 并发情况下的内存分配：<br/>\n&emsp;&emsp;同步：对分配内存空间的动作进行同步处理———采用CAS配上失败重试的方式，保证更新操作的原子性<br/>\n&emsp;&emsp;本地线程分配缓冲(TLAB)：把内存分配动作按照线程划分在不同空间中。即每个线程在Java堆中预先分配一块内存TLAB，只有TLAB用完并重新分配新的TLAB时才需要同步。\n\n- 将分配到的内存空间都初始化零值，如int a,a默认为0，如果使用TLAB，则这个工作提前到TLAB\n- 对象头设置：对象是哪个类的实例，对象的哈希码，对象的GC分代年龄等信息。\n- 执行init方法，即执行程序定义的构造方法。\n\n## 对象的内存布局\n在HotSpot虚拟机中，对象在内存中的存储布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对其填充（Padding）\n- 对象头：<br>\n1.用于存储对象自身运行时数据（Mark Word）：**哈希码**、**GC分代年龄**、**锁状态标志**、**线程持有锁**、**偏向线程ID**、**偏向时间戳**等。被设计成非固定的数据结构，能服用存储空间<br>\n2.类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是Java数组，还必须有一块记录数组长度的数据。\n- 实例数据: 在程序代码中定义的各种类型的字段内容。这部分的存储会周到虚拟机分配策略的影响。HotSpot虚拟机的默认分配策略：相同宽度的字段总是被分配到一起。父类中定义的变量会出现在子类前，子类中较窄的变量也可能会插入到父类变量的空隙之中。\n- 对齐填充： 仅仅起到占位符的作用。HotSpot要求对象的起始地址必须是8字节的整数倍。当对象实例数据部分没有对齐时，就需要通过对齐填充来补充。\n\n## 对象的访问定位\n建立对象是为了使用对象。我们的Java程序需要通过栈上的reference数据来操作堆上的具体对象。目前主流的访问方式有两种：句柄和直接指针。\n\n句柄：Java堆中会划分出一块内存来作为句柄池，reference中存储的就是对象的**句柄地址**。句柄中包含了对象实例数据与类型数据各自的具体地址。\n\n![句柄.jpg](http://oss.dblearn.cn/dbblog/20190329/955750a568b244b5b1a7252c7b2c20b3.jpg)\n\n直接访问：reference指针存储的直接就是对象地址\n\n![直接地址.jpg](http://oss.dblearn.cn/dbblog/20190329/1ac920ffd6a44760b6674fb94da4c63c.jpg)\n\n&emsp;&emsp;使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（如垃圾收集时）时只会改变句柄中的实例数据指针，而reference本身不需要修改\n\n&emsp;&emsp;直接访问最大的好处就是速度快。节省了一次指针定位的时间开销。HotSpot虚拟机使用第二种方式进行对象的访问。\n## OutofMemoryError异常实战\n### 堆溢出\n-Xms 堆最小值 -Xmx 堆最大值  -XX:HeapDumpOnOutOfMemoryError可以在虚拟机出现异常时将堆存储快照\n```shell\n-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError\n``` \n\n```java\npublic class HeadOOM {\n    static class OOMObject {\n    }\n    public static void main(String[] args) {\n        List<OOMObject> list = new ArrayList<>();\n        while (true) {\n            list.add(new OOMObject());\n        }\n    }\n}\n```\n运行结果:\n\n![image.png](http://oss.dblearn.cn/dbblog/20190331/3598866d1c2f4516a55243bb041b24c1.png)\n\n### 虚拟机栈和本地方法栈溢出\n-Xss 设置栈的大小\n- 如果线程请求的栈深度大于虚拟机所允许的最大深度，抛出StackOverflow异常\n- 如果虚拟机在扩展栈时无法申请到足够的空间，则抛出OutOfMemoryError异常\n\n```shell\n-Xss228k\n```\n\n``` java\npublic class JavaVMStackSOF {\n    private int stackLength = 1;\n    public void stackLeak() {\n        stackLength ++;\n        stackLeak();\n    }\n\n    public static void main(String[] args) {\n        JavaVMStackSOF stackSOF = new JavaVMStackSOF();\n        stackSOF.stackLeak();\n    }\n}\n``` \n运行结果：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190331/271f6ac25d974c168056469ac2204aea.png)\n\n实验结果表明，在单线程下，当内存无法分配的时候，虚拟机抛出的都是StackOverflow异常\n\n\n测试：创建线程导致内存溢出异常\n\n```\npublic class JavaVMStackOOM {\n    private void dontStop() {\n        while (true) {\n\n        }\n    }\n\n     public void stackLeakByThread() {\n        while (true) {\n            new Thread(() -> {\n                dontStop();\n            }).start();\n        }\n     }\n\n    public static void main(String[] args) {\n        JavaVMStackOOM javaVMStackOOM = new JavaVMStackOOM();\n        javaVMStackOOM.stackLeakByThread();\n    }\n}\n```\n\n\n### 方法区和运行时常量池溢出\n> String.intern()方法返回的是常量池中的对象，如果池中没有对象，则创建对象返回引用\n\n在JDK 1.6及之前的版本中，由于常量池分配在永久代内，我们可以通过-XX:PermSize和-XX:MaxPermSize限制方法区大小，从而间接限制其中常量池的容量，测试代码：\n\n``` java\npublic class RuntimeConstantPoolOOM {\n\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        int i = 0;\n        while (true) {\n            list.add(String.valueOf(i++).intern());\n        }\n    }\n}\n```\n','<h2 id=\"-\">运行时数据区域</h2>\n<p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。根据《Java虚拟机规范（Java SE 7版）》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如下图所示：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190329/bb2cdd52191d44ada5a420afec9f6d98.jpeg\" alt=\"内存模型.jpeg\"></p>\n<p>我们可以将上面的数据区域分为线程独有、线程共享及其他三大区域：</p>\n<h3 id=\"1-1-\">1.1. 线程独有的数据区域</h3>\n<h4 id=\"1-program-counter-register-\">1. 程序计数器（Program Counter Register）</h4>\n<ol>\n<li>当前线程所执行的字节码的行号指示器。</li>\n<li>用于选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复需要依赖这个计数</li>\n</ol>\n<h4 id=\"2-java-stack-\">2. 虚拟机栈（Java Stack）</h4>\n<ul>\n<li>位于线程私有的内存中，生命周期与线程相同。</li>\n<li>描述了Java方法执行的内存模型。</li>\n<li>方法执行时使用栈帧（Stack Frame）来存储局部变量表、操作数栈、动态链接、方法出口等信息。</li>\n<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<strong>StackOverflowError</strong>异常。</li>\n<li>如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出<strong>OutOfMemoryError</strong>异常。</li>\n</ul>\n<h4 id=\"3-native-method-stack-\">3. 本地方法栈（Native Method Stack）</h4>\n<ul>\n<li>与虚拟机栈相类似，区域在于本地方法栈为虚拟机使用到的Native方法服务。</li>\n<li>可以由虚拟机设计者自己实现。</li>\n<li>本地方法栈区域也会抛出<strong>StackOverflowError</strong>和<strong>OutOfMemoryError</strong>异常</li>\n</ul>\n<h3 id=\"1-2-\">1.2. 线程共享的数据区域</h3>\n<h4 id=\"1-java-heap-\">1. Java堆（Heap）</h4>\n<ul>\n<li>是Java虚拟机所管理内存中最大的一块，在虚拟机启动时创建。</li>\n<li>在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术导致某些对象并没有分配在堆上。</li>\n<li>Java GC工作的主要区域。现代收集器基本都采用分代收集算法，所以Java堆中还可以细分为新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。</li>\n<li>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出<strong>OutOfMemoryError</strong>异常。</li>\n</ul>\n<h4 id=\"2-method-area-java8-todo-\">2. 方法区（Method Area）【Java8中去除了永久代 // TODO】</h4>\n<ul>\n<li>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li>\n<li>它有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</li>\n<li>HotSpot虚拟机选择把GC分代收集扩展至方法区，即使用永久代来实现方法区，因此也有人将此区域称为“永久代”；JDK 1.7的HotSpot中，已经把原本放在永久代的字符串常量池移出，并逐步改为采用Native Memory来实现方法区的规划。</li>\n<li>根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出<strong>OutOfMemoryError</strong>异常。</li>\n</ul>\n<h4 id=\"3-runtime-constant-pool-\">3. 运行时常量池（Runtime Constant Pool）</h4>\n<ul>\n<li>运行时常量池是方法区的一部分。</li>\n<li>用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</li>\n<li>当常量池无法再申请到内存时会抛出<strong>OutOfMemoryError</strong>异常。</li>\n</ul>\n<h3 id=\"1-3-\">1.3. 其他区域</h3>\n<h4 id=\"-direct-memory-\">直接内存（Direct Memory）</h4>\n<ul>\n<li>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</li>\n<li>这部分内存也可能导致OutOfMemoryError异常出现。</li>\n</ul>\n<h2 id=\"-\">对象的创建</h2>\n<p>Java是一门面向对象的语言，在Java程序运行的过程中无时不刻都有对象被创建。在语言层面，创建对象通常是一个new关键字，但是，在虚拟机中，创建对象包括如下流程：</p>\n<blockquote>\n<p>类加载 --&gt; 分配内存 --&gt; 内存空间初始化零值 --&gt; 对象头设置 --&gt; init初始化</p>\n</blockquote>\n<ul>\n<li><p>虚拟机遇到一个new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p>\n</li>\n<li><p>在类加载通过后，接下来虚拟机将为新生对象分配内存。对象所需的内存大小在加载后就确定。</p>\n<blockquote>\n<p>分配内存的方式为：<br/>\n&emsp;&emsp;“指针碰撞”：在内存规整情况下，将指针向空闲空间挪动一段与对象大小相等的距离。<br/>\n&emsp;&emsp;“空闲列表”：在内存不规整情况下，虚拟机维护一个记录内存可用的列表，分配的时候从列表中找到一块空间划分给对象。<br/>\n并发情况下的内存分配：<br/>\n&emsp;&emsp;同步：对分配内存空间的动作进行同步处理———采用CAS配上失败重试的方式，保证更新操作的原子性<br/>\n&emsp;&emsp;本地线程分配缓冲(TLAB)：把内存分配动作按照线程划分在不同空间中。即每个线程在Java堆中预先分配一块内存TLAB，只有TLAB用完并重新分配新的TLAB时才需要同步。</p>\n</blockquote>\n</li>\n<li><p>将分配到的内存空间都初始化零值，如int a,a默认为0，如果使用TLAB，则这个工作提前到TLAB</p>\n</li>\n<li><p>对象头设置：对象是哪个类的实例，对象的哈希码，对象的GC分代年龄等信息。</p>\n</li>\n<li><p>执行init方法，即执行程序定义的构造方法。</p>\n</li>\n</ul>\n<h2 id=\"-\">对象的内存布局</h2>\n<p>在HotSpot虚拟机中，对象在内存中的存储布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对其填充（Padding）</p>\n<ul>\n<li>对象头：<br>\n1.用于存储对象自身运行时数据（Mark Word）：<strong>哈希码</strong>、<strong>GC分代年龄</strong>、<strong>锁状态标志</strong>、<strong>线程持有锁</strong>、<strong>偏向线程ID</strong>、<strong>偏向时间戳</strong>等。被设计成非固定的数据结构，能服用存储空间<br>\n2.类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是Java数组，还必须有一块记录数组长度的数据。</li>\n<li>实例数据: 在程序代码中定义的各种类型的字段内容。这部分的存储会周到虚拟机分配策略的影响。HotSpot虚拟机的默认分配策略：相同宽度的字段总是被分配到一起。父类中定义的变量会出现在子类前，子类中较窄的变量也可能会插入到父类变量的空隙之中。</li>\n<li>对齐填充： 仅仅起到占位符的作用。HotSpot要求对象的起始地址必须是8字节的整数倍。当对象实例数据部分没有对齐时，就需要通过对齐填充来补充。</li>\n</ul>\n<h2 id=\"-\">对象的访问定位</h2>\n<p>建立对象是为了使用对象。我们的Java程序需要通过栈上的reference数据来操作堆上的具体对象。目前主流的访问方式有两种：句柄和直接指针。</p>\n<p>句柄：Java堆中会划分出一块内存来作为句柄池，reference中存储的就是对象的<strong>句柄地址</strong>。句柄中包含了对象实例数据与类型数据各自的具体地址。</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190329/955750a568b244b5b1a7252c7b2c20b3.jpg\" alt=\"句柄.jpg\"></p>\n<p>直接访问：reference指针存储的直接就是对象地址</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190329/1ac920ffd6a44760b6674fb94da4c63c.jpg\" alt=\"直接地址.jpg\"></p>\n<p>&emsp;&emsp;使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（如垃圾收集时）时只会改变句柄中的实例数据指针，而reference本身不需要修改</p>\n<p>&emsp;&emsp;直接访问最大的好处就是速度快。节省了一次指针定位的时间开销。HotSpot虚拟机使用第二种方式进行对象的访问。</p>\n<h2 id=\"outofmemoryerror-\">OutofMemoryError异常实战</h2>\n<h3 id=\"-\">堆溢出</h3>\n<p>-Xms 堆最小值 -Xmx 堆最大值  -XX:HeapDumpOnOutOfMemoryError可以在虚拟机出现异常时将堆存储快照</p>\n<pre><code class=\"language-shell\">-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</code></pre>\n<pre><code class=\"language-java\">public class HeadOOM {\n    static class OOMObject {\n    }\n    public static void main(String[] args) {\n        List&lt;OOMObject&gt; list = new ArrayList&lt;&gt;();\n        while (true) {\n            list.add(new OOMObject());\n        }\n    }\n}</code></pre>\n<p>运行结果:</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190331/3598866d1c2f4516a55243bb041b24c1.png\" alt=\"image.png\"></p>\n<h3 id=\"-\">虚拟机栈和本地方法栈溢出</h3>\n<p>-Xss 设置栈的大小</p>\n<ul>\n<li>如果线程请求的栈深度大于虚拟机所允许的最大深度，抛出StackOverflow异常</li>\n<li>如果虚拟机在扩展栈时无法申请到足够的空间，则抛出OutOfMemoryError异常</li>\n</ul>\n<pre><code class=\"language-shell\">-Xss228k</code></pre>\n<pre><code class=\"language-java\">public class JavaVMStackSOF {\n    private int stackLength = 1;\n    public void stackLeak() {\n        stackLength ++;\n        stackLeak();\n    }\n\n    public static void main(String[] args) {\n        JavaVMStackSOF stackSOF = new JavaVMStackSOF();\n        stackSOF.stackLeak();\n    }\n}</code></pre>\n<p>运行结果：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190331/271f6ac25d974c168056469ac2204aea.png\" alt=\"image.png\"></p>\n<p>实验结果表明，在单线程下，当内存无法分配的时候，虚拟机抛出的都是StackOverflow异常</p>\n<p>测试：创建线程导致内存溢出异常</p>\n<pre><code>public class JavaVMStackOOM {\n    private void dontStop() {\n        while (true) {\n\n        }\n    }\n\n     public void stackLeakByThread() {\n        while (true) {\n            new Thread(() -&gt; {\n                dontStop();\n            }).start();\n        }\n     }\n\n    public static void main(String[] args) {\n        JavaVMStackOOM javaVMStackOOM = new JavaVMStackOOM();\n        javaVMStackOOM.stackLeakByThread();\n    }\n}</code></pre><h3 id=\"-\">方法区和运行时常量池溢出</h3>\n<blockquote>\n<p>String.intern()方法返回的是常量池中的对象，如果池中没有对象，则创建对象返回引用</p>\n</blockquote>\n<p>在JDK 1.6及之前的版本中，由于常量池分配在永久代内，我们可以通过-XX:PermSize和-XX:MaxPermSize限制方法区大小，从而间接限制其中常量池的容量，测试代码：</p>\n<pre><code class=\"language-java\">public class RuntimeConstantPoolOOM {\n\n    public static void main(String[] args) {\n        List&lt;String&gt; list = new ArrayList&lt;&gt;();\n        int i = 0;\n        while (true) {\n            list.add(String.valueOf(i++).intern());\n        }\n    }\n}</code></pre>\n',221,41,NULL,1,'第2章 Java内存区域与内存溢出异常','2019-03-09 09:11:05','2019-03-31 02:56:13',1,'4,5,6',1,2,NULL),(2,'Java虚拟机02——对象存活判断和4种引用','垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”','Bobbi','## 对象存活判断\n垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”\n### 引用计数法\n给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时候计数器为0的对象是不可能再被使用的。\n- 缺点：难以解决对象之间互相循环引用的问题\n\n例子：引用计数算法的缺陷\n> -XX:+PrintGCDetails 通过此命令可以打印GC信息\n\n```java\npublic class RefrenceCountingGC {\n    public Object instance = null;\n    private static final int _1MB=1024* 1024;\n\n    private byte[] bigSize = new byte[2 * _1MB];\n\n    public static void testGC() {\n        RefrenceCountingGC objA = new RefrenceCountingGC();\n        RefrenceCountingGC objB = new RefrenceCountingGC();\n        objA.instance = objB;\n        objB.instance = objA;\n\n        objA = null;\n        objB = null;\n\n        // 调用GC\n        System.gc();\n    }\n\n    public static void main(String[] args) {\n        testGC();\n    }\n}\n```\n![image.png](http://oss.dblearn.cn/dbblog/20190331/9b0aa7daa9204910a0f5a850054db75f.png)\n\n上面例子objA与objB互相依赖，从结果来看，内存大小从7014k -> 832k，虚拟机进行了回收，证明虚拟机不是通过引用计数法来判断存活的。\n\n### 可达性分析算法\n通过一系列的成为“GC Roots” 的对象作为起点，从这些节点开始向下搜索，当一个对象到GC Roots没有任何GC链连接时（从GC Roots到这个对象不可达）则证明这个对象是不可活的。如图：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190331/2bd31358f33e445ab7b1e4d1d5362369.png)\n\nGC Roots的对象包括下面几种\n- 虚拟机栈（栈帧中的本地变量）中引用的对象\n- 方法区中类静态属性引用的对象\n- 方法区中常量引用的对象\n- 本地方法栈中JNI（Natice方法）引用的对象\n\n## 4种引用\n经过上面描述得知，对象的存活都与“引用”有关。在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Week Reference）、虚引用（Phantom Reference）,引用强度依次减弱\n> 强引用 > 软引用 > 弱引用 > 虚引用\n### 强引用\n是使用最普遍的引用，类似“Object obj = new Object()”。只要强引用还存在，垃圾收集器就不会回收被引用的对象\n### 软引用\n描述一些还有用但并非必须的对象。在系统将要发生内存溢出之前，将会把这些对象列进回收范围之中进行二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。\n### 弱引用\n描述非必须对象，强度比软引用还弱一些。被弱引用关联的对象只能生存到下次垃圾收集之前。当垃圾收集器工作时，无论当内存是否足够，都会回收掉只被弱引用关联的对象。\n### 虚引用\n一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获得一个对象实例。为一个对象设置虚引用关联的唯一目的就是在这个对象被收集回收时收到一个系统通知、\n\n## 4种引用代码实践\n### 判断对象是否存活\n如果通过可达性算法分析一个对象不可达，此时会被第一次标记，并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖该方法或已经被执行了，则不需要执行finalize（）方法。\n\n如果判定需要执行finalize()方法，那这个对象将会放在F-Queue的队列中，虚拟机会触发这个方法，但不承诺会等待它运行结束（如果方法缓慢，将导致崩溃）。稍后GC将会对F-Queue进行第二次标记，并把标记的对象移到“即将回收”的集合中。\n\n综上，finalize()函数是在JVM回收内存时执行的，仅执行一次，但JVM并不保证在回收内存时一定会调用。\n\n### 测试引用例子\n先创建一个Demo类，重写它的finallize()方法，如果被GC了，则会打印信息\n\n```java\npublic class RefrenceDemo {\n\n    @Override\n    protected void finalize() throws Throwable {\n        System.out.println(\"哎呀，我被回收了\");\n        super.finalize();\n    }\n}\n```\n\n#### 测试强引用\n测试代码：\n\n```java \n    public static void main(String[] args) {\n        RefrenceDemo demo = new RefrenceDemo();\n        System.gc();\n    }\n```\n结果： 无任何输出，则证明强引用对象没有被回收\n\n#### 测试软引用\n测试代码：\n> VM参数: -Xms20m -Xmx20m\n\n``` java\n    public static void main(String[] args) {\n        List<String> temp = new ArrayList<>();\n        SoftReference<RefrenceDemo> ref = new SoftReference<>(new RefrenceDemo());\n        for (int i = 0; i < 10000; i++) {\n            temp.add(String.valueOf(i));\n        }\n        System.gc();\n    }	\n```\n运行代码，此时内存充足，并没有输出任何结果\n\n将代码中的10000改成100000\n``` java\n    public static void main(String[] args) {\n        List<String> temp = new ArrayList<>();\n        SoftReference<RefrenceDemo> ref = new SoftReference<>(new RefrenceDemo());\n        for (int i = 0; i < 100000; i++) {\n            temp.add(String.valueOf(i));\n        }\n        System.gc();\n    }\n```\n运行结果：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190331/05bd7126248f4721a127555e87436397.png)\n\n此时，finalize()方法被执行了，说名内存不足，需要回收软引用的对象。\n\n#### 测试弱引用\n\n> VM参数: -Xms20m -Xmx20m\n\n将上例的10000缩小到1000，此时内存空间是足够的。\n\n```java\n     public static void main(String[] args) {\n        WeakReference<RefrenceDemo> ref = new WeakReference<>(new RefrenceDemo());\n\n        System.out.println(ref.get());\n        \n        List<String> temp = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {\n            temp.add(String.valueOf(i));\n        }\n\n        System.gc();\n    }\n```\n\n运行结果：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190331/465b9dab275d452a8a2496abf75bb8f2.png)\n\n在GC前，引用还存活，GC后便执行了finalize()方法，说明弱引用只能活到GC前\n\n#### 测试虚引用\n\n> VM参数: -Xms20m -Xmx20m\n\n``` java\n    public static void main(String[] args) {\n        ReferenceQueue queue = new ReferenceQueue();\n        PhantomReference<RefrenceDemo> ref = new PhantomReference<>(new RefrenceDemo(),queue);\n\n        System.out.println(ref.get());\n\n        System.gc();\n    }\n\n```\n运行结果：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190331/0ef4f757f6b64edd8d60f979ce2bdb80.png)\n\n这说明虚引用在实例化后，就被终止了\n\n\n\n\n\n','<h2 id=\"-\">对象存活判断</h2>\n<p>垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”</p>\n<h3 id=\"-\">引用计数法</h3>\n<p>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时候计数器为0的对象是不可能再被使用的。</p>\n<ul>\n<li>缺点：难以解决对象之间互相循环引用的问题</li>\n</ul>\n<p>例子：引用计数算法的缺陷</p>\n<blockquote>\n<p>-XX:+PrintGCDetails 通过此命令可以打印GC信息</p>\n</blockquote>\n<pre><code class=\"language-java\">public class RefrenceCountingGC {\n    public Object instance = null;\n    private static final int _1MB=1024* 1024;\n\n    private byte[] bigSize = new byte[2 * _1MB];\n\n    public static void testGC() {\n        RefrenceCountingGC objA = new RefrenceCountingGC();\n        RefrenceCountingGC objB = new RefrenceCountingGC();\n        objA.instance = objB;\n        objB.instance = objA;\n\n        objA = null;\n        objB = null;\n\n        // 调用GC\n        System.gc();\n    }\n\n    public static void main(String[] args) {\n        testGC();\n    }\n}</code></pre>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190331/9b0aa7daa9204910a0f5a850054db75f.png\" alt=\"image.png\"></p>\n<p>上面例子objA与objB互相依赖，从结果来看，内存大小从7014k -&gt; 832k，虚拟机进行了回收，证明虚拟机不是通过引用计数法来判断存活的。</p>\n<h3 id=\"-\">可达性分析算法</h3>\n<p>通过一系列的成为“GC Roots” 的对象作为起点，从这些节点开始向下搜索，当一个对象到GC Roots没有任何GC链连接时（从GC Roots到这个对象不可达）则证明这个对象是不可活的。如图：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190331/2bd31358f33e445ab7b1e4d1d5362369.png\" alt=\"image.png\"></p>\n<p>GC Roots的对象包括下面几种</p>\n<ul>\n<li>虚拟机栈（栈帧中的本地变量）中引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>本地方法栈中JNI（Natice方法）引用的对象</li>\n</ul>\n<h2 id=\"4-\">4种引用</h2>\n<p>经过上面描述得知，对象的存活都与“引用”有关。在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Week Reference）、虚引用（Phantom Reference）,引用强度依次减弱</p>\n<blockquote>\n<p>强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用</p>\n</blockquote>\n<h3 id=\"-\">强引用</h3>\n<p>是使用最普遍的引用，类似“Object obj = new Object()”。只要强引用还存在，垃圾收集器就不会回收被引用的对象</p>\n<h3 id=\"-\">软引用</h3>\n<p>描述一些还有用但并非必须的对象。在系统将要发生内存溢出之前，将会把这些对象列进回收范围之中进行二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p>\n<h3 id=\"-\">弱引用</h3>\n<p>描述非必须对象，强度比软引用还弱一些。被弱引用关联的对象只能生存到下次垃圾收集之前。当垃圾收集器工作时，无论当内存是否足够，都会回收掉只被弱引用关联的对象。</p>\n<h3 id=\"-\">虚引用</h3>\n<p>一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获得一个对象实例。为一个对象设置虚引用关联的唯一目的就是在这个对象被收集回收时收到一个系统通知、</p>\n<h2 id=\"4-\">4种引用代码实践</h2>\n<h3 id=\"-\">判断对象是否存活</h3>\n<p>如果通过可达性算法分析一个对象不可达，此时会被第一次标记，并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖该方法或已经被执行了，则不需要执行finalize（）方法。</p>\n<p>如果判定需要执行finalize()方法，那这个对象将会放在F-Queue的队列中，虚拟机会触发这个方法，但不承诺会等待它运行结束（如果方法缓慢，将导致崩溃）。稍后GC将会对F-Queue进行第二次标记，并把标记的对象移到“即将回收”的集合中。</p>\n<p>综上，finalize()函数是在JVM回收内存时执行的，仅执行一次，但JVM并不保证在回收内存时一定会调用。</p>\n<h3 id=\"-\">测试引用例子</h3>\n<p>先创建一个Demo类，重写它的finallize()方法，如果被GC了，则会打印信息</p>\n<pre><code class=\"language-java\">public class RefrenceDemo {\n\n    @Override\n    protected void finalize() throws Throwable {\n        System.out.println(&quot;哎呀，我被回收了&quot;);\n        super.finalize();\n    }\n}</code></pre>\n<h4 id=\"-\">测试强引用</h4>\n<p>测试代码：</p>\n<pre><code class=\"language-java\">    public static void main(String[] args) {\n        RefrenceDemo demo = new RefrenceDemo();\n        System.gc();\n    }</code></pre>\n<p>结果： 无任何输出，则证明强引用对象没有被回收</p>\n<h4 id=\"-\">测试软引用</h4>\n<p>测试代码：</p>\n<blockquote>\n<p>VM参数: -Xms20m -Xmx20m</p>\n</blockquote>\n<pre><code class=\"language-java\">    public static void main(String[] args) {\n        List&lt;String&gt; temp = new ArrayList&lt;&gt;();\n        SoftReference&lt;RefrenceDemo&gt; ref = new SoftReference&lt;&gt;(new RefrenceDemo());\n        for (int i = 0; i &lt; 10000; i++) {\n            temp.add(String.valueOf(i));\n        }\n        System.gc();\n    }    </code></pre>\n<p>运行代码，此时内存充足，并没有输出任何结果</p>\n<p>将代码中的10000改成100000</p>\n<pre><code class=\"language-java\">    public static void main(String[] args) {\n        List&lt;String&gt; temp = new ArrayList&lt;&gt;();\n        SoftReference&lt;RefrenceDemo&gt; ref = new SoftReference&lt;&gt;(new RefrenceDemo());\n        for (int i = 0; i &lt; 100000; i++) {\n            temp.add(String.valueOf(i));\n        }\n        System.gc();\n    }</code></pre>\n<p>运行结果：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190331/05bd7126248f4721a127555e87436397.png\" alt=\"image.png\"></p>\n<p>此时，finalize()方法被执行了，说名内存不足，需要回收软引用的对象。</p>\n<h4 id=\"-\">测试弱引用</h4>\n<blockquote>\n<p>VM参数: -Xms20m -Xmx20m</p>\n</blockquote>\n<p>将上例的10000缩小到1000，此时内存空间是足够的。</p>\n<pre><code class=\"language-java\">     public static void main(String[] args) {\n        WeakReference&lt;RefrenceDemo&gt; ref = new WeakReference&lt;&gt;(new RefrenceDemo());\n\n        System.out.println(ref.get());\n\n        List&lt;String&gt; temp = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; 1000; i++) {\n            temp.add(String.valueOf(i));\n        }\n\n        System.gc();\n    }</code></pre>\n<p>运行结果：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190331/465b9dab275d452a8a2496abf75bb8f2.png\" alt=\"image.png\"></p>\n<p>在GC前，引用还存活，GC后便执行了finalize()方法，说明弱引用只能活到GC前</p>\n<h4 id=\"-\">测试虚引用</h4>\n<blockquote>\n<p>VM参数: -Xms20m -Xmx20m</p>\n</blockquote>\n<pre><code class=\"language-java\">    public static void main(String[] args) {\n        ReferenceQueue queue = new ReferenceQueue();\n        PhantomReference&lt;RefrenceDemo&gt; ref = new PhantomReference&lt;&gt;(new RefrenceDemo(),queue);\n\n        System.out.println(ref.get());\n\n        System.gc();\n    }\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190331/0ef4f757f6b64edd8d60f979ce2bdb80.png\" alt=\"image.png\"></p>\n<p>这说明虚引用在实例化后，就被终止了</p>\n',45,1,NULL,1,'第三章 垃圾收集器与内存分配策略','2019-03-31 06:36:47','2019-03-31 09:15:00',0,'4,5,6',1,2,NULL),(3,'Java虚拟机03——垃圾收集算法','介绍几种垃圾收集算法的思想','Bobbi','这里简要介绍几种垃圾收集算法的思想\n## 标记 - 清除算法\n该算法如同它的名字一样，分为“标记”和“清除”两个阶段：\n- 首先标记出所有需要回收的对象\n- 在标记完后统一回收所有被标记的对象\n\n![image.png](http://oss.dblearn.cn/dbblog/20190403/f0370a3126a44466ba5fc3c2a8547828.png)\n\n这个算法其实已经过时了，但是后续的算法都是基于这种思路来的。它主要的不足点有两个：\n1. 效率问题。标记和清理两个过程的效率都不高\n2. 空间问题。标记清除后会产生大量不连续的内存碎片，空间碎片太对会导致程序运行过程中需要分配大对象时，无法找到连续的内存而不得不提前触发另一次垃圾收集动作\n\n## 复制算法\n复制算法的流程如下：\n- 它将可用内存按容量大小划分为大小相等的两块，每次只使用其中一块。\n- 当这块的内存用完了，就将还存活着的对象复制到另一块上面，\n- 然后把使用过的内存空间一次性清理掉。\n\n![image.png](http://oss.dblearn.cn/dbblog/20190403/ca7025df2548434cb5c8889bbb936e80.png)\n\n可以看到每次只对一半区域进行收集，这样就不用考虑内存碎片等复杂情况了，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。但是这种算法的代价是将内存缩小为原来的一半,内存成本高\n\n复制算法一般用于收集*新生代*，因为新生代大部分的对象的存活时间很短，因此新生代中存活的对象远远少于垃圾对象。\n>新生代：存放年轻对象的堆空间。年轻对象是指刚刚创建，或者经历垃圾回收次数不多的对象。<br>\n老年代：存放老年对象的堆空间。老年对象指经历过多次垃圾回收依然存活的对象。\n\n在商业虚拟机中，例如我们常见的HotSpot虚拟机，将新生代分为一个Eden区和两个Survivor区，Eden区与Survivor区的大小比例是8:1，也即是说Eden区占新生代的80%，两个Survivor分别占10%。新生代的复制算法执行规则如下：\n\n- 每次使用复制算法进行垃圾回收时，会将Eden区和其中一块Survivor区的所有存活对象复制到另一块空闲Survivor区中，在复制操作中，大对象和老年对象将直接复制到老年代；\n- 然后将原来的Eden区和Survivor区的对象一次性清理掉；\n- 如果在执行复制算法时一块空闲Survivor区域不能够容纳原来的Eden区和Survivor区的对象，就需要依赖老年代，将多余的对象直接复制到老年代。\n\n可以发现，这种复制机制保证只有一块Survivor区的内存（仅占新生代内存的10%）是被浪费的。新生代的复制算法示意图如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190403/bf16c7673f1c41449766e9f0dd356063.png)\n\n## 标记 - 整理算法\n在对象存活率较低的新生代使用复制算法效率高。那么在对象存活率高的老年代，使用复制算法效率将会变得很低。根据老年代的特点，有人提出了“标记 - 整理”算法。算法流程如下：\n- 首先标记出所有需要回收的对象\n- 让所有存活的对象都向一端移动\n- 然后清理掉端边界以外的内存\n\n![image.png](http://oss.dblearn.cn/dbblog/20190403/4335831927224ed5bb3ff9a560c4d71f.png)\n\n## 分代收集算法\n当前商业虚拟机的垃圾收集算法都采用“分代收集算法”。主要思想是根据对象存活周期的不同将内存划分为几块，并采用最适合的收集算法。\n- 在大批对象死去，少量存活的新生代中，采用复制算法\n- 在对象存活率高、没有额外空间对它进行分配担保，采用“标记 - 清理”或“标记 - 整理”算法。\n\n## OopMap、Safe Point和Safe Region\n上面介绍了几种垃圾收集算法，但是虚拟机（这里以HotSpot为例子）在发起内存回收的时候会遇到很多问题。因此诞生了OopMap、Safe Point和Safe Region来解决\n### OopMap\n问题：\n- GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中，但是现在引用众多，如果要逐个检查这里面的引用，那么必然会消耗很多时间。\n- 另外，可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行————这里“一致性”是指分析过程中不可以出现引用关系还在不断变化的情况，因此GC进行时必须停顿所有的Java执行线程\n\n解决：\n在HotSpot的实现中，使用一组成为OopMap的数据结构。\n- 在类加载完成的时候，就把对象内什么偏移量上是什么类型的数据计算出来\n- 在JIT编译过程中，也会在特定位置记录下栈和寄存器中哪些位置是引用\n\n这样，GC在扫描时就可以直接得知这些信息了。\n\n### Safe Point\n在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：\n- OopMap内容变化的指令过多导致需要大量额外空间的问题\n\n解决：\n- HotSpot没有为每条指令都生成OopMap，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safe Point），即程序执行时只有在到达Safe Point时才能更新自己的OopMap。\n\n对于Safe Point，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都运行到最近的安全点上再停顿下来。这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension）：\n\n- 抢先式中断。不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它继续运行到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。\n- 主动式中断。当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。\n\n### Safe Region\nSafe Point机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safe Point。\n问题：\n- 但是当线程没有分配CPU时间（如线程处于Sleep状态或者Blocked状态），这时候线程无法响应JVM的中断请求以继续到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。对于这种情况，就需要安全区域（Safe Region）来解决。\n\n安全区域是指在一段代码片段之中，引用关系不会发生变化。在这个区域中的任意地方开始GC都是安全的。我们也可以把Safe Region看做是被扩展了的Safepoint。\n\n在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。\n\n\n\n','<p>这里简要介绍几种垃圾收集算法的思想</p>\n<h2 id=\"-\">标记 - 清除算法</h2>\n<p>该算法如同它的名字一样，分为“标记”和“清除”两个阶段：</p>\n<ul>\n<li>首先标记出所有需要回收的对象</li>\n<li>在标记完后统一回收所有被标记的对象</li>\n</ul>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190403/f0370a3126a44466ba5fc3c2a8547828.png\" alt=\"image.png\"></p>\n<p>这个算法其实已经过时了，但是后续的算法都是基于这种思路来的。它主要的不足点有两个：</p>\n<ol>\n<li>效率问题。标记和清理两个过程的效率都不高</li>\n<li>空间问题。标记清除后会产生大量不连续的内存碎片，空间碎片太对会导致程序运行过程中需要分配大对象时，无法找到连续的内存而不得不提前触发另一次垃圾收集动作</li>\n</ol>\n<h2 id=\"-\">复制算法</h2>\n<p>复制算法的流程如下：</p>\n<ul>\n<li>它将可用内存按容量大小划分为大小相等的两块，每次只使用其中一块。</li>\n<li>当这块的内存用完了，就将还存活着的对象复制到另一块上面，</li>\n<li>然后把使用过的内存空间一次性清理掉。</li>\n</ul>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190403/ca7025df2548434cb5c8889bbb936e80.png\" alt=\"image.png\"></p>\n<p>可以看到每次只对一半区域进行收集，这样就不用考虑内存碎片等复杂情况了，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。但是这种算法的代价是将内存缩小为原来的一半,内存成本高</p>\n<p>复制算法一般用于收集<em>新生代</em>，因为新生代大部分的对象的存活时间很短，因此新生代中存活的对象远远少于垃圾对象。</p>\n<blockquote>\n<p>新生代：存放年轻对象的堆空间。年轻对象是指刚刚创建，或者经历垃圾回收次数不多的对象。<br>\n老年代：存放老年对象的堆空间。老年对象指经历过多次垃圾回收依然存活的对象。</p>\n</blockquote>\n<p>在商业虚拟机中，例如我们常见的HotSpot虚拟机，将新生代分为一个Eden区和两个Survivor区，Eden区与Survivor区的大小比例是8:1，也即是说Eden区占新生代的80%，两个Survivor分别占10%。新生代的复制算法执行规则如下：</p>\n<ul>\n<li>每次使用复制算法进行垃圾回收时，会将Eden区和其中一块Survivor区的所有存活对象复制到另一块空闲Survivor区中，在复制操作中，大对象和老年对象将直接复制到老年代；</li>\n<li>然后将原来的Eden区和Survivor区的对象一次性清理掉；</li>\n<li>如果在执行复制算法时一块空闲Survivor区域不能够容纳原来的Eden区和Survivor区的对象，就需要依赖老年代，将多余的对象直接复制到老年代。</li>\n</ul>\n<p>可以发现，这种复制机制保证只有一块Survivor区的内存（仅占新生代内存的10%）是被浪费的。新生代的复制算法示意图如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190403/bf16c7673f1c41449766e9f0dd356063.png\" alt=\"image.png\"></p>\n<h2 id=\"-\">标记 - 整理算法</h2>\n<p>在对象存活率较低的新生代使用复制算法效率高。那么在对象存活率高的老年代，使用复制算法效率将会变得很低。根据老年代的特点，有人提出了“标记 - 整理”算法。算法流程如下：</p>\n<ul>\n<li>首先标记出所有需要回收的对象</li>\n<li>让所有存活的对象都向一端移动</li>\n<li>然后清理掉端边界以外的内存</li>\n</ul>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190403/4335831927224ed5bb3ff9a560c4d71f.png\" alt=\"image.png\"></p>\n<h2 id=\"-\">分代收集算法</h2>\n<p>当前商业虚拟机的垃圾收集算法都采用“分代收集算法”。主要思想是根据对象存活周期的不同将内存划分为几块，并采用最适合的收集算法。</p>\n<ul>\n<li>在大批对象死去，少量存活的新生代中，采用复制算法</li>\n<li>在对象存活率高、没有额外空间对它进行分配担保，采用“标记 - 清理”或“标记 - 整理”算法。</li>\n</ul>\n<h2 id=\"oopmap-safe-point-safe-region\">OopMap、Safe Point和Safe Region</h2>\n<p>上面介绍了几种垃圾收集算法，但是虚拟机（这里以HotSpot为例子）在发起内存回收的时候会遇到很多问题。因此诞生了OopMap、Safe Point和Safe Region来解决</p>\n<h3 id=\"oopmap\">OopMap</h3>\n<p>问题：</p>\n<ul>\n<li>GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中，但是现在引用众多，如果要逐个检查这里面的引用，那么必然会消耗很多时间。</li>\n<li>另外，可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行————这里“一致性”是指分析过程中不可以出现引用关系还在不断变化的情况，因此GC进行时必须停顿所有的Java执行线程</li>\n</ul>\n<p>解决：\n在HotSpot的实现中，使用一组成为OopMap的数据结构。</p>\n<ul>\n<li>在类加载完成的时候，就把对象内什么偏移量上是什么类型的数据计算出来</li>\n<li>在JIT编译过程中，也会在特定位置记录下栈和寄存器中哪些位置是引用</li>\n</ul>\n<p>这样，GC在扫描时就可以直接得知这些信息了。</p>\n<h3 id=\"safe-point\">Safe Point</h3>\n<p>在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：</p>\n<ul>\n<li>OopMap内容变化的指令过多导致需要大量额外空间的问题</li>\n</ul>\n<p>解决：</p>\n<ul>\n<li>HotSpot没有为每条指令都生成OopMap，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safe Point），即程序执行时只有在到达Safe Point时才能更新自己的OopMap。</li>\n</ul>\n<p>对于Safe Point，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都运行到最近的安全点上再停顿下来。这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension）：</p>\n<ul>\n<li>抢先式中断。不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它继续运行到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。</li>\n<li>主动式中断。当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</li>\n</ul>\n<h3 id=\"safe-region\">Safe Region</h3>\n<p>Safe Point机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safe Point。\n问题：</p>\n<ul>\n<li>但是当线程没有分配CPU时间（如线程处于Sleep状态或者Blocked状态），这时候线程无法响应JVM的中断请求以继续到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。对于这种情况，就需要安全区域（Safe Region）来解决。</li>\n</ul>\n<p>安全区域是指在一段代码片段之中，引用关系不会发生变化。在这个区域中的任意地方开始GC都是安全的。我们也可以把Safe Region看做是被扩展了的Safepoint。</p>\n<p>在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。</p>\n',35,1,NULL,1,'第三章：垃圾收集器与内存分配策略','2019-04-02 11:30:20','2019-04-03 04:55:47',0,'4,5,6',1,2,NULL),(4,'Java虚拟机04——垃圾收集器','主要介绍HotSpot虚拟机的垃圾收集器','Bobbi','主要介绍HotSpot虚拟机的垃圾收集器，这个虚拟机包含的所有收集器如图所示：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190407/c45a5a69be564260bd7b93c0f42279ba.png)\n\n可以看到，收集器之间是可以搭配使用的。下面介绍这些收集器的特性、基本原理和使用场景。在介绍之前先明确一个观点：直到现在为止还没有最好的收集器出现，更加没有万能的收集器，选择的是对具体应用最合适的收集器。\n\n## 串行收集器\n串行收集器是最基本、发展历史最悠久的收集器。它们的特点就是单线程运行及独占式运行，因此会带来很不好的用户体验。虽然它的收集方式对程序的运行并不友好，但由于它的单线程执行特性，应用于单个CPU硬件平台的性能可以超过其他的并行或并发处理器。\n### Serial收集器\n- 在JDk1.3之前是新生代收集的唯一选择\n- 单线程，只会使用一个CPU去完成\n- 垃圾收集时，必须暂停其他工作线程，直到它收集结束。“Stop The World”\n- 虚拟机后台自动发起和自动完成的，在用户不可见的情况下把用户正常工作的线程全部停掉\n- 到现在为止，是虚拟机运行在Client模式下的默认新生代收集器\n\n> 通过JVM参数-XX:+UseSerialGC可以使用串行垃圾回收器。\n\n### Serial Old收集器\n- 是Serial收集器的老年代版本，是单线程收集器，采用“标记-整理算法”\n- 主要意义也是在于给Client模式下的虚拟机使用\n- 如果在Server模式下，那么它主要还有两大用途：\n- &emsp;&emsp;在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用；\n- &emsp;&emsp;作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。这两点都将在后面的内容中详细讲解。\n\nSerial与Serial Old工作过程如图：\n![image.png](http://oss.dblearn.cn/dbblog/20190407/17ec844670b8481cb4efc86869298211.png)\n\n要启用老年代串行收集器，可以尝试使用下面的参数：\n- -XX:+UseSerialGC：新生代和老年代都是用串行收集器；\n- -XX:+UseParNewGC：新生代使用ParNew收集器，老年代使用串行收集器；\n- -XX:+UseParallelGC：新生代使用Parallel GC收集器，老年代使用串行收集器。\n\n\n## 并行收集器\n并行收集器是多线程的收集器，在多核CPU下能够很好的提高收集性能。\n### ParNew收集器\nParNew收集器是Serial收集器的多线程版本。除了使用多条线程进行垃圾收集之外，其余行为如所有控制参数（例如：-XX：SurvivorRatio、-XX：PretenureSizeThreshold、-XX：HandlePromotionFailure等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。ParNew收集器的工作过程如下图所示：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190407/6243fe7ba7054dc385d9cb7fe908ed86.png)\n\n- 运行在Server模式下的虚拟机中首选的新生代收集器，因为除了Serial收集器外，目前只有它能与CMS收集器配合工作\n- 由于存在线程交互的开销，ParNew收集器在单CPU环境下性能并没有单线程垃圾收集器性能好。\n- 可以使用-XX：ParallelGCThreads参数来限制垃圾收集的线程数。一般来说，当CPU数量小于8个时，宜设置为CPU数量；当CPU数量大于8个时，宜设置为3 + (( 5 * CPU_Count ) / 8 )。\n\n开启ParNew收集器可以使用以下参数：\n\n- -XX：+UseParNewGC：新生代使用ParNew收集器，老年代使用串行收集器。\n- -XX：+UseConcMarkSweepGC：新生代使用ParNew收集器，老年代使用CMS收集器。\n\nParNew是并行的收集器，在这里介绍一下并行与并发的概念\n- 并行（Parallel）：多条收集器线程并行工作，但此时用户线程仍然处于等待状态。（合作）\n- 并发（Concurrent）：用户线程与垃圾收集器线程同时执行，不一定是并行执行，可能是交替执行（竞争）\n\n### Parallel Scavenge收集器\nParallel Scavenge收集器与ParNew收集器类似，也是使用复制算法的并行的多线程新生代收集器。但Parallel Scavenge收集器关注可控制的吞吐量（Throughput）\n\n> 注：吞吐量是指CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（ 运行用户代码时间 + 垃圾收集时间 ）\n\nParallel Scavenge收集器提供了两个参数用于精确控制吞吐量：\n- -XX：MaxGCPauseMillis：最大垃圾收集停顿时间，是一个大于0的毫秒数，收集器将回收时间尽量控制在这个设定值之内；但需要注意的是在同样的情况下，回收时间与回收次数是成反比的，回收时间越小，相应的回收次数就会增多。所以这个值并不是越小越好。\n- -XX：GCTimeRatio：吞吐量大小，是一个(0, 100)之间的整数，表示垃圾收集时间占总时间的比率。\n\n除上述两个参数之外，Parallel Scavenge收集器还提供了一个参数-XX：+UseAdaptiveSizePolicy，当这个参数打开之后，就不需要手工指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX：SurvivorRatio）、晋升老年代对象年龄（-XX：PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。自适应调节策略也是Parallel Scavenge收集器与ParNew收集器的一个重要区别。\n\n### Parallel Old收集器\nParallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。这个收集器是在JDK 1.6中才开始提供的。\n\n由于如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old（PS MarkSweep）收集器外别无选择(Parallel Scavenge无法与CMS收集器配合工作)，Parallel Old收集器的出现就是为了解决这个问题。Parallel Scavenge和Parallel Old收集器的组合更适用于注重吞吐量以及CPU资源敏感的场合。Parallel Old收集器的工作过程下图所示：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190407/02dd5b80c40946a8990179ef1e939cdf.png)\n\n## CMS收集器\nCMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，也是基于“标记—清除”算法实现的，它的运作整个过程过程细分为4个步骤，包括：\n\n- 初始标记（CMS initial mark）：需要“Stop The World”，标记一下GC Roots能直接关联到的对象，速度很快。\n- 并发标记（CMS concurrent mark）：进行GC Roots Tracing的过程，标记老年代所有存活对象。\n- 重新标记（CMS remark）：需要“Stop The World”，修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。\n- 并发清除（CMS concurrent sweep）：清理垃圾。\n\n由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行，如图：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190407/520e095697bd4d16bf3b811ab0de29b6.png)\n\nCMS有以下3个明显的缺点：\n\n- CMS收集器对CPU资源非常敏感。CMS默认启动的回收线程数是( CPU Count + 3 ) / 4，当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，将分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%。\n\n- CMS收集器无法处理浮动垃圾（Floating Garbage），可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。浮动垃圾是指CMS在并发清理阶段用户线程还在同时执行时产生的垃圾。由于在垃圾收集阶段用户线程还需要运行，还需要预留有足够的内存空间给用户线程使用，因此需要预留一部分空间提供并发收集时的程序运作使用。在JDK 1.5的默认设置下，CMS收集器当老年代使用了68%的空间后就会被激活，可以适当调高参数-XX:CMSInitiatingOccupancyFraction的值来提高触发百分比，以降低内存回收次数；在JDK 1.6中，CMS收集器的启动阈值已经提升至92%。如果运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将临时启用Serial Old收集器来重新进行老年代的垃圾收集，导致停顿时间就很长了。所以说参数-XX:CMSInitiatingOccupancyFraction设置得太高很容易导致大量“Concurrent Mode Failure”失败，性能反而降低。\n\n- CMS是一款基于“标记—清除”算法实现的收集器，收集结束时会有大量空间碎片产生。空间碎片过多无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。为了解决这个问题，CMS收集器提供了一个-XX:+UseCMSCompactAtFullCollection开关参数（默认就是开启的），用于在CMS收集器要进行Full GC时开启内存碎片的合并整理过程，内存整理的过程是无法并发的，因此也会导致停顿时间变长。而另外一个参数-XX:CMSFullGCsBeforeCompaction可以设置执行多少次不压缩的Full GC后，才执行一次带压缩的（默认值为0，即每次进入Full GC时都进行碎片整理）。\n\n## G1收集器\nG1是一款面向服务端应用的垃圾收集器，与其他GC收集器相比，G1具备如下特点：\n\n- 并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿的时间。\n- 分代收集：分代概念在G1中依然保留。G1可以独立管理整个GC堆，且采用不同的方式去处理分代对象。\n- 空间整合：G1从整体来看是基于“标记—整理”算法实现的，从局部（两个Region之间）上来看是基于“复制”算法实现的；G1收集后能提供规整的可用内存。\n可预测的停顿：G1能建立可预测的停顿时间模型，能明确指定垃圾收集相对于时间段的吞吐量。\n- G1收集器将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。\n\nG1根据各个Region回收所获得的空间大小以及回收所需时间等指标在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region，从而可以有计划地避免在整个Java堆中进行全区域的垃圾收集。\n\nG1收集器运作步骤如下：\n- 初始标记（Initial Marking）:仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。（OopMap）\n- 并发标记（Concurrent Marking）: 进行GC Roots Tracing的过程\n- 最终标记（Final Marking）: 修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，也需要“Stop The World”。（修正Remebered Set）\n- 筛选回收（Live Data Counting and Evacuation）: 首先对各个Region的回收价值和成本进行排行，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。\n\n![image.png](http://oss.dblearn.cn/dbblog/20190407/2769f32ee7284845b770da9b75a108b8.png)\n\n## 垃圾收集参数总结\n|参数|描述|\n|-|-|\n|UseSerialGC|虚拟机运行在Client模式下的默认值，打开此开关后，使用 Serial+Serial Old 的收集器组合进行内存回收|\n|UseParNewGC|打开此开关后，使用 ParNew + Serial Old 的收集器组合进行内存回收|\n|UseConcMarkSweepGC|打开此开关后，使用 ParNew + CMS + Serial Old 的收集器组合进行内存回收。Serial Old 收集器将作为 CMS 收集器出现 Concurrent Mode Failure 失败后的后备收集器使用|\n|UseParallelGC|虚拟机运行在 Server 模式下的默认值，打开此开关后，使用 Parallel Scavenge + Serial Old(PS MarkSweep) 的收集器组合进行内存回收|\n|UseParallelOldGC|打开此开关后，使用 Parallel Scavenge + Parallel Old 的收集器组合进行内存回收|\n|SurvivorRatio|新生代中 Eden 区域与 Survivor 区域的容量比值，默认为8，代表 Eden : Survivor = 8 : 1|\n|PretenureSizeThreshold|直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配|\n|MaxTenuringThreshold|晋升到老年代的对象年龄，每个对象在坚持过一次 Minor GC 之后，年龄就增加1，当超过这个参数值时就进入老年代|\n|UseAdaptiveSizePolicy|动态调整 Java 堆中各个区域的大小以及进入老年代的年龄|\n|HandlePromotionFailure|是否允许分配担保失败，即老年代的剩余空间不足以应付新生代的整个 Eden 和 Survivor 区的所有对象都存活的极端情况|\n|ParallelGCThreads|设置并行GC时进行内存回收的线程数|\n|GCTimeRatio|GC 时间占总时间的比率，默认值为99，即允许 1% 的GC时间，仅在使用 Parallel Scavenge 收集器生效|\n|MaxGCPauseMillis|设置 GC 的最大停顿时间，仅在使用 Parallel Scavenge 收集器时生效|\n|CMSInitiatingOccupancyFraction|设置 CMS 收集器在老年代空间被使用多少后触发垃圾收集，默认值为 68%，仅在使用 CMS 收集器时生效|\n|UseCMSCompactAtFullCollection|设置 CMS 收集器在完成垃圾收集后是否要进行一次内存碎片整理，仅在使用 CMS 收集器时生效|\n|CMSFullGCsBeforeCompaction|设置 CMS 收集器在进行若干次垃圾收集后再启动一次内存碎片整理，仅在使用 CMS 收集器时生效|\n\n\n\n\n\n','<p>主要介绍HotSpot虚拟机的垃圾收集器，这个虚拟机包含的所有收集器如图所示：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190407/c45a5a69be564260bd7b93c0f42279ba.png\" alt=\"image.png\"></p>\n<p>可以看到，收集器之间是可以搭配使用的。下面介绍这些收集器的特性、基本原理和使用场景。在介绍之前先明确一个观点：直到现在为止还没有最好的收集器出现，更加没有万能的收集器，选择的是对具体应用最合适的收集器。</p>\n<h2 id=\"-\">串行收集器</h2>\n<p>串行收集器是最基本、发展历史最悠久的收集器。它们的特点就是单线程运行及独占式运行，因此会带来很不好的用户体验。虽然它的收集方式对程序的运行并不友好，但由于它的单线程执行特性，应用于单个CPU硬件平台的性能可以超过其他的并行或并发处理器。</p>\n<h3 id=\"serial-\">Serial收集器</h3>\n<ul>\n<li>在JDk1.3之前是新生代收集的唯一选择</li>\n<li>单线程，只会使用一个CPU去完成</li>\n<li>垃圾收集时，必须暂停其他工作线程，直到它收集结束。“Stop The World”</li>\n<li>虚拟机后台自动发起和自动完成的，在用户不可见的情况下把用户正常工作的线程全部停掉</li>\n<li>到现在为止，是虚拟机运行在Client模式下的默认新生代收集器</li>\n</ul>\n<blockquote>\n<p>通过JVM参数-XX:+UseSerialGC可以使用串行垃圾回收器。</p>\n</blockquote>\n<h3 id=\"serial-old-\">Serial Old收集器</h3>\n<ul>\n<li>是Serial收集器的老年代版本，是单线程收集器，采用“标记-整理算法”</li>\n<li>主要意义也是在于给Client模式下的虚拟机使用</li>\n<li>如果在Server模式下，那么它主要还有两大用途：</li>\n<li>&emsp;&emsp;在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用；</li>\n<li>&emsp;&emsp;作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。这两点都将在后面的内容中详细讲解。</li>\n</ul>\n<p>Serial与Serial Old工作过程如图：\n<img src=\"http://oss.dblearn.cn/dbblog/20190407/17ec844670b8481cb4efc86869298211.png\" alt=\"image.png\"></p>\n<p>要启用老年代串行收集器，可以尝试使用下面的参数：</p>\n<ul>\n<li>-XX:+UseSerialGC：新生代和老年代都是用串行收集器；</li>\n<li>-XX:+UseParNewGC：新生代使用ParNew收集器，老年代使用串行收集器；</li>\n<li>-XX:+UseParallelGC：新生代使用Parallel GC收集器，老年代使用串行收集器。</li>\n</ul>\n<h2 id=\"-\">并行收集器</h2>\n<p>并行收集器是多线程的收集器，在多核CPU下能够很好的提高收集性能。</p>\n<h3 id=\"parnew-\">ParNew收集器</h3>\n<p>ParNew收集器是Serial收集器的多线程版本。除了使用多条线程进行垃圾收集之外，其余行为如所有控制参数（例如：-XX：SurvivorRatio、-XX：PretenureSizeThreshold、-XX：HandlePromotionFailure等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。ParNew收集器的工作过程如下图所示：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190407/6243fe7ba7054dc385d9cb7fe908ed86.png\" alt=\"image.png\"></p>\n<ul>\n<li>运行在Server模式下的虚拟机中首选的新生代收集器，因为除了Serial收集器外，目前只有它能与CMS收集器配合工作</li>\n<li>由于存在线程交互的开销，ParNew收集器在单CPU环境下性能并没有单线程垃圾收集器性能好。</li>\n<li>可以使用-XX：ParallelGCThreads参数来限制垃圾收集的线程数。一般来说，当CPU数量小于8个时，宜设置为CPU数量；当CPU数量大于8个时，宜设置为3 + (( 5 * CPU_Count ) / 8 )。</li>\n</ul>\n<p>开启ParNew收集器可以使用以下参数：</p>\n<ul>\n<li>-XX：+UseParNewGC：新生代使用ParNew收集器，老年代使用串行收集器。</li>\n<li>-XX：+UseConcMarkSweepGC：新生代使用ParNew收集器，老年代使用CMS收集器。</li>\n</ul>\n<p>ParNew是并行的收集器，在这里介绍一下并行与并发的概念</p>\n<ul>\n<li>并行（Parallel）：多条收集器线程并行工作，但此时用户线程仍然处于等待状态。（合作）</li>\n<li>并发（Concurrent）：用户线程与垃圾收集器线程同时执行，不一定是并行执行，可能是交替执行（竞争）</li>\n</ul>\n<h3 id=\"parallel-scavenge-\">Parallel Scavenge收集器</h3>\n<p>Parallel Scavenge收集器与ParNew收集器类似，也是使用复制算法的并行的多线程新生代收集器。但Parallel Scavenge收集器关注可控制的吞吐量（Throughput）</p>\n<blockquote>\n<p>注：吞吐量是指CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（ 运行用户代码时间 + 垃圾收集时间 ）</p>\n</blockquote>\n<p>Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量：</p>\n<ul>\n<li>-XX：MaxGCPauseMillis：最大垃圾收集停顿时间，是一个大于0的毫秒数，收集器将回收时间尽量控制在这个设定值之内；但需要注意的是在同样的情况下，回收时间与回收次数是成反比的，回收时间越小，相应的回收次数就会增多。所以这个值并不是越小越好。</li>\n<li>-XX：GCTimeRatio：吞吐量大小，是一个(0, 100)之间的整数，表示垃圾收集时间占总时间的比率。</li>\n</ul>\n<p>除上述两个参数之外，Parallel Scavenge收集器还提供了一个参数-XX：+UseAdaptiveSizePolicy，当这个参数打开之后，就不需要手工指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX：SurvivorRatio）、晋升老年代对象年龄（-XX：PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。自适应调节策略也是Parallel Scavenge收集器与ParNew收集器的一个重要区别。</p>\n<h3 id=\"parallel-old-\">Parallel Old收集器</h3>\n<p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。这个收集器是在JDK 1.6中才开始提供的。</p>\n<p>由于如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old（PS MarkSweep）收集器外别无选择(Parallel Scavenge无法与CMS收集器配合工作)，Parallel Old收集器的出现就是为了解决这个问题。Parallel Scavenge和Parallel Old收集器的组合更适用于注重吞吐量以及CPU资源敏感的场合。Parallel Old收集器的工作过程下图所示：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190407/02dd5b80c40946a8990179ef1e939cdf.png\" alt=\"image.png\"></p>\n<h2 id=\"cms-\">CMS收集器</h2>\n<p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，也是基于“标记—清除”算法实现的，它的运作整个过程过程细分为4个步骤，包括：</p>\n<ul>\n<li>初始标记（CMS initial mark）：需要“Stop The World”，标记一下GC Roots能直接关联到的对象，速度很快。</li>\n<li>并发标记（CMS concurrent mark）：进行GC Roots Tracing的过程，标记老年代所有存活对象。</li>\n<li>重新标记（CMS remark）：需要“Stop The World”，修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。</li>\n<li>并发清除（CMS concurrent sweep）：清理垃圾。</li>\n</ul>\n<p>由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行，如图：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190407/520e095697bd4d16bf3b811ab0de29b6.png\" alt=\"image.png\"></p>\n<p>CMS有以下3个明显的缺点：</p>\n<ul>\n<li><p>CMS收集器对CPU资源非常敏感。CMS默认启动的回收线程数是( CPU Count + 3 ) / 4，当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，将分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%。</p>\n</li>\n<li><p>CMS收集器无法处理浮动垃圾（Floating Garbage），可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。浮动垃圾是指CMS在并发清理阶段用户线程还在同时执行时产生的垃圾。由于在垃圾收集阶段用户线程还需要运行，还需要预留有足够的内存空间给用户线程使用，因此需要预留一部分空间提供并发收集时的程序运作使用。在JDK 1.5的默认设置下，CMS收集器当老年代使用了68%的空间后就会被激活，可以适当调高参数-XX:CMSInitiatingOccupancyFraction的值来提高触发百分比，以降低内存回收次数；在JDK 1.6中，CMS收集器的启动阈值已经提升至92%。如果运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将临时启用Serial Old收集器来重新进行老年代的垃圾收集，导致停顿时间就很长了。所以说参数-XX:CMSInitiatingOccupancyFraction设置得太高很容易导致大量“Concurrent Mode Failure”失败，性能反而降低。</p>\n</li>\n<li><p>CMS是一款基于“标记—清除”算法实现的收集器，收集结束时会有大量空间碎片产生。空间碎片过多无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。为了解决这个问题，CMS收集器提供了一个-XX:+UseCMSCompactAtFullCollection开关参数（默认就是开启的），用于在CMS收集器要进行Full GC时开启内存碎片的合并整理过程，内存整理的过程是无法并发的，因此也会导致停顿时间变长。而另外一个参数-XX:CMSFullGCsBeforeCompaction可以设置执行多少次不压缩的Full GC后，才执行一次带压缩的（默认值为0，即每次进入Full GC时都进行碎片整理）。</p>\n</li>\n</ul>\n<h2 id=\"g1-\">G1收集器</h2>\n<p>G1是一款面向服务端应用的垃圾收集器，与其他GC收集器相比，G1具备如下特点：</p>\n<ul>\n<li>并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿的时间。</li>\n<li>分代收集：分代概念在G1中依然保留。G1可以独立管理整个GC堆，且采用不同的方式去处理分代对象。</li>\n<li>空间整合：G1从整体来看是基于“标记—整理”算法实现的，从局部（两个Region之间）上来看是基于“复制”算法实现的；G1收集后能提供规整的可用内存。\n可预测的停顿：G1能建立可预测的停顿时间模型，能明确指定垃圾收集相对于时间段的吞吐量。</li>\n<li>G1收集器将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。</li>\n</ul>\n<p>G1根据各个Region回收所获得的空间大小以及回收所需时间等指标在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region，从而可以有计划地避免在整个Java堆中进行全区域的垃圾收集。</p>\n<p>G1收集器运作步骤如下：</p>\n<ul>\n<li>初始标记（Initial Marking）:仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。（OopMap）</li>\n<li>并发标记（Concurrent Marking）: 进行GC Roots Tracing的过程</li>\n<li>最终标记（Final Marking）: 修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，也需要“Stop The World”。（修正Remebered Set）</li>\n<li>筛选回收（Live Data Counting and Evacuation）: 首先对各个Region的回收价值和成本进行排行，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li>\n</ul>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190407/2769f32ee7284845b770da9b75a108b8.png\" alt=\"image.png\"></p>\n<h2 id=\"-\">垃圾收集参数总结</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>UseSerialGC</td>\n<td>虚拟机运行在Client模式下的默认值，打开此开关后，使用 Serial+Serial Old 的收集器组合进行内存回收</td>\n</tr>\n<tr>\n<td>UseParNewGC</td>\n<td>打开此开关后，使用 ParNew + Serial Old 的收集器组合进行内存回收</td>\n</tr>\n<tr>\n<td>UseConcMarkSweepGC</td>\n<td>打开此开关后，使用 ParNew + CMS + Serial Old 的收集器组合进行内存回收。Serial Old 收集器将作为 CMS 收集器出现 Concurrent Mode Failure 失败后的后备收集器使用</td>\n</tr>\n<tr>\n<td>UseParallelGC</td>\n<td>虚拟机运行在 Server 模式下的默认值，打开此开关后，使用 Parallel Scavenge + Serial Old(PS MarkSweep) 的收集器组合进行内存回收</td>\n</tr>\n<tr>\n<td>UseParallelOldGC</td>\n<td>打开此开关后，使用 Parallel Scavenge + Parallel Old 的收集器组合进行内存回收</td>\n</tr>\n<tr>\n<td>SurvivorRatio</td>\n<td>新生代中 Eden 区域与 Survivor 区域的容量比值，默认为8，代表 Eden : Survivor = 8 : 1</td>\n</tr>\n<tr>\n<td>PretenureSizeThreshold</td>\n<td>直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配</td>\n</tr>\n<tr>\n<td>MaxTenuringThreshold</td>\n<td>晋升到老年代的对象年龄，每个对象在坚持过一次 Minor GC 之后，年龄就增加1，当超过这个参数值时就进入老年代</td>\n</tr>\n<tr>\n<td>UseAdaptiveSizePolicy</td>\n<td>动态调整 Java 堆中各个区域的大小以及进入老年代的年龄</td>\n</tr>\n<tr>\n<td>HandlePromotionFailure</td>\n<td>是否允许分配担保失败，即老年代的剩余空间不足以应付新生代的整个 Eden 和 Survivor 区的所有对象都存活的极端情况</td>\n</tr>\n<tr>\n<td>ParallelGCThreads</td>\n<td>设置并行GC时进行内存回收的线程数</td>\n</tr>\n<tr>\n<td>GCTimeRatio</td>\n<td>GC 时间占总时间的比率，默认值为99，即允许 1% 的GC时间，仅在使用 Parallel Scavenge 收集器生效</td>\n</tr>\n<tr>\n<td>MaxGCPauseMillis</td>\n<td>设置 GC 的最大停顿时间，仅在使用 Parallel Scavenge 收集器时生效</td>\n</tr>\n<tr>\n<td>CMSInitiatingOccupancyFraction</td>\n<td>设置 CMS 收集器在老年代空间被使用多少后触发垃圾收集，默认值为 68%，仅在使用 CMS 收集器时生效</td>\n</tr>\n<tr>\n<td>UseCMSCompactAtFullCollection</td>\n<td>设置 CMS 收集器在完成垃圾收集后是否要进行一次内存碎片整理，仅在使用 CMS 收集器时生效</td>\n</tr>\n<tr>\n<td>CMSFullGCsBeforeCompaction</td>\n<td>设置 CMS 收集器在进行若干次垃圾收集后再启动一次内存碎片整理，仅在使用 CMS 收集器时生效</td>\n</tr>\n</tbody></table>\n',35,0,NULL,1,'第三章：垃圾收集器与内存分配策略','2019-04-07 03:00:24','2019-04-07 13:42:35',0,'4,5,6',1,2,NULL),(5,'Java虚拟机05——内存分配与回收策略','探讨对象内存分配','Bobbi','对象的内存分配基本规律有以下几条：\n- 大多数情况下就是在堆上分配（但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配）。\n- 对象主要分配在新生代的Eden区上。\n- 如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。\n- 少数情况下也可能会直接分配在老年代中。\n\n对象的分配规则不是百分百固定的，其细节取决于当前使用的是哪一种垃圾收集组合，还有虚拟机中与内存相关的参数设置\n## 对象优先在Eden分配\n大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时将发起一次Minor GC。\n> Minor GC指发生在新生代的垃圾收集动作\n\n使用以下代码进行测试：\n```java \npublic class ObjMemoryTest {\n    private static  final int _1MB=1024*1024;\n    public static void testAllocation() {\n        byte[] allocation1,allocation2,allocation3,allocation4;\n        allocation1 = new byte[2* _1MB];\n        allocation2 = new byte[2* _1MB];\n        allocation3 = new byte[2* _1MB];\n        allocation4 = new byte[4* _1MB];\n    }\n\n    public static void main(String[] args) throws IOException {\n        ObjMemoryTest.testAllocation();\n    }\n}\n```\n其中，需要设置参数\n> -verbose:gc -XX:+PrintGCDetails -XX:+UseSerialGC -Xms20m -Xmx20m -Xmn10m -XX:SurvivorRatio=8\n\n上述参数解释如下：\n- -verbose:gc -XX:+PrintGCDetails：打印GC详细日志信息。\n- -XX:+UseSerialGC：使用Serial收集器。\n- -Xms20m -Xmx20m：限制Java堆大小为20MB。\n- -Xmn10m：新生代大小为10MB。\n- -XX:SurvivorRatio=8：设置新生代中Eden区与一个Survivor区的空间比例是8:1\n\n设置完后，Java堆共20M，新生代10M，老年代10M。其中新生代里的Eden 8M，两个Survivor各1M。代码运行日志如下：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190408/04cf29c471cf4457bbc41b6d82d006f8.png)\n\n解释：运行后新生代进行了GC回收，从8188K->714K。这次回收是给allocation4分配内存的时候，发现Edon区已经占用了6M，剩余空间已经不足分配allocation4的4M。所以执行了Minor GC，GC期间发现1M大小的Survivor无法放入allocaiton1~3，所以只好通过分配担保机制提前转移到老年代去。\n\nGC结束后，从GC日志上可以看到：4MB的allocation4被分配到Eden区，allocation1~3被分配到老年代中\n\n## 大对象直接进入老年代\n所谓的大对象是指需要大量连续内存空间的Java对象。虚拟机提供了一个-XX:PretenureSizeThreshold参数，大于这个设置值的对象将直接在老年代分配，从而避免在Eden区及两个Survivor区之间发生大量的内存复制（新生代主要采用复制算法收集内存）。有以下的测试代码：\n其中，需要设置参数\n> -verbose:gc -XX:+PrintGCDetails -XX:+UseSerialGC -Xms20m -Xmx20m -Xmn10m -XX:SurvivorRatio=8 -XX:PretenureSizeThreshold=3145728\n\n```java\n    public static void testPretenureSizeThreshold() {\n        byte[] allocation;\n        allocation = new byte[4*_1MB];\n    }\n```\n\n运行结果：\n![image.png](http://oss.dblearn.cn/dbblog/20190408/30728978f0c4432a80606929c2f074a8.png)\n\n从结果上看老年代被使用了4M，而新生代几乎没有使用，这是因为PretenureSizeThreshold被设置成3MB（也就是3145728），因此超过3MB的对象会直接在老年代进行分配\n\n## 长期存活的对象将进入老年代\n虚拟机给每个对象定义了一个对象年龄（Age）计数器，如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，对象年龄为1，对象在Survivor区中熬过一次Minor GC，年龄增加1。当它的年龄增加到一定程度（默认15），就会被晋升到老年代中。晋升的阈值可以通过参数-XX:MaxTenuringThreshold设置。实例代码如下：\n其中，需要设置参数\n> -verbose:gc -XX:+PrintGCDetails -XX:+UseSerialGC -Xms20m -Xmx20m -Xmn10m -XX:SurvivorRatio=8\n\n```java\n    public static void testMaxTenuredThreshold() {\n        byte[] allocation1;\n        byte[] allocation2;\n        byte[] allocation3;\n        byte[] allocation4;\n\n        allocation1 = new byte[_1MB / 4];\n        allocation2 = new byte[4 * _1MB];\n        allocation3 = new byte[4 * _1MB];\n        allocation3 = null;\n        allocation4 = new byte[4 * _1MB];\n    }\n```\nalocation1为256kb内存，Survivor空间可以容纳，而allocation2、allocation3和allocation4需要4MB的空间，并不能被Survivor区容纳。\n\n当设置MaxTenuringThreshold = 1时，内存信息如下\n![image.png](http://oss.dblearn.cn/dbblog/20190409/e6ffc0b1d07c41338da377dd7b1e41e7.png)\n\n由于Eden区域的总大小是8MB，因此在分配allocation3时会因为Eden区空闲大小不够而发生一次Minor GC操作，这时allocation1会被移入到Survivor区中，allocation2因Survivor区并不能容纳会被提前提升到老年代。接下来在分配allocation3后分配allocation4还会触发第二次Minor GC操作，这次操作由于allocation1达到了晋升年龄，会被晋升到老年代，而allocation3会被回收，所以第二次Minor GC后新生代的已使用大小会变为0K，最后allocation4会被分配到Eden区，因此得到的最终内存空间的分配是Eden区使用51%（4MB+，用于存放allocation4），Survivor区域已使用全为0，老年代已使用5059K（4MB+，用于存放allocation1和allocation2）。\n\n而设置-XX:MaxTenuringThreshold=15后，将会得到以下的结果：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190409/7051cbbb74a44a80bb53d46f4507b3ee.png)\n\n> 注：如果在某些版本的JDK中不生效，可以设置-XX:TargetSurvivorRatio=95参数调大Survivor区域的使用率\n\n可以看到Survivor区不为空，这是由于allocation1还没有被判定为长期存活的对象，还存在与Survivor区导致的。\n\n## 动态年龄判定\n为了能更好地适应不同程序的内存状况，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须达到MaxTenuringThreshold中要求的年龄。\n\n在执行下面的testMaxTenuredThreshold2()方法时，设置了-XX:MaxTenuringThreshold=15参数，会发现运行结果中Survivor的空间占用仍然为0%，而老年代比预期增加了11%，也就是说，allocation1、allocation2对象都直接进入了老年代，而没有等到15岁的临界年龄。因为这两个对象加起来已经到达了512KB，并且它们是同年的，满足同年对象达到Survivor空间的一半规则。我们只要注释掉其中一个对象new操作，就会发现另外一个就不会晋升到老年代中去了。\n\n> -verbose:gc -XX:+PrintGCDetails -XX:+UseSerialGC -Xms20m -Xmx20m -Xmn10m -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=15 -XX:TargetSurvivorRatio=95\n\n```java\npublic static void testMaxTenuredThreshold2() {\n        byte[] allocation1;\n        byte[] allocation2;\n        byte[] allocation3;\n        byte[] allocation4;\n\n        allocation1 = new byte[_1MB / 4];\n        allocation2 = new byte[_1MB / 4];\n        allocation3 = new byte[4 * _1MB];\n        allocation4 = new byte[4 * _1MB];\n        allocation4 = null;\n        allocation4 = new byte[4 * _1MB];\n    }\n```\n\n![image.png](http://oss.dblearn.cn/dbblog/20190409/3223edc307c643bb8279f29b0459a9f2.png)\n\n## 空间分配担保\n在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。\n\n新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。\n\n取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败（HandlePromotion Failure）。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。\n\n但是JDK 6 Update 24之后代码中已经不再使用HandlePromotionFailure，JDK 6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行Full GC。','<p>对象的内存分配基本规律有以下几条：</p>\n<ul>\n<li>大多数情况下就是在堆上分配（但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配）。</li>\n<li>对象主要分配在新生代的Eden区上。</li>\n<li>如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。</li>\n<li>少数情况下也可能会直接分配在老年代中。</li>\n</ul>\n<p>对象的分配规则不是百分百固定的，其细节取决于当前使用的是哪一种垃圾收集组合，还有虚拟机中与内存相关的参数设置</p>\n<h2 id=\"-eden-\">对象优先在Eden分配</h2>\n<p>大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时将发起一次Minor GC。</p>\n<blockquote>\n<p>Minor GC指发生在新生代的垃圾收集动作</p>\n</blockquote>\n<p>使用以下代码进行测试：</p>\n<pre><code class=\"language-java\">public class ObjMemoryTest {\n    private static  final int _1MB=1024*1024;\n    public static void testAllocation() {\n        byte[] allocation1,allocation2,allocation3,allocation4;\n        allocation1 = new byte[2* _1MB];\n        allocation2 = new byte[2* _1MB];\n        allocation3 = new byte[2* _1MB];\n        allocation4 = new byte[4* _1MB];\n    }\n\n    public static void main(String[] args) throws IOException {\n        ObjMemoryTest.testAllocation();\n    }\n}</code></pre>\n<p>其中，需要设置参数</p>\n<blockquote>\n<p>-verbose:gc -XX:+PrintGCDetails -XX:+UseSerialGC -Xms20m -Xmx20m -Xmn10m -XX:SurvivorRatio=8</p>\n</blockquote>\n<p>上述参数解释如下：</p>\n<ul>\n<li>-verbose:gc -XX:+PrintGCDetails：打印GC详细日志信息。</li>\n<li>-XX:+UseSerialGC：使用Serial收集器。</li>\n<li>-Xms20m -Xmx20m：限制Java堆大小为20MB。</li>\n<li>-Xmn10m：新生代大小为10MB。</li>\n<li>-XX:SurvivorRatio=8：设置新生代中Eden区与一个Survivor区的空间比例是8:1</li>\n</ul>\n<p>设置完后，Java堆共20M，新生代10M，老年代10M。其中新生代里的Eden 8M，两个Survivor各1M。代码运行日志如下：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190408/04cf29c471cf4457bbc41b6d82d006f8.png\" alt=\"image.png\"></p>\n<p>解释：运行后新生代进行了GC回收，从8188K-&gt;714K。这次回收是给allocation4分配内存的时候，发现Edon区已经占用了6M，剩余空间已经不足分配allocation4的4M。所以执行了Minor GC，GC期间发现1M大小的Survivor无法放入allocaiton1~3，所以只好通过分配担保机制提前转移到老年代去。</p>\n<p>GC结束后，从GC日志上可以看到：4MB的allocation4被分配到Eden区，allocation1~3被分配到老年代中</p>\n<h2 id=\"-\">大对象直接进入老年代</h2>\n<p>所谓的大对象是指需要大量连续内存空间的Java对象。虚拟机提供了一个-XX:PretenureSizeThreshold参数，大于这个设置值的对象将直接在老年代分配，从而避免在Eden区及两个Survivor区之间发生大量的内存复制（新生代主要采用复制算法收集内存）。有以下的测试代码：\n其中，需要设置参数</p>\n<blockquote>\n<p>-verbose:gc -XX:+PrintGCDetails -XX:+UseSerialGC -Xms20m -Xmx20m -Xmn10m -XX:SurvivorRatio=8 -XX:PretenureSizeThreshold=3145728</p>\n</blockquote>\n<pre><code class=\"language-java\">    public static void testPretenureSizeThreshold() {\n        byte[] allocation;\n        allocation = new byte[4*_1MB];\n    }</code></pre>\n<p>运行结果：\n<img src=\"http://oss.dblearn.cn/dbblog/20190408/30728978f0c4432a80606929c2f074a8.png\" alt=\"image.png\"></p>\n<p>从结果上看老年代被使用了4M，而新生代几乎没有使用，这是因为PretenureSizeThreshold被设置成3MB（也就是3145728），因此超过3MB的对象会直接在老年代进行分配</p>\n<h2 id=\"-\">长期存活的对象将进入老年代</h2>\n<p>虚拟机给每个对象定义了一个对象年龄（Age）计数器，如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，对象年龄为1，对象在Survivor区中熬过一次Minor GC，年龄增加1。当它的年龄增加到一定程度（默认15），就会被晋升到老年代中。晋升的阈值可以通过参数-XX:MaxTenuringThreshold设置。实例代码如下：\n其中，需要设置参数</p>\n<blockquote>\n<p>-verbose:gc -XX:+PrintGCDetails -XX:+UseSerialGC -Xms20m -Xmx20m -Xmn10m -XX:SurvivorRatio=8</p>\n</blockquote>\n<pre><code class=\"language-java\">    public static void testMaxTenuredThreshold() {\n        byte[] allocation1;\n        byte[] allocation2;\n        byte[] allocation3;\n        byte[] allocation4;\n\n        allocation1 = new byte[_1MB / 4];\n        allocation2 = new byte[4 * _1MB];\n        allocation3 = new byte[4 * _1MB];\n        allocation3 = null;\n        allocation4 = new byte[4 * _1MB];\n    }</code></pre>\n<p>alocation1为256kb内存，Survivor空间可以容纳，而allocation2、allocation3和allocation4需要4MB的空间，并不能被Survivor区容纳。</p>\n<p>当设置MaxTenuringThreshold = 1时，内存信息如下\n<img src=\"http://oss.dblearn.cn/dbblog/20190409/e6ffc0b1d07c41338da377dd7b1e41e7.png\" alt=\"image.png\"></p>\n<p>由于Eden区域的总大小是8MB，因此在分配allocation3时会因为Eden区空闲大小不够而发生一次Minor GC操作，这时allocation1会被移入到Survivor区中，allocation2因Survivor区并不能容纳会被提前提升到老年代。接下来在分配allocation3后分配allocation4还会触发第二次Minor GC操作，这次操作由于allocation1达到了晋升年龄，会被晋升到老年代，而allocation3会被回收，所以第二次Minor GC后新生代的已使用大小会变为0K，最后allocation4会被分配到Eden区，因此得到的最终内存空间的分配是Eden区使用51%（4MB+，用于存放allocation4），Survivor区域已使用全为0，老年代已使用5059K（4MB+，用于存放allocation1和allocation2）。</p>\n<p>而设置-XX:MaxTenuringThreshold=15后，将会得到以下的结果：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190409/7051cbbb74a44a80bb53d46f4507b3ee.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>注：如果在某些版本的JDK中不生效，可以设置-XX:TargetSurvivorRatio=95参数调大Survivor区域的使用率</p>\n</blockquote>\n<p>可以看到Survivor区不为空，这是由于allocation1还没有被判定为长期存活的对象，还存在与Survivor区导致的。</p>\n<h2 id=\"-\">动态年龄判定</h2>\n<p>为了能更好地适应不同程序的内存状况，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须达到MaxTenuringThreshold中要求的年龄。</p>\n<p>在执行下面的testMaxTenuredThreshold2()方法时，设置了-XX:MaxTenuringThreshold=15参数，会发现运行结果中Survivor的空间占用仍然为0%，而老年代比预期增加了11%，也就是说，allocation1、allocation2对象都直接进入了老年代，而没有等到15岁的临界年龄。因为这两个对象加起来已经到达了512KB，并且它们是同年的，满足同年对象达到Survivor空间的一半规则。我们只要注释掉其中一个对象new操作，就会发现另外一个就不会晋升到老年代中去了。</p>\n<blockquote>\n<p>-verbose:gc -XX:+PrintGCDetails -XX:+UseSerialGC -Xms20m -Xmx20m -Xmn10m -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=15 -XX:TargetSurvivorRatio=95</p>\n</blockquote>\n<pre><code class=\"language-java\">public static void testMaxTenuredThreshold2() {\n        byte[] allocation1;\n        byte[] allocation2;\n        byte[] allocation3;\n        byte[] allocation4;\n\n        allocation1 = new byte[_1MB / 4];\n        allocation2 = new byte[_1MB / 4];\n        allocation3 = new byte[4 * _1MB];\n        allocation4 = new byte[4 * _1MB];\n        allocation4 = null;\n        allocation4 = new byte[4 * _1MB];\n    }</code></pre>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190409/3223edc307c643bb8279f29b0459a9f2.png\" alt=\"image.png\"></p>\n<h2 id=\"-\">空间分配担保</h2>\n<p>在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。</p>\n<p>新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。</p>\n<p>取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败（HandlePromotion Failure）。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。</p>\n<p>但是JDK 6 Update 24之后代码中已经不再使用HandlePromotionFailure，JDK 6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行Full GC。</p>\n',94,5,NULL,1,'第三章：垃圾收集器与内存分配策略','2019-04-08 10:24:37','2019-04-09 04:58:02',0,'4,5,6',1,2,NULL),(6,'Java虚拟机06——类加载机制','虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制','Bobbi','虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制\n\n在Java语言里面，类型的加载、连接和初始化过程都是在程序运行期间完成的，虽然会令类加载时稍微增加一些性能开销，但是会为Java应用程序提供高度的灵活性，Java里天生可以动态扩展的语言特性，就是以来运行期动态加载和动态连接这个特点实现的。\n\n## 类加载的时机\n类从被加载到虚拟机内存中开始，到卸载出内存为止，它的生命周期包括：加载(Loading)->验证(Verification)->准备(Preparation)->解析(Resolution)->初始化(Initialization)->使用(Using)->卸载(Unloading)。其中，验证，准备，解析3部分统称为连接。如图\n\n![image.png](https://user-gold-cdn.xitu.io/2019/4/11/16a0cbc8b2199cd2?w=720&h=318&f=png&s=22620)\n\n- 加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始；\n- 在某些情况下，解析阶段可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）。\n- 这些阶段一般都是互相交叉地混合式进行的，在一个阶段执行的过程中通常会调用、激活另外一个阶段。\n\n类加载第一过程：加载，Java虚拟机规范中并没有进行强制约束，这点可以交给虚拟机的具体实现来自由把握。对于初始化，虚拟机规范则是严格规定了*有且仅有*7种情况必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前）\n1. 使用new关键字实例化对象的时候\n2. 读取或设置一个类的静态字段（被final修饰、已在编译器把结果放入常量池的静态字段除外）\n3. 调用一个类的静态方法的时候\n4. 使用Java.lang.reflect包的方法对类进行反射调用的时候\n5. 初始化子类，会先初始化父类\n6. 虚拟机启动时，用户需要指定一个要执行的主类（包含main方法的那个类），虚拟机会先初始化这个主类\n7. 当使用jdk1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。\n\n## 类加载的过程\n### 加载\n加载时类加载（Class Loading）过程的一个阶段。在加载阶段，虚拟机需要完成以下三件事：\n1. 通过一个类的全限定名称来获取定义此类的二进制流。\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\n3. 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口\n\n虚拟机实现与具体应用的灵活度都是相当大的，如第一条，虚拟机设计团队设计了如下举足轻重的技术：\n- 从ZIP包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础\n- 从网络中获取，这种场景最典型的应用就是Applet\n- 运行时计算生成，动态代理技术，在Proxy类中，就是用了ProxyGenerator.generateProxyClass来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流\n- 由其他文件生成，典型场景就是JSP应用，即由JSP文件生成对应的Class类\n- 从数据库中读取，如有些中间件服务器（如SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。\n\n一个非数组类的加载阶段（加载阶段中获取类的二进制字节码）时开发人员可控性最强的。开发人员可以通过定义自己的类加载器去控制字节流的获取方式，即重写一个类加载器的loadClass()方法\n\n对于数组类而言，数组类本身不通过类加载器创建，它是由Java虚拟机直接创建的，一个数组类创建过程就遵循以下规则  \n1. 如果数组的组件类型（Component Type，指的是数组去掉一个维度的类型）是引用类型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组将在加载该组件类型的类加载器的类名称空间上被标识（一个类必须与类加载器一起确定唯一性）。\n2. 如果数组的组件类型不是引用类型（例如int[]数组），Java虚拟机会把数组标记为与引导类加载器关联。\n3. 数组类的可见性与它的组件类型的可见性一致，如果组件类型不是引用类型，那数组类的可见性将默认为public。\n\n加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义。然后在内存中实例化一个java.lang.Class类的对象，这个对象将作为程序访问方法区中的这些类型数据的外部接口。\n\n> 注：对于HotSpot虚拟机而言，Class对象比较特殊，它虽然是对象，但存放在方法区里面。\n\n加载阶段与连接阶段的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。\n\n### 验证\n验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的需求，并且不会危害虚拟机自身的安全。从整体上看，验证阶段大致上会完成下面4个阶段的校验动作：\n#### 文件格式验证\n验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。可能包括以下验证点：\n- 是否以魔数0xCAFEBABE开头。\n- 主、次版本号是否在当前虚拟机处理范围之内。\n- 常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。\n- 指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。\n- CONSTANT_Utf8_info型的常量中是否有不符合UTF8编码的数据。\n- Class文件中各个部分及文件本身是否有被删除的或附加的其他信息。\n- ...\n\n这阶段的验证是基于二进制字节流进行的，只有通过了这个阶段的验证后，字节流才会进入内存的方法区中进行存储，所以后面的3个验证阶段全部是基于方法区的存储结构进行的，不会再验证字节流\n#### 元数据验证\n第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求，这个阶段可能的验证点如下：\n- 这个类是否有父类（除了java.lang.Object之外，所有类都应当有父类）。\n- 这个类是否继承了不允许被继承的类（被final修饰的类）。\n- 如果这个类不是抽象类，是否实现了其父类或接口之中所要求实现的所有方法。\n- 类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等等）。\n- ...\n\n#### 字节码验证\n主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。在第二阶段对元数据中的数据类型做完校验后，这个阶段将对方法体进行校验分析，例如：\n- 保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似这样的情况：在操作数栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中。\n- 保证跳转指令不会跳转到方法体以外的字节码指令上。\n- 保证方法体中的类型转换是有效的，例如可以把一个子类对象赋值给父类数据类型，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险不合法的。\n- ...\n\n如果一个类方法体的字节码没有通过字节码验证，那肯定是有问题的；但如果一个方法体通过了字节码验证，也不能说明其一定就是安全的。即使字节码验证之中进行了大量的检查，也不能保证这一点。\n\n由于数据流验证的高复杂性，虚拟机设计团队为了避免过多的时间消耗在字节码验证阶段，在JDK 1.6之后的Javac编译器和Java虚拟机中给方法体的Code属性的属性表中增加了一项StackMapTable属性，用于描述了方法体中所有的基本块（Basic Block，按照控制流拆分的代码块）开始时本地变量表和操作栈应有的状态，在字节码验证期间，就不需要根据程序推导这些状态的合法性，只需要检查StackMapTable属性中的记录是否合法即可。这样将字节码验证的类型推导转变为类型检查从而节省一些时间。\n\n在JDK 1.6的HotSpot虚拟机中提供了-XX:-UseSplitVerifier选项来关闭这项优化，或者使用参数-XX:+FailOverToOldVerifier要求在类型校验失败的时候退回到旧的类型推导方式进行校验。而在JDK 1.7之后，对于主版本号大于50的Class文件，使用类型检查来完成数据流分析校验则是唯一的选择，不允许再退回到类型推导的校验方式。\n\n#### 符号引用验证\n符号引用验证阶段的校验发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。符号引用验证可以看做是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验，通常需要校验下列内容：\n- 符号引用中通过字符串描述的全限定名是否能找到对应的类。\n- 在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。\n- 符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可被当前类访问\n- ...\n\n符号引用验证的目的是确保解析动作能正常执行，如果无法通过符号引用验证，那么将会抛出一个java.lang.IncompatibleClassChangeError异常的子类，如java.lang.IllegalAccessError、java.lang.NoSuchFieldError、java.lang.NoSuchMethodError等。\n\n对于虚拟机的类加载机制来说，验证阶段是一个非常重要的、但不是一定必要（因为对程序运行期没有影响）的阶段。如果所运行的全部代码（包括自己编写的及第三方包中的代码）都已经被反复使用和验证过，那么在实施阶段就可以考虑使用-Xverify:none参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。\n\n### 准备\n准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这个阶段中有两个容易产生混淆的概念需要强调一下，首先，这时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在Java堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值，假设一个类变量的定义为public static int value = 123，那变量value在准备阶段过后的初始值为0而不是123，因为这时候尚未开始执行任何Java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器<clinit>()方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。下表列出了Java中所有基本数据类型的零值：\n\n|数据类型|零值|\n|-|-|	\n|int|0|\n|long|0L|\n|short|(short)0|\n|char|‘\\u0000’|\n|byte|(byte)0|\n|boolean|false|\n|float|0.0f|\n|double|0.0d|\n|reference|null|\n\n假设上面类变量value的定义被修饰为final，则value会变为常量，此时value的字段属性表中存在ConstantValue属性，在准备阶段变量value会被初始化为ConstantValue属性所指定的值，编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为123。\n\n### 解析\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。\n- 符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。\n- 直接引用（Direct References）：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在内存中存在。 \n\n解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行，分别对应于常量池的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info、CONSTANT_MethodType_info、CONSTANT_MethodHandle_info和CONSTANT_InvokeDynamic_info这7种常量类型。下面先介绍前4种。\n\n#### 类或接口的解析\n假设当前类为D，需要将未解析过的符号引用N解析为一个类或接口C的直接引用，主要有三个步骤：\n1. 如果C是非数组类型，D的类加载器会根据代表N的全限定名去加载C，加载过程中可能会触发其他相关类的加载。\n2. 如果C是数组类型，且数组的元素类型为非基本类型，那么首先会按第一步中的方式加载数组元素类型，然后生成一个代表此数组维度和元素的数组对象。\n3. 如果前两步没有出现任何异常，那么C在虚拟机中实际上已经成为一个有效的类或接口了，但在解析完成之前还要进行符号引用验证，确认D是否具备对C的访问权限。如果发现不具备访问权限，将抛出java.lang.IllegalAccessError异常。\n\n#### 字段的解析\n要解析一个未被解析过的字段符号引用，首先将会对字段表的第一个index索引项指向的CONSTANT_Class_info符号引用进行解析，也就是字段所在的类或接口的符号引用。如果在解析这个类或接口符号引用的过程中出现了任何异常，都会导致字段符号引用解析的失败。如果解析成功完成，那将这个字段所属的类或接口用C表示，虚拟机规范要求按照如下步骤对C进行后续字段的搜索：\n1. 如果C本身就包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。\n2. 否则，如果在C中实现了接口，将会按照继承关系从下往上递归搜索各个接口和它的父接口，如果接口中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。\n3. 否则，如果C不是java.lang.Object的话，将会按照继承关系从下往上递归搜索其父类，如果在父类中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。\n4. 否则，查找失败，抛出java.lang.NoSuchFieldError异常。\n如果有一个同名字段同时出现在C的接口和父类中，或者同时在自己或父类的多个接口中出现，那编译器将可能拒绝编译。\n\n如果查找过程成功返回了引用，将会对这个字段进行权限验证，如果发现不具备对字段的访问权限，将抛出java.lang.IllegalAccessError异常。\n\n#### 类方法的解析\n类方法解析的第一个步骤与字段解析一样，也需要先解析出类方法表的第一个index索引项指向的方法所属的类或接口的符号引用，如果解析成功，我们依然用C表示这个类，接下来虚拟机将会按照如下步骤进行后续的类方法搜索：\n1. 类方法和接口方法符号引用的常量类型定义是分开的，如果在类方法表中发现第一个index索引项指向的C是个接口，那就直接抛出java.lang.IncompatibleClassChangeError异常。\n2. 如果通过了第1步，在类C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。\n3. 否则，在类C的父类中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。\n4. 否则，在类C实现的接口列表及它们的父接口之中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果存在匹配的方法，说明类C是一个抽象类，这时查找结束，抛出java.lang.AbstractMethodError异常。\n5. 否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError。\n最后，如果查找过程成功返回了直接引用，将会对这个方法进行权限验证，如果发现不具备对此方法的访问权限，将抛出java.lang.IllegalAccessError异常。\n\n#### 接口方法的解析\n接口方法也需要先解析出接口方法表中指向声明方法的类或接口描述符的符号引用，如果解析成功，依然用C表示这个接口，接下来虚拟机将会按照如下步骤进行后续的接口方法搜索：\n1. 与类方法解析不同，如果在接口方法表中发现声明方法的类或接口描述符中的索引C是个类而不是接口，那就直接抛出java.lang.IncompatibleClassChangeError异常。\n2. 否则，在接口C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。\n3. 否则，在接口C的父接口中递归查找，直到java.lang.Object类（查找范围会包括Object类）为止，看是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。\n4. 否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError异常。\n由于接口中的所有方法默认都是public的，所以不存在访问权限的问题，因此接口方法的符号解析应当不会抛出java.lang.IllegalAccessError异常。\n\n### 初始化\n初始化阶段是执行类构造器&lt;clinit>()方法的过程。在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则根据程序员通过程序制定的主观计划去初始化类变量和其他资源。\n- &lt;clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}代码块）中的语句合并产生的.\n- &lt;clinit>()方法不需要显式地调用父类构造器，虚拟机会保证在子类的&lt;clinit>()方法执行之前，父类的&lt;clinit>()方法已经执行完毕。因此在虚拟机中第一个被执行的&lt;clinit>()方法的类肯定是java.lang.Object。\n- 父类的&lt;clinit>()方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作\n-如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成&lt;clinit>()方法。\n- 接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成&lt;clinit>()方法。与类不同的是，执行接口的&lt;clinit>()方法不需要先执行父接口的&lt;clinit>()方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的&lt;clinit>()方法。\n- 虚拟机会保证一个类的&lt;clinit>()方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的&lt;clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行&lt;clinit>()方法完毕。如果在一个类的&lt;clinit>()方法中有耗时很长的操作，就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。需要注意的是，其他线程虽然会被阻塞，但如果执行&lt;clinit>()方法的那条线程退出&lt;clinit>()方法后，其他线程唤醒之后不会再次进入&lt;clinit>()方法。同一个类加载器下，一个类型只会初始化一次。\n\n\n','<p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制</p>\n<p>在Java语言里面，类型的加载、连接和初始化过程都是在程序运行期间完成的，虽然会令类加载时稍微增加一些性能开销，但是会为Java应用程序提供高度的灵活性，Java里天生可以动态扩展的语言特性，就是以来运行期动态加载和动态连接这个特点实现的。</p>\n<h2 id=\"-\">类加载的时机</h2>\n<p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的生命周期包括：加载(Loading)-&gt;验证(Verification)-&gt;准备(Preparation)-&gt;解析(Resolution)-&gt;初始化(Initialization)-&gt;使用(Using)-&gt;卸载(Unloading)。其中，验证，准备，解析3部分统称为连接。如图</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/4/11/16a0cbc8b2199cd2?w=720&h=318&f=png&s=22620\" alt=\"image.png\"></p>\n<ul>\n<li>加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始；</li>\n<li>在某些情况下，解析阶段可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）。</li>\n<li>这些阶段一般都是互相交叉地混合式进行的，在一个阶段执行的过程中通常会调用、激活另外一个阶段。</li>\n</ul>\n<p>类加载第一过程：加载，Java虚拟机规范中并没有进行强制约束，这点可以交给虚拟机的具体实现来自由把握。对于初始化，虚拟机规范则是严格规定了<em>有且仅有</em>7种情况必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前）</p>\n<ol>\n<li>使用new关键字实例化对象的时候</li>\n<li>读取或设置一个类的静态字段（被final修饰、已在编译器把结果放入常量池的静态字段除外）</li>\n<li>调用一个类的静态方法的时候</li>\n<li>使用Java.lang.reflect包的方法对类进行反射调用的时候</li>\n<li>初始化子类，会先初始化父类</li>\n<li>虚拟机启动时，用户需要指定一个要执行的主类（包含main方法的那个类），虚拟机会先初始化这个主类</li>\n<li>当使用jdk1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li>\n</ol>\n<h2 id=\"-\">类加载的过程</h2>\n<h3 id=\"-\">加载</h3>\n<p>加载时类加载（Class Loading）过程的一个阶段。在加载阶段，虚拟机需要完成以下三件事：</p>\n<ol>\n<li>通过一个类的全限定名称来获取定义此类的二进制流。</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li>\n</ol>\n<p>虚拟机实现与具体应用的灵活度都是相当大的，如第一条，虚拟机设计团队设计了如下举足轻重的技术：</p>\n<ul>\n<li>从ZIP包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础</li>\n<li>从网络中获取，这种场景最典型的应用就是Applet</li>\n<li>运行时计算生成，动态代理技术，在Proxy类中，就是用了ProxyGenerator.generateProxyClass来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流</li>\n<li>由其他文件生成，典型场景就是JSP应用，即由JSP文件生成对应的Class类</li>\n<li>从数据库中读取，如有些中间件服务器（如SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。</li>\n</ul>\n<p>一个非数组类的加载阶段（加载阶段中获取类的二进制字节码）时开发人员可控性最强的。开发人员可以通过定义自己的类加载器去控制字节流的获取方式，即重写一个类加载器的loadClass()方法</p>\n<p>对于数组类而言，数组类本身不通过类加载器创建，它是由Java虚拟机直接创建的，一个数组类创建过程就遵循以下规则  </p>\n<ol>\n<li>如果数组的组件类型（Component Type，指的是数组去掉一个维度的类型）是引用类型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组将在加载该组件类型的类加载器的类名称空间上被标识（一个类必须与类加载器一起确定唯一性）。</li>\n<li>如果数组的组件类型不是引用类型（例如int[]数组），Java虚拟机会把数组标记为与引导类加载器关联。</li>\n<li>数组类的可见性与它的组件类型的可见性一致，如果组件类型不是引用类型，那数组类的可见性将默认为public。</li>\n</ol>\n<p>加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义。然后在内存中实例化一个java.lang.Class类的对象，这个对象将作为程序访问方法区中的这些类型数据的外部接口。</p>\n<blockquote>\n<p>注：对于HotSpot虚拟机而言，Class对象比较特殊，它虽然是对象，但存放在方法区里面。</p>\n</blockquote>\n<p>加载阶段与连接阶段的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。</p>\n<h3 id=\"-\">验证</h3>\n<p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的需求，并且不会危害虚拟机自身的安全。从整体上看，验证阶段大致上会完成下面4个阶段的校验动作：</p>\n<h4 id=\"-\">文件格式验证</h4>\n<p>验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。可能包括以下验证点：</p>\n<ul>\n<li>是否以魔数0xCAFEBABE开头。</li>\n<li>主、次版本号是否在当前虚拟机处理范围之内。</li>\n<li>常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。</li>\n<li>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</li>\n<li>CONSTANT_Utf8_info型的常量中是否有不符合UTF8编码的数据。</li>\n<li>Class文件中各个部分及文件本身是否有被删除的或附加的其他信息。</li>\n<li>...</li>\n</ul>\n<p>这阶段的验证是基于二进制字节流进行的，只有通过了这个阶段的验证后，字节流才会进入内存的方法区中进行存储，所以后面的3个验证阶段全部是基于方法区的存储结构进行的，不会再验证字节流</p>\n<h4 id=\"-\">元数据验证</h4>\n<p>第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求，这个阶段可能的验证点如下：</p>\n<ul>\n<li>这个类是否有父类（除了java.lang.Object之外，所有类都应当有父类）。</li>\n<li>这个类是否继承了不允许被继承的类（被final修饰的类）。</li>\n<li>如果这个类不是抽象类，是否实现了其父类或接口之中所要求实现的所有方法。</li>\n<li>类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等等）。</li>\n<li>...</li>\n</ul>\n<h4 id=\"-\">字节码验证</h4>\n<p>主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。在第二阶段对元数据中的数据类型做完校验后，这个阶段将对方法体进行校验分析，例如：</p>\n<ul>\n<li>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似这样的情况：在操作数栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中。</li>\n<li>保证跳转指令不会跳转到方法体以外的字节码指令上。</li>\n<li>保证方法体中的类型转换是有效的，例如可以把一个子类对象赋值给父类数据类型，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险不合法的。</li>\n<li>...</li>\n</ul>\n<p>如果一个类方法体的字节码没有通过字节码验证，那肯定是有问题的；但如果一个方法体通过了字节码验证，也不能说明其一定就是安全的。即使字节码验证之中进行了大量的检查，也不能保证这一点。</p>\n<p>由于数据流验证的高复杂性，虚拟机设计团队为了避免过多的时间消耗在字节码验证阶段，在JDK 1.6之后的Javac编译器和Java虚拟机中给方法体的Code属性的属性表中增加了一项StackMapTable属性，用于描述了方法体中所有的基本块（Basic Block，按照控制流拆分的代码块）开始时本地变量表和操作栈应有的状态，在字节码验证期间，就不需要根据程序推导这些状态的合法性，只需要检查StackMapTable属性中的记录是否合法即可。这样将字节码验证的类型推导转变为类型检查从而节省一些时间。</p>\n<p>在JDK 1.6的HotSpot虚拟机中提供了-XX:-UseSplitVerifier选项来关闭这项优化，或者使用参数-XX:+FailOverToOldVerifier要求在类型校验失败的时候退回到旧的类型推导方式进行校验。而在JDK 1.7之后，对于主版本号大于50的Class文件，使用类型检查来完成数据流分析校验则是唯一的选择，不允许再退回到类型推导的校验方式。</p>\n<h4 id=\"-\">符号引用验证</h4>\n<p>符号引用验证阶段的校验发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。符号引用验证可以看做是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验，通常需要校验下列内容：</p>\n<ul>\n<li>符号引用中通过字符串描述的全限定名是否能找到对应的类。</li>\n<li>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。</li>\n<li>符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可被当前类访问</li>\n<li>...</li>\n</ul>\n<p>符号引用验证的目的是确保解析动作能正常执行，如果无法通过符号引用验证，那么将会抛出一个java.lang.IncompatibleClassChangeError异常的子类，如java.lang.IllegalAccessError、java.lang.NoSuchFieldError、java.lang.NoSuchMethodError等。</p>\n<p>对于虚拟机的类加载机制来说，验证阶段是一个非常重要的、但不是一定必要（因为对程序运行期没有影响）的阶段。如果所运行的全部代码（包括自己编写的及第三方包中的代码）都已经被反复使用和验证过，那么在实施阶段就可以考虑使用-Xverify:none参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p>\n<h3 id=\"-\">准备</h3>\n<p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这个阶段中有两个容易产生混淆的概念需要强调一下，首先，这时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在Java堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值，假设一个类变量的定义为public static int value = 123，那变量value在准备阶段过后的初始值为0而不是123，因为这时候尚未开始执行任何Java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器<clinit>()方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。下表列出了Java中所有基本数据类型的零值：</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>零值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>short</td>\n<td>(short)0</td>\n</tr>\n<tr>\n<td>char</td>\n<td>‘\\u0000’</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>(byte)0</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>float</td>\n<td>0.0f</td>\n</tr>\n<tr>\n<td>double</td>\n<td>0.0d</td>\n</tr>\n<tr>\n<td>reference</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<p>假设上面类变量value的定义被修饰为final，则value会变为常量，此时value的字段属性表中存在ConstantValue属性，在准备阶段变量value会被初始化为ConstantValue属性所指定的值，编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为123。</p>\n<h3 id=\"-\">解析</h3>\n<p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<ul>\n<li>符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</li>\n<li>直接引用（Direct References）：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在内存中存在。 </li>\n</ul>\n<p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行，分别对应于常量池的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info、CONSTANT_MethodType_info、CONSTANT_MethodHandle_info和CONSTANT_InvokeDynamic_info这7种常量类型。下面先介绍前4种。</p>\n<h4 id=\"-\">类或接口的解析</h4>\n<p>假设当前类为D，需要将未解析过的符号引用N解析为一个类或接口C的直接引用，主要有三个步骤：</p>\n<ol>\n<li>如果C是非数组类型，D的类加载器会根据代表N的全限定名去加载C，加载过程中可能会触发其他相关类的加载。</li>\n<li>如果C是数组类型，且数组的元素类型为非基本类型，那么首先会按第一步中的方式加载数组元素类型，然后生成一个代表此数组维度和元素的数组对象。</li>\n<li>如果前两步没有出现任何异常，那么C在虚拟机中实际上已经成为一个有效的类或接口了，但在解析完成之前还要进行符号引用验证，确认D是否具备对C的访问权限。如果发现不具备访问权限，将抛出java.lang.IllegalAccessError异常。</li>\n</ol>\n<h4 id=\"-\">字段的解析</h4>\n<p>要解析一个未被解析过的字段符号引用，首先将会对字段表的第一个index索引项指向的CONSTANT_Class_info符号引用进行解析，也就是字段所在的类或接口的符号引用。如果在解析这个类或接口符号引用的过程中出现了任何异常，都会导致字段符号引用解析的失败。如果解析成功完成，那将这个字段所属的类或接口用C表示，虚拟机规范要求按照如下步骤对C进行后续字段的搜索：</p>\n<ol>\n<li>如果C本身就包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。</li>\n<li>否则，如果在C中实现了接口，将会按照继承关系从下往上递归搜索各个接口和它的父接口，如果接口中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。</li>\n<li>否则，如果C不是java.lang.Object的话，将会按照继承关系从下往上递归搜索其父类，如果在父类中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。</li>\n<li>否则，查找失败，抛出java.lang.NoSuchFieldError异常。\n如果有一个同名字段同时出现在C的接口和父类中，或者同时在自己或父类的多个接口中出现，那编译器将可能拒绝编译。</li>\n</ol>\n<p>如果查找过程成功返回了引用，将会对这个字段进行权限验证，如果发现不具备对字段的访问权限，将抛出java.lang.IllegalAccessError异常。</p>\n<h4 id=\"-\">类方法的解析</h4>\n<p>类方法解析的第一个步骤与字段解析一样，也需要先解析出类方法表的第一个index索引项指向的方法所属的类或接口的符号引用，如果解析成功，我们依然用C表示这个类，接下来虚拟机将会按照如下步骤进行后续的类方法搜索：</p>\n<ol>\n<li>类方法和接口方法符号引用的常量类型定义是分开的，如果在类方法表中发现第一个index索引项指向的C是个接口，那就直接抛出java.lang.IncompatibleClassChangeError异常。</li>\n<li>如果通过了第1步，在类C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。</li>\n<li>否则，在类C的父类中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。</li>\n<li>否则，在类C实现的接口列表及它们的父接口之中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果存在匹配的方法，说明类C是一个抽象类，这时查找结束，抛出java.lang.AbstractMethodError异常。</li>\n<li>否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError。\n最后，如果查找过程成功返回了直接引用，将会对这个方法进行权限验证，如果发现不具备对此方法的访问权限，将抛出java.lang.IllegalAccessError异常。</li>\n</ol>\n<h4 id=\"-\">接口方法的解析</h4>\n<p>接口方法也需要先解析出接口方法表中指向声明方法的类或接口描述符的符号引用，如果解析成功，依然用C表示这个接口，接下来虚拟机将会按照如下步骤进行后续的接口方法搜索：</p>\n<ol>\n<li>与类方法解析不同，如果在接口方法表中发现声明方法的类或接口描述符中的索引C是个类而不是接口，那就直接抛出java.lang.IncompatibleClassChangeError异常。</li>\n<li>否则，在接口C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。</li>\n<li>否则，在接口C的父接口中递归查找，直到java.lang.Object类（查找范围会包括Object类）为止，看是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。</li>\n<li>否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError异常。\n由于接口中的所有方法默认都是public的，所以不存在访问权限的问题，因此接口方法的符号解析应当不会抛出java.lang.IllegalAccessError异常。</li>\n</ol>\n<h3 id=\"-\">初始化</h3>\n<p>初始化阶段是执行类构造器&lt;clinit&gt;()方法的过程。在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则根据程序员通过程序制定的主观计划去初始化类变量和其他资源。</p>\n<ul>\n<li>&lt;clinit&gt;()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}代码块）中的语句合并产生的.</li>\n<li>&lt;clinit&gt;()方法不需要显式地调用父类构造器，虚拟机会保证在子类的&lt;clinit&gt;()方法执行之前，父类的&lt;clinit&gt;()方法已经执行完毕。因此在虚拟机中第一个被执行的&lt;clinit&gt;()方法的类肯定是java.lang.Object。</li>\n<li>父类的&lt;clinit&gt;()方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作\n-如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成&lt;clinit&gt;()方法。</li>\n<li>接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成&lt;clinit&gt;()方法。与类不同的是，执行接口的&lt;clinit&gt;()方法不需要先执行父接口的&lt;clinit&gt;()方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的&lt;clinit&gt;()方法。</li>\n<li>虚拟机会保证一个类的&lt;clinit&gt;()方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的&lt;clinit&gt;()方法，其他线程都需要阻塞等待，直到活动线程执行&lt;clinit&gt;()方法完毕。如果在一个类的&lt;clinit&gt;()方法中有耗时很长的操作，就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。需要注意的是，其他线程虽然会被阻塞，但如果执行&lt;clinit&gt;()方法的那条线程退出&lt;clinit&gt;()方法后，其他线程唤醒之后不会再次进入&lt;clinit&gt;()方法。同一个类加载器下，一个类型只会初始化一次。</li>\n</ul>\n',77,32,NULL,1,'第七章 虚拟机类加载机制','2019-04-09 07:43:05','2019-04-11 14:12:42',0,'4,5,6',1,2,NULL),(7,'Java虚拟机07——类加载器与双亲委派模型','类加载器实现了通过一个类的全限定名来获取此类的二进制字节流，这个动作是放到Java虚拟机外部实现的，以便让应用程序自己决定如何去获取所需要的实现类。','Bobbi','## 类加载器\n类加载器实现了通过一个类的全限定名来获取此类的二进制字节流，这个动作是放到Java虚拟机外部实现的，以便让应用程序自己决定如何去获取所需要的实现类。\n\n关于类\n的唯一性：只有加载它的类加载器和类本身一同确立其在Java虚拟机中的唯一性，即使这两个类来源于同一个Class文件，被同一个虚拟机加载，只要它们的类加载器不同，那这两个类就必定不同\n\n``` java\npublic class ClassLoadTest {\n    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n        ClassLoader classLoader = new ClassLoader() {\n\n            @Override\n            public Class<?> loadClass(String name) throws ClassNotFoundException {\n                try {\n                    String fileName = name.substring(name.lastIndexOf(\".\") + 1) + \".class\";\n                    InputStream inputStream = getClass().getResourceAsStream(fileName);\n                    if (inputStream == null) {\n                        return super.loadClass(name);\n                    }\n\n                    byte[] b = new byte[inputStream.available()];\n                    inputStream.read(b);\n                    return defineClass(name,b,0,b.length);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    throw new ClassNotFoundException(name);\n                }\n            }\n        };\n        Object obj = classLoader.loadClass(\"chap07.ClassLoadTest\").newInstance();\n        System.out.println(obj.getClass());\n        System.out.println(obj instanceof chap07.ClassLoadTest);\n    }\n}\n\n```\n运行结果：\n![image.png](http://oss.dblearn.cn/dbblog/20190412/97b085d5324f463a89a7dc393df705ea.png)\n从第一行看出，这个对象确实是类chap07.ClassLoaderTest实例化出来的对象，但是从第二句可以发现，这个对象与类chap07.ClassLoaderTest做所属类型检查的时候却返回了false，这是因为虚拟机中存在了两个ClassLoader，一个是由系统**应用程序类加载器**加载的，另外一个是由我们自定义加载器加载的，虽然都来自同一个Class文件，但依然是两个独立的类。\n\n## 双亲委派模型\n从Java虚拟机的角度讲，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader),这个类加载器使用C++语言实现，是虚拟机自身的一部分。另一种就是其他的类加载器，这些类加载器由Java语言实现，独立于虚拟机外部，并且全部继承自抽象类java.lang.ClassLoader。\n\n从Java开发人员角度看，绝大部分Java程序都会使用到以下3中系统提供的类加载器。\n- 启动类加载器（Bootstrap ClassLoader）:启动类加载器（Bootstrap ClassLoader）：前面已经介绍过，这个类将器负责将存放在$JAVA_HOME/lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如rt.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可\n- 扩展类加载器（Extension ClassLoader）：这个加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载$JAVA_HOME/lib/ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。\n- 应用程序类加载器（Application ClassLoader）：这个类加载器由sun.misc.Launcher$AppClassLoader实现。由于这个类加载器是ClassLoader中的getSystemClassLoader()方法的返回值，所以一般也称它为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。\n\n我们的应用程序都是由这3种类加载器互相配合进行加载的，如果有必要，还可以加入自己定义的类加载器。这些类加载器之间的关系一般如下图所示：\n\n![image.png](http://oss.dblearn.cn/dbblog/20190412/f3db944cdc464f398fedb8423d98d54b.png)\n\n这种层次关系称为双亲委派模型（Parents Delegation Model)。双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。这里类加载器之间的父子关系一般不会以继承（Inheritance）的关系来实现，而是都使用组合（Composition）关系来复用父加载器的代码。\n\n双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。\n\n使用双亲委派模型来组织类加载器之间的关系，有一个显而易见的好处就是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。\n例如类java.lang.Object，它存放在rt.jar之中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为java.lang.Object的类，并放在程序的ClassPath中，那系统中将会出现多个不同的Object类，Java类型体系中最基础的行为也就无法保证，应用程序也将会变得一片混乱。如果读者有兴趣的话，可以尝试去编写一个与rt.jar类库中已有类重名的Java类，将会发现可以正常编译，但永远无法被加载运行。\n\n双亲委派的代码都几种在java.lang.ClassLoader的loadClass()方法之中\n```java \nprotected Class<?> loadClass(String name, boolean resolve)\n    throws ClassNotFoundException\n{\n    synchronized (getClassLoadingLock(name)) {\n        // 首先，检查请求的类是否已经被加载过了\n        Class c = findLoadedClass(name);\n        if (c == null) {\n            long t0 = System.nanoTime();\n            try {\n                if (parent != null) {\n                    c = parent.loadClass(name, false);\n                } else {\n                    c = findBootstrapClassOrNull(name);\n                }\n            } catch (ClassNotFoundException e) {\n                // 如果父类加载器抛出ClassNotFoundException\n                // 说明父类加载器无法完成加载请求\n            }\n\n            if (c == null) {\n                // 调用本身的findClass方法进行加载\n                long t1 = System.nanoTime();\n                c = findClass(name);\n\n                // this is the defining class loader; record the stats\n                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                sun.misc.PerfCounter.getFindClasses().increment();\n            }\n        }\n        if (resolve) {\n            resolveClass(c);\n        }\n        return c;\n    }\n}\n```\n\n1. 首先，检查一下指定名称的类是否已经加载过，如果加载过了，就不需要再加载，直接返回。\n2. 如果此类没有加载过，那么，再判断一下是否有父加载器；如果有父加载器，则由父加载器加载（即调用parent.loadClass(name, false);）.或者是调用bootstrap类加载器来加载。\n3. 如果父加载器及bootstrap类加载器都没有找到指定的类，那么调用当前类加载器的findClass方法来完成类加载。\n\n','<h2 id=\"-\">类加载器</h2>\n<p>类加载器实现了通过一个类的全限定名来获取此类的二进制字节流，这个动作是放到Java虚拟机外部实现的，以便让应用程序自己决定如何去获取所需要的实现类。</p>\n<p>关于类\n的唯一性：只有加载它的类加载器和类本身一同确立其在Java虚拟机中的唯一性，即使这两个类来源于同一个Class文件，被同一个虚拟机加载，只要它们的类加载器不同，那这两个类就必定不同</p>\n<pre><code class=\"language-java\">public class ClassLoadTest {\n    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n        ClassLoader classLoader = new ClassLoader() {\n\n            @Override\n            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException {\n                try {\n                    String fileName = name.substring(name.lastIndexOf(&quot;.&quot;) + 1) + &quot;.class&quot;;\n                    InputStream inputStream = getClass().getResourceAsStream(fileName);\n                    if (inputStream == null) {\n                        return super.loadClass(name);\n                    }\n\n                    byte[] b = new byte[inputStream.available()];\n                    inputStream.read(b);\n                    return defineClass(name,b,0,b.length);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    throw new ClassNotFoundException(name);\n                }\n            }\n        };\n        Object obj = classLoader.loadClass(&quot;chap07.ClassLoadTest&quot;).newInstance();\n        System.out.println(obj.getClass());\n        System.out.println(obj instanceof chap07.ClassLoadTest);\n    }\n}\n</code></pre>\n<p>运行结果：\n<img src=\"http://oss.dblearn.cn/dbblog/20190412/97b085d5324f463a89a7dc393df705ea.png\" alt=\"image.png\">\n从第一行看出，这个对象确实是类chap07.ClassLoaderTest实例化出来的对象，但是从第二句可以发现，这个对象与类chap07.ClassLoaderTest做所属类型检查的时候却返回了false，这是因为虚拟机中存在了两个ClassLoader，一个是由系统<strong>应用程序类加载器</strong>加载的，另外一个是由我们自定义加载器加载的，虽然都来自同一个Class文件，但依然是两个独立的类。</p>\n<h2 id=\"-\">双亲委派模型</h2>\n<p>从Java虚拟机的角度讲，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader),这个类加载器使用C++语言实现，是虚拟机自身的一部分。另一种就是其他的类加载器，这些类加载器由Java语言实现，独立于虚拟机外部，并且全部继承自抽象类java.lang.ClassLoader。</p>\n<p>从Java开发人员角度看，绝大部分Java程序都会使用到以下3中系统提供的类加载器。</p>\n<ul>\n<li>启动类加载器（Bootstrap ClassLoader）:启动类加载器（Bootstrap ClassLoader）：前面已经介绍过，这个类将器负责将存放在$JAVA_HOME/lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如rt.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可</li>\n<li>扩展类加载器（Extension ClassLoader）：这个加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载$JAVA_HOME/lib/ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。</li>\n<li>应用程序类加载器（Application ClassLoader）：这个类加载器由sun.misc.Launcher$AppClassLoader实现。由于这个类加载器是ClassLoader中的getSystemClassLoader()方法的返回值，所以一般也称它为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li>\n</ul>\n<p>我们的应用程序都是由这3种类加载器互相配合进行加载的，如果有必要，还可以加入自己定义的类加载器。这些类加载器之间的关系一般如下图所示：</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190412/f3db944cdc464f398fedb8423d98d54b.png\" alt=\"image.png\"></p>\n<p>这种层次关系称为双亲委派模型（Parents Delegation Model)。双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。这里类加载器之间的父子关系一般不会以继承（Inheritance）的关系来实现，而是都使用组合（Composition）关系来复用父加载器的代码。</p>\n<p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p>\n<p>使用双亲委派模型来组织类加载器之间的关系，有一个显而易见的好处就是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。\n例如类java.lang.Object，它存放在rt.jar之中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为java.lang.Object的类，并放在程序的ClassPath中，那系统中将会出现多个不同的Object类，Java类型体系中最基础的行为也就无法保证，应用程序也将会变得一片混乱。如果读者有兴趣的话，可以尝试去编写一个与rt.jar类库中已有类重名的Java类，将会发现可以正常编译，但永远无法被加载运行。</p>\n<p>双亲委派的代码都几种在java.lang.ClassLoader的loadClass()方法之中</p>\n<pre><code class=\"language-java\">protected Class&lt;?&gt; loadClass(String name, boolean resolve)\n    throws ClassNotFoundException\n{\n    synchronized (getClassLoadingLock(name)) {\n        // 首先，检查请求的类是否已经被加载过了\n        Class c = findLoadedClass(name);\n        if (c == null) {\n            long t0 = System.nanoTime();\n            try {\n                if (parent != null) {\n                    c = parent.loadClass(name, false);\n                } else {\n                    c = findBootstrapClassOrNull(name);\n                }\n            } catch (ClassNotFoundException e) {\n                // 如果父类加载器抛出ClassNotFoundException\n                // 说明父类加载器无法完成加载请求\n            }\n\n            if (c == null) {\n                // 调用本身的findClass方法进行加载\n                long t1 = System.nanoTime();\n                c = findClass(name);\n\n                // this is the defining class loader; record the stats\n                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                sun.misc.PerfCounter.getFindClasses().increment();\n            }\n        }\n        if (resolve) {\n            resolveClass(c);\n        }\n        return c;\n    }\n}</code></pre>\n<ol>\n<li>首先，检查一下指定名称的类是否已经加载过，如果加载过了，就不需要再加载，直接返回。</li>\n<li>如果此类没有加载过，那么，再判断一下是否有父加载器；如果有父加载器，则由父加载器加载（即调用parent.loadClass(name, false);）.或者是调用bootstrap类加载器来加载。</li>\n<li>如果父加载器及bootstrap类加载器都没有找到指定的类，那么调用当前类加载器的findClass方法来完成类加载。</li>\n</ol>\n',51,14,NULL,1,'第七章 虚拟机类加载机制','2019-04-12 07:50:24','2019-04-12 09:03:24',0,'4,5,6',1,2,NULL),(8,'Java虚拟机08——Java内存模型与线程','介绍虚拟机如何实现多线程、多线程之间由于共享和竞争数据而导致的一系列问题及解决方案','Bobbi','## 硬件的效率与一致性\n绝大多数的运算任务都不可能只靠处理器“计算”就能完成，处理器至少要与内存交互，如读取运算数据、存储运算结果等。由于计算机的存储设备与处理器的运算速度有接数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存（Cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存中，这样处理器就无需等待缓慢的内存读写了。\n\n基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但它引入了一个新的问题：缓存一致性（Cache Coherence）。在多处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（Main Memory），当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致的问题。为了解决这个问题，需要遵循一些协议，如MSI、MESI、MOSI、Synapse、Firefly及Dragon Protocol等。\n\n![image.png](http://oss.dblearn.cn/dbblog/20190415/31a0ff6b8e414b488172eb656001fc26.png)\n\n除了增加高速缓存外，为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的。与此类似的是Java虚拟机中的指令重排序（Instruction Reorder）\n\n## Java内存模型\nJava虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。\n\n### 主内存与工作内存\nJava内存模型的主要目标是定义程序在虚拟机中将各个变量存储到内存和从内存中取出变量的底层访问规则。此处的变量（Variables）与Java编程中所说的变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但不包括局部变量与方法参数，因为后者是线程私有的，不会存在竞争问题。为了获得较好的执行效能，Java内存模型并没有限制执行引擎使用处理器的特定寄存器或缓存来和主内存进行交互，也没有限制即时编译器进行调整代码执行顺序这类优化措施。\n\nJava内存模型规定了所有的变量都存储在主内存（Main Memory）中（此处的主内存与介绍物理硬件时的主内存名字一样，两者也可以互相类比，但此处仅是虚拟机内存的一部分）。每条线程还有自己的工作内存（Working Memory，可与前面讲的处理器高速缓存类比），线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。\n\n![image.png](http://oss.dblearn.cn/dbblog/20190415/4b6c60a67f7d4e738786ee446424fb66.png)\n\n这里所讲的主内存、工作内存与Java内存区域中的Java堆、栈、方法区等并不是同一个层次的内存划分，这两者基本上是没有关系的，如果两者一定要勉强对应起来，那从变量、主内存、工作内存的定义来看，主内存主要对应于Java堆中的对象实例数据部分，而工作内存则对应于虚拟机栈中的部分区域。\n从更低层次上说，主内存就直接对应于物理硬件的内存，而为了获取更好的运行速度，虚拟机（甚至是硬件系统本身的优化措施）可能会让工作内存优先存储于寄存器和高速缓存中，因为程序运行时主要访问读写的是工作内存。\n\n### 内存间交互操作\nJava内存模型中定义了以下8种操作来完成主内存与工作内存之间具体的交互协议，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的（对于double和long类型的变量来说，load、store、read和write操作在某些平台上允许有例外）\n- lock(锁定)：作用于主内存的变量，它把一个变量标识为一条线程独占的状态\n- unlock(解锁):作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的线程才可以被其他线程锁定\n- read(读取)：作用于主内存的变量，它把一个变量的值从主内存传输到线程工作的内存中，以便随后的load操作使用\n- load(载入)：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中\n- use(使用)：作用于工作内存的变量，它把工作内存中的一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作\n- assign(赋值)：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作\n- store(存储)：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用\n- write(写入)：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中\n\n如果要把一个变量从主内存复制到工作内存，那就要顺序地执行read和load操作，如果要把变量从工作内存同步回主内存，就要顺序地执行store和write操作。注意，Java内存模型只要求上述两个操作必须按顺序执行，而没有保证是连续执行。也就是说，read与load之间、store与write之间是可插入其他指令的。除此之外，Java内存模型还规定了在执行上述8种基本操作时必须满足如下规则：\n- 不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。\n- 不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。\n- 不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。\n- 一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说，就是对一个变量实施use、store操作之前，必须先执行过了assign和load操作。\n- 一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。\n- 如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。\n- 如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定住的变量。\n- 对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）\n\n### volatile\n关键字volatile可以说时Java虚拟机提供的最轻量级的同步机制，当一个变量定义为volatile之后，它将具备两种特性：\n\n1.保证此变量对所有线程的可见性，这里的“可见性”是指当一条线程修改了这个值，新值对于其他线程来说是可以立即得知的\n\nvolatile变量在各个线程的工作内存中不存在一致性问题（在各个线程的工作内存中，volatile变量也可以存在不一致的情况，但是由于每次使用之前都会先刷新，执行引擎看不到不一致的情况，因此可以认为不存在一致性问题），但是基于volatile变量的运算在并发下一样是不安全的。\n\n```java\npublic class VolatileTest {\n    public static volatile int race = 0;\n\n    public static void increase() {\n        race++;\n    }\n\n    private static final int THREADS_COUNT = 20;\n\n    public static void main(String[] args) {\n        Thread[] threads = new Thread[THREADS_COUNT];\n        for (int i = 0; i < THREADS_COUNT; i++) {\n            threads[i] = new Thread(() -> {\n                for (int j = 0; j < 10000; j++) {\n                    increase();\n                }\n            });\n            threads[i].start();\n        }\n        //  等待所有累加线程都结束\n        while (Thread.activeCount()>1) {\n            Thread.yield();\n        }\n        System.out.println(race);\n    }\n}\n```\n\n运行结果如下：\n![image.png](http://oss.dblearn.cn/dbblog/20190415/19e2e6ba750747cb88e748b85f064cc2.png)\n\n这段代码启动了20个线程，每个线程进行10000次自增操作，如果正确并发的话应该是输出200000，但是发现每次运行结果都是小于200000的值，这是为什么呢？\n\n问题就出现在自增运算race++不是原子操作，会产生4条指令getstatic、iconst_1、iadd、putstatic，当getstatic指令把race的值取到操作栈顶时，volatile关键字只保证了此时的值是正确的，在执行++操作的时候，其他线程可能把race的值加大了，而在操作栈顶的值就变成了过期的数据，因此就可能把较小的值同步回主内存中。\n\n由于volatile变量只能保证可见性，在不符合以下两条规则的运算场景中，我们仍然要通过加锁（使用synchronized或java.util.concurrent中的原子类）来保证原子性：\n- 运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。\n- 变量不需要与其他的状态变量共同参与不变约束。\n\n如以下场景,调用shutdown能立即停止工作。\n```java \n    volatile boolean shutdownRequested;\n    public void shutdown() {\n        shutdownRequested = false\n    }\n    public void dowork() {\n        while(!shutdownRequested){\n            // do something\n        }\n    }\n```\n\n2.使用volatile变量的第二个语义是禁止指令重排序优化，普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致。因为在一个线程的方法执行过程中无法感知到这点，这也就是Java内存模型中描述的所谓的“线程内表现为串行的语义”（Within-Thread As-If-Serial Semantics）\n\nJava内存模型中对volatile变量定义的特殊规则。假定T表示一个线程，V和W分别表示两个volatile型变量，那么在进行read、load、use、assign、store和write操作时需要满足如下规则：\n\n- 只有当线程T对变量V执行的前一个动作是load的时候，线程T才能对变量V执行use动作；并且，只有当线程T对变量V执行的后一个动作是use的时候，线程T才能对变量V执行load动作。线程T对变量V的use动作可以认为是和线程T对变量V的load、read动作相关联，必须连续一起出现（这条规则要求在工作内存中，每次使用V前都必须先从主内存刷新最新的值，用于保证能看见其他线程对变量V所做的修改后的值）。\n- 只有当线程T对变量V执行的前一个动作是assign的时候，线程T才能对变量V执行store动作；并且，只有当线程T对变量V执行的后一个动作是store的时候，线程T才能对变量V执行assign动作。线程T对变量V的assign动作可以认为是和线程T对变量V的store、write动作相关联，必须连续一起出现（这条规则要求在工作内存中，每次修改V后都必须立刻同步回主内存中，用于保证其他线程可以看到自己对变量V所做的修改）。\n- 假定动作A是线程T对变量V实施的use或assign动作，假定动作F是和动作A相关联的load或store动作，假定动作P是和动作F相应的对变量V的read或write动作；类似的，假定动作B是线程T对变量W实施的use或assign动作，假定动作G是和动作B相关联的load或store动作，假定动作Q是和动作G相应的对变量W的read或write动作。如果A先于B，那么P先于Q（这条规则要求volatile修饰的变量不会被指令重排序优化，保证代码的执行顺序与程序的顺序相同）。\n\n### 原子性、可见性与有序性\n#### 原子性(Atomicity)\n由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write，我们大致可以认为基本数据类型的访问读写是具备原子性的。\n\n如果应用场景需要一个更大范围的原子性保证，Java内存模型还提供了lock和unlock操作来满足这种需求，尽管虚拟机未把lock与unlock操作直接开放给用户使用，但是却提供了更高层次的字节码指令monitorenter和monitorexit来隐匿地使用这两个操作，这两个字节码指令反映到Java代码中就是同步块—synchronized关键字，因此在synchronized块之间的操作也具备原子性。\n#### 可见性(Visibility)\n可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性的，无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。因此，可以说volatile保证了多线程操作时变量的可见性，而普通变量则不能保证这一点。\n\n除了volatile之外，Java还有两个关键字能实现可见性，即synchronized和final。同步块的可见性是由“对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）”这条规则获得的，而被final修饰的字段在构造器中一旦初始化完成，并且构造器没有把this的引用传递出去（this引用逃逸是一件很危险的事情，其他线程有可能通过这个引用访问到“初始化了一半”的对象），那在其他线程中就能看见final字段的值。\n#### 有序性(Ordering)\nJava程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。前半句是指“线程内表现为串行的语义”（Within-Thread As-If-Serial Semantics），后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。\n\nJava语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”这条规则获得的，这条规则决定了持有同一个锁的两个同步块只能串行地进入。\n\n### 先行发生原则\n先行发生（happens-before）的原则是判断数据是否存在竞争、线程是否安全的主要依据，依靠这个原则，我们可以通过几条规则解决并发环境下两个操作之间是否可能存在冲突的所有问题。\n\n先行发生是Java内存模型中定义的两项操作之间的偏序关系，如果说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产生的影响能被操作B观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。\n\nJava内存模型下一些“天然的”先行发生关系，这些先行发生关系无须任何同步器协助就已经存在，可以在编码中直接使用。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来的话，它们就没有顺序性保障，虚拟机可以对它们随意地进行重排序：\n\n- 程序次序规则（Program Order Rule）：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确地说，应该是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。\n- 管程锁定规则（Monitor Lock Rule）：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是同一个锁，而“后面”是指时间上的先后顺序。\n- volatile变量规则（Volatile Variable Rule）：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后顺序。\n- 线程启动规则（Thread Start Rule）：Thread对象的start()方法先行发生于此线程的每一个动作。\n- 线程终止规则（Thread Termination Rule）：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等手段检测到线程已经终止执行。\n- 线程中断规则（Thread Interruption Rule）：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测到是否有中断发生。\n- 对象终结规则（Finalizer Rule）：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始。\n- 传递性（Transitivity）：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。\n\n## Java与线程\n线程是比进程更轻量级的调度执行单位，线程的引入，可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源（内存地址、文件I/O等），又可以独立调度（线程是CPU调度的基本单位）\n\n### 线程的实现\n系统平台实现线程主要有3种方式：使用内核线程实现、使用用户线程实现和使用用户线程加轻量级进程混合实现。\n#### 使用内核线程实现\n内核线程（Kernel-Level Thread,KLT）就是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。每个内核线程可以视为内核的一个分身，这样操作系统就有能力同时处理多件事情，支持多线程的内核就叫做多线程内核（Multi-Threads Kernel）。\n\n程序一般不会直接去使用内核线程，而是去使用内核线程的一种高级接口——轻量级进程（Light Weight Process，LWP），轻量级进程就是我们通常意义上所讲的线程，由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。这种轻量级进程与内核线程之间1比1的关系称为一对一的线程模型，如下图所示：\n![image.png](http://oss.dblearn.cn/dbblog/20190417/43afb70db79b483ea2f53a18aba245cb.png)\n\n由于内核线程的支持，每个轻量级进程都成为一个独立的调度单元，即使有一个轻量级进程在系统调用中阻塞了，也不会影响整个进程继续工作，但是轻量级进程具有它的局限性：首先，由于是基于内核线程实现的，所以各种线程操作，如创建、析构及同步，都需要进行系统调用。而系统调用的代价相对较高，需要在用户态（User Mode）和内核态（Kernel Mode）中来回切换。其次，每个轻量级进程都需要有一个内核线程的支持，因此轻量级进程要消耗一定的内核资源（如内核线程的栈空间），因此一个系统支持轻量级进程的数量是有限的。\n#### 使用用户线程实现\n从广义上讲，一个线程只要不是内核线程，就可以认为是用户线程（User Thread,UT）。从狭义上的用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知线程存在的实现。\n用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核的帮助。如果程序实现得当，这种线程不需要切换到内核态，因此操作可以是非常快速且低消耗的，也可以支持规模更大的线程数量，部分高性能数据库中的多线程就是由用户线程实现的。这种进程与用户线程之间1比N的关系称为一对多的线程模型，如下图所示：\n ![image.png](http://oss.dblearn.cn/dbblog/20190417/90d288f4a3d64af3bc85201a9a89a384.png)\n\n使用用户线程的优势在于不需要系统内核支援，劣势也在于没有系统内核的支援，所有的线程操作都需要用户程序自己处理。因而使用用户线程实现的程序一般都比较复杂，现在使用用户线程的程序越来越少了，Java、Ruby等语言都曾经使用过用户线程，最终又都放弃使用它。\n#### 使用用户线程加轻量级进程混合实现\n 这种混合实现下，既存在用户进程也存在轻量级进程。用户线程的创建、切换、析构等操作依然廉价，并且可以支持大规模的用户线程并发。而用户线程的系统调用通过轻量级线程来完成，大大降低了整个进程被完全阻塞的风险。这种混合模式中，用户线程与轻量级进程的数量为N：M的关系\n![image.png](http://oss.dblearn.cn/dbblog/20190418/d32b21ddd2b642e3bcabd31e0fd28110.png)\n\n#### Java线程的实现\n虚拟机规范中并未限定Java线程需要使用哪种线程模型来实现，线程模型只对线程的并发规模和操作成本产生影响，对Java程序的编码和运行过程来说，这些差异都是透明的。对于Sun JDK来说，它的Windows版与Linux版都是使用一对一的线程模型实现的，一条Java线程就映射到一条轻量级进程之中，因为Windows和Linux系统提供的线程模型就是一对一的。\n\n### Java线程调度\n线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种，分别是协同式线程调度（Cooperative Threads-Scheduling）和抢占式线程调度（Preemptive Threads-Scheduling）。\n\n如果使用协同式调度的多线程系统，线程的执行时间由线程本身来控制，线程把自己的工作执行完了之后，要主动通知系统切换到另外一个线程上。协同式多线程的最大好处是实现简单，而且由于线程要把自己的事情干完后才会进行线程切换，切换操作对线程自己是可知的，所以没有什么线程同步的问题。它的坏处也很明显：线程执行时间不可控制，甚至如果一个线程编写有问题，一直不告知系统进行线程切换，那么程序就会一直阻塞在那里。\n\n如果使用抢占式调度的多线程系统，那么每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定（在Java中，Thread.yield()可以让出执行时间，但是要获取执行时间的话，线程本身是没有什么办法的）。在这种实现线程调度的方式下，线程的执行时间是系统可控的，也不会有一个线程导致整个进程阻塞的问题，Java使用的线程调度方式就是抢占式调度。\n\n虽然Java线程调度是系统自动完成的，但是可以设置优先级，Java语言一共设置了10个级别的线程优先级（Thread.MIN_PRIORITY至Thread.MAX_PRIORITY）。Java的线程是通过映射到系统的原生线程上来实现的，所以线程调度最终还是取决于操作系统，虽然现在很多操作系统都提供线程优先级的概念，但是并不见得能与Java线程的优先级一一对应。\n\n### 状态转换\nJava语言定义了5种线程状态，在任意一个时间点，一个线程只能有且只有其中的一种状态，这5种状态分别如下。\n\n- 新建（New）：创建后尚未启动的线程处于这种状态。\n- 运行（Runable）：Runable包括了操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配执行时间。\n- 无限期等待（Waiting）：处于这种状态的线程不会被分配CPU执行时间，它们要等待被其他线程显式地唤醒。以下方法会让线程陷入无限期的等待状态：\n没有设置超时参数的Object.wait()方法。\n没有设置超时参数的Thread.join()方法。\nLockSupport.park()方法。\n- 限期等待（Timed Waiting）：处于这种状态的线程也不会被分配CPU执行时间，不过无须等待被其他线程显式地唤醒，在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入限期等待状态：\nThread.sleep()方法。\n设置了超时参数的Object.wait()方法。\n设置了超时参数的Thread.join()方法。\nLockSupport.parkNanos()方法。\nLockSupport.parkUntil()方法。\n- 阻塞（Blocked）：线程被阻塞了，“阻塞状态”与“等待状态”的区别是：“阻塞状态”在等待着获取到一个排他锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。\n- 结束（Terminated）：已终止线程的线程状态，线程已经结束执行。\n![image.png](http://oss.dblearn.cn/dbblog/20190418/95e1a3f961bb4e0b97e181bfa45e0db3.png)','<h2 id=\"-\">硬件的效率与一致性</h2>\n<p>绝大多数的运算任务都不可能只靠处理器“计算”就能完成，处理器至少要与内存交互，如读取运算数据、存储运算结果等。由于计算机的存储设备与处理器的运算速度有接数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存（Cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存中，这样处理器就无需等待缓慢的内存读写了。</p>\n<p>基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但它引入了一个新的问题：缓存一致性（Cache Coherence）。在多处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（Main Memory），当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致的问题。为了解决这个问题，需要遵循一些协议，如MSI、MESI、MOSI、Synapse、Firefly及Dragon Protocol等。</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190415/31a0ff6b8e414b488172eb656001fc26.png\" alt=\"image.png\"></p>\n<p>除了增加高速缓存外，为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的。与此类似的是Java虚拟机中的指令重排序（Instruction Reorder）</p>\n<h2 id=\"java-\">Java内存模型</h2>\n<p>Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。</p>\n<h3 id=\"-\">主内存与工作内存</h3>\n<p>Java内存模型的主要目标是定义程序在虚拟机中将各个变量存储到内存和从内存中取出变量的底层访问规则。此处的变量（Variables）与Java编程中所说的变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但不包括局部变量与方法参数，因为后者是线程私有的，不会存在竞争问题。为了获得较好的执行效能，Java内存模型并没有限制执行引擎使用处理器的特定寄存器或缓存来和主内存进行交互，也没有限制即时编译器进行调整代码执行顺序这类优化措施。</p>\n<p>Java内存模型规定了所有的变量都存储在主内存（Main Memory）中（此处的主内存与介绍物理硬件时的主内存名字一样，两者也可以互相类比，但此处仅是虚拟机内存的一部分）。每条线程还有自己的工作内存（Working Memory，可与前面讲的处理器高速缓存类比），线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</p>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190415/4b6c60a67f7d4e738786ee446424fb66.png\" alt=\"image.png\"></p>\n<p>这里所讲的主内存、工作内存与Java内存区域中的Java堆、栈、方法区等并不是同一个层次的内存划分，这两者基本上是没有关系的，如果两者一定要勉强对应起来，那从变量、主内存、工作内存的定义来看，主内存主要对应于Java堆中的对象实例数据部分，而工作内存则对应于虚拟机栈中的部分区域。\n从更低层次上说，主内存就直接对应于物理硬件的内存，而为了获取更好的运行速度，虚拟机（甚至是硬件系统本身的优化措施）可能会让工作内存优先存储于寄存器和高速缓存中，因为程序运行时主要访问读写的是工作内存。</p>\n<h3 id=\"-\">内存间交互操作</h3>\n<p>Java内存模型中定义了以下8种操作来完成主内存与工作内存之间具体的交互协议，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的（对于double和long类型的变量来说，load、store、read和write操作在某些平台上允许有例外）</p>\n<ul>\n<li>lock(锁定)：作用于主内存的变量，它把一个变量标识为一条线程独占的状态</li>\n<li>unlock(解锁):作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的线程才可以被其他线程锁定</li>\n<li>read(读取)：作用于主内存的变量，它把一个变量的值从主内存传输到线程工作的内存中，以便随后的load操作使用</li>\n<li>load(载入)：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中</li>\n<li>use(使用)：作用于工作内存的变量，它把工作内存中的一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作</li>\n<li>assign(赋值)：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作</li>\n<li>store(存储)：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用</li>\n<li>write(写入)：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li>\n</ul>\n<p>如果要把一个变量从主内存复制到工作内存，那就要顺序地执行read和load操作，如果要把变量从工作内存同步回主内存，就要顺序地执行store和write操作。注意，Java内存模型只要求上述两个操作必须按顺序执行，而没有保证是连续执行。也就是说，read与load之间、store与write之间是可插入其他指令的。除此之外，Java内存模型还规定了在执行上述8种基本操作时必须满足如下规则：</p>\n<ul>\n<li>不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。</li>\n<li>不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</li>\n<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。</li>\n<li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说，就是对一个变量实施use、store操作之前，必须先执行过了assign和load操作。</li>\n<li>一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li>\n<li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。</li>\n<li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定住的变量。</li>\n<li>对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）</li>\n</ul>\n<h3 id=\"volatile\">volatile</h3>\n<p>关键字volatile可以说时Java虚拟机提供的最轻量级的同步机制，当一个变量定义为volatile之后，它将具备两种特性：</p>\n<p>1.保证此变量对所有线程的可见性，这里的“可见性”是指当一条线程修改了这个值，新值对于其他线程来说是可以立即得知的</p>\n<p>volatile变量在各个线程的工作内存中不存在一致性问题（在各个线程的工作内存中，volatile变量也可以存在不一致的情况，但是由于每次使用之前都会先刷新，执行引擎看不到不一致的情况，因此可以认为不存在一致性问题），但是基于volatile变量的运算在并发下一样是不安全的。</p>\n<pre><code class=\"language-java\">public class VolatileTest {\n    public static volatile int race = 0;\n\n    public static void increase() {\n        race++;\n    }\n\n    private static final int THREADS_COUNT = 20;\n\n    public static void main(String[] args) {\n        Thread[] threads = new Thread[THREADS_COUNT];\n        for (int i = 0; i &lt; THREADS_COUNT; i++) {\n            threads[i] = new Thread(() -&gt; {\n                for (int j = 0; j &lt; 10000; j++) {\n                    increase();\n                }\n            });\n            threads[i].start();\n        }\n        //  等待所有累加线程都结束\n        while (Thread.activeCount()&gt;1) {\n            Thread.yield();\n        }\n        System.out.println(race);\n    }\n}</code></pre>\n<p>运行结果如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190415/19e2e6ba750747cb88e748b85f064cc2.png\" alt=\"image.png\"></p>\n<p>这段代码启动了20个线程，每个线程进行10000次自增操作，如果正确并发的话应该是输出200000，但是发现每次运行结果都是小于200000的值，这是为什么呢？</p>\n<p>问题就出现在自增运算race++不是原子操作，会产生4条指令getstatic、iconst_1、iadd、putstatic，当getstatic指令把race的值取到操作栈顶时，volatile关键字只保证了此时的值是正确的，在执行++操作的时候，其他线程可能把race的值加大了，而在操作栈顶的值就变成了过期的数据，因此就可能把较小的值同步回主内存中。</p>\n<p>由于volatile变量只能保证可见性，在不符合以下两条规则的运算场景中，我们仍然要通过加锁（使用synchronized或java.util.concurrent中的原子类）来保证原子性：</p>\n<ul>\n<li>运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。</li>\n<li>变量不需要与其他的状态变量共同参与不变约束。</li>\n</ul>\n<p>如以下场景,调用shutdown能立即停止工作。</p>\n<pre><code class=\"language-java\">    volatile boolean shutdownRequested;\n    public void shutdown() {\n        shutdownRequested = false\n    }\n    public void dowork() {\n        while(!shutdownRequested){\n            // do something\n        }\n    }</code></pre>\n<p>2.使用volatile变量的第二个语义是禁止指令重排序优化，普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致。因为在一个线程的方法执行过程中无法感知到这点，这也就是Java内存模型中描述的所谓的“线程内表现为串行的语义”（Within-Thread As-If-Serial Semantics）</p>\n<p>Java内存模型中对volatile变量定义的特殊规则。假定T表示一个线程，V和W分别表示两个volatile型变量，那么在进行read、load、use、assign、store和write操作时需要满足如下规则：</p>\n<ul>\n<li>只有当线程T对变量V执行的前一个动作是load的时候，线程T才能对变量V执行use动作；并且，只有当线程T对变量V执行的后一个动作是use的时候，线程T才能对变量V执行load动作。线程T对变量V的use动作可以认为是和线程T对变量V的load、read动作相关联，必须连续一起出现（这条规则要求在工作内存中，每次使用V前都必须先从主内存刷新最新的值，用于保证能看见其他线程对变量V所做的修改后的值）。</li>\n<li>只有当线程T对变量V执行的前一个动作是assign的时候，线程T才能对变量V执行store动作；并且，只有当线程T对变量V执行的后一个动作是store的时候，线程T才能对变量V执行assign动作。线程T对变量V的assign动作可以认为是和线程T对变量V的store、write动作相关联，必须连续一起出现（这条规则要求在工作内存中，每次修改V后都必须立刻同步回主内存中，用于保证其他线程可以看到自己对变量V所做的修改）。</li>\n<li>假定动作A是线程T对变量V实施的use或assign动作，假定动作F是和动作A相关联的load或store动作，假定动作P是和动作F相应的对变量V的read或write动作；类似的，假定动作B是线程T对变量W实施的use或assign动作，假定动作G是和动作B相关联的load或store动作，假定动作Q是和动作G相应的对变量W的read或write动作。如果A先于B，那么P先于Q（这条规则要求volatile修饰的变量不会被指令重排序优化，保证代码的执行顺序与程序的顺序相同）。</li>\n</ul>\n<h3 id=\"-\">原子性、可见性与有序性</h3>\n<h4 id=\"-atomicity-\">原子性(Atomicity)</h4>\n<p>由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write，我们大致可以认为基本数据类型的访问读写是具备原子性的。</p>\n<p>如果应用场景需要一个更大范围的原子性保证，Java内存模型还提供了lock和unlock操作来满足这种需求，尽管虚拟机未把lock与unlock操作直接开放给用户使用，但是却提供了更高层次的字节码指令monitorenter和monitorexit来隐匿地使用这两个操作，这两个字节码指令反映到Java代码中就是同步块—synchronized关键字，因此在synchronized块之间的操作也具备原子性。</p>\n<h4 id=\"-visibility-\">可见性(Visibility)</h4>\n<p>可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性的，无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。因此，可以说volatile保证了多线程操作时变量的可见性，而普通变量则不能保证这一点。</p>\n<p>除了volatile之外，Java还有两个关键字能实现可见性，即synchronized和final。同步块的可见性是由“对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）”这条规则获得的，而被final修饰的字段在构造器中一旦初始化完成，并且构造器没有把this的引用传递出去（this引用逃逸是一件很危险的事情，其他线程有可能通过这个引用访问到“初始化了一半”的对象），那在其他线程中就能看见final字段的值。</p>\n<h4 id=\"-ordering-\">有序性(Ordering)</h4>\n<p>Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。前半句是指“线程内表现为串行的语义”（Within-Thread As-If-Serial Semantics），后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。</p>\n<p>Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”这条规则获得的，这条规则决定了持有同一个锁的两个同步块只能串行地进入。</p>\n<h3 id=\"-\">先行发生原则</h3>\n<p>先行发生（happens-before）的原则是判断数据是否存在竞争、线程是否安全的主要依据，依靠这个原则，我们可以通过几条规则解决并发环境下两个操作之间是否可能存在冲突的所有问题。</p>\n<p>先行发生是Java内存模型中定义的两项操作之间的偏序关系，如果说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产生的影响能被操作B观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。</p>\n<p>Java内存模型下一些“天然的”先行发生关系，这些先行发生关系无须任何同步器协助就已经存在，可以在编码中直接使用。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来的话，它们就没有顺序性保障，虚拟机可以对它们随意地进行重排序：</p>\n<ul>\n<li>程序次序规则（Program Order Rule）：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确地说，应该是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。</li>\n<li>管程锁定规则（Monitor Lock Rule）：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是同一个锁，而“后面”是指时间上的先后顺序。</li>\n<li>volatile变量规则（Volatile Variable Rule）：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后顺序。</li>\n<li>线程启动规则（Thread Start Rule）：Thread对象的start()方法先行发生于此线程的每一个动作。</li>\n<li>线程终止规则（Thread Termination Rule）：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等手段检测到线程已经终止执行。</li>\n<li>线程中断规则（Thread Interruption Rule）：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测到是否有中断发生。</li>\n<li>对象终结规则（Finalizer Rule）：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始。</li>\n<li>传递性（Transitivity）：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。</li>\n</ul>\n<h2 id=\"java-\">Java与线程</h2>\n<p>线程是比进程更轻量级的调度执行单位，线程的引入，可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源（内存地址、文件I/O等），又可以独立调度（线程是CPU调度的基本单位）</p>\n<h3 id=\"-\">线程的实现</h3>\n<p>系统平台实现线程主要有3种方式：使用内核线程实现、使用用户线程实现和使用用户线程加轻量级进程混合实现。</p>\n<h4 id=\"-\">使用内核线程实现</h4>\n<p>内核线程（Kernel-Level Thread,KLT）就是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。每个内核线程可以视为内核的一个分身，这样操作系统就有能力同时处理多件事情，支持多线程的内核就叫做多线程内核（Multi-Threads Kernel）。</p>\n<p>程序一般不会直接去使用内核线程，而是去使用内核线程的一种高级接口——轻量级进程（Light Weight Process，LWP），轻量级进程就是我们通常意义上所讲的线程，由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。这种轻量级进程与内核线程之间1比1的关系称为一对一的线程模型，如下图所示：\n<img src=\"http://oss.dblearn.cn/dbblog/20190417/43afb70db79b483ea2f53a18aba245cb.png\" alt=\"image.png\"></p>\n<p>由于内核线程的支持，每个轻量级进程都成为一个独立的调度单元，即使有一个轻量级进程在系统调用中阻塞了，也不会影响整个进程继续工作，但是轻量级进程具有它的局限性：首先，由于是基于内核线程实现的，所以各种线程操作，如创建、析构及同步，都需要进行系统调用。而系统调用的代价相对较高，需要在用户态（User Mode）和内核态（Kernel Mode）中来回切换。其次，每个轻量级进程都需要有一个内核线程的支持，因此轻量级进程要消耗一定的内核资源（如内核线程的栈空间），因此一个系统支持轻量级进程的数量是有限的。</p>\n<h4 id=\"-\">使用用户线程实现</h4>\n<p>从广义上讲，一个线程只要不是内核线程，就可以认为是用户线程（User Thread,UT）。从狭义上的用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知线程存在的实现。\n用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核的帮助。如果程序实现得当，这种线程不需要切换到内核态，因此操作可以是非常快速且低消耗的，也可以支持规模更大的线程数量，部分高性能数据库中的多线程就是由用户线程实现的。这种进程与用户线程之间1比N的关系称为一对多的线程模型，如下图所示：\n <img src=\"http://oss.dblearn.cn/dbblog/20190417/90d288f4a3d64af3bc85201a9a89a384.png\" alt=\"image.png\"></p>\n<p>使用用户线程的优势在于不需要系统内核支援，劣势也在于没有系统内核的支援，所有的线程操作都需要用户程序自己处理。因而使用用户线程实现的程序一般都比较复杂，现在使用用户线程的程序越来越少了，Java、Ruby等语言都曾经使用过用户线程，最终又都放弃使用它。</p>\n<h4 id=\"-\">使用用户线程加轻量级进程混合实现</h4>\n<p> 这种混合实现下，既存在用户进程也存在轻量级进程。用户线程的创建、切换、析构等操作依然廉价，并且可以支持大规模的用户线程并发。而用户线程的系统调用通过轻量级线程来完成，大大降低了整个进程被完全阻塞的风险。这种混合模式中，用户线程与轻量级进程的数量为N：M的关系\n<img src=\"http://oss.dblearn.cn/dbblog/20190418/d32b21ddd2b642e3bcabd31e0fd28110.png\" alt=\"image.png\"></p>\n<h4 id=\"java-\">Java线程的实现</h4>\n<p>虚拟机规范中并未限定Java线程需要使用哪种线程模型来实现，线程模型只对线程的并发规模和操作成本产生影响，对Java程序的编码和运行过程来说，这些差异都是透明的。对于Sun JDK来说，它的Windows版与Linux版都是使用一对一的线程模型实现的，一条Java线程就映射到一条轻量级进程之中，因为Windows和Linux系统提供的线程模型就是一对一的。</p>\n<h3 id=\"java-\">Java线程调度</h3>\n<p>线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种，分别是协同式线程调度（Cooperative Threads-Scheduling）和抢占式线程调度（Preemptive Threads-Scheduling）。</p>\n<p>如果使用协同式调度的多线程系统，线程的执行时间由线程本身来控制，线程把自己的工作执行完了之后，要主动通知系统切换到另外一个线程上。协同式多线程的最大好处是实现简单，而且由于线程要把自己的事情干完后才会进行线程切换，切换操作对线程自己是可知的，所以没有什么线程同步的问题。它的坏处也很明显：线程执行时间不可控制，甚至如果一个线程编写有问题，一直不告知系统进行线程切换，那么程序就会一直阻塞在那里。</p>\n<p>如果使用抢占式调度的多线程系统，那么每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定（在Java中，Thread.yield()可以让出执行时间，但是要获取执行时间的话，线程本身是没有什么办法的）。在这种实现线程调度的方式下，线程的执行时间是系统可控的，也不会有一个线程导致整个进程阻塞的问题，Java使用的线程调度方式就是抢占式调度。</p>\n<p>虽然Java线程调度是系统自动完成的，但是可以设置优先级，Java语言一共设置了10个级别的线程优先级（Thread.MIN_PRIORITY至Thread.MAX_PRIORITY）。Java的线程是通过映射到系统的原生线程上来实现的，所以线程调度最终还是取决于操作系统，虽然现在很多操作系统都提供线程优先级的概念，但是并不见得能与Java线程的优先级一一对应。</p>\n<h3 id=\"-\">状态转换</h3>\n<p>Java语言定义了5种线程状态，在任意一个时间点，一个线程只能有且只有其中的一种状态，这5种状态分别如下。</p>\n<ul>\n<li>新建（New）：创建后尚未启动的线程处于这种状态。</li>\n<li>运行（Runable）：Runable包括了操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配执行时间。</li>\n<li>无限期等待（Waiting）：处于这种状态的线程不会被分配CPU执行时间，它们要等待被其他线程显式地唤醒。以下方法会让线程陷入无限期的等待状态：\n没有设置超时参数的Object.wait()方法。\n没有设置超时参数的Thread.join()方法。\nLockSupport.park()方法。</li>\n<li>限期等待（Timed Waiting）：处于这种状态的线程也不会被分配CPU执行时间，不过无须等待被其他线程显式地唤醒，在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入限期等待状态：\nThread.sleep()方法。\n设置了超时参数的Object.wait()方法。\n设置了超时参数的Thread.join()方法。\nLockSupport.parkNanos()方法。\nLockSupport.parkUntil()方法。</li>\n<li>阻塞（Blocked）：线程被阻塞了，“阻塞状态”与“等待状态”的区别是：“阻塞状态”在等待着获取到一个排他锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。</li>\n<li>结束（Terminated）：已终止线程的线程状态，线程已经结束执行。\n<img src=\"http://oss.dblearn.cn/dbblog/20190418/95e1a3f961bb4e0b97e181bfa45e0db3.png\" alt=\"image.png\"></li>\n</ul>\n',167,3,NULL,1,'第十二章 Java内存模型与线程','2019-04-15 08:01:12','2019-04-18 14:32:27',1,'4,5,6',1,2,NULL),(9,'Java虚拟机09——线程安全与锁优化','讲解如何保证并发的正确性和如何实现线程的安全性','Bobbi','## 线程安全\n线程安全：当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象是线程安全的。\n\n### java语言中的线程安全\nJava语言中各种操作共享的数据分为以下5类：不可变、绝对线程安全、相对线程安全、线程兼容和线程对立\n#### 不可变（Immutable）\n不可变对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障措施。只要一个不可变对象被正确地构建出来（没有发生this逃逸的情况），那其外部的可见状态永远也不会改变，永远也不会看到它在多个线程之中处于不一致的状态。Java中常见的不可变对象有String，java.lang.Number及部分子类（Long、Double和BigDecimal）等\n#### 绝对线程安全\n绝对线程安全：一个类不管运行时环境如何，调用者都不需要任何额外的同步措施。在JavaAPI中，标注自己是线程安全的类，大多数都不是绝对的线程安全。\n\njava.util.Vector是一个线程安全的容器，因为它的add()、get()和size()这类方法都是被synchronized修饰的，尽管这样效率很低，但确实是安全的。但是，即使它所有的方法都被修饰成同步，也不意味着调用它的时候永远都不再需要同步手段了。如下代码：\n```java \npublic class VectorTest {\n    private static Vector<Integer> vector = new Vector<>();\n\n    public static void main(String[] args) {\n        while(true) {\n            for (int i = 0; i < 10; i++) {\n                vector.add(i);\n            }\n\n            Thread removeThread = new Thread(()-> {\n                // 让线程稍微停顿一会\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int i = 0; i <vector.size() ; i++) {\n                    vector.remove(i);\n                }\n            });\n\n            Thread printThread = new Thread(()-> {\n                for (int i = 0; i < vector.size(); i++) {\n                    System.out.println(vector.get(i));\n                }\n            });\n\n            removeThread.start();\n            printThread.start();\n\n        }\n    }\n}\n\n```\n\n结果如下：\n![image.png](http://oss.dblearn.cn/dbblog/20190420/9166ec7683314dbca26beec50f5aecb7.png)\n如果另一个线程在错误的时间里删除了一个元素，导致序号i已经不再可用了，再用i访问就会抛出ArrayIndexOutOfBoundsException。因此，我们不得不需要在方法调用端做额外的同步操作，如：\n```java\n	    Thread removeThread = new Thread(()-> {\n                // 让线程稍微停顿一会\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                synchronized (vector) {\n                    for (int i = 0; i <vector.size() ; i++) {\n                        vector.remove(i);\n                    }\n                }\n\n            });\n\n            Thread printThread = new Thread(()-> {\n                synchronized (vector) {\n                    for (int i = 0; i < vector.size(); i++) {\n                        System.out.println(vector.get(i));\n                    }\n                }\n\n            });\n\n```\n#### 相对线程安全\n相对的线程安全就是我们通常意义上讲的线程安全。它需要保证这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性，如上例。\n在Java中，大部分安全类都属于这种类型，如Vector、HashTable、Collections的synchronizedCollection()方法包装的集合等。\n\n#### 线程兼容\n线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用，我们平常说一个类不是线程安全的，绝大多数时候指的是这一种情况。Java API中大部分的类都是属于线程兼容的，如集合类ArrayList和HashMap等。\n\n#### 线程对立\n线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。\n\n一个线程对立的例子是Thread类的suspend()和resume()方法，如果有两个线程同时持有一个线程对象，一个尝试去中断线程，另一个尝试去恢复线程，如果并发进行的话，无论调用时是否进行了同步，目标线程都是存在死锁风险的，如果suspend()中断的线程就是即将要执行resume()的那个线程，那就肯定要产生死锁了。也正是由于这个原因，suspend()和resume()方法已经被JDK声明废弃（@Deprecated）了。常见的线程对立的操作还有System.setIn()、Sytem.setOut()和System.runFinalizersOnExit()等。\n\n### 线程安全的实现方法\n#### 互斥同步\n互斥同步（Mutual Exclusion & Synchronization）,同步时指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一个（或者是一些，使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是主要的互斥实现方式。互斥是因，同步是果；互斥是方法，同步是目的。\n \n在Java中，最基本的互斥同步手段就是synchronized关键字，synchronized关键字经过编译之后，会在同步块的前后分别形成monitorenter和monitorexit这两个字节码指令，这两个字节码都需要一个reference类型的参数来指明要锁定和解锁的对象。如果Java程序中的synchronized明确指定了对象参数，那就是这个对象的reference；如果没有明确指定，那就根据synchronized修饰的是实例方法还是类方法，去取对应的对象实例或Class对象来作为锁对象。\n\n根据虚拟机规范的要求，在执行monitorenter时，首先要尝试获取对象的锁。如果这个对象没有被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加1，相应的。在执行monitoerexit指令时将会将锁的计数器减1，当计数器为0时，锁就被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到对象锁被另一个线程释放为止。\n\n在虚拟机规范对monitorenter和monitorexit的行为描述中，有两点是需要特别注意的。首先，synchronized同步块对同一条线程来说是可重入的，不会出现自己把自己锁死的问题。其次，同步块在已进入的线程执行完之前，会阻塞后面其他线程的进入。Java的线程是映射到操作系统的原生线程之上的，如果要阻塞或唤醒一个线程，都需要操作系统来帮忙完成，这就需要从用户态转换到核心态中，因此状态转换需要耗费很多的处理器时间。所以synchronized是Java语言中一个重量级（Heavyweight）的操作。虚拟机本身也会进行一些优化，譬如在通知操作系统阻塞线程之前加入一段自旋等待过程，避免频繁地切入到核心态之中。\n\n除了synchronized之外，我们还可以使用java.util.concurrent(下文称JUC)包中的重入锁（ReentrantLock）来实现同步，他们都具备一样的线程重入特性，只是代码写法上有点区别，一个表现为API层面的互斥锁（lock()和unlock()方法配合try/finally语句块来完成），另一个表现为原生语法层面的互斥锁。相比synchronized，ReentrantLock增加了一些高级功能，主要有以下3项：等待可中断、可实现公平锁，以及锁可以绑定多个条件。\n1. 等待可中断是指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。可中断特性对处理执行时间非常长的同步块很有帮助。\n2. 公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；而非公平锁则不保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。synchronized中的锁是非公平的，ReentrantLock默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁。\n3. 锁绑定多个条件是指一个ReentrantLock对象可以同时绑定多个Condition对象，而在synchronized中，锁对象的wait（）和notify（）或notifyAll（）方法可以实现一个隐含的条件，如果要和多于一个的条件关联的时候，就不得不额外地添加一个锁，而ReentrantLock则无须这样做，只需要多次调用newCondition（）方法即可。\n\n#### 非阻塞同步\n互斥同步最主要的问题就是进行线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步（Blocking Synchronization）。从处理问题的方式上说，互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施（例如加锁），那就肯定会出现问题，无论共享数据是否真的会出现竞争，它都要进行加锁（这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁）、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。\n\n随着硬件指令集的发展，我们有了另外一个选择：基于冲突检测的乐观并发策略，通俗地说，就是先进行操作，如果没有其他线程争用共享数据，那操作就成功了；如果共享数据有争用，产生了冲突，那就再采取其他的补偿措施（最常见的补偿措施就是不断地重试，直到成功为止），这种乐观的并发策略的许多实现都不需要把线程挂起，因此这种同步操作称为非阻塞同步（Non-Blocking Synchronization）。\n\n非阻塞同步一般通过硬件来保证一个从语义上看起来需要多次操作的行为只通过一条处理器指令就能完成，这类指令常用的有：\n- 测试并设置（Test-and-Set）。\n- 获取并增加（Fetch-and-Increment）。\n- 交换（Swap）。\n- 比较并交换（Compare-and-Swap，下文称CAS）。\n- 加载链接/条件存储（Load-Linked/Store-Conditional，下文称LL/SC）。\n\nCAS指令需要有3个操作数，分别是内存位置（在Java中可以简单理解为变量的内存地址，用V表示）、旧的预期值（用A表示）和新值（用B表示）。CAS指令执行时，当且仅当V符合旧预期值A时，处理器用新值B更新V的值，否则它就不执行更新，但是无论是否更新了V的值，都会返回V的旧值，上述的处理过程是一个原子操作。\n\n在JDK 1.5之后，Java程序中才可以使用CAS操作，该操作由sun.misc.Unsafe类里面的compareAndSwapInt()和compareAndSwapLong()等几个方法包装提供，虚拟机在内部对这些方法做了特殊处理，即时编译出来的结果就是一条平台相关的处理器CAS指令，没有方法调用的过程，或者可以认为是无条件内联进去了。\n\n由于Unsafe类不是提供给用户程序调用的类（Unsafe.getUnsafe()的代码中限制了只有启动类加载器（Bootstrap ClassLoader）加载的Class才能访问它），因此，如果不采用反射手段，我们只能通过其他的Java API来间接使用它，如J.U.C包里面的整数原子类，其中的compareAndSet()和getAndIncrement()等方法都使用了Unsafe类的CAS操作。下面看看如何使用CAS来避免阻塞操作：\n```java\npublic class VolatileTest {\n    public static volatile AtomicInteger race = new AtomicInteger(0);\n\n    public static void increase() {\n        race.incrementAndGet();\n    }\n\n    private static final int THREADS_COUNT = 20;\n\n    public static void main(String[] args) {\n        Thread[] threads = new Thread[THREADS_COUNT];\n        for (int i = 0; i < THREADS_COUNT; i++) {\n            threads[i] = new Thread(() -> {\n                for (int j = 0; j < 10000; j++) {\n                    increase();\n                }\n            });\n            threads[i].start();\n        }\n        //  等待所有累加线程都结束\n        while (Thread.activeCount()>1) {\n            Thread.yield();\n        }\n        System.out.println(race);\n    }\n\n}\n\n```\n运行结果如下：\n200000\n这一切都要归功于incrementAndGet()方法的原子性，其源码(JDK1.7)如下：\n```java\npublic final int incrementAndGet() {\n    for (;;) {\n        int current = get();\n        int next = current + 1;\n        if (compareAndSet(current, next))\n            return next;\n    }\n}\n```\n\nincrementAndGet()方法在一个无限循环中，不断尝试将一个比当前值大1的新值赋给自己。如果失败了，那说明在执行“获取-位置”的时候值已经有了修改，于是再次循环进行下一次操作，知道设置成功为止。\n\nCAS这种操作无法涵盖互斥同步的所有使用场景，并且CAS从语义上来说并不是完美的，存在这样的一个逻辑漏洞：如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然为A值，那我们就能说它的值没有被其他线程改变过了吗？如果在这段期间它的值曾经被改成了B，后来又被改回为A，那CAS操作就会误认为它从来没有被改变过。这个漏洞称为CAS操作的“ABA”问题。JUC包为了解决这个问题，提供了一个带有标记的原子引用类AtomicStampedReference，它可以通过控制变量值的版本来保证CAS的正确性。大部分情况下ABA问题不会影响程序并发的正确性，如果需要解决ABA问题，改用传统的互斥同步可能会比原子类更高效。\n\n### 无同步方案\n要保证线程安全，并不是一定就要进行同步，两者没有因果关系。同步只是保证共享数据争用时的正确性的手段，如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性，因此会有一些代码天生就是线程安全的，笔者简单地介绍其中的两类。\n#### 可重入代码（Reentrant Code）\n这种代码也叫做纯代码（Pure Code），可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误。相对线程安全来说，可重入性是更基本的特性，它可以保证线程安全，即所有的可重入的代码都是线程安全的，但是并非所有的线程安全的代码都是可重入的。\n\n可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。我们可以“通过一个简单的原则来判断代码是否具备可重入性：如果一个方法，它的返回结果是可以预测的，只要输入了相同的数据，就都能返回相同的结果，那它就满足可重入性的要求，当然也就是线程安全的。\n\n#### 线程本地存储（Thread Local Storage）\n如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行？如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。\n\nJava语言中，如果一个变量要被多线程访问，可以使用volatile关键字声明它为“易变的”；如果一个变量要被某个线程独享，可以通过java.lang.ThreadLocal类来实现线程本地存储的功能。每一个线程的Thread对象中都有一个ThreadLocalMap对象，这个对象存储了一组以ThreadLocal.threadLocalHashCode为键，以本地线程变量为值的键值对，ThreadLocal对象就是当前线程的ThreadLocalMap的访问入口，每一个ThreadLocal对象都包含了一个独一无二的threadLocalHashCode值，使用这个值就可以在线程键值值对中找回对应的本地线程变量。\n\n## 锁优化\n为了在线程之间更高效地共享数据，以及解决竞争问题，从而提高程序的执行效率，HotSpot虚拟机开发团队实现了锁优化技术，如适应性自旋（Adaptive Spinning）、锁消除（Lock Elimination）、锁粗化（Lock Coarsening）、轻量级锁（Lightweight Locking）和偏向锁（Biased Locking）等。\n\n### 自旋锁于自适应锁\n互斥同步对性能最大的影响是阻塞的实现，挂起线程和恢复线程的操作都需要转入内核态中完成，这些操作给系统的并发性能带来了很大的压力。在许多应用上，共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程并不值得。如果物理机器有一个以上的处理器，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一下”，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需让线程执行一个忙循环（自旋），这项技术就是所谓的自旋锁。\n\n自旋锁在JDK 1.4.2中就已经引入，只不过默认是关闭的，可以使用-XX:+UseSpinning参数来开启，在JDK 1.6中就已经改为默认开启了。自旋等待不能代替阻塞，且先不说对处理器数量的要求，自旋等待本身虽然避免了线程切换的开销，但它是要占用处理器时间的，因此，如果锁被占用的时间很短，自旋等待的效果就会非常好，反之，如果锁被占用的时间很长，那么自旋的线程只会白白消耗处理器资源，而不会做任何有用的工作，反而会带来性能上的浪费。因此，自旋等待的时间必须要有一定的限度，如果自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程了。自旋次数的默认值是10次，用户可以使用参数-XX:PreBlockSpin来更改。\n\n在JDK 1.6中引入了自适应的自旋锁。自适应意味着自旋的时间不再固定了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。另外，如果对于某个锁，自旋很少成功获得过，那在以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，随着程序运行和性能监控信息的不断完善，虚拟机对程序锁的状况预测就会越来越准确。\n\n### 锁消除\n锁消除是指虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除的主要判定依据来源于逃逸分析的数据支持，如果判断在一段代码中，堆上的所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当做栈上数据对待，认为它们是线程私有的，同步加锁自然就无须进行。\n\n### 锁粗化\n原则上，我们在编写代码的时候，总是推荐将同步块的作用范围限制得尽量小——只在共享数据的实际作用域中才进行同步，这样是为了使得需要同步的操作数量尽可能变小，如果存在锁竞争，那等待锁的线程也能尽快拿到锁。\n\n大部分情况下，上面的原则都是正确的，但是如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。\n\n如果虚拟机探测到一串零碎的操作都对同一个对象加锁，将会把加锁同步的范围扩展（粗化）到整个操作序列的外部。\n\n### 轻量级锁\n轻量级锁是JDK 1.6之中加入的新型锁机制，它名字中的“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的，因此传统的锁机制就称为“重量级”锁。轻量级锁用于在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。\n\n轻量级锁能提升程序同步性能的依据是“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”，这是一个经验数据。如果没有竞争，轻量级锁使用CAS操作避免了使用互斥量的开销，但如果存在锁竞争，除了互斥量的开销外，还额外发生了CAS操作，因此在有竞争的情况下，轻量级锁会比传统的重量级锁更慢。\n\n### 偏向锁\n偏向锁也是JDK 1.6中引入的一项锁优化，它的目的是消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能。如果说轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把整个同步都消除掉，连CAS操作都不做了。\n\n偏向锁的“偏”，就是偏心的“偏”、偏袒的“偏”，它的意思是这个锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步。\n\n偏向锁可以提高带有同步但无竞争的程序性能。它同样是一个带有效益权衡（Trade Off）性质的优化，也就是说，它并不一定总是对程序运行有利，如果程序中大多数的锁总是被多个不同的线程访问，那偏向模式就是多余的。在具体问题具体分析的前提下，有时候使用参数-XX:-UseBiasedLocking来禁止偏向锁优化反而可以提升性能。','<h2 id=\"-\">线程安全</h2>\n<p>线程安全：当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象是线程安全的。</p>\n<h3 id=\"java-\">java语言中的线程安全</h3>\n<p>Java语言中各种操作共享的数据分为以下5类：不可变、绝对线程安全、相对线程安全、线程兼容和线程对立</p>\n<h4 id=\"-immutable-\">不可变（Immutable）</h4>\n<p>不可变对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障措施。只要一个不可变对象被正确地构建出来（没有发生this逃逸的情况），那其外部的可见状态永远也不会改变，永远也不会看到它在多个线程之中处于不一致的状态。Java中常见的不可变对象有String，java.lang.Number及部分子类（Long、Double和BigDecimal）等</p>\n<h4 id=\"-\">绝对线程安全</h4>\n<p>绝对线程安全：一个类不管运行时环境如何，调用者都不需要任何额外的同步措施。在JavaAPI中，标注自己是线程安全的类，大多数都不是绝对的线程安全。</p>\n<p>java.util.Vector是一个线程安全的容器，因为它的add()、get()和size()这类方法都是被synchronized修饰的，尽管这样效率很低，但确实是安全的。但是，即使它所有的方法都被修饰成同步，也不意味着调用它的时候永远都不再需要同步手段了。如下代码：</p>\n<pre><code class=\"language-java\">public class VectorTest {\n    private static Vector&lt;Integer&gt; vector = new Vector&lt;&gt;();\n\n    public static void main(String[] args) {\n        while(true) {\n            for (int i = 0; i &lt; 10; i++) {\n                vector.add(i);\n            }\n\n            Thread removeThread = new Thread(()-&gt; {\n                // 让线程稍微停顿一会\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int i = 0; i &lt;vector.size() ; i++) {\n                    vector.remove(i);\n                }\n            });\n\n            Thread printThread = new Thread(()-&gt; {\n                for (int i = 0; i &lt; vector.size(); i++) {\n                    System.out.println(vector.get(i));\n                }\n            });\n\n            removeThread.start();\n            printThread.start();\n\n        }\n    }\n}\n</code></pre>\n<p>结果如下：\n<img src=\"http://oss.dblearn.cn/dbblog/20190420/9166ec7683314dbca26beec50f5aecb7.png\" alt=\"image.png\">\n如果另一个线程在错误的时间里删除了一个元素，导致序号i已经不再可用了，再用i访问就会抛出ArrayIndexOutOfBoundsException。因此，我们不得不需要在方法调用端做额外的同步操作，如：</p>\n<pre><code class=\"language-java\">        Thread removeThread = new Thread(()-&gt; {\n                // 让线程稍微停顿一会\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                synchronized (vector) {\n                    for (int i = 0; i &lt;vector.size() ; i++) {\n                        vector.remove(i);\n                    }\n                }\n\n            });\n\n            Thread printThread = new Thread(()-&gt; {\n                synchronized (vector) {\n                    for (int i = 0; i &lt; vector.size(); i++) {\n                        System.out.println(vector.get(i));\n                    }\n                }\n\n            });\n</code></pre>\n<h4 id=\"-\">相对线程安全</h4>\n<p>相对的线程安全就是我们通常意义上讲的线程安全。它需要保证这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性，如上例。\n在Java中，大部分安全类都属于这种类型，如Vector、HashTable、Collections的synchronizedCollection()方法包装的集合等。</p>\n<h4 id=\"-\">线程兼容</h4>\n<p>线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用，我们平常说一个类不是线程安全的，绝大多数时候指的是这一种情况。Java API中大部分的类都是属于线程兼容的，如集合类ArrayList和HashMap等。</p>\n<h4 id=\"-\">线程对立</h4>\n<p>线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。</p>\n<p>一个线程对立的例子是Thread类的suspend()和resume()方法，如果有两个线程同时持有一个线程对象，一个尝试去中断线程，另一个尝试去恢复线程，如果并发进行的话，无论调用时是否进行了同步，目标线程都是存在死锁风险的，如果suspend()中断的线程就是即将要执行resume()的那个线程，那就肯定要产生死锁了。也正是由于这个原因，suspend()和resume()方法已经被JDK声明废弃（@Deprecated）了。常见的线程对立的操作还有System.setIn()、Sytem.setOut()和System.runFinalizersOnExit()等。</p>\n<h3 id=\"-\">线程安全的实现方法</h3>\n<h4 id=\"-\">互斥同步</h4>\n<p>互斥同步（Mutual Exclusion &amp; Synchronization）,同步时指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一个（或者是一些，使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是主要的互斥实现方式。互斥是因，同步是果；互斥是方法，同步是目的。</p>\n<p>在Java中，最基本的互斥同步手段就是synchronized关键字，synchronized关键字经过编译之后，会在同步块的前后分别形成monitorenter和monitorexit这两个字节码指令，这两个字节码都需要一个reference类型的参数来指明要锁定和解锁的对象。如果Java程序中的synchronized明确指定了对象参数，那就是这个对象的reference；如果没有明确指定，那就根据synchronized修饰的是实例方法还是类方法，去取对应的对象实例或Class对象来作为锁对象。</p>\n<p>根据虚拟机规范的要求，在执行monitorenter时，首先要尝试获取对象的锁。如果这个对象没有被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加1，相应的。在执行monitoerexit指令时将会将锁的计数器减1，当计数器为0时，锁就被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到对象锁被另一个线程释放为止。</p>\n<p>在虚拟机规范对monitorenter和monitorexit的行为描述中，有两点是需要特别注意的。首先，synchronized同步块对同一条线程来说是可重入的，不会出现自己把自己锁死的问题。其次，同步块在已进入的线程执行完之前，会阻塞后面其他线程的进入。Java的线程是映射到操作系统的原生线程之上的，如果要阻塞或唤醒一个线程，都需要操作系统来帮忙完成，这就需要从用户态转换到核心态中，因此状态转换需要耗费很多的处理器时间。所以synchronized是Java语言中一个重量级（Heavyweight）的操作。虚拟机本身也会进行一些优化，譬如在通知操作系统阻塞线程之前加入一段自旋等待过程，避免频繁地切入到核心态之中。</p>\n<p>除了synchronized之外，我们还可以使用java.util.concurrent(下文称JUC)包中的重入锁（ReentrantLock）来实现同步，他们都具备一样的线程重入特性，只是代码写法上有点区别，一个表现为API层面的互斥锁（lock()和unlock()方法配合try/finally语句块来完成），另一个表现为原生语法层面的互斥锁。相比synchronized，ReentrantLock增加了一些高级功能，主要有以下3项：等待可中断、可实现公平锁，以及锁可以绑定多个条件。</p>\n<ol>\n<li>等待可中断是指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。可中断特性对处理执行时间非常长的同步块很有帮助。</li>\n<li>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；而非公平锁则不保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。synchronized中的锁是非公平的，ReentrantLock默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁。</li>\n<li>锁绑定多个条件是指一个ReentrantLock对象可以同时绑定多个Condition对象，而在synchronized中，锁对象的wait（）和notify（）或notifyAll（）方法可以实现一个隐含的条件，如果要和多于一个的条件关联的时候，就不得不额外地添加一个锁，而ReentrantLock则无须这样做，只需要多次调用newCondition（）方法即可。</li>\n</ol>\n<h4 id=\"-\">非阻塞同步</h4>\n<p>互斥同步最主要的问题就是进行线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步（Blocking Synchronization）。从处理问题的方式上说，互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施（例如加锁），那就肯定会出现问题，无论共享数据是否真的会出现竞争，它都要进行加锁（这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁）、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p>\n<p>随着硬件指令集的发展，我们有了另外一个选择：基于冲突检测的乐观并发策略，通俗地说，就是先进行操作，如果没有其他线程争用共享数据，那操作就成功了；如果共享数据有争用，产生了冲突，那就再采取其他的补偿措施（最常见的补偿措施就是不断地重试，直到成功为止），这种乐观的并发策略的许多实现都不需要把线程挂起，因此这种同步操作称为非阻塞同步（Non-Blocking Synchronization）。</p>\n<p>非阻塞同步一般通过硬件来保证一个从语义上看起来需要多次操作的行为只通过一条处理器指令就能完成，这类指令常用的有：</p>\n<ul>\n<li>测试并设置（Test-and-Set）。</li>\n<li>获取并增加（Fetch-and-Increment）。</li>\n<li>交换（Swap）。</li>\n<li>比较并交换（Compare-and-Swap，下文称CAS）。</li>\n<li>加载链接/条件存储（Load-Linked/Store-Conditional，下文称LL/SC）。</li>\n</ul>\n<p>CAS指令需要有3个操作数，分别是内存位置（在Java中可以简单理解为变量的内存地址，用V表示）、旧的预期值（用A表示）和新值（用B表示）。CAS指令执行时，当且仅当V符合旧预期值A时，处理器用新值B更新V的值，否则它就不执行更新，但是无论是否更新了V的值，都会返回V的旧值，上述的处理过程是一个原子操作。</p>\n<p>在JDK 1.5之后，Java程序中才可以使用CAS操作，该操作由sun.misc.Unsafe类里面的compareAndSwapInt()和compareAndSwapLong()等几个方法包装提供，虚拟机在内部对这些方法做了特殊处理，即时编译出来的结果就是一条平台相关的处理器CAS指令，没有方法调用的过程，或者可以认为是无条件内联进去了。</p>\n<p>由于Unsafe类不是提供给用户程序调用的类（Unsafe.getUnsafe()的代码中限制了只有启动类加载器（Bootstrap ClassLoader）加载的Class才能访问它），因此，如果不采用反射手段，我们只能通过其他的Java API来间接使用它，如J.U.C包里面的整数原子类，其中的compareAndSet()和getAndIncrement()等方法都使用了Unsafe类的CAS操作。下面看看如何使用CAS来避免阻塞操作：</p>\n<pre><code class=\"language-java\">public class VolatileTest {\n    public static volatile AtomicInteger race = new AtomicInteger(0);\n\n    public static void increase() {\n        race.incrementAndGet();\n    }\n\n    private static final int THREADS_COUNT = 20;\n\n    public static void main(String[] args) {\n        Thread[] threads = new Thread[THREADS_COUNT];\n        for (int i = 0; i &lt; THREADS_COUNT; i++) {\n            threads[i] = new Thread(() -&gt; {\n                for (int j = 0; j &lt; 10000; j++) {\n                    increase();\n                }\n            });\n            threads[i].start();\n        }\n        //  等待所有累加线程都结束\n        while (Thread.activeCount()&gt;1) {\n            Thread.yield();\n        }\n        System.out.println(race);\n    }\n\n}\n</code></pre>\n<p>运行结果如下：\n200000\n这一切都要归功于incrementAndGet()方法的原子性，其源码(JDK1.7)如下：</p>\n<pre><code class=\"language-java\">public final int incrementAndGet() {\n    for (;;) {\n        int current = get();\n        int next = current + 1;\n        if (compareAndSet(current, next))\n            return next;\n    }\n}</code></pre>\n<p>incrementAndGet()方法在一个无限循环中，不断尝试将一个比当前值大1的新值赋给自己。如果失败了，那说明在执行“获取-位置”的时候值已经有了修改，于是再次循环进行下一次操作，知道设置成功为止。</p>\n<p>CAS这种操作无法涵盖互斥同步的所有使用场景，并且CAS从语义上来说并不是完美的，存在这样的一个逻辑漏洞：如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然为A值，那我们就能说它的值没有被其他线程改变过了吗？如果在这段期间它的值曾经被改成了B，后来又被改回为A，那CAS操作就会误认为它从来没有被改变过。这个漏洞称为CAS操作的“ABA”问题。JUC包为了解决这个问题，提供了一个带有标记的原子引用类AtomicStampedReference，它可以通过控制变量值的版本来保证CAS的正确性。大部分情况下ABA问题不会影响程序并发的正确性，如果需要解决ABA问题，改用传统的互斥同步可能会比原子类更高效。</p>\n<h3 id=\"-\">无同步方案</h3>\n<p>要保证线程安全，并不是一定就要进行同步，两者没有因果关系。同步只是保证共享数据争用时的正确性的手段，如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性，因此会有一些代码天生就是线程安全的，笔者简单地介绍其中的两类。</p>\n<h4 id=\"-reentrant-code-\">可重入代码（Reentrant Code）</h4>\n<p>这种代码也叫做纯代码（Pure Code），可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误。相对线程安全来说，可重入性是更基本的特性，它可以保证线程安全，即所有的可重入的代码都是线程安全的，但是并非所有的线程安全的代码都是可重入的。</p>\n<p>可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。我们可以“通过一个简单的原则来判断代码是否具备可重入性：如果一个方法，它的返回结果是可以预测的，只要输入了相同的数据，就都能返回相同的结果，那它就满足可重入性的要求，当然也就是线程安全的。</p>\n<h4 id=\"-thread-local-storage-\">线程本地存储（Thread Local Storage）</h4>\n<p>如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行？如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。</p>\n<p>Java语言中，如果一个变量要被多线程访问，可以使用volatile关键字声明它为“易变的”；如果一个变量要被某个线程独享，可以通过java.lang.ThreadLocal类来实现线程本地存储的功能。每一个线程的Thread对象中都有一个ThreadLocalMap对象，这个对象存储了一组以ThreadLocal.threadLocalHashCode为键，以本地线程变量为值的键值对，ThreadLocal对象就是当前线程的ThreadLocalMap的访问入口，每一个ThreadLocal对象都包含了一个独一无二的threadLocalHashCode值，使用这个值就可以在线程键值值对中找回对应的本地线程变量。</p>\n<h2 id=\"-\">锁优化</h2>\n<p>为了在线程之间更高效地共享数据，以及解决竞争问题，从而提高程序的执行效率，HotSpot虚拟机开发团队实现了锁优化技术，如适应性自旋（Adaptive Spinning）、锁消除（Lock Elimination）、锁粗化（Lock Coarsening）、轻量级锁（Lightweight Locking）和偏向锁（Biased Locking）等。</p>\n<h3 id=\"-\">自旋锁于自适应锁</h3>\n<p>互斥同步对性能最大的影响是阻塞的实现，挂起线程和恢复线程的操作都需要转入内核态中完成，这些操作给系统的并发性能带来了很大的压力。在许多应用上，共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程并不值得。如果物理机器有一个以上的处理器，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一下”，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需让线程执行一个忙循环（自旋），这项技术就是所谓的自旋锁。</p>\n<p>自旋锁在JDK 1.4.2中就已经引入，只不过默认是关闭的，可以使用-XX:+UseSpinning参数来开启，在JDK 1.6中就已经改为默认开启了。自旋等待不能代替阻塞，且先不说对处理器数量的要求，自旋等待本身虽然避免了线程切换的开销，但它是要占用处理器时间的，因此，如果锁被占用的时间很短，自旋等待的效果就会非常好，反之，如果锁被占用的时间很长，那么自旋的线程只会白白消耗处理器资源，而不会做任何有用的工作，反而会带来性能上的浪费。因此，自旋等待的时间必须要有一定的限度，如果自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程了。自旋次数的默认值是10次，用户可以使用参数-XX:PreBlockSpin来更改。</p>\n<p>在JDK 1.6中引入了自适应的自旋锁。自适应意味着自旋的时间不再固定了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。另外，如果对于某个锁，自旋很少成功获得过，那在以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，随着程序运行和性能监控信息的不断完善，虚拟机对程序锁的状况预测就会越来越准确。</p>\n<h3 id=\"-\">锁消除</h3>\n<p>锁消除是指虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除的主要判定依据来源于逃逸分析的数据支持，如果判断在一段代码中，堆上的所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当做栈上数据对待，认为它们是线程私有的，同步加锁自然就无须进行。</p>\n<h3 id=\"-\">锁粗化</h3>\n<p>原则上，我们在编写代码的时候，总是推荐将同步块的作用范围限制得尽量小——只在共享数据的实际作用域中才进行同步，这样是为了使得需要同步的操作数量尽可能变小，如果存在锁竞争，那等待锁的线程也能尽快拿到锁。</p>\n<p>大部分情况下，上面的原则都是正确的，但是如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。</p>\n<p>如果虚拟机探测到一串零碎的操作都对同一个对象加锁，将会把加锁同步的范围扩展（粗化）到整个操作序列的外部。</p>\n<h3 id=\"-\">轻量级锁</h3>\n<p>轻量级锁是JDK 1.6之中加入的新型锁机制，它名字中的“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的，因此传统的锁机制就称为“重量级”锁。轻量级锁用于在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。</p>\n<p>轻量级锁能提升程序同步性能的依据是“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”，这是一个经验数据。如果没有竞争，轻量级锁使用CAS操作避免了使用互斥量的开销，但如果存在锁竞争，除了互斥量的开销外，还额外发生了CAS操作，因此在有竞争的情况下，轻量级锁会比传统的重量级锁更慢。</p>\n<h3 id=\"-\">偏向锁</h3>\n<p>偏向锁也是JDK 1.6中引入的一项锁优化，它的目的是消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能。如果说轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把整个同步都消除掉，连CAS操作都不做了。</p>\n<p>偏向锁的“偏”，就是偏心的“偏”、偏袒的“偏”，它的意思是这个锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步。</p>\n<p>偏向锁可以提高带有同步但无竞争的程序性能。它同样是一个带有效益权衡（Trade Off）性质的优化，也就是说，它并不一定总是对程序运行有利，如果程序中大多数的锁总是被多个不同的线程访问，那偏向模式就是多余的。在具体问题具体分析的前提下，有时候使用参数-XX:-UseBiasedLocking来禁止偏向锁优化反而可以提升性能。</p>\n',100,54,NULL,1,'第十三章：线程安全与锁优化','2019-04-20 05:59:23','2019-04-22 04:42:45',1,'4,5,6',1,2,NULL),(10,'Java多线程01——多线程技能','掌握Java多线程技能的基本使用','Bobbi','## 进程与线程\n进程：进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。如操作系统中正在运行的exe程序。\n线程：线程是在进程中独立运行的子任务，是CPU调度和分派的基本单位。\n\n## 多线程的实现方式\n### 继承Thread\n缺点： 使用继承Thread类的方式创建线程时，最大的局限就是不支持多继承（Java语言的特点就是单继承）\n```java\npublic class MyThread extends Thread {\n\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + \" Hello Thread\");\n    }\n\n    public static void main(String[] args) {\n        MyThread myThread = new MyThread();\n        myThread.setName(\"myThread\");\n        myThread.start();\n        System.out.println(Thread.currentThread().getName() + \" 运行结束\");\n    }\n}\n\n```\n![image.png](http://oss.dblearn.cn/dbblog/20190424/ee57d08e515648fdb7c462d92db603f4.png)\n\n注意：\n- 运行时创建了两个线程，一个是myThread线程，一个是main线程，由于CPU的调度具有随机性，因此打印顺序具有不确定性。\n- 调用的是myThread的start()方法，而不是run()方法\n\n### 实现Runnable接口\n由于Java是单继承，不支持多继承，如果线程类已经有一个父类了，就无法再继承Thread了，因此需要实现Runnable接口来应对这种情况。\n\n```java\npublic class MyRunnable implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName()+ \" Hello Thread\");\n    }\n\n    public static void main(String[] args) {\n        MyRunnable myRunnable  = new MyRunnable();\n        Thread thread = new Thread(myRunnable);\n        thread.setName(\"MyRunnable\");\n        thread.start();\n        System.out.println(Thread.currentThread().getName()+ \" 运行结束\");\n    }\n}\n```\n\n### 实例变量与线程安全\n实例变量针对其他线程有共享与不共享之分\n#### 不共享数据的情况\n```java\npublic class MyThread1_2_3 extends Thread {\n\n    private int count = 5;\n\n    public MyThread1_2_3(String name) {\n        this.setName(name);\n    }\n\n    @Override\n    public void run() {\n        while (count > 0) {\n            count--;\n            System.out.println(\"由\"+Thread.currentThread().getName()+\"计算：count=\"+count);\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread1_2_3 myThreadA = new MyThread1_2_3(\"A\");\n        MyThread1_2_3 myThreadB = new MyThread1_2_3(\"B\");\n        MyThread1_2_3 myThreadC = new MyThread1_2_3(\"C\");\n        myThreadA.start();\n        myThreadB.start();\n        myThreadC.start();\n    }\n}\n```\n![image.png](http://oss.dblearn.cn/dbblog/20190425/fd1c17f5eefa4fd7abb1c3cb5bc3d19e.png)\n\n一共创建了三个线程，每个线程都有各自的count变量，并且每个线程都操作自己的count变量，互不影响。\n\n#### 共享数据的情况\n```java\npublic class MyThread1_2_3 extends Thread {\n\n    private int count = 5;\n\n    @Override\n    public void run() {\n        count--;\n        System.out.println(\"由\" + Thread.currentThread().getName() + \"计算：count=\" + count);\n    }\n\n    public static void main(String[] args) {\n        MyThread1_2_3 common = new MyThread1_2_3(); // MyThread1_2_3相当于实现了Runnable接口\n        Thread a = new Thread(common, \"A\"); // 使用实现runnable接口的形式创建线程\n        Thread b = new Thread(common, \"B\");\n        Thread c = new Thread(common, \"C\");\n        Thread d = new Thread(common, \"D\");\n        Thread e = new Thread(common, \"E\");\n        a.start();\n        b.start();\n        c.start();\n        d.start();\n        e.start();\n\n    }\n}\n\n```\n![image.png](http://oss.dblearn.cn/dbblog/20190425/3ad14ce3aeaf4df9a9e6cdcba50f136d.png)\n\n创建了a、b、c、d、e五条线程，都对MyThread1_2_3里的count进行操作。结果出现d、e线程同时竞争count变量的操作，产生了“非线程安全”问题。\n> 非线程安全：多个线程对同一个对象中的同一个实例变量进行操作时会出现值被更改、值不同步的情况，进而影响程序的执行流程。\n\n## currentThread()、isAlive()、sleep()、getId()方法\n#### currentThread()\ncurrentThread()方法可返回代码段正在被哪个线程调用的信息\n```java\npublic class MyThread1_3 extends Thread{\n\n    public MyThread1_3() {\n        System.out.println(\"构造方法打印：\"+ Thread.currentThread().getName());\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"实现方法打印：\"+Thread.currentThread().getName());\n    }\n\n    public static void main(String[] args) {\n        MyThread1_3 myThread1_3 = new MyThread1_3();\n        myThread1_3.start();\n//        myThread1_3.run();\n    }\n}\n```\n![image.png](http://oss.dblearn.cn/dbblog/20190425/c09be291c046411d94735ff7ad66ace4.png)\n\n将注释修改为：\n```java\n public static void main(String[] args) {\n        MyThread1_3 myThread1_3 = new MyThread1_3();\n//        myThread1_3.start();\n        myThread1_3.run();\n    }\n```\n![image.png](http://oss.dblearn.cn/dbblog/20190425/ca3ed04ceb624cafb0e4ee36aa17d1ee.png)\n\n可见，调用线程的start方法是通过会通知“线程规划器”，创建Thread-0调用线程对象的run方法。直接调用线程的run()，相当于是调用一个普通方法，参与的线程是调用run()方法的线程（main）','<h2 id=\"-\">进程与线程</h2>\n<p>进程：进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。如操作系统中正在运行的exe程序。\n线程：线程是在进程中独立运行的子任务，是CPU调度和分派的基本单位。</p>\n<h2 id=\"-\">多线程的实现方式</h2>\n<h3 id=\"-thread\">继承Thread</h3>\n<p>缺点： 使用继承Thread类的方式创建线程时，最大的局限就是不支持多继承（Java语言的特点就是单继承）</p>\n<pre><code class=\"language-java\">public class MyThread extends Thread {\n\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + &quot; Hello Thread&quot;);\n    }\n\n    public static void main(String[] args) {\n        MyThread myThread = new MyThread();\n        myThread.setName(&quot;myThread&quot;);\n        myThread.start();\n        System.out.println(Thread.currentThread().getName() + &quot; 运行结束&quot;);\n    }\n}\n</code></pre>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190424/ee57d08e515648fdb7c462d92db603f4.png\" alt=\"image.png\"></p>\n<p>注意：</p>\n<ul>\n<li>运行时创建了两个线程，一个是myThread线程，一个是main线程，由于CPU的调度具有随机性，因此打印顺序具有不确定性。</li>\n<li>调用的是myThread的start()方法，而不是run()方法</li>\n</ul>\n<h3 id=\"-runnable-\">实现Runnable接口</h3>\n<p>由于Java是单继承，不支持多继承，如果线程类已经有一个父类了，就无法再继承Thread了，因此需要实现Runnable接口来应对这种情况。</p>\n<pre><code class=\"language-java\">public class MyRunnable implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName()+ &quot; Hello Thread&quot;);\n    }\n\n    public static void main(String[] args) {\n        MyRunnable myRunnable  = new MyRunnable();\n        Thread thread = new Thread(myRunnable);\n        thread.setName(&quot;MyRunnable&quot;);\n        thread.start();\n        System.out.println(Thread.currentThread().getName()+ &quot; 运行结束&quot;);\n    }\n}</code></pre>\n<h3 id=\"-\">实例变量与线程安全</h3>\n<p>实例变量针对其他线程有共享与不共享之分</p>\n<h4 id=\"-\">不共享数据的情况</h4>\n<pre><code class=\"language-java\">public class MyThread1_2_3 extends Thread {\n\n    private int count = 5;\n\n    public MyThread1_2_3(String name) {\n        this.setName(name);\n    }\n\n    @Override\n    public void run() {\n        while (count &gt; 0) {\n            count--;\n            System.out.println(&quot;由&quot;+Thread.currentThread().getName()+&quot;计算：count=&quot;+count);\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread1_2_3 myThreadA = new MyThread1_2_3(&quot;A&quot;);\n        MyThread1_2_3 myThreadB = new MyThread1_2_3(&quot;B&quot;);\n        MyThread1_2_3 myThreadC = new MyThread1_2_3(&quot;C&quot;);\n        myThreadA.start();\n        myThreadB.start();\n        myThreadC.start();\n    }\n}</code></pre>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190425/fd1c17f5eefa4fd7abb1c3cb5bc3d19e.png\" alt=\"image.png\"></p>\n<p>一共创建了三个线程，每个线程都有各自的count变量，并且每个线程都操作自己的count变量，互不影响。</p>\n<h4 id=\"-\">共享数据的情况</h4>\n<pre><code class=\"language-java\">public class MyThread1_2_3 extends Thread {\n\n    private int count = 5;\n\n    @Override\n    public void run() {\n        count--;\n        System.out.println(&quot;由&quot; + Thread.currentThread().getName() + &quot;计算：count=&quot; + count);\n    }\n\n    public static void main(String[] args) {\n        MyThread1_2_3 common = new MyThread1_2_3(); // MyThread1_2_3相当于实现了Runnable接口\n        Thread a = new Thread(common, &quot;A&quot;); // 使用实现runnable接口的形式创建线程\n        Thread b = new Thread(common, &quot;B&quot;);\n        Thread c = new Thread(common, &quot;C&quot;);\n        Thread d = new Thread(common, &quot;D&quot;);\n        Thread e = new Thread(common, &quot;E&quot;);\n        a.start();\n        b.start();\n        c.start();\n        d.start();\n        e.start();\n\n    }\n}\n</code></pre>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190425/3ad14ce3aeaf4df9a9e6cdcba50f136d.png\" alt=\"image.png\"></p>\n<p>创建了a、b、c、d、e五条线程，都对MyThread1_2_3里的count进行操作。结果出现d、e线程同时竞争count变量的操作，产生了“非线程安全”问题。</p>\n<blockquote>\n<p>非线程安全：多个线程对同一个对象中的同一个实例变量进行操作时会出现值被更改、值不同步的情况，进而影响程序的执行流程。</p>\n</blockquote>\n<h2 id=\"currentthread-isalive-sleep-getid-\">currentThread()、isAlive()、sleep()、getId()方法</h2>\n<h4 id=\"currentthread-\">currentThread()</h4>\n<p>currentThread()方法可返回代码段正在被哪个线程调用的信息</p>\n<pre><code class=\"language-java\">public class MyThread1_3 extends Thread{\n\n    public MyThread1_3() {\n        System.out.println(&quot;构造方法打印：&quot;+ Thread.currentThread().getName());\n    }\n\n    @Override\n    public void run() {\n        System.out.println(&quot;实现方法打印：&quot;+Thread.currentThread().getName());\n    }\n\n    public static void main(String[] args) {\n        MyThread1_3 myThread1_3 = new MyThread1_3();\n        myThread1_3.start();\n//        myThread1_3.run();\n    }\n}</code></pre>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190425/c09be291c046411d94735ff7ad66ace4.png\" alt=\"image.png\"></p>\n<p>将注释修改为：</p>\n<pre><code class=\"language-java\"> public static void main(String[] args) {\n        MyThread1_3 myThread1_3 = new MyThread1_3();\n//        myThread1_3.start();\n        myThread1_3.run();\n    }</code></pre>\n<p><img src=\"http://oss.dblearn.cn/dbblog/20190425/ca3ed04ceb624cafb0e4ee36aa17d1ee.png\" alt=\"image.png\"></p>\n<p>可见，调用线程的start方法是通过会通知“线程规划器”，创建Thread-0调用线程对象的run方法。直接调用线程的run()，相当于是调用一个普通方法，参与的线程是调用run()方法的线程（main）</p>\n',15,1,NULL,3,'第一章:Java多线程技能','2019-04-24 13:00:15','2019-04-25 04:52:01',0,'4,5,30',0,2,NULL);
/*!40000 ALTER TABLE `book_note` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `book_sense`
--

DROP TABLE IF EXISTS `book_sense`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `book_sense` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `author` varchar(20) DEFAULT NULL COMMENT '作者',
  `content` text COMMENT '内容',
  `book_id` int(11) DEFAULT NULL COMMENT '关联图书Id',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='读后感';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `book_sense`
--

LOCK TABLES `book_sense` WRITE;
/*!40000 ALTER TABLE `book_sense` DISABLE KEYS */;
/*!40000 ALTER TABLE `book_sense` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `category` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(255) DEFAULT NULL COMMENT '名称',
  `type` int(11) DEFAULT NULL COMMENT '类型：0文章，1阅读',
  `rank` int(11) DEFAULT NULL COMMENT '级别',
  `parent_id` int(11) DEFAULT '0' COMMENT '父主键',
  PRIMARY KEY (`id`),
  UNIQUE KEY `operation_category_id_uindex` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (1,'漫谈',0,0,-1),(2,'本站相关',0,1,1),(3,'关于',0,2,2),(4,'后端',1,0,-1),(5,'Java进阶',1,1,4),(6,'JVM',1,2,5),(9,'后端',0,0,-1),(11,'Java基础',0,1,9),(12,'面试',0,2,11),(14,'Java进阶',0,1,9),(15,'JVM',0,2,14),(18,'大数据',0,0,-1),(19,'中间件',0,1,18),(20,'ElasticSearch',0,2,19),(21,'工具',0,1,9),(22,'Arthas',0,2,21),(23,'技巧',0,2,2),(24,'框架',0,1,9),(25,'Spring',0,2,24),(26,'设计模式',0,2,11),(27,'算法与数据结构',1,0,-1),(28,'算法',1,1,27),(29,'面试',1,2,28),(30,'多线程',1,2,5),(31,'博客',0,2,2),(32,'多线程基础',0,2,14),(33,'JUC原子类',0,2,14),(35,'JUC锁',0,2,14),(37,'JUC集合',0,2,14),(38,'Java集合',0,2,11),(39,'SpringBoot',0,2,24),(41,'JUC线程池',0,2,14);
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `link`
--

DROP TABLE IF EXISTS `link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `link` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(50) DEFAULT NULL COMMENT '链接名称',
  `url` varchar(500) DEFAULT NULL COMMENT '链接地址',
  `avatar` varchar(255) DEFAULT NULL COMMENT '头像',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COMMENT='友链';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `link`
--

LOCK TABLES `link` WRITE;
/*!40000 ALTER TABLE `link` DISABLE KEYS */;
INSERT INTO `link` VALUES (1,'佐伊的木匣子','http://www.zzzoey.top','http://oss.dblearn.cn/dbblog/20190301/90f6efee42d44401ac08ab953aead153.jpg'),(2,'DB’s Blog','http://www.dblearn.cn','http://oss.dblearn.cn/dbblog/20190301/725de45f1917497e903df9a0fa0a90ef.jpg');
/*!40000 ALTER TABLE `link` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `log_like`
--

DROP TABLE IF EXISTS `log_like`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `log_like` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `type` varchar(50) DEFAULT NULL COMMENT '点赞类型',
  `params` varchar(5000) DEFAULT NULL COMMENT '请求参数',
  `time` bigint(20) NOT NULL COMMENT '执行时长(毫秒)',
  `ip` varchar(64) DEFAULT NULL COMMENT 'IP地址',
  `create_date` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2169 DEFAULT CHARSET=utf8mb4 COMMENT='点赞日志';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `log_like`
--

LOCK TABLES `log_like` WRITE;
/*!40000 ALTER TABLE `log_like` DISABLE KEYS */;
INSERT INTO `log_like` VALUES (1,'bookNote','1',0,'223.104.63.17','2019-03-04 08:16:27'),(2,'article','1',0,'117.136.39.94','2019-03-04 19:08:23'),(3,'article','5',0,'183.63.51.77','2019-03-08 15:38:21'),(4,'article','1',0,'112.28.158.77','2019-03-12 23:36:25'),(5,'article','1',0,'112.28.158.77','2019-03-12 23:36:26'),(6,'article','1',0,'42.196.137.219','2019-03-17 02:14:09'),(7,'article','1',0,'42.196.137.219','2019-03-17 02:14:11'),(8,'article','1',0,'42.196.137.219','2019-03-17 02:14:12'),(9,'article','1',0,'42.196.137.219','2019-03-17 02:14:15'),(10,'article','13',0,'117.136.40.244','2019-04-02 20:08:15'),(11,'article','1',4,'0:0:0:0:0:0:0:1','2019-04-03 14:30:57'),(12,'article','1',5,'0:0:0:0:0:0:0:1','2019-04-03 14:41:16'),(13,'article','1',0,'0:0:0:0:0:0:0:1','2019-04-03 14:41:38'),(14,'article','1',6,'0:0:0:0:0:0:0:1','2019-04-03 14:44:22'),(15,'article','1',3,'0:0:0:0:0:0:0:1','2019-04-03 14:45:40'),(16,'article','1',0,'211.138.20.165','2019-04-08 17:30:06'),(17,'article','1',0,'61.184.115.28','2019-04-11 19:59:35'),(18,'article','1',0,'219.143.128.47','2019-04-17 23:14:07'),(19,'article','4',0,'1.192.61.34','2019-04-18 09:25:16'),(20,'article','13',0,'61.148.243.77','2019-04-18 09:28:16'),(21,'article','13',0,'61.148.243.77','2019-04-18 09:28:16'),(22,'article','13',0,'61.148.243.77','2019-04-18 09:28:19'),(23,'article','13',0,'61.148.243.77','2019-04-18 09:28:21'),(24,'article','13',0,'61.148.243.77','2019-04-18 09:28:21'),(25,'article','13',0,'61.148.243.77','2019-04-18 09:28:21'),(26,'article','13',0,'61.148.243.77','2019-04-18 09:28:22'),(27,'article','13',1,'61.148.243.77','2019-04-18 09:28:22'),(28,'article','13',0,'61.148.243.77','2019-04-18 09:28:22'),(29,'article','13',0,'61.148.243.77','2019-04-18 09:28:22'),(30,'article','13',0,'61.148.243.77','2019-04-18 09:28:23'),(31,'article','13',0,'61.148.243.77','2019-04-18 09:28:23'),(32,'bookNote','1',1,'159.226.21.21','2019-04-18 11:03:47'),(33,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:49'),(34,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:49'),(35,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:50'),(36,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:50'),(37,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:50'),(38,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:50'),(39,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:51'),(40,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:51'),(41,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:51'),(42,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:52'),(43,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:52'),(44,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:52'),(45,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:52'),(46,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:52'),(47,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:52'),(48,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:53'),(49,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:53'),(50,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:53'),(51,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:53'),(52,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:53'),(53,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:53'),(54,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:54'),(55,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:54'),(56,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:54'),(57,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:54'),(58,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:54'),(59,'bookNote','1',0,'159.226.21.21','2019-04-18 11:03:54'),(60,'article','3',0,'106.38.66.250','2019-04-18 11:14:24'),(61,'article','3',0,'106.38.66.250','2019-04-18 11:14:25'),(62,'article','3',0,'106.38.66.250','2019-04-18 11:14:26'),(63,'article','3',0,'106.38.66.250','2019-04-18 11:14:27'),(64,'article','3',0,'106.38.66.250','2019-04-18 11:14:27'),(65,'article','3',0,'106.38.66.250','2019-04-18 11:14:27'),(66,'article','3',0,'106.38.66.250','2019-04-18 11:14:27'),(67,'article','3',0,'106.38.66.250','2019-04-18 11:14:27'),(68,'article','3',0,'106.38.66.250','2019-04-18 11:14:27'),(69,'article','1',0,'221.223.44.1','2019-04-18 12:27:48'),(70,'article','1',0,'221.223.44.1','2019-04-18 12:27:48'),(71,'article','1',0,'221.223.44.1','2019-04-18 12:27:49'),(72,'article','1',0,'221.223.44.1','2019-04-18 12:27:49'),(73,'article','1',0,'221.223.44.1','2019-04-18 12:27:49'),(74,'article','1',0,'221.223.44.1','2019-04-18 12:27:50'),(75,'article','1',0,'221.223.44.1','2019-04-18 12:27:50'),(76,'article','1',0,'221.223.44.1','2019-04-18 12:27:51'),(77,'article','1',0,'221.223.44.1','2019-04-18 12:27:53'),(78,'article','4',0,'180.165.240.37','2019-04-18 15:08:08'),(79,'article','1',0,'171.120.124.226','2019-04-19 09:34:43'),(80,'article','1',0,'171.120.124.226','2019-04-19 09:34:45'),(81,'article','1',0,'171.120.124.226','2019-04-19 09:34:46'),(82,'article','1',0,'171.120.124.226','2019-04-19 09:34:47'),(83,'article','1',0,'171.120.124.226','2019-04-19 09:34:47'),(84,'article','1',0,'171.120.124.226','2019-04-19 09:34:48'),(85,'article','1',0,'171.120.124.226','2019-04-19 09:34:48'),(86,'article','1',0,'171.120.124.226','2019-04-19 09:34:48'),(87,'article','1',0,'171.120.124.226','2019-04-19 09:34:48'),(88,'article','1',0,'171.120.124.226','2019-04-19 09:34:49'),(89,'article','1',0,'171.120.124.226','2019-04-19 09:34:49'),(90,'article','13',0,'115.236.71.65','2019-04-19 15:59:44'),(91,'article','13',0,'124.64.18.31','2019-04-19 20:13:40'),(92,'article','12',0,'117.188.14.247','2019-04-20 22:35:15'),(93,'article','12',0,'117.188.14.247','2019-04-20 22:35:17'),(94,'article','13',0,'111.198.224.225','2019-04-20 23:33:52'),(95,'article','1',0,'111.198.224.225','2019-04-20 23:35:17'),(96,'bookNote','2',0,'111.198.228.163','2019-04-21 22:08:10'),(97,'article','1',0,'183.63.51.77','2019-04-23 20:41:23'),(98,'article','1',0,'58.48.165.173','2019-04-25 16:22:27'),(99,'article','1',0,'58.48.165.173','2019-04-25 16:22:28'),(100,'article','1',0,'58.48.165.173','2019-04-25 16:22:29'),(101,'article','1',0,'58.48.165.173','2019-04-25 16:22:29'),(102,'article','1',0,'58.48.165.173','2019-04-25 16:22:30'),(103,'article','1',0,'58.48.165.173','2019-04-25 16:22:30'),(104,'article','1',0,'58.48.165.173','2019-04-25 16:22:30'),(105,'article','1',0,'58.48.165.173','2019-04-25 16:22:30'),(106,'article','1',0,'58.48.165.173','2019-04-25 16:22:30'),(107,'article','1',0,'58.48.165.173','2019-04-25 16:22:30'),(108,'article','1',0,'58.48.165.173','2019-04-25 16:22:31'),(109,'article','1',0,'58.48.165.173','2019-04-25 16:22:31'),(110,'article','1',0,'58.48.165.173','2019-04-25 16:22:31'),(111,'article','1',0,'58.48.165.173','2019-04-25 16:22:31'),(112,'article','1',0,'58.48.165.173','2019-04-25 16:22:31'),(113,'article','1',0,'58.48.165.173','2019-04-25 16:22:32'),(114,'article','1',0,'58.48.165.173','2019-04-25 16:22:32'),(115,'article','1',0,'58.48.165.173','2019-04-25 16:22:32'),(116,'article','1',0,'58.48.165.173','2019-04-25 16:22:32'),(117,'article','1',0,'58.48.165.173','2019-04-25 16:22:32'),(118,'article','1',0,'58.48.165.173','2019-04-25 16:22:33'),(119,'article','1',0,'58.48.165.173','2019-04-25 16:22:33'),(120,'article','1',0,'58.48.165.173','2019-04-25 16:22:34'),(121,'article','1',0,'58.48.165.173','2019-04-25 16:22:34'),(122,'article','1',0,'58.48.165.173','2019-04-25 16:23:35'),(123,'article','1',0,'58.48.165.173','2019-04-25 16:24:22'),(124,'article','1',0,'58.48.165.173','2019-04-25 16:24:30'),(125,'article','1',0,'58.48.165.173','2019-04-25 16:24:31'),(126,'article','1',0,'58.48.165.173','2019-04-25 16:24:31'),(127,'article','1',0,'58.48.165.173','2019-04-25 16:24:32'),(128,'article','1',0,'58.48.165.173','2019-04-25 16:24:32'),(129,'article','1',0,'58.48.165.173','2019-04-25 16:24:33'),(130,'article','1',1,'58.48.165.173','2019-04-25 16:24:34'),(131,'article','1',0,'58.48.165.173','2019-04-25 16:24:34'),(132,'article','1',0,'58.48.165.173','2019-04-25 16:24:36'),(133,'article','1',0,'58.48.165.173','2019-04-25 16:24:36'),(134,'article','1',0,'58.48.165.173','2019-04-25 16:24:36'),(135,'article','1',0,'58.48.165.173','2019-04-25 16:24:37'),(136,'article','1',0,'58.48.165.173','2019-04-25 16:24:37'),(137,'article','1',0,'58.48.165.173','2019-04-25 16:24:37'),(138,'article','1',0,'58.48.165.173','2019-04-25 16:24:39'),(139,'article','1',0,'58.48.165.173','2019-04-25 16:24:39'),(140,'article','1',0,'58.48.165.173','2019-04-25 16:24:39'),(141,'article','1',0,'58.48.165.173','2019-04-25 16:24:39'),(142,'article','1',0,'58.48.165.173','2019-04-25 16:24:39'),(143,'article','1',0,'58.48.165.173','2019-04-25 16:24:40'),(144,'article','1',0,'58.48.165.173','2019-04-25 16:24:41'),(145,'article','1',0,'58.48.165.173','2019-04-25 16:24:41'),(146,'article','1',0,'58.48.165.173','2019-04-25 16:24:41'),(147,'article','1',0,'58.48.165.173','2019-04-25 16:24:41'),(148,'article','1',0,'58.48.165.173','2019-04-25 16:24:42'),(149,'article','1',0,'58.48.165.173','2019-04-25 16:24:42'),(150,'article','1',0,'58.48.165.173','2019-04-25 16:24:43'),(151,'article','1',0,'58.48.165.173','2019-04-25 16:24:43'),(152,'article','1',0,'58.48.165.173','2019-04-25 16:24:44'),(153,'article','1',0,'58.48.165.173','2019-04-25 16:24:44'),(154,'article','1',0,'58.48.165.173','2019-04-25 16:24:45'),(155,'article','1',0,'58.48.165.173','2019-04-25 16:24:45'),(156,'article','1',0,'58.48.165.173','2019-04-25 16:24:46'),(157,'article','1',0,'58.48.165.173','2019-04-25 16:24:46'),(158,'article','1',0,'58.48.165.173','2019-04-25 16:24:46'),(159,'article','13',0,'222.221.181.195','2019-04-25 17:11:01'),(160,'article','13',0,'222.221.181.195','2019-04-25 17:11:02'),(161,'article','13',0,'222.221.181.195','2019-04-25 17:11:03'),(162,'article','13',0,'222.221.181.195','2019-04-25 17:11:03'),(163,'article','13',0,'222.221.181.195','2019-04-25 17:11:03'),(164,'article','13',0,'222.221.181.195','2019-04-25 17:11:04'),(165,'article','13',0,'222.221.181.195','2019-04-25 17:11:04'),(166,'article','13',0,'222.221.181.195','2019-04-25 17:11:04'),(167,'article','13',0,'222.221.181.195','2019-04-25 17:11:04'),(168,'article','13',0,'222.221.181.195','2019-04-25 17:11:04'),(169,'article','13',0,'222.221.181.195','2019-04-25 17:11:04'),(170,'article','13',0,'222.221.181.195','2019-04-25 17:11:05'),(171,'article','13',0,'222.221.181.195','2019-04-25 17:11:05'),(172,'article','13',0,'222.221.181.195','2019-04-25 17:11:05'),(173,'article','13',0,'222.221.181.195','2019-04-25 17:11:05'),(174,'article','13',0,'222.221.181.195','2019-04-25 17:11:05'),(175,'article','13',0,'222.221.181.195','2019-04-25 17:11:05'),(176,'article','13',0,'222.221.181.195','2019-04-25 17:11:06'),(177,'article','13',0,'222.221.181.195','2019-04-25 17:11:06'),(178,'article','13',0,'222.221.181.195','2019-04-25 17:11:06'),(179,'article','13',0,'222.221.181.195','2019-04-25 17:11:06'),(180,'article','13',0,'222.221.181.195','2019-04-25 17:11:06'),(181,'article','13',0,'222.221.181.195','2019-04-25 17:11:07'),(182,'article','13',1,'222.221.181.195','2019-04-25 17:11:07'),(183,'article','13',0,'222.221.181.195','2019-04-25 17:11:07'),(184,'article','13',0,'222.221.181.195','2019-04-25 17:11:07'),(185,'article','13',0,'222.221.181.195','2019-04-25 17:11:07'),(186,'article','13',0,'222.221.181.195','2019-04-25 17:11:07'),(187,'article','13',0,'222.221.181.195','2019-04-25 17:11:08'),(188,'article','13',0,'222.221.181.195','2019-04-25 17:11:08'),(189,'article','13',0,'222.221.181.195','2019-04-25 17:11:08'),(190,'article','13',0,'222.221.181.195','2019-04-25 17:11:08'),(191,'article','13',0,'222.221.181.195','2019-04-25 17:11:08'),(192,'article','13',0,'222.221.181.195','2019-04-25 17:11:09'),(193,'article','13',0,'222.221.181.195','2019-04-25 17:11:09'),(194,'article','13',0,'222.221.181.195','2019-04-25 17:11:09'),(195,'article','13',0,'222.221.181.195','2019-04-25 17:11:09'),(196,'article','13',0,'222.221.181.195','2019-04-25 17:11:09'),(197,'article','13',1,'222.221.181.195','2019-04-25 17:11:09'),(198,'article','13',0,'222.221.181.195','2019-04-25 17:11:09'),(199,'article','13',0,'222.221.181.195','2019-04-25 17:11:10'),(200,'article','13',0,'222.221.181.195','2019-04-25 17:11:10'),(201,'article','13',0,'222.221.181.195','2019-04-25 17:11:10'),(202,'article','13',0,'222.221.181.195','2019-04-25 17:11:10'),(203,'article','13',0,'222.221.181.195','2019-04-25 17:11:11'),(204,'article','13',0,'222.221.181.195','2019-04-25 17:11:11'),(205,'article','13',0,'222.221.181.195','2019-04-25 17:11:11'),(206,'article','13',0,'222.221.181.195','2019-04-25 17:11:11'),(207,'article','13',0,'222.221.181.195','2019-04-25 17:11:11'),(208,'article','13',0,'222.221.181.195','2019-04-25 17:11:11'),(209,'article','13',0,'222.221.181.195','2019-04-25 17:11:12'),(210,'article','13',0,'222.221.181.195','2019-04-25 17:11:12'),(211,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(212,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(213,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(214,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(215,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(216,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(217,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(218,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(219,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(220,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(221,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(222,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(223,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(224,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(225,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(226,'article','13',0,'222.221.181.195','2019-04-25 17:11:17'),(227,'article','13',0,'222.221.181.195','2019-04-25 17:11:18'),(228,'article','13',0,'222.221.181.195','2019-04-25 17:11:18'),(229,'article','13',0,'222.221.181.195','2019-04-25 17:11:18'),(230,'article','13',0,'222.221.181.195','2019-04-25 17:11:18'),(231,'article','13',0,'222.221.181.195','2019-04-25 17:11:18'),(232,'article','13',0,'222.221.181.195','2019-04-25 17:11:18'),(233,'article','13',0,'222.221.181.195','2019-04-25 17:11:19'),(234,'article','13',0,'222.221.181.195','2019-04-25 17:11:19'),(235,'article','13',0,'222.221.181.195','2019-04-25 17:11:19'),(236,'article','13',0,'222.221.181.195','2019-04-25 17:11:19'),(237,'article','13',0,'222.221.181.195','2019-04-25 17:11:19'),(238,'article','13',0,'222.221.181.195','2019-04-25 17:11:19'),(239,'article','13',0,'222.221.181.195','2019-04-25 17:11:20'),(240,'article','13',0,'222.221.181.195','2019-04-25 17:11:20'),(241,'article','13',0,'222.221.181.195','2019-04-25 17:11:20'),(242,'article','13',0,'222.221.181.195','2019-04-25 17:11:20'),(243,'article','13',0,'222.221.181.195','2019-04-25 17:11:20'),(244,'article','13',0,'222.221.181.195','2019-04-25 17:11:21'),(245,'article','13',0,'222.221.181.195','2019-04-25 17:11:21'),(246,'article','13',0,'222.221.181.195','2019-04-25 17:11:21'),(247,'article','13',0,'222.221.181.195','2019-04-25 17:11:21'),(248,'article','13',0,'222.221.181.195','2019-04-25 17:11:21'),(249,'article','13',0,'222.221.181.195','2019-04-25 17:11:21'),(250,'article','13',0,'222.221.181.195','2019-04-25 17:11:22'),(251,'article','13',0,'222.221.181.195','2019-04-25 17:11:22'),(252,'article','13',0,'222.221.181.195','2019-04-25 17:11:22'),(253,'article','13',0,'222.221.181.195','2019-04-25 17:11:22'),(254,'article','13',0,'222.221.181.195','2019-04-25 17:11:22'),(255,'article','13',0,'222.221.181.195','2019-04-25 17:11:23'),(256,'article','13',0,'222.221.181.195','2019-04-25 17:11:23'),(257,'article','13',0,'222.221.181.195','2019-04-25 17:11:23'),(258,'article','13',0,'222.221.181.195','2019-04-25 17:11:23'),(259,'article','13',0,'222.221.181.195','2019-04-25 17:11:23'),(260,'article','13',0,'222.221.181.195','2019-04-25 17:11:23'),(261,'article','13',0,'222.221.181.195','2019-04-25 17:11:24'),(262,'article','13',0,'222.221.181.195','2019-04-25 17:11:24'),(263,'article','13',0,'222.221.181.195','2019-04-25 17:11:24'),(264,'article','13',0,'222.221.181.195','2019-04-25 17:11:24'),(265,'article','13',0,'222.221.181.195','2019-04-25 17:11:25'),(266,'article','13',0,'222.221.181.195','2019-04-25 17:11:25'),(267,'article','13',0,'222.221.181.195','2019-04-25 17:11:25'),(268,'article','13',1,'222.221.181.195','2019-04-25 17:11:25'),(269,'article','13',0,'222.221.181.195','2019-04-25 17:11:25'),(270,'article','13',0,'222.221.181.195','2019-04-25 17:11:25'),(271,'article','13',0,'222.221.181.195','2019-04-25 17:11:26'),(272,'article','13',0,'222.221.181.195','2019-04-25 17:11:26'),(273,'article','13',0,'222.221.181.195','2019-04-25 17:11:26'),(274,'article','13',0,'222.221.181.195','2019-04-25 17:11:26'),(275,'article','13',0,'222.221.181.195','2019-04-25 17:11:26'),(276,'article','13',0,'222.221.181.195','2019-04-25 17:11:27'),(277,'article','13',0,'222.221.181.195','2019-04-25 17:11:27'),(278,'article','13',0,'222.221.181.195','2019-04-25 17:11:27'),(279,'article','13',0,'222.221.181.195','2019-04-25 17:11:27'),(280,'article','13',0,'222.221.181.195','2019-04-25 17:11:27'),(281,'article','13',0,'222.221.181.195','2019-04-25 17:11:28'),(282,'article','13',0,'222.221.181.195','2019-04-25 17:11:28'),(283,'article','13',0,'222.221.181.195','2019-04-25 17:11:28'),(284,'article','13',0,'222.221.181.195','2019-04-25 17:11:28'),(285,'article','13',0,'222.221.181.195','2019-04-25 17:11:28'),(286,'article','13',0,'222.221.181.195','2019-04-25 17:11:29'),(287,'article','13',0,'222.221.181.195','2019-04-25 17:11:29'),(288,'article','13',0,'222.221.181.195','2019-04-25 17:11:29'),(289,'article','13',0,'222.221.181.195','2019-04-25 17:11:29'),(290,'article','13',0,'222.221.181.195','2019-04-25 17:11:29'),(291,'article','13',0,'222.221.181.195','2019-04-25 17:11:30'),(292,'article','13',0,'222.221.181.195','2019-04-25 17:11:30'),(293,'article','13',0,'222.221.181.195','2019-04-25 17:11:30'),(294,'article','13',0,'222.221.181.195','2019-04-25 17:11:30'),(295,'article','13',0,'222.221.181.195','2019-04-25 17:11:30'),(296,'article','13',0,'222.221.181.195','2019-04-25 17:11:31'),(297,'article','13',0,'222.221.181.195','2019-04-25 17:11:31'),(298,'article','13',0,'222.221.181.195','2019-04-25 17:11:31'),(299,'article','13',0,'222.221.181.195','2019-04-25 17:11:31'),(300,'article','13',0,'222.221.181.195','2019-04-25 17:11:31'),(301,'article','13',0,'222.221.181.195','2019-04-25 17:11:32'),(302,'article','13',0,'222.221.181.195','2019-04-25 17:11:32'),(303,'article','13',0,'222.221.181.195','2019-04-25 17:11:32'),(304,'article','13',0,'222.221.181.195','2019-04-25 17:11:32'),(305,'article','13',0,'222.221.181.195','2019-04-25 17:11:32'),(306,'article','13',0,'222.221.181.195','2019-04-25 17:11:33'),(307,'article','13',0,'222.221.181.195','2019-04-25 17:11:33'),(308,'article','13',0,'222.221.181.195','2019-04-25 17:11:33'),(309,'article','13',0,'222.221.181.195','2019-04-25 17:11:33'),(310,'article','13',0,'222.221.181.195','2019-04-25 17:11:33'),(311,'article','13',0,'222.221.181.195','2019-04-25 17:11:34'),(312,'article','13',0,'222.221.181.195','2019-04-25 17:11:34'),(313,'article','13',0,'222.221.181.195','2019-04-25 17:11:34'),(314,'article','13',0,'222.221.181.195','2019-04-25 17:11:34'),(315,'article','13',0,'222.221.181.195','2019-04-25 17:11:34'),(316,'article','13',0,'222.221.181.195','2019-04-25 17:11:35'),(317,'article','13',0,'222.221.181.195','2019-04-25 17:11:35'),(318,'article','13',0,'222.221.181.195','2019-04-25 17:11:35'),(319,'article','13',0,'222.221.181.195','2019-04-25 17:11:35'),(320,'article','13',0,'222.221.181.195','2019-04-25 17:11:35'),(321,'article','13',0,'222.221.181.195','2019-04-25 17:11:36'),(322,'article','13',0,'222.221.181.195','2019-04-25 17:11:36'),(323,'article','13',0,'222.221.181.195','2019-04-25 17:11:36'),(324,'article','13',0,'222.221.181.195','2019-04-25 17:11:36'),(325,'article','13',0,'222.221.181.195','2019-04-25 17:11:36'),(326,'article','13',0,'222.221.181.195','2019-04-25 17:11:37'),(327,'article','13',0,'222.221.181.195','2019-04-25 17:11:37'),(328,'article','13',0,'222.221.181.195','2019-04-25 17:11:37'),(329,'article','13',0,'222.221.181.195','2019-04-25 17:11:37'),(330,'article','13',0,'222.221.181.195','2019-04-25 17:11:37'),(331,'article','13',0,'222.221.181.195','2019-04-25 17:11:38'),(332,'article','13',0,'222.221.181.195','2019-04-25 17:11:38'),(333,'article','13',0,'222.221.181.195','2019-04-25 17:11:38'),(334,'article','13',0,'222.221.181.195','2019-04-25 17:11:38'),(335,'article','13',0,'222.221.181.195','2019-04-25 17:11:39'),(336,'article','13',0,'222.221.181.195','2019-04-25 17:11:39'),(337,'article','13',0,'222.221.181.195','2019-04-25 17:11:39'),(338,'article','13',0,'222.221.181.195','2019-04-25 17:11:39'),(339,'article','13',0,'222.221.181.195','2019-04-25 17:11:39'),(340,'article','13',0,'222.221.181.195','2019-04-25 17:11:40'),(341,'article','13',0,'222.221.181.195','2019-04-25 17:11:40'),(342,'article','13',0,'222.221.181.195','2019-04-25 17:11:40'),(343,'article','13',0,'222.221.181.195','2019-04-25 17:11:40'),(344,'article','13',0,'222.221.181.195','2019-04-25 17:11:40'),(345,'article','13',0,'222.221.181.195','2019-04-25 17:11:41'),(346,'article','13',0,'222.221.181.195','2019-04-25 17:11:41'),(347,'article','13',0,'222.221.181.195','2019-04-25 17:11:41'),(348,'article','13',0,'222.221.181.195','2019-04-25 17:11:41'),(349,'article','13',0,'222.221.181.195','2019-04-25 17:11:41'),(350,'article','13',0,'222.221.181.195','2019-04-25 17:11:42'),(351,'article','13',0,'222.221.181.195','2019-04-25 17:11:42'),(352,'article','13',0,'222.221.181.195','2019-04-25 17:11:42'),(353,'article','13',0,'222.221.181.195','2019-04-25 17:11:42'),(354,'article','13',0,'222.221.181.195','2019-04-25 17:11:42'),(355,'article','13',0,'222.221.181.195','2019-04-25 17:11:43'),(356,'article','13',0,'222.221.181.195','2019-04-25 17:11:43'),(357,'article','13',0,'222.221.181.195','2019-04-25 17:11:43'),(358,'article','13',0,'222.221.181.195','2019-04-25 17:11:43'),(359,'article','13',0,'222.221.181.195','2019-04-25 17:11:43'),(360,'article','13',0,'222.221.181.195','2019-04-25 17:11:44'),(361,'article','13',0,'222.221.181.195','2019-04-25 17:11:44'),(362,'article','13',0,'222.221.181.195','2019-04-25 17:11:44'),(363,'article','13',0,'222.221.181.195','2019-04-25 17:11:44'),(364,'article','13',0,'222.221.181.195','2019-04-25 17:11:45'),(365,'article','13',0,'222.221.181.195','2019-04-25 17:11:45'),(366,'article','13',0,'222.221.181.195','2019-04-25 17:11:45'),(367,'article','13',0,'222.221.181.195','2019-04-25 17:11:45'),(368,'article','13',0,'222.221.181.195','2019-04-25 17:11:46'),(369,'article','13',0,'222.221.181.195','2019-04-25 17:11:46'),(370,'article','13',0,'222.221.181.195','2019-04-25 17:11:46'),(371,'article','13',0,'222.221.181.195','2019-04-25 17:11:46'),(372,'article','13',0,'222.221.181.195','2019-04-25 17:11:47'),(373,'article','13',0,'222.221.181.195','2019-04-25 17:11:47'),(374,'article','13',0,'222.221.181.195','2019-04-25 17:11:47'),(375,'article','13',0,'222.221.181.195','2019-04-25 17:11:47'),(376,'article','13',0,'222.221.181.195','2019-04-25 17:11:47'),(377,'article','13',0,'222.221.181.195','2019-04-25 17:11:48'),(378,'article','13',0,'222.221.181.195','2019-04-25 17:11:48'),(379,'article','13',0,'222.221.181.195','2019-04-25 17:11:48'),(380,'article','13',0,'222.221.181.195','2019-04-25 17:11:48'),(381,'article','13',0,'222.221.181.195','2019-04-25 17:11:49'),(382,'article','13',0,'222.221.181.195','2019-04-25 17:11:49'),(383,'article','13',0,'222.221.181.195','2019-04-25 17:11:49'),(384,'article','13',0,'222.221.181.195','2019-04-25 17:11:49'),(385,'article','13',0,'222.221.181.195','2019-04-25 17:11:49'),(386,'article','13',0,'222.221.181.195','2019-04-25 17:11:50'),(387,'article','13',0,'222.221.181.195','2019-04-25 17:11:50'),(388,'article','13',0,'222.221.181.195','2019-04-25 17:11:50'),(389,'article','13',0,'222.221.181.195','2019-04-25 17:11:51'),(390,'article','13',0,'222.221.181.195','2019-04-25 17:11:52'),(391,'article','13',0,'222.221.181.195','2019-04-25 17:11:52'),(392,'article','13',0,'222.221.181.195','2019-04-25 17:11:52'),(393,'article','13',0,'222.221.181.195','2019-04-25 17:11:52'),(394,'article','13',0,'222.221.181.195','2019-04-25 17:11:52'),(395,'article','13',0,'222.221.181.195','2019-04-25 17:11:53'),(396,'article','13',0,'222.221.181.195','2019-04-25 17:11:53'),(397,'article','13',0,'222.221.181.195','2019-04-25 17:11:53'),(398,'article','13',0,'222.221.181.195','2019-04-25 17:11:53'),(399,'article','13',0,'222.221.181.195','2019-04-25 17:11:53'),(400,'article','13',0,'222.221.181.195','2019-04-25 17:11:54'),(401,'article','13',0,'222.221.181.195','2019-04-25 17:11:54'),(402,'article','13',0,'222.221.181.195','2019-04-25 17:11:54'),(403,'article','13',0,'222.221.181.195','2019-04-25 17:11:54'),(404,'article','13',0,'222.221.181.195','2019-04-25 17:11:54'),(405,'article','13',0,'222.221.181.195','2019-04-25 17:11:55'),(406,'article','13',0,'222.221.181.195','2019-04-25 17:11:55'),(407,'article','13',0,'222.221.181.195','2019-04-25 17:11:55'),(408,'article','13',0,'222.221.181.195','2019-04-25 17:11:55'),(409,'article','13',0,'222.221.181.195','2019-04-25 17:11:55'),(410,'article','13',0,'222.221.181.195','2019-04-25 17:11:56'),(411,'article','13',0,'222.221.181.195','2019-04-25 17:11:56'),(412,'article','13',0,'222.221.181.195','2019-04-25 17:11:56'),(413,'article','13',0,'222.221.181.195','2019-04-25 17:11:56'),(414,'article','13',0,'222.221.181.195','2019-04-25 17:11:56'),(415,'article','13',0,'222.221.181.195','2019-04-25 17:11:57'),(416,'article','13',0,'222.221.181.195','2019-04-25 17:11:57'),(417,'article','13',0,'222.221.181.195','2019-04-25 17:11:57'),(418,'article','13',0,'222.221.181.195','2019-04-25 17:11:57'),(419,'article','13',0,'222.221.181.195','2019-04-25 17:11:57'),(420,'article','13',0,'222.221.181.195','2019-04-25 17:11:58'),(421,'article','13',0,'222.221.181.195','2019-04-25 17:11:58'),(422,'article','13',0,'222.221.181.195','2019-04-25 17:11:58'),(423,'article','13',0,'222.221.181.195','2019-04-25 17:11:58'),(424,'article','13',0,'222.221.181.195','2019-04-25 17:11:58'),(425,'article','13',0,'222.221.181.195','2019-04-25 17:11:59'),(426,'article','13',0,'222.221.181.195','2019-04-25 17:11:59'),(427,'article','13',0,'222.221.181.195','2019-04-25 17:11:59'),(428,'article','13',0,'222.221.181.195','2019-04-25 17:11:59'),(429,'article','13',0,'222.221.181.195','2019-04-25 17:11:59'),(430,'article','13',0,'222.221.181.195','2019-04-25 17:12:00'),(431,'article','13',0,'222.221.181.195','2019-04-25 17:12:00'),(432,'article','13',0,'222.221.181.195','2019-04-25 17:12:00'),(433,'article','13',0,'222.221.181.195','2019-04-25 17:12:00'),(434,'article','13',0,'222.221.181.195','2019-04-25 17:12:01'),(435,'article','13',0,'222.221.181.195','2019-04-25 17:12:01'),(436,'article','13',0,'222.221.181.195','2019-04-25 17:12:01'),(437,'article','13',0,'222.221.181.195','2019-04-25 17:12:01'),(438,'article','13',0,'222.221.181.195','2019-04-25 17:12:01'),(439,'article','13',0,'222.221.181.195','2019-04-25 17:12:01'),(440,'article','13',0,'222.221.181.195','2019-04-25 17:12:02'),(441,'article','13',1,'222.221.181.195','2019-04-25 17:12:02'),(442,'article','13',0,'222.221.181.195','2019-04-25 17:12:02'),(443,'article','13',0,'222.221.181.195','2019-04-25 17:12:02'),(444,'article','13',0,'222.221.181.195','2019-04-25 17:12:03'),(445,'article','13',0,'222.221.181.195','2019-04-25 17:12:03'),(446,'article','13',0,'222.221.181.195','2019-04-25 17:12:03'),(447,'article','13',0,'222.221.181.195','2019-04-25 17:12:03'),(448,'article','13',0,'222.221.181.195','2019-04-25 17:12:03'),(449,'article','13',0,'222.221.181.195','2019-04-25 17:12:04'),(450,'article','13',0,'222.221.181.195','2019-04-25 17:12:04'),(451,'article','13',0,'222.221.181.195','2019-04-25 17:12:04'),(452,'article','13',0,'222.221.181.195','2019-04-25 17:12:04'),(453,'article','13',0,'222.221.181.195','2019-04-25 17:12:04'),(454,'article','13',0,'222.221.181.195','2019-04-25 17:12:05'),(455,'article','13',0,'222.221.181.195','2019-04-25 17:12:05'),(456,'article','13',0,'222.221.181.195','2019-04-25 17:12:05'),(457,'article','13',0,'222.221.181.195','2019-04-25 17:12:05'),(458,'article','13',0,'222.221.181.195','2019-04-25 17:12:05'),(459,'article','13',0,'222.221.181.195','2019-04-25 17:12:06'),(460,'article','13',0,'222.221.181.195','2019-04-25 17:12:07'),(461,'article','13',0,'222.221.181.195','2019-04-25 17:12:07'),(462,'article','13',0,'222.221.181.195','2019-04-25 17:12:07'),(463,'article','13',0,'222.221.181.195','2019-04-25 17:12:07'),(464,'article','13',0,'222.221.181.195','2019-04-25 17:12:08'),(465,'article','13',0,'222.221.181.195','2019-04-25 17:12:08'),(466,'article','13',0,'222.221.181.195','2019-04-25 17:12:08'),(467,'article','13',0,'222.221.181.195','2019-04-25 17:12:08'),(468,'article','13',0,'222.221.181.195','2019-04-25 17:12:08'),(469,'article','13',0,'222.221.181.195','2019-04-25 17:12:09'),(470,'article','13',0,'222.221.181.195','2019-04-25 17:12:09'),(471,'article','13',0,'222.221.181.195','2019-04-25 17:12:09'),(472,'article','13',0,'222.221.181.195','2019-04-25 17:12:09'),(473,'article','13',0,'222.221.181.195','2019-04-25 17:12:09'),(474,'article','13',0,'222.221.181.195','2019-04-25 17:12:10'),(475,'article','13',0,'222.221.181.195','2019-04-25 17:12:10'),(476,'article','13',0,'222.221.181.195','2019-04-25 17:12:10'),(477,'article','13',0,'222.221.181.195','2019-04-25 17:12:11'),(478,'article','13',0,'222.221.181.195','2019-04-25 17:12:11'),(479,'article','13',0,'222.221.181.195','2019-04-25 17:12:11'),(480,'article','13',0,'222.221.181.195','2019-04-25 17:12:11'),(481,'article','13',0,'222.221.181.195','2019-04-25 17:12:11'),(482,'article','13',0,'222.221.181.195','2019-04-25 17:12:12'),(483,'article','13',0,'222.221.181.195','2019-04-25 17:12:12'),(484,'article','13',0,'222.221.181.195','2019-04-25 17:12:12'),(485,'article','13',0,'222.221.181.195','2019-04-25 17:12:12'),(486,'article','13',0,'222.221.181.195','2019-04-25 17:12:13'),(487,'article','13',0,'222.221.181.195','2019-04-25 17:12:13'),(488,'article','13',0,'222.221.181.195','2019-04-25 17:12:13'),(489,'article','13',0,'222.221.181.195','2019-04-25 17:12:13'),(490,'article','13',0,'222.221.181.195','2019-04-25 17:12:13'),(491,'article','13',0,'222.221.181.195','2019-04-25 17:12:14'),(492,'article','13',0,'222.221.181.195','2019-04-25 17:12:14'),(493,'article','13',0,'222.221.181.195','2019-04-25 17:12:14'),(494,'article','13',0,'222.221.181.195','2019-04-25 17:12:14'),(495,'article','13',0,'222.221.181.195','2019-04-25 17:12:15'),(496,'article','13',0,'222.221.181.195','2019-04-25 17:12:15'),(497,'article','13',0,'222.221.181.195','2019-04-25 17:12:15'),(498,'article','13',0,'222.221.181.195','2019-04-25 17:12:15'),(499,'article','13',0,'222.221.181.195','2019-04-25 17:12:16'),(500,'article','13',0,'222.221.181.195','2019-04-25 17:12:16'),(501,'article','13',0,'222.221.181.195','2019-04-25 17:12:16'),(502,'article','13',0,'222.221.181.195','2019-04-25 17:12:16'),(503,'article','13',0,'222.221.181.195','2019-04-25 17:12:16'),(504,'article','13',0,'222.221.181.195','2019-04-25 17:12:17'),(505,'article','13',0,'222.221.181.195','2019-04-25 17:12:17'),(506,'article','13',0,'222.221.181.195','2019-04-25 17:12:17'),(507,'article','13',0,'222.221.181.195','2019-04-25 17:12:17'),(508,'article','13',0,'222.221.181.195','2019-04-25 17:12:18'),(509,'article','13',0,'222.221.181.195','2019-04-25 17:12:18'),(510,'article','13',0,'222.221.181.195','2019-04-25 17:12:18'),(511,'article','13',0,'222.221.181.195','2019-04-25 17:12:18'),(512,'article','13',0,'222.221.181.195','2019-04-25 17:12:18'),(513,'article','13',0,'222.221.181.195','2019-04-25 17:12:19'),(514,'article','13',0,'222.221.181.195','2019-04-25 17:12:19'),(515,'article','13',0,'222.221.181.195','2019-04-25 17:12:19'),(516,'article','13',0,'222.221.181.195','2019-04-25 17:12:19'),(517,'article','13',0,'222.221.181.195','2019-04-25 17:12:20'),(518,'article','13',0,'222.221.181.195','2019-04-25 17:12:20'),(519,'article','13',0,'222.221.181.195','2019-04-25 17:12:20'),(520,'article','13',0,'222.221.181.195','2019-04-25 17:12:20'),(521,'article','13',0,'222.221.181.195','2019-04-25 17:12:20'),(522,'article','13',0,'222.221.181.195','2019-04-25 17:12:21'),(523,'article','13',0,'222.221.181.195','2019-04-25 17:12:21'),(524,'article','13',0,'222.221.181.195','2019-04-25 17:12:21'),(525,'article','13',0,'222.221.181.195','2019-04-25 17:12:21'),(526,'article','13',0,'222.221.181.195','2019-04-25 17:12:21'),(527,'article','13',1,'222.221.181.195','2019-04-25 17:12:22'),(528,'article','13',0,'222.221.181.195','2019-04-25 17:12:22'),(529,'article','13',0,'222.221.181.195','2019-04-25 17:12:22'),(530,'article','13',0,'222.221.181.195','2019-04-25 17:12:22'),(531,'article','13',0,'222.221.181.195','2019-04-25 17:12:22'),(532,'article','13',0,'222.221.181.195','2019-04-25 17:12:23'),(533,'article','13',0,'222.221.181.195','2019-04-25 17:12:23'),(534,'article','13',0,'222.221.181.195','2019-04-25 17:12:23'),(535,'article','13',0,'222.221.181.195','2019-04-25 17:12:23'),(536,'article','13',0,'222.221.181.195','2019-04-25 17:12:23'),(537,'article','13',0,'222.221.181.195','2019-04-25 17:12:24'),(538,'article','13',0,'222.221.181.195','2019-04-25 17:12:24'),(539,'article','13',0,'222.221.181.195','2019-04-25 17:12:24'),(540,'article','13',0,'222.221.181.195','2019-04-25 17:12:24'),(541,'article','13',0,'222.221.181.195','2019-04-25 17:12:25'),(542,'article','13',0,'222.221.181.195','2019-04-25 17:12:25'),(543,'article','13',0,'222.221.181.195','2019-04-25 17:12:25'),(544,'article','13',0,'221.178.153.117','2019-04-26 13:57:17'),(545,'article','13',0,'221.178.153.117','2019-04-26 13:57:19'),(546,'article','13',0,'221.178.153.117','2019-04-26 13:57:21'),(547,'article','11',0,'183.159.180.191','2019-04-28 20:28:32'),(548,'article','4',0,'115.192.190.35','2019-05-01 09:00:36'),(549,'article','4',0,'115.192.190.35','2019-05-01 09:00:37'),(550,'article','4',0,'115.192.190.35','2019-05-01 09:00:38'),(551,'article','4',0,'115.192.190.35','2019-05-01 09:00:38'),(552,'article','4',0,'115.192.190.35','2019-05-01 09:00:38'),(553,'article','4',0,'115.192.190.35','2019-05-01 09:00:39'),(554,'article','4',0,'115.192.190.35','2019-05-01 09:00:39'),(555,'article','4',0,'115.192.190.35','2019-05-01 09:00:39'),(556,'article','4',0,'115.192.190.35','2019-05-01 09:00:39'),(557,'article','4',0,'115.192.190.35','2019-05-01 09:00:40'),(558,'article','4',0,'115.192.190.35','2019-05-01 09:00:40'),(559,'article','4',0,'115.192.190.35','2019-05-01 09:00:40'),(560,'article','4',0,'115.192.190.35','2019-05-01 09:00:40'),(561,'article','4',0,'115.192.190.35','2019-05-01 09:00:40'),(562,'article','4',0,'115.192.190.35','2019-05-01 09:00:41'),(563,'article','4',0,'115.192.190.35','2019-05-01 09:00:42'),(564,'article','4',0,'115.192.190.35','2019-05-01 09:00:42'),(565,'article','4',0,'115.192.190.35','2019-05-01 09:00:42'),(566,'article','4',0,'115.192.190.35','2019-05-01 09:00:42'),(567,'article','4',0,'115.192.190.35','2019-05-01 09:00:42'),(568,'article','4',0,'115.192.190.35','2019-05-01 09:00:42'),(569,'article','4',0,'115.192.190.35','2019-05-01 09:00:43'),(570,'article','4',0,'115.192.190.35','2019-05-01 09:00:43'),(571,'article','4',0,'115.192.190.35','2019-05-01 09:00:43'),(572,'article','4',0,'115.192.190.35','2019-05-01 09:00:43'),(573,'article','4',0,'115.192.190.35','2019-05-01 09:00:43'),(574,'article','4',0,'115.192.190.35','2019-05-01 09:00:44'),(575,'article','4',0,'115.192.190.35','2019-05-01 09:00:44'),(576,'article','4',0,'115.192.190.35','2019-05-01 09:00:44'),(577,'article','4',0,'115.192.190.35','2019-05-01 09:00:44'),(578,'article','4',0,'115.192.190.35','2019-05-01 09:00:44'),(579,'article','4',0,'115.192.190.35','2019-05-01 09:00:45'),(580,'article','4',0,'115.192.190.35','2019-05-01 09:00:45'),(581,'article','4',0,'115.192.190.35','2019-05-01 09:00:45'),(582,'article','4',0,'115.192.190.35','2019-05-01 09:00:45'),(583,'article','4',0,'115.192.190.35','2019-05-01 09:00:45'),(584,'article','4',0,'115.192.190.35','2019-05-01 09:00:45'),(585,'article','4',0,'115.192.190.35','2019-05-01 09:00:45'),(586,'article','4',0,'115.192.190.35','2019-05-01 09:00:46'),(587,'article','4',0,'115.192.190.35','2019-05-01 09:00:46'),(588,'article','4',0,'115.192.190.35','2019-05-01 09:00:46'),(589,'article','4',0,'115.192.190.35','2019-05-01 09:00:46'),(590,'article','4',0,'115.192.190.35','2019-05-01 09:00:46'),(591,'article','4',0,'115.192.190.35','2019-05-01 09:00:47'),(592,'article','3',0,'223.104.213.79','2019-05-07 17:40:29'),(593,'article','4',0,'183.159.197.160','2019-05-12 11:58:45'),(594,'bookNote','5',0,'117.136.40.227','2019-05-12 19:21:08'),(595,'article','5',0,'114.241.82.181','2019-05-16 18:27:45'),(596,'article','5',0,'114.241.82.181','2019-05-16 18:27:45'),(597,'article','5',0,'114.241.82.181','2019-05-16 18:27:46'),(598,'article','5',0,'114.241.82.181','2019-05-16 18:27:46'),(599,'article','5',0,'114.241.82.181','2019-05-16 18:27:47'),(600,'article','5',0,'114.241.82.181','2019-05-16 18:27:47'),(601,'article','5',0,'114.241.82.181','2019-05-16 18:27:47'),(602,'article','5',0,'114.241.82.181','2019-05-16 18:27:47'),(603,'article','5',0,'114.241.82.181','2019-05-16 18:27:47'),(604,'article','5',0,'114.241.82.181','2019-05-16 18:27:48'),(605,'article','5',0,'114.241.82.181','2019-05-16 18:27:48'),(606,'article','5',0,'114.241.82.181','2019-05-16 18:27:48'),(607,'article','5',0,'114.241.82.181','2019-05-16 18:27:48'),(608,'article','5',0,'114.241.82.181','2019-05-16 18:27:48'),(609,'article','5',0,'114.241.82.181','2019-05-16 18:27:50'),(610,'article','5',0,'114.241.82.181','2019-05-16 18:27:51'),(611,'article','5',0,'114.241.82.181','2019-05-16 18:27:51'),(612,'article','5',0,'114.241.82.181','2019-05-16 18:27:51'),(613,'article','5',0,'114.241.82.181','2019-05-16 18:27:51'),(614,'article','5',0,'114.241.82.181','2019-05-16 18:27:51'),(615,'article','5',0,'114.241.82.181','2019-05-16 18:27:52'),(616,'article','5',0,'114.241.82.181','2019-05-16 18:27:52'),(617,'article','5',0,'114.241.82.181','2019-05-16 18:27:52'),(618,'article','5',0,'114.241.82.181','2019-05-16 18:27:52'),(619,'article','5',0,'114.241.82.181','2019-05-16 18:27:52'),(620,'article','5',0,'114.241.82.181','2019-05-16 18:27:53'),(621,'article','5',0,'114.241.82.181','2019-05-16 18:27:53'),(622,'article','5',0,'114.241.82.181','2019-05-16 18:27:53'),(623,'article','5',0,'114.241.82.181','2019-05-16 18:27:53'),(624,'article','5',0,'114.241.82.181','2019-05-16 18:27:53'),(625,'article','5',0,'114.241.82.181','2019-05-16 18:27:54'),(626,'article','5',0,'114.241.82.181','2019-05-16 18:27:54'),(627,'article','5',0,'114.241.82.181','2019-05-16 18:27:54'),(628,'article','5',0,'114.241.82.181','2019-05-16 18:27:54'),(629,'article','5',0,'114.241.82.181','2019-05-16 18:27:55'),(630,'article','1',0,'103.214.84.237','2019-05-16 19:40:58'),(631,'article','1',0,'103.214.84.237','2019-05-17 09:37:29'),(632,'article','13',0,'116.56.147.83','2019-05-22 23:15:17'),(633,'article','13',0,'116.56.147.83','2019-05-22 23:15:19'),(634,'article','13',0,'116.56.147.83','2019-05-22 23:15:59'),(635,'article','13',0,'116.56.147.83','2019-05-22 23:16:02'),(636,'article','13',0,'116.56.147.83','2019-05-22 23:16:04'),(637,'article','1',0,'14.155.221.129','2019-05-31 19:33:39'),(638,'article','1',0,'14.155.221.129','2019-05-31 19:33:41'),(639,'article','1',0,'14.155.221.129','2019-05-31 19:33:44'),(640,'article','1',0,'14.155.221.129','2019-05-31 19:33:45'),(641,'article','1',1,'14.155.221.129','2019-05-31 19:33:45'),(642,'article','1',0,'14.155.221.129','2019-05-31 19:33:45'),(643,'article','1',0,'14.155.221.129','2019-05-31 19:33:49'),(644,'bookNote','10',0,'14.155.221.129','2019-05-31 19:34:45'),(645,'article','13',0,'222.247.211.242','2019-06-03 17:18:49'),(646,'article','13',0,'117.71.53.46','2019-06-06 15:14:38'),(647,'article','13',0,'117.71.53.46','2019-06-06 15:14:39'),(648,'article','13',0,'117.71.53.46','2019-06-06 15:14:44'),(649,'article','1',0,'59.60.13.122','2019-06-12 10:18:37'),(650,'article','1',0,'59.60.13.122','2019-06-12 10:18:45'),(651,'article','1',0,'59.60.13.122','2019-06-12 10:18:46'),(652,'article','10',1,'59.60.13.122','2019-06-12 10:26:39'),(653,'article','10',0,'59.60.13.122','2019-06-12 10:26:44'),(654,'bookNote','6',0,'183.63.51.77','2019-06-12 16:55:39'),(655,'article','3',0,'124.160.214.240','2019-06-20 10:49:08'),(656,'article','3',0,'124.160.214.240','2019-06-20 10:49:10'),(657,'article','3',0,'124.160.214.240','2019-06-20 10:49:11'),(658,'article','3',1,'124.160.214.240','2019-06-20 10:49:12'),(659,'article','3',0,'124.160.214.240','2019-06-20 10:49:13'),(660,'article','3',0,'124.160.214.240','2019-06-20 10:49:14'),(661,'article','3',0,'124.160.214.240','2019-06-20 10:49:15'),(662,'article','3',0,'124.160.214.240','2019-06-20 10:49:15'),(663,'article','3',0,'124.160.214.240','2019-06-20 10:49:16'),(664,'article','3',0,'124.160.214.240','2019-06-20 10:49:16'),(665,'article','3',0,'124.160.214.240','2019-06-20 10:49:16'),(666,'article','1',0,'117.136.41.32','2019-06-20 17:24:04'),(667,'article','1',0,'117.136.41.32','2019-06-20 17:24:07'),(668,'article','1',0,'117.136.41.32','2019-06-20 17:24:07'),(669,'article','1',0,'117.136.41.32','2019-06-20 17:24:07'),(670,'article','1',0,'117.136.41.32','2019-06-20 17:24:08'),(671,'article','1',0,'117.136.41.32','2019-06-20 17:24:08'),(672,'article','1',0,'117.136.41.32','2019-06-20 17:24:08'),(673,'article','1',0,'117.136.41.32','2019-06-20 17:24:08'),(674,'article','1',0,'117.136.41.32','2019-06-20 17:24:09'),(675,'article','1',0,'117.136.41.32','2019-06-20 17:24:09'),(676,'article','1',0,'117.136.41.32','2019-06-20 17:24:09'),(677,'article','1',0,'117.136.41.32','2019-06-20 17:24:09'),(678,'article','1',0,'117.136.41.32','2019-06-20 17:24:09'),(679,'article','1',0,'117.136.41.32','2019-06-20 17:24:10'),(680,'article','1',0,'117.136.41.32','2019-06-20 17:24:10'),(681,'article','1',0,'117.136.41.32','2019-06-20 17:24:10'),(682,'article','1',0,'117.136.41.32','2019-06-20 17:24:11'),(683,'article','1',0,'117.136.41.32','2019-06-20 17:24:11'),(684,'article','1',0,'117.136.41.32','2019-06-20 17:24:11'),(685,'article','1',0,'117.136.41.32','2019-06-20 17:24:11'),(686,'article','1',0,'117.136.41.32','2019-06-20 17:24:11'),(687,'article','1',0,'117.136.41.32','2019-06-20 17:24:11'),(688,'article','1',0,'117.136.41.32','2019-06-20 17:24:12'),(689,'article','1',0,'117.136.41.32','2019-06-20 17:24:12'),(690,'article','1',0,'117.136.41.32','2019-06-20 17:24:12'),(691,'article','1',0,'117.136.41.32','2019-06-20 17:24:12'),(692,'article','1',0,'117.136.41.32','2019-06-20 17:24:12'),(693,'article','1',0,'117.136.41.32','2019-06-20 17:24:13'),(694,'article','1',0,'117.136.41.32','2019-06-20 17:24:13'),(695,'article','1',0,'117.136.41.32','2019-06-20 17:24:13'),(696,'article','1',0,'117.136.41.32','2019-06-20 17:24:13'),(697,'article','1',0,'117.136.41.32','2019-06-20 17:24:13'),(698,'article','1',0,'117.136.41.32','2019-06-20 17:24:14'),(699,'article','1',0,'117.136.41.32','2019-06-20 17:24:14'),(700,'article','1',0,'117.136.41.32','2019-06-20 17:24:16'),(701,'article','1',0,'117.136.41.32','2019-06-20 17:24:17'),(702,'article','1',0,'117.136.41.32','2019-06-20 17:24:17'),(703,'article','1',0,'117.136.41.32','2019-06-20 17:24:17'),(704,'article','1',0,'117.136.41.32','2019-06-20 17:24:17'),(705,'article','1',0,'117.136.41.32','2019-06-20 17:24:17'),(706,'article','1',0,'117.136.41.32','2019-06-20 17:24:17'),(707,'article','1',0,'117.136.41.32','2019-06-20 17:24:18'),(708,'article','1',0,'117.136.41.32','2019-06-20 17:24:18'),(709,'article','1',0,'117.136.41.32','2019-06-20 17:24:20'),(710,'article','1',0,'117.136.41.32','2019-06-20 17:24:20'),(711,'article','1',0,'117.136.41.32','2019-06-20 17:24:20'),(712,'article','1',0,'117.136.41.32','2019-06-20 17:24:20'),(713,'article','1',0,'117.136.41.32','2019-06-20 17:24:21'),(714,'article','1',0,'117.136.41.32','2019-06-20 17:24:21'),(715,'article','1',0,'117.136.41.32','2019-06-20 17:24:21'),(716,'article','1',0,'117.136.41.32','2019-06-20 17:24:21'),(717,'article','1',0,'117.136.41.32','2019-06-20 17:24:21'),(718,'article','1',0,'117.136.41.32','2019-06-20 17:24:22'),(719,'article','1',0,'117.136.41.32','2019-06-20 17:24:22'),(720,'article','1',0,'117.136.41.32','2019-06-20 17:24:22'),(721,'article','1',0,'117.136.41.32','2019-06-20 17:24:22'),(722,'article','1',0,'117.136.41.32','2019-06-20 17:24:22'),(723,'article','1',0,'117.136.41.32','2019-06-20 17:24:23'),(724,'article','1',0,'117.136.41.32','2019-06-20 17:24:23'),(725,'article','1',0,'117.136.41.32','2019-06-20 17:24:23'),(726,'article','1',0,'117.136.41.32','2019-06-20 17:24:23'),(727,'article','1',0,'117.136.41.32','2019-06-20 17:24:23'),(728,'article','1',0,'116.6.229.10','2019-06-26 12:05:08'),(729,'article','1',0,'116.6.229.10','2019-06-26 12:05:10'),(730,'article','1',0,'116.6.229.10','2019-06-26 12:05:11'),(731,'article','1',0,'116.6.229.10','2019-06-26 12:05:13'),(732,'article','1',0,'116.6.229.10','2019-06-26 12:05:13'),(733,'article','1',0,'116.6.229.10','2019-06-26 12:05:14'),(734,'article','1',0,'116.6.229.10','2019-06-26 12:05:15'),(735,'article','3',0,'61.183.151.86','2019-06-26 16:44:50'),(736,'article','1',0,'113.104.191.51','2019-07-03 11:37:30'),(737,'article','10',0,'36.153.143.162','2019-07-04 14:19:10'),(738,'article','10',0,'36.153.143.162','2019-07-04 14:19:12'),(739,'article','10',0,'36.153.143.162','2019-07-04 14:19:13'),(740,'article','10',0,'36.153.143.162','2019-07-04 14:19:23'),(741,'article','10',0,'36.153.143.162','2019-07-04 14:19:23'),(742,'article','10',0,'36.153.143.162','2019-07-04 14:19:23'),(743,'article','10',0,'36.153.143.162','2019-07-04 14:19:23'),(744,'article','10',0,'36.153.143.162','2019-07-04 14:19:24'),(745,'article','10',0,'36.153.143.162','2019-07-04 14:19:24'),(746,'article','10',0,'36.153.143.162','2019-07-04 14:19:24'),(747,'article','10',0,'36.153.143.162','2019-07-04 14:19:24'),(748,'article','10',0,'36.153.143.162','2019-07-04 14:19:24'),(749,'article','10',0,'36.153.143.162','2019-07-04 14:19:25'),(750,'article','10',0,'36.153.143.162','2019-07-04 14:19:27'),(751,'article','10',0,'36.153.143.162','2019-07-04 14:19:27'),(752,'article','10',0,'36.153.143.162','2019-07-04 14:19:27'),(753,'article','10',0,'36.153.143.162','2019-07-04 14:19:28'),(754,'article','10',0,'36.153.143.162','2019-07-04 14:19:28'),(755,'article','10',0,'36.153.143.162','2019-07-04 14:19:28'),(756,'article','10',0,'36.153.143.162','2019-07-04 14:19:28'),(757,'article','10',0,'36.153.143.162','2019-07-04 14:19:31'),(758,'article','10',0,'36.153.143.162','2019-07-04 14:19:31'),(759,'article','10',0,'36.153.143.162','2019-07-04 14:19:31'),(760,'article','10',0,'36.153.143.162','2019-07-04 14:19:31'),(761,'article','10',0,'36.153.143.162','2019-07-04 14:19:32'),(762,'article','10',0,'36.153.143.162','2019-07-04 14:19:32'),(763,'article','10',0,'36.153.143.162','2019-07-04 14:19:32'),(764,'article','10',0,'36.153.143.162','2019-07-04 14:19:33'),(765,'article','10',0,'36.153.143.162','2019-07-04 14:19:33'),(766,'article','10',0,'36.153.143.162','2019-07-04 14:19:33'),(767,'article','10',0,'36.153.143.162','2019-07-04 14:19:33'),(768,'article','10',0,'36.153.143.162','2019-07-04 14:19:33'),(769,'article','10',0,'36.153.143.162','2019-07-04 14:19:34'),(770,'article','10',0,'36.153.143.162','2019-07-04 14:19:34'),(771,'article','10',0,'36.153.143.162','2019-07-04 14:19:34'),(772,'article','10',0,'36.153.143.162','2019-07-04 14:19:34'),(773,'article','10',0,'36.153.143.162','2019-07-04 14:19:34'),(774,'article','10',0,'36.153.143.162','2019-07-04 14:19:35'),(775,'article','10',0,'36.153.143.162','2019-07-04 14:19:35'),(776,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:01'),(777,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:02'),(778,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:02'),(779,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:03'),(780,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:03'),(781,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:03'),(782,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:04'),(783,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:04'),(784,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:05'),(785,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:05'),(786,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:05'),(787,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:05'),(788,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:05'),(789,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:06'),(790,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:06'),(791,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:06'),(792,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:07'),(793,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:07'),(794,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:07'),(795,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:07'),(796,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:07'),(797,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:07'),(798,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:08'),(799,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:08'),(800,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:08'),(801,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:08'),(802,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:09'),(803,'bookNote','6',0,'183.95.250.81','2019-07-07 23:01:09'),(804,'article','13',0,'211.141.92.6','2019-07-09 10:10:48'),(805,'article','3',0,'119.4.240.159','2019-07-09 11:24:20'),(806,'article','3',0,'119.4.240.159','2019-07-09 11:24:22'),(807,'article','3',0,'119.4.240.159','2019-07-09 11:24:23'),(808,'article','3',0,'119.4.240.159','2019-07-09 11:24:23'),(809,'article','3',0,'119.4.240.159','2019-07-09 11:24:24'),(810,'article','3',0,'119.4.240.159','2019-07-09 11:24:24'),(811,'article','3',0,'119.4.240.159','2019-07-09 11:24:24'),(812,'article','3',0,'119.4.240.159','2019-07-09 11:24:24'),(813,'article','3',0,'119.4.240.159','2019-07-09 11:24:25'),(814,'article','3',0,'119.4.240.159','2019-07-09 11:24:25'),(815,'article','3',0,'119.4.240.159','2019-07-09 11:24:25'),(816,'article','3',0,'119.4.240.159','2019-07-09 11:24:25'),(817,'article','3',0,'119.4.240.159','2019-07-09 11:24:25'),(818,'article','3',0,'119.4.240.159','2019-07-09 11:24:26'),(819,'article','3',0,'119.4.240.159','2019-07-09 11:24:26'),(820,'article','3',0,'119.4.240.159','2019-07-09 11:24:26'),(821,'article','3',1,'119.4.240.159','2019-07-09 11:24:26'),(822,'article','3',0,'119.4.240.159','2019-07-09 11:24:26'),(823,'article','3',0,'119.4.240.159','2019-07-09 11:24:26'),(824,'article','3',0,'119.4.240.159','2019-07-09 11:24:27'),(825,'article','3',0,'119.4.240.159','2019-07-09 11:24:27'),(826,'article','3',0,'119.4.240.159','2019-07-09 11:24:27'),(827,'article','3',0,'119.4.240.159','2019-07-09 11:24:27'),(828,'article','3',0,'119.4.240.159','2019-07-09 11:24:27'),(829,'article','3',0,'119.4.240.159','2019-07-09 11:24:28'),(830,'article','3',0,'119.4.240.159','2019-07-09 11:24:28'),(831,'article','3',0,'119.4.240.159','2019-07-09 11:24:28'),(832,'article','3',0,'119.4.240.159','2019-07-09 11:24:28'),(833,'article','3',0,'119.4.240.159','2019-07-09 11:24:28'),(834,'article','3',0,'119.4.240.159','2019-07-09 11:24:30'),(835,'article','3',0,'119.4.240.159','2019-07-09 11:24:30'),(836,'article','3',0,'119.4.240.159','2019-07-09 11:24:31'),(837,'article','3',0,'119.4.240.159','2019-07-09 11:24:31'),(838,'article','3',0,'119.4.240.159','2019-07-09 11:24:31'),(839,'article','3',0,'119.4.240.159','2019-07-09 11:24:31'),(840,'article','3',0,'119.4.240.159','2019-07-09 11:24:31'),(841,'article','3',0,'119.4.240.159','2019-07-09 11:24:31'),(842,'article','3',0,'119.4.240.159','2019-07-09 11:24:32'),(843,'article','3',0,'119.4.240.159','2019-07-09 11:24:32'),(844,'article','3',0,'119.4.240.159','2019-07-09 11:24:32'),(845,'article','3',0,'119.4.240.159','2019-07-09 11:24:32'),(846,'article','3',0,'119.4.240.159','2019-07-09 11:24:32'),(847,'article','3',0,'119.4.240.159','2019-07-09 11:24:33'),(848,'article','11',0,'36.153.143.162','2019-07-10 09:32:19'),(849,'article','13',0,'59.172.5.212','2019-07-10 10:04:24'),(850,'article','13',0,'59.172.5.212','2019-07-10 10:04:26'),(851,'bookNote','1',0,'121.35.1.169','2019-07-12 23:44:24'),(852,'bookNote','1',0,'121.35.1.169','2019-07-12 23:44:25'),(853,'bookNote','1',0,'121.35.1.169','2019-07-12 23:44:26'),(854,'bookNote','1',1,'121.35.1.169','2019-07-12 23:44:26'),(855,'bookNote','1',0,'121.35.1.169','2019-07-12 23:44:26'),(856,'bookNote','1',0,'121.35.1.169','2019-07-12 23:44:27'),(857,'bookNote','1',0,'121.35.1.169','2019-07-12 23:44:27'),(858,'bookNote','1',0,'121.35.1.169','2019-07-12 23:44:33'),(859,'article','13',0,'36.153.143.162','2019-07-15 11:24:16'),(860,'article','13',0,'36.153.143.162','2019-07-15 11:24:21'),(861,'article','15',0,'36.153.143.162','2019-07-15 14:45:38'),(862,'article','15',0,'14.155.222.170','2019-07-15 15:35:39'),(863,'article','15',0,'114.141.190.70','2019-07-16 14:59:30'),(864,'article','15',0,'114.141.190.70','2019-07-16 14:59:31'),(865,'article','15',0,'114.141.190.70','2019-07-16 14:59:33'),(866,'bookNote','1',0,'113.88.99.77','2019-07-16 22:35:51'),(867,'book','1',0,'113.88.99.77','2019-07-17 00:06:01'),(868,'article','1',0,'117.136.79.115','2019-07-17 08:36:33'),(869,'book','2',0,'101.230.234.6','2019-07-17 19:37:55'),(870,'book','1',0,'101.230.234.6','2019-07-17 19:37:56'),(871,'book','1',0,'101.230.234.6','2019-07-17 19:37:58'),(872,'book','1',0,'101.230.234.6','2019-07-17 19:37:59'),(873,'book','1',0,'101.230.234.6','2019-07-17 19:37:59'),(874,'book','1',0,'101.230.234.6','2019-07-17 19:37:59'),(875,'book','1',0,'101.230.234.6','2019-07-17 19:37:59'),(876,'book','1',0,'101.230.234.6','2019-07-17 19:37:59'),(877,'book','1',0,'101.230.234.6','2019-07-17 19:38:00'),(878,'book','1',0,'101.230.234.6','2019-07-17 19:38:00'),(879,'book','1',0,'101.230.234.6','2019-07-17 19:38:00'),(880,'book','1',0,'101.230.234.6','2019-07-17 19:38:00'),(881,'bookNote','1',0,'223.104.63.188','2019-07-18 08:01:41'),(882,'article','4',1,'125.111.198.193','2019-07-18 11:12:39'),(883,'article','4',0,'125.111.198.193','2019-07-18 11:12:40'),(884,'article','4',0,'125.111.198.193','2019-07-18 11:12:41'),(885,'article','13',0,'36.152.32.170','2019-07-18 20:09:12'),(886,'article','13',0,'36.152.32.170','2019-07-18 20:09:15'),(887,'article','13',0,'36.152.32.170','2019-07-18 20:09:16'),(888,'article','13',0,'36.152.32.170','2019-07-18 20:09:16'),(889,'article','13',0,'36.152.32.170','2019-07-18 20:09:16'),(890,'article','13',0,'36.152.32.170','2019-07-18 20:09:16'),(891,'article','13',0,'36.152.32.170','2019-07-18 20:09:18'),(892,'article','13',0,'36.152.32.170','2019-07-18 20:09:18'),(893,'article','13',0,'36.152.32.170','2019-07-18 20:09:18'),(894,'article','13',0,'36.152.32.170','2019-07-18 20:09:18'),(895,'article','13',0,'36.152.32.170','2019-07-18 20:09:19'),(896,'article','13',0,'36.152.32.170','2019-07-18 20:09:19'),(897,'article','13',0,'36.152.32.170','2019-07-18 20:09:19'),(898,'article','13',0,'36.152.32.170','2019-07-18 20:09:19'),(899,'article','13',0,'36.152.32.170','2019-07-18 20:09:19'),(900,'article','13',0,'36.152.32.170','2019-07-18 20:09:20'),(901,'article','13',0,'36.152.32.170','2019-07-18 20:09:20'),(902,'article','13',0,'36.152.32.170','2019-07-18 20:09:20'),(903,'article','13',0,'36.152.32.170','2019-07-18 20:09:20'),(904,'article','13',0,'36.152.32.170','2019-07-18 20:09:20'),(905,'article','13',0,'36.152.32.170','2019-07-18 20:09:21'),(906,'article','13',0,'36.152.32.170','2019-07-18 20:09:21'),(907,'article','13',0,'36.152.32.170','2019-07-18 20:09:21'),(908,'article','13',0,'36.152.32.170','2019-07-18 20:09:21'),(909,'article','13',0,'36.152.32.170','2019-07-18 20:09:21'),(910,'article','13',0,'36.152.32.170','2019-07-18 20:09:21'),(911,'article','13',0,'36.152.32.170','2019-07-18 20:09:22'),(912,'article','13',0,'36.152.32.170','2019-07-18 20:09:22'),(913,'article','13',0,'36.152.32.170','2019-07-18 20:09:22'),(914,'article','13',0,'36.152.32.170','2019-07-18 20:09:22'),(915,'article','13',0,'36.152.32.170','2019-07-18 20:09:22'),(916,'article','13',0,'36.152.32.170','2019-07-18 20:09:22'),(917,'article','13',0,'36.152.32.170','2019-07-18 20:09:23'),(918,'article','13',0,'36.152.32.170','2019-07-18 20:09:23'),(919,'article','13',0,'36.152.32.170','2019-07-18 20:09:23'),(920,'article','13',0,'36.152.32.170','2019-07-18 20:09:23'),(921,'article','13',0,'36.152.32.170','2019-07-18 20:09:23'),(922,'article','13',0,'36.152.32.170','2019-07-18 20:09:23'),(923,'article','13',0,'36.152.32.170','2019-07-18 20:09:24'),(924,'article','13',0,'36.152.32.170','2019-07-18 20:09:24'),(925,'article','13',0,'36.152.32.170','2019-07-18 20:09:26'),(926,'article','13',0,'36.152.32.170','2019-07-18 20:09:30'),(927,'bookNote','5',0,'183.15.181.240','2019-07-21 13:21:14'),(928,'article','1',0,'223.104.63.185','2019-07-22 20:12:57'),(929,'article','1',0,'113.116.143.192','2019-07-23 07:33:53'),(930,'article','17',0,'36.152.32.170','2019-07-23 08:47:32'),(931,'article','17',0,'36.152.32.170','2019-07-23 08:47:34'),(932,'article','17',0,'36.152.32.170','2019-07-23 08:47:36'),(933,'article','17',0,'36.152.32.170','2019-07-23 08:47:36'),(934,'article','17',0,'36.152.32.170','2019-07-23 08:47:37'),(935,'article','17',0,'36.152.32.170','2019-07-23 08:47:37'),(936,'article','17',0,'36.152.32.170','2019-07-23 08:47:37'),(937,'article','17',0,'36.152.32.170','2019-07-23 08:47:37'),(938,'article','17',0,'36.152.32.170','2019-07-23 08:47:37'),(939,'article','17',0,'36.152.32.170','2019-07-23 08:47:38'),(940,'article','17',0,'36.152.32.170','2019-07-23 08:47:38'),(941,'article','17',0,'36.152.32.170','2019-07-23 08:47:38'),(942,'article','17',0,'36.152.32.170','2019-07-23 08:47:38'),(943,'article','1',0,'219.133.170.78','2019-07-23 13:36:01'),(944,'article','1',0,'219.133.170.78','2019-07-23 13:36:03'),(945,'article','1',0,'219.133.170.78','2019-07-23 13:36:04'),(946,'article','1',0,'219.133.170.78','2019-07-23 13:36:04'),(947,'article','1',0,'219.133.170.78','2019-07-23 13:36:05'),(948,'article','1',0,'219.133.170.78','2019-07-23 13:36:05'),(949,'article','17',0,'113.88.97.234','2019-07-23 23:45:18'),(950,'article','1',0,'223.223.190.98','2019-07-25 17:31:50'),(951,'article','1',0,'223.223.190.98','2019-07-25 17:31:50'),(952,'article','1',0,'223.223.190.98','2019-07-25 17:31:53'),(953,'article','1',0,'223.223.190.98','2019-07-25 17:31:55'),(954,'article','1',0,'223.223.190.98','2019-07-25 17:31:57'),(955,'article','18',0,'27.17.2.165','2019-07-26 16:04:38'),(956,'article','18',0,'27.17.2.165','2019-07-26 16:04:40'),(957,'article','18',0,'27.17.2.165','2019-07-26 16:04:40'),(958,'article','18',0,'27.17.2.165','2019-07-26 16:04:41'),(959,'article','18',0,'27.17.2.165','2019-07-26 16:04:41'),(960,'article','18',0,'27.17.2.165','2019-07-26 16:04:42'),(961,'article','18',0,'27.17.2.165','2019-07-26 16:04:42'),(962,'article','18',0,'27.17.2.165','2019-07-26 16:04:42'),(963,'article','18',0,'27.17.2.165','2019-07-26 16:04:42'),(964,'article','18',0,'27.17.2.165','2019-07-26 16:04:43'),(965,'article','18',0,'27.17.2.165','2019-07-26 16:04:43'),(966,'article','18',0,'122.193.33.86','2019-07-26 16:37:04'),(967,'article','19',0,'219.133.249.172','2019-07-26 21:17:16'),(968,'article','18',0,'219.133.249.172','2019-07-26 21:17:17'),(969,'article','17',0,'219.133.249.172','2019-07-26 21:17:19'),(970,'article','16',0,'219.133.249.172','2019-07-26 21:17:21'),(971,'article','17',0,'219.133.249.172','2019-07-26 21:17:22'),(972,'article','17',0,'219.133.249.172','2019-07-26 21:17:22'),(973,'article','17',0,'219.133.249.172','2019-07-26 21:17:23'),(974,'article','17',0,'219.133.249.172','2019-07-26 21:17:23'),(975,'article','17',0,'219.133.249.172','2019-07-26 21:17:24'),(976,'article','17',0,'219.133.249.172','2019-07-26 21:17:24'),(977,'article','17',0,'219.133.249.172','2019-07-26 21:17:24'),(978,'article','17',0,'219.133.249.172','2019-07-26 21:17:24'),(979,'article','17',0,'219.133.249.172','2019-07-26 21:17:24'),(980,'article','17',0,'219.133.249.172','2019-07-26 21:17:25'),(981,'article','17',0,'219.133.249.172','2019-07-26 21:17:25'),(982,'article','16',0,'219.133.249.172','2019-07-26 21:17:26'),(983,'article','16',0,'219.133.249.172','2019-07-26 21:17:27'),(984,'article','16',0,'219.133.249.172','2019-07-26 21:17:27'),(985,'article','16',0,'219.133.249.172','2019-07-26 21:17:27'),(986,'article','16',0,'219.133.249.172','2019-07-26 21:17:28'),(987,'article','16',0,'219.133.249.172','2019-07-26 21:17:28'),(988,'article','16',0,'219.133.249.172','2019-07-26 21:17:28'),(989,'article','16',0,'219.133.249.172','2019-07-26 21:17:28'),(990,'book','2',0,'219.133.249.172','2019-07-26 21:17:30'),(991,'book','2',0,'219.133.249.172','2019-07-26 21:17:30'),(992,'book','2',0,'219.133.249.172','2019-07-26 21:17:30'),(993,'book','2',0,'219.133.249.172','2019-07-26 21:17:31'),(994,'book','2',0,'219.133.249.172','2019-07-26 21:17:31'),(995,'book','2',0,'219.133.249.172','2019-07-26 21:17:31'),(996,'book','2',0,'219.133.249.172','2019-07-26 21:17:31'),(997,'book','2',0,'219.133.249.172','2019-07-26 21:17:31'),(998,'book','2',0,'219.133.249.172','2019-07-26 21:17:32'),(999,'book','2',0,'219.133.249.172','2019-07-26 21:17:32'),(1000,'bookNote','9',0,'219.133.249.172','2019-07-26 21:17:34'),(1001,'bookNote','9',0,'219.133.249.172','2019-07-26 21:17:34'),(1002,'bookNote','9',0,'219.133.249.172','2019-07-26 21:17:34'),(1003,'bookNote','9',0,'219.133.249.172','2019-07-26 21:17:34'),(1004,'bookNote','9',0,'219.133.249.172','2019-07-26 21:17:34'),(1005,'bookNote','9',0,'219.133.249.172','2019-07-26 21:17:35'),(1006,'bookNote','9',0,'219.133.249.172','2019-07-26 21:17:35'),(1007,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:37'),(1008,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:37'),(1009,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:37'),(1010,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:37'),(1011,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:38'),(1012,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:38'),(1013,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:38'),(1014,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:38'),(1015,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:39'),(1016,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:39'),(1017,'bookNote','7',0,'219.133.249.172','2019-07-26 21:17:39'),(1018,'bookNote','6',0,'219.133.249.172','2019-07-26 21:17:41'),(1019,'bookNote','6',0,'219.133.249.172','2019-07-26 21:17:41'),(1020,'bookNote','6',0,'219.133.249.172','2019-07-26 21:17:41'),(1021,'bookNote','5',0,'219.133.249.172','2019-07-26 21:17:43'),(1022,'bookNote','5',0,'219.133.249.172','2019-07-26 21:17:44'),(1023,'bookNote','5',0,'219.133.249.172','2019-07-26 21:17:44'),(1024,'article','19',0,'219.133.249.172','2019-07-26 22:13:39'),(1025,'article','19',0,'219.133.249.172','2019-07-26 22:13:40'),(1026,'article','19',0,'219.133.249.172','2019-07-26 22:13:40'),(1027,'article','19',0,'219.133.249.172','2019-07-26 22:13:40'),(1028,'article','19',0,'219.133.249.172','2019-07-26 22:13:41'),(1029,'book','2',0,'219.133.249.172','2019-07-26 22:13:44'),(1030,'book','3',0,'219.133.249.172','2019-07-26 22:13:45'),(1031,'bookNote','9',0,'219.133.249.172','2019-07-26 22:13:47'),(1032,'article','1',0,'14.223.178.163','2019-07-27 15:03:17'),(1033,'article','1',0,'14.223.178.163','2019-07-27 15:03:18'),(1034,'article','1',0,'219.133.249.172','2019-07-27 16:01:03'),(1035,'article','1',0,'219.133.249.172','2019-07-27 16:01:03'),(1036,'article','1',0,'219.133.249.172','2019-07-27 16:01:03'),(1037,'article','1',0,'219.133.249.172','2019-07-27 16:01:03'),(1038,'article','1',0,'219.133.249.172','2019-07-27 16:01:03'),(1039,'article','1',0,'219.133.249.172','2019-07-27 16:01:05'),(1040,'article','1',0,'219.133.249.172','2019-07-27 16:01:06'),(1041,'article','1',0,'219.133.249.172','2019-07-27 16:01:06'),(1042,'article','1',0,'219.133.249.172','2019-07-27 16:01:06'),(1043,'article','1',0,'219.133.249.172','2019-07-27 16:01:06'),(1044,'article','1',0,'219.133.249.172','2019-07-27 16:01:07'),(1045,'article','1',0,'219.133.249.172','2019-07-27 16:01:07'),(1046,'article','1',0,'219.133.249.172','2019-07-27 16:01:07'),(1047,'article','1',0,'219.133.249.172','2019-07-27 16:01:07'),(1048,'article','1',0,'219.133.249.172','2019-07-27 16:01:07'),(1049,'article','1',0,'219.133.249.172','2019-07-27 16:01:08'),(1050,'article','1',0,'219.133.249.172','2019-07-27 16:01:08'),(1051,'article','1',0,'219.133.249.172','2019-07-27 16:01:08'),(1052,'article','1',0,'219.133.249.172','2019-07-27 16:01:08'),(1053,'article','1',0,'219.133.249.172','2019-07-27 16:01:08'),(1054,'article','1',0,'219.133.249.172','2019-07-27 16:01:09'),(1055,'article','1',0,'219.133.249.172','2019-07-27 16:01:09'),(1056,'article','1',0,'219.133.249.172','2019-07-27 16:01:09'),(1057,'article','1',0,'219.133.249.172','2019-07-27 16:01:09'),(1058,'article','1',0,'219.133.249.172','2019-07-27 16:01:09'),(1059,'article','1',0,'219.133.249.172','2019-07-27 16:01:10'),(1060,'article','1',0,'219.133.249.172','2019-07-27 16:01:10'),(1061,'article','1',0,'219.133.249.172','2019-07-27 16:01:10'),(1062,'article','1',0,'219.133.249.172','2019-07-27 16:01:10'),(1063,'article','1',0,'219.133.249.172','2019-07-27 16:01:10'),(1064,'article','1',0,'219.133.249.172','2019-07-27 16:01:11'),(1065,'article','1',0,'219.133.249.172','2019-07-27 16:01:11'),(1066,'article','1',0,'219.133.249.172','2019-07-27 16:01:11'),(1067,'article','1',0,'219.133.249.172','2019-07-27 16:01:11'),(1068,'article','1',0,'219.133.249.172','2019-07-27 16:01:11'),(1069,'article','1',0,'219.133.249.172','2019-07-27 16:01:12'),(1070,'article','1',0,'219.133.249.172','2019-07-27 16:01:12'),(1071,'article','1',0,'219.133.249.172','2019-07-27 16:01:12'),(1072,'article','1',0,'219.133.249.172','2019-07-27 16:01:12'),(1073,'article','1',0,'219.133.249.172','2019-07-27 16:01:12'),(1074,'article','1',0,'171.221.141.240','2019-07-27 17:17:18'),(1075,'article','22',0,'219.133.249.172','2019-07-27 17:52:58'),(1076,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:19'),(1077,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:20'),(1078,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:20'),(1079,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:20'),(1080,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:20'),(1081,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:20'),(1082,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:21'),(1083,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:21'),(1084,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:21'),(1085,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:21'),(1086,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:21'),(1087,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:22'),(1088,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:22'),(1089,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:22'),(1090,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:22'),(1091,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:22'),(1092,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:23'),(1093,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:23'),(1094,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:25'),(1095,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:27'),(1096,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:27'),(1097,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:27'),(1098,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:28'),(1099,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:29'),(1100,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:29'),(1101,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:29'),(1102,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:30'),(1103,'bookNote','9',0,'219.133.249.172','2019-07-27 22:13:30'),(1104,'article','1',0,'219.133.249.172','2019-07-27 22:17:14'),(1105,'article','1',0,'219.133.249.172','2019-07-27 22:17:14'),(1106,'article','1',0,'219.133.249.172','2019-07-27 22:17:14'),(1107,'article','1',0,'219.133.249.172','2019-07-27 22:17:14'),(1108,'article','1',0,'219.133.249.172','2019-07-27 22:17:15'),(1109,'article','1',0,'219.133.249.172','2019-07-27 22:17:15'),(1110,'article','1',0,'219.133.249.172','2019-07-27 22:17:15'),(1111,'article','1',0,'219.133.249.172','2019-07-27 22:17:15'),(1112,'article','1',0,'219.133.249.172','2019-07-27 22:17:16'),(1113,'article','1',0,'219.133.249.172','2019-07-27 22:17:16'),(1114,'article','1',0,'219.133.249.172','2019-07-27 22:17:16'),(1115,'article','1',0,'219.133.249.172','2019-07-27 22:17:16'),(1116,'article','1',0,'219.133.249.172','2019-07-27 22:17:17'),(1117,'article','1',0,'219.133.249.172','2019-07-27 22:17:17'),(1118,'article','1',0,'219.133.249.172','2019-07-27 22:17:17'),(1119,'article','1',0,'219.133.249.172','2019-07-27 22:17:17'),(1120,'article','1',0,'219.133.249.172','2019-07-27 22:17:17'),(1121,'article','1',0,'219.133.249.172','2019-07-27 22:17:18'),(1122,'article','1',0,'219.133.249.172','2019-07-27 22:17:18'),(1123,'article','1',0,'219.133.249.172','2019-07-27 22:17:18'),(1124,'article','1',0,'219.133.249.172','2019-07-27 22:17:19'),(1125,'article','1',0,'219.133.249.172','2019-07-27 22:17:19'),(1126,'article','1',0,'219.133.249.172','2019-07-27 22:17:19'),(1127,'article','1',0,'219.133.249.172','2019-07-27 22:17:19'),(1128,'article','1',0,'219.133.249.172','2019-07-27 22:17:19'),(1129,'article','1',0,'219.133.249.172','2019-07-27 22:17:20'),(1130,'article','21',0,'219.133.249.172','2019-07-27 22:21:58'),(1131,'article','20',0,'219.133.249.172','2019-07-27 22:21:59'),(1132,'book','3',0,'219.133.249.172','2019-07-27 22:22:03'),(1133,'bookNote','9',0,'219.133.249.172','2019-07-27 22:22:06'),(1134,'bookNote','8',0,'219.133.249.172','2019-07-27 22:22:07'),(1135,'bookNote','1',0,'27.17.2.165','2019-07-29 13:27:07'),(1136,'bookNote','1',0,'27.17.2.165','2019-07-29 13:27:08'),(1137,'article','26',0,'14.155.221.135','2019-07-30 11:16:01'),(1138,'article','26',0,'14.155.221.135','2019-07-30 11:16:03'),(1139,'article','26',0,'14.155.221.135','2019-07-30 11:16:03'),(1140,'article','26',0,'14.155.221.135','2019-07-30 11:16:03'),(1141,'article','26',0,'14.155.221.135','2019-07-30 11:16:03'),(1142,'article','26',0,'14.155.221.135','2019-07-30 11:16:04'),(1143,'article','26',0,'14.155.221.135','2019-07-30 11:16:04'),(1144,'article','26',0,'14.155.221.135','2019-07-30 11:16:04'),(1145,'article','26',0,'14.155.221.135','2019-07-30 11:16:04'),(1146,'article','26',0,'14.155.221.135','2019-07-30 11:16:05'),(1147,'article','26',0,'14.155.221.135','2019-07-30 11:16:05'),(1148,'article','26',0,'14.155.221.135','2019-07-30 11:16:05'),(1149,'article','26',0,'14.155.221.135','2019-07-30 11:16:05'),(1150,'article','26',0,'14.155.221.135','2019-07-30 11:16:05'),(1151,'article','26',0,'14.155.221.135','2019-07-30 11:16:06'),(1152,'article','26',0,'14.155.221.135','2019-07-30 11:16:06'),(1153,'article','26',0,'14.155.221.135','2019-07-30 11:16:06'),(1154,'article','26',0,'14.155.221.135','2019-07-30 11:16:06'),(1155,'article','26',0,'14.155.221.135','2019-07-30 11:16:06'),(1156,'article','26',0,'14.155.221.135','2019-07-30 11:16:07'),(1157,'article','26',0,'14.155.221.135','2019-07-30 11:16:07'),(1158,'article','26',0,'14.155.221.135','2019-07-30 11:16:07'),(1159,'article','26',0,'14.155.221.135','2019-07-30 11:16:07'),(1160,'article','26',0,'14.155.221.135','2019-07-30 11:16:07'),(1161,'article','26',0,'14.155.221.135','2019-07-30 11:16:08'),(1162,'article','26',0,'14.155.221.135','2019-07-30 11:16:08'),(1163,'article','26',0,'14.155.221.135','2019-07-30 11:16:08'),(1164,'article','26',0,'14.155.221.135','2019-07-30 11:16:08'),(1165,'article','26',0,'14.155.221.135','2019-07-30 11:16:09'),(1166,'article','26',0,'14.155.221.135','2019-07-30 11:16:09'),(1167,'article','26',0,'14.155.221.135','2019-07-30 11:16:09'),(1168,'article','26',0,'14.155.221.135','2019-07-30 11:16:10'),(1169,'article','26',0,'14.155.221.135','2019-07-30 11:16:10'),(1170,'article','26',0,'14.155.221.135','2019-07-30 11:16:10'),(1171,'article','26',0,'14.155.221.135','2019-07-30 11:16:10'),(1172,'article','26',0,'14.155.221.135','2019-07-30 11:16:10'),(1173,'article','26',0,'14.155.221.135','2019-07-30 11:16:11'),(1174,'article','26',0,'14.155.221.135','2019-07-30 11:16:11'),(1175,'article','26',0,'14.155.221.135','2019-07-30 11:16:11'),(1176,'article','26',0,'14.155.221.135','2019-07-30 11:16:12'),(1177,'article','26',0,'14.155.221.135','2019-07-30 11:16:13'),(1178,'article','26',0,'14.155.221.135','2019-07-30 11:16:13'),(1179,'article','26',0,'14.155.221.135','2019-07-30 11:16:14'),(1180,'article','26',0,'14.155.221.135','2019-07-30 11:16:14'),(1181,'article','26',0,'14.155.221.135','2019-07-30 11:16:14'),(1182,'article','26',0,'14.155.221.135','2019-07-30 11:16:14'),(1183,'article','26',0,'14.155.221.135','2019-07-30 11:16:15'),(1184,'article','26',0,'14.155.221.135','2019-07-30 11:16:15'),(1185,'article','26',0,'14.155.221.135','2019-07-30 11:16:15'),(1186,'article','26',0,'14.155.221.135','2019-07-30 11:16:15'),(1187,'article','26',0,'14.155.221.135','2019-07-30 11:16:16'),(1188,'article','26',0,'14.155.221.135','2019-07-30 11:16:17'),(1189,'article','1',0,'117.139.249.167','2019-07-30 19:09:08'),(1190,'article','5',0,'183.63.51.77','2019-08-01 18:06:52'),(1191,'article','1',0,'14.155.223.162','2019-08-01 20:56:27'),(1192,'article','1',0,'14.155.223.162','2019-08-01 20:56:27'),(1193,'article','1',0,'14.155.223.162','2019-08-01 20:56:28'),(1194,'article','1',0,'14.155.223.162','2019-08-01 20:56:28'),(1195,'article','1',0,'14.155.223.162','2019-08-01 20:56:28'),(1196,'article','1',0,'14.155.223.162','2019-08-01 20:56:29'),(1197,'article','1',0,'14.155.223.162','2019-08-01 20:56:29'),(1198,'article','1',0,'14.155.223.162','2019-08-01 20:56:30'),(1199,'article','1',0,'14.155.223.162','2019-08-01 20:56:30'),(1200,'article','1',0,'14.155.223.162','2019-08-01 20:56:30'),(1201,'article','1',0,'14.155.223.162','2019-08-01 20:56:31'),(1202,'article','1',0,'14.155.223.162','2019-08-01 20:56:31'),(1203,'article','1',0,'14.155.223.162','2019-08-01 20:56:31'),(1204,'article','1',0,'14.155.223.162','2019-08-01 20:56:32'),(1205,'article','1',0,'14.155.223.162','2019-08-01 20:56:32'),(1206,'article','1',0,'14.155.223.162','2019-08-01 20:56:32'),(1207,'article','1',0,'14.155.223.162','2019-08-01 20:56:32'),(1208,'article','1',0,'14.155.223.162','2019-08-01 20:56:37'),(1209,'article','1',0,'14.155.223.162','2019-08-01 20:56:40'),(1210,'article','1',0,'14.155.223.162','2019-08-01 20:56:41'),(1211,'article','1',0,'14.155.223.162','2019-08-01 20:56:41'),(1212,'article','1',0,'14.155.223.162','2019-08-01 20:56:42'),(1213,'article','1',0,'14.155.223.162','2019-08-01 20:56:42'),(1214,'article','1',0,'14.155.223.162','2019-08-01 20:56:49'),(1215,'article','1',0,'14.155.223.162','2019-08-01 20:56:54'),(1216,'article','1',0,'219.133.251.222','2019-08-02 21:23:32'),(1217,'article','1',0,'219.133.251.222','2019-08-02 21:23:33'),(1218,'article','1',0,'219.133.251.222','2019-08-02 21:23:33'),(1219,'article','1',0,'219.133.251.222','2019-08-02 21:23:36'),(1220,'article','1',0,'219.133.251.222','2019-08-02 21:23:36'),(1221,'article','1',0,'219.133.251.222','2019-08-02 21:23:37'),(1222,'article','1',0,'219.133.251.222','2019-08-02 21:23:37'),(1223,'article','1',0,'219.133.251.222','2019-08-02 21:23:37'),(1224,'article','1',0,'219.133.251.222','2019-08-02 21:23:37'),(1225,'article','1',0,'219.133.251.222','2019-08-02 21:23:38'),(1226,'article','1',0,'219.133.251.222','2019-08-02 21:23:38'),(1227,'article','1',0,'219.133.251.222','2019-08-02 21:23:39'),(1228,'article','1',0,'219.133.251.222','2019-08-02 21:23:39'),(1229,'article','1',0,'219.133.251.222','2019-08-02 21:23:39'),(1230,'article','1',0,'219.133.251.222','2019-08-02 21:23:39'),(1231,'article','1',0,'219.133.251.222','2019-08-02 21:23:39'),(1232,'article','1',0,'219.133.251.222','2019-08-02 21:23:40'),(1233,'article','1',0,'219.133.251.222','2019-08-02 21:23:40'),(1234,'article','1',0,'219.133.251.222','2019-08-02 21:23:40'),(1235,'article','1',0,'219.133.251.222','2019-08-02 21:23:40'),(1236,'article','1',0,'219.133.251.222','2019-08-02 21:23:41'),(1237,'article','1',0,'219.133.251.222','2019-08-02 21:23:41'),(1238,'article','1',0,'219.133.251.222','2019-08-02 21:23:41'),(1239,'article','1',0,'219.133.251.222','2019-08-02 21:23:42'),(1240,'article','1',0,'219.133.251.222','2019-08-02 21:23:42'),(1241,'article','1',0,'219.133.251.222','2019-08-02 21:23:42'),(1242,'article','1',0,'219.133.251.222','2019-08-02 21:23:43'),(1243,'article','1',0,'219.133.251.222','2019-08-02 21:23:43'),(1244,'article','1',0,'219.133.251.222','2019-08-02 21:23:43'),(1245,'article','1',0,'219.133.251.222','2019-08-02 21:23:43'),(1246,'article','1',0,'219.133.251.222','2019-08-02 21:23:43'),(1247,'article','1',0,'219.133.251.222','2019-08-02 21:23:44'),(1248,'article','1',0,'219.133.251.222','2019-08-02 21:23:44'),(1249,'article','1',0,'219.133.251.222','2019-08-02 21:23:44'),(1250,'article','1',0,'219.133.251.222','2019-08-02 21:23:44'),(1251,'article','1',0,'219.133.251.222','2019-08-02 21:23:44'),(1252,'article','25',0,'219.133.251.222','2019-08-03 15:02:41'),(1253,'article','25',0,'219.133.251.222','2019-08-03 15:02:42'),(1254,'article','25',0,'219.133.251.222','2019-08-03 15:02:43'),(1255,'article','25',0,'219.133.251.222','2019-08-03 15:02:43'),(1256,'article','25',0,'219.133.251.222','2019-08-03 15:02:43'),(1257,'article','25',0,'219.133.251.222','2019-08-03 15:02:43'),(1258,'article','25',0,'219.133.251.222','2019-08-03 15:02:43'),(1259,'article','25',0,'219.133.251.222','2019-08-03 15:03:08'),(1260,'article','25',0,'219.133.251.222','2019-08-03 15:03:08'),(1261,'article','25',0,'219.133.251.222','2019-08-03 15:03:09'),(1262,'article','25',0,'219.133.251.222','2019-08-03 15:03:09'),(1263,'article','25',0,'219.133.251.222','2019-08-03 15:03:20'),(1264,'article','25',0,'219.133.251.222','2019-08-03 15:03:21'),(1265,'article','25',1,'219.133.251.222','2019-08-03 15:03:22'),(1266,'article','25',0,'219.133.251.222','2019-08-03 15:03:22'),(1267,'article','25',0,'219.133.251.222','2019-08-03 15:03:22'),(1268,'article','25',0,'219.133.251.222','2019-08-03 15:03:22'),(1269,'article','25',0,'219.133.251.222','2019-08-03 15:05:10'),(1270,'article','25',0,'219.133.251.222','2019-08-03 15:05:10'),(1271,'article','25',0,'219.133.251.222','2019-08-03 15:05:10'),(1272,'article','25',0,'219.133.251.222','2019-08-03 15:05:10'),(1273,'article','25',0,'219.133.251.222','2019-08-03 15:05:10'),(1274,'article','25',0,'219.133.251.222','2019-08-03 15:05:11'),(1275,'article','29',0,'183.15.182.45','2019-08-04 15:58:47'),(1276,'article','30',0,'113.92.128.154','2019-08-05 23:18:10'),(1277,'article','30',0,'36.152.32.170','2019-08-06 10:40:42'),(1278,'bookNote','8',0,'183.15.181.235','2019-08-10 16:06:33'),(1279,'bookNote','8',0,'183.15.181.235','2019-08-10 16:06:35'),(1280,'article','29',0,'124.16.140.20','2019-08-12 23:02:01'),(1281,'article','29',1,'124.16.140.20','2019-08-12 23:02:02'),(1282,'article','29',0,'124.16.140.20','2019-08-12 23:02:03'),(1283,'article','29',0,'124.16.140.20','2019-08-12 23:02:03'),(1284,'article','1',0,'101.230.234.6','2019-08-16 17:49:17'),(1285,'article','1',0,'101.230.234.6','2019-08-16 17:49:18'),(1286,'article','1',0,'101.230.234.6','2019-08-16 17:49:19'),(1287,'article','1',0,'101.230.234.6','2019-08-16 17:49:19'),(1288,'article','1',0,'101.230.234.6','2019-08-16 17:49:19'),(1289,'article','1',0,'101.230.234.6','2019-08-16 17:49:19'),(1290,'article','1',0,'101.230.234.6','2019-08-16 17:49:20'),(1291,'article','1',0,'101.230.234.6','2019-08-16 17:49:20'),(1292,'article','1',0,'101.230.234.6','2019-08-16 17:49:20'),(1293,'article','1',0,'101.230.234.6','2019-08-16 17:49:20'),(1294,'article','1',0,'101.230.234.6','2019-08-16 17:49:20'),(1295,'article','1',0,'101.230.234.6','2019-08-16 17:49:21'),(1296,'article','1',0,'101.230.234.6','2019-08-16 17:49:21'),(1297,'article','1',0,'101.230.234.6','2019-08-16 17:49:21'),(1298,'article','1',0,'101.230.234.6','2019-08-16 17:49:21'),(1299,'article','1',0,'101.230.234.6','2019-08-16 17:49:21'),(1300,'article','1',0,'101.230.234.6','2019-08-16 17:49:21'),(1301,'article','1',0,'101.230.234.6','2019-08-16 17:49:22'),(1302,'article','1',0,'101.230.234.6','2019-08-16 17:49:22'),(1303,'article','1',0,'101.230.234.6','2019-08-16 17:49:22'),(1304,'article','1',0,'101.230.234.6','2019-08-16 17:49:22'),(1305,'article','1',0,'101.230.234.6','2019-08-16 17:49:22'),(1306,'article','1',0,'101.230.234.6','2019-08-16 17:49:22'),(1307,'article','1',0,'101.230.234.6','2019-08-16 17:49:23'),(1308,'article','1',0,'101.230.234.6','2019-08-16 17:49:23'),(1309,'article','1',0,'101.230.234.6','2019-08-16 17:49:23'),(1310,'article','1',0,'101.230.234.6','2019-08-16 17:49:23'),(1311,'article','1',0,'101.230.234.6','2019-08-16 17:49:38'),(1312,'article','1',0,'101.230.234.6','2019-08-16 17:49:38'),(1313,'article','1',0,'101.230.234.6','2019-08-16 17:49:38'),(1314,'article','1',0,'101.230.234.6','2019-08-16 17:49:38'),(1315,'article','1',0,'101.230.234.6','2019-08-16 17:49:39'),(1316,'article','30',0,'124.16.140.20','2019-08-16 22:39:43'),(1317,'article','1',0,'122.96.73.39','2019-08-17 17:39:02'),(1318,'article','29',0,'103.40.220.112','2019-08-17 23:26:21'),(1319,'article','30',0,'1.203.116.111','2019-08-18 12:26:35'),(1320,'article','31',0,'113.116.143.69','2019-08-18 19:08:51'),(1321,'article','32',0,'113.116.143.69','2019-08-18 23:11:45'),(1322,'article','31',0,'223.104.64.153','2019-08-19 08:40:08'),(1323,'article','1',0,'36.152.32.170','2019-08-19 20:06:15'),(1324,'bookNote','7',1,'36.152.32.170','2019-08-19 20:08:34'),(1325,'bookNote','7',0,'36.152.32.170','2019-08-19 20:08:52'),(1326,'bookNote','7',0,'36.152.32.170','2019-08-19 20:08:54'),(1327,'article','31',0,'103.40.220.112','2019-08-19 21:41:06'),(1328,'article','30',0,'103.40.220.112','2019-08-19 21:41:46'),(1329,'article','30',0,'103.40.220.112','2019-08-19 21:41:47'),(1330,'article','30',0,'103.40.220.112','2019-08-19 21:41:49'),(1331,'article','30',0,'103.40.220.112','2019-08-19 21:41:50'),(1332,'article','30',0,'103.40.220.112','2019-08-19 21:41:51'),(1333,'article','30',0,'103.40.220.112','2019-08-19 21:41:54'),(1334,'article','30',0,'103.40.220.112','2019-08-19 21:41:55'),(1335,'article','30',0,'103.40.220.112','2019-08-19 21:41:55'),(1336,'article','30',0,'103.40.220.112','2019-08-19 21:41:55'),(1337,'article','30',0,'103.40.220.112','2019-08-19 21:41:55'),(1338,'article','30',0,'103.40.220.112','2019-08-19 21:41:56'),(1339,'article','30',0,'103.40.220.112','2019-08-19 21:41:56'),(1340,'article','30',0,'103.40.220.112','2019-08-19 21:41:56'),(1341,'article','30',0,'103.40.220.112','2019-08-19 21:41:56'),(1342,'article','30',0,'103.40.220.112','2019-08-19 21:41:56'),(1343,'article','30',0,'103.40.220.112','2019-08-19 21:41:57'),(1344,'article','30',0,'103.40.220.112','2019-08-19 21:41:57'),(1345,'article','30',0,'103.40.220.112','2019-08-19 21:41:57'),(1346,'article','30',0,'103.40.220.112','2019-08-19 21:41:57'),(1347,'article','30',0,'103.40.220.112','2019-08-19 21:41:58'),(1348,'article','30',0,'103.40.220.112','2019-08-19 21:41:58'),(1349,'article','30',0,'103.40.220.112','2019-08-19 21:41:58'),(1350,'article','30',0,'103.40.220.112','2019-08-19 21:41:58'),(1351,'article','30',0,'103.40.220.112','2019-08-19 21:41:58'),(1352,'article','30',1,'103.40.220.112','2019-08-19 21:42:36'),(1353,'article','33',0,'183.63.51.77','2019-08-20 12:17:33'),(1354,'article','1',0,'223.104.211.185','2019-08-20 23:39:55'),(1355,'article','1',0,'223.104.211.185','2019-08-20 23:39:57'),(1356,'article','1',0,'223.104.211.185','2019-08-20 23:39:59'),(1357,'article','1',0,'223.104.211.185','2019-08-20 23:40:00'),(1358,'article','1',0,'36.152.32.170','2019-08-21 13:44:45'),(1359,'article','1',0,'116.233.207.97','2019-08-23 13:43:44'),(1360,'article','1',0,'116.233.207.97','2019-08-23 13:43:46'),(1361,'article','1',0,'116.233.207.97','2019-08-23 13:43:46'),(1362,'article','1',0,'116.233.207.97','2019-08-23 13:43:46'),(1363,'article','1',0,'116.233.207.97','2019-08-23 13:43:47'),(1364,'article','1',0,'116.233.207.97','2019-08-23 13:43:47'),(1365,'article','1',0,'116.233.207.97','2019-08-23 13:43:47'),(1366,'article','1',0,'116.233.207.97','2019-08-23 13:43:47'),(1367,'article','1',0,'116.233.207.97','2019-08-23 13:43:48'),(1368,'article','1',0,'116.233.207.97','2019-08-23 13:43:48'),(1369,'article','1',0,'116.233.207.97','2019-08-23 13:43:48'),(1370,'article','1',0,'116.233.207.97','2019-08-23 13:43:48'),(1371,'article','1',0,'116.233.207.97','2019-08-23 13:43:48'),(1372,'article','1',0,'116.233.207.97','2019-08-23 13:43:48'),(1373,'article','1',0,'116.233.207.97','2019-08-23 13:43:49'),(1374,'article','1',0,'116.233.207.97','2019-08-23 13:43:49'),(1375,'article','1',0,'116.233.207.97','2019-08-23 13:43:49'),(1376,'article','1',0,'116.233.207.97','2019-08-23 13:43:49'),(1377,'article','1',0,'116.233.207.97','2019-08-23 13:43:49'),(1378,'article','1',0,'116.233.207.97','2019-08-23 13:43:49'),(1379,'article','1',0,'116.233.207.97','2019-08-23 13:43:49'),(1380,'article','1',0,'116.233.207.97','2019-08-23 13:43:49'),(1381,'article','1',0,'116.233.207.97','2019-08-23 13:43:50'),(1382,'article','1',0,'116.233.207.97','2019-08-23 13:43:50'),(1383,'article','1',0,'116.233.207.97','2019-08-23 13:43:50'),(1384,'article','1',0,'116.233.207.97','2019-08-23 13:43:50'),(1385,'article','1',0,'116.233.207.97','2019-08-23 13:43:50'),(1386,'article','1',0,'116.233.207.97','2019-08-23 13:43:50'),(1387,'article','1',0,'116.233.207.97','2019-08-23 13:43:50'),(1388,'article','1',0,'116.233.207.97','2019-08-23 13:43:51'),(1389,'article','1',0,'116.233.207.97','2019-08-23 13:43:51'),(1390,'article','1',0,'116.233.207.97','2019-08-23 13:43:51'),(1391,'article','1',0,'116.233.207.97','2019-08-23 13:43:51'),(1392,'article','1',0,'116.233.207.97','2019-08-23 13:43:52'),(1393,'article','1',0,'116.233.207.97','2019-08-23 13:43:52'),(1394,'article','1',0,'116.233.207.97','2019-08-23 13:43:52'),(1395,'article','1',0,'116.233.207.97','2019-08-23 13:43:52'),(1396,'article','1',0,'116.233.207.97','2019-08-23 13:43:52'),(1397,'article','1',0,'116.233.207.97','2019-08-23 13:43:53'),(1398,'article','1',0,'116.233.207.97','2019-08-23 13:43:53'),(1399,'article','1',0,'116.233.207.97','2019-08-23 13:43:53'),(1400,'article','1',0,'116.233.207.97','2019-08-23 13:43:53'),(1401,'article','1',0,'116.233.207.97','2019-08-23 13:43:53'),(1402,'article','1',0,'116.233.207.97','2019-08-23 13:43:56'),(1403,'article','1',0,'116.233.207.97','2019-08-23 13:43:56'),(1404,'article','1',0,'116.233.207.97','2019-08-23 13:43:56'),(1405,'article','1',0,'116.233.207.97','2019-08-23 13:43:56'),(1406,'article','1',0,'116.233.207.97','2019-08-23 13:43:56'),(1407,'article','1',0,'116.233.207.97','2019-08-23 13:43:57'),(1408,'article','1',0,'116.233.207.97','2019-08-23 13:43:57'),(1409,'article','1',0,'116.233.207.97','2019-08-23 13:43:57'),(1410,'article','1',0,'116.233.207.97','2019-08-23 13:44:04'),(1411,'article','1',0,'116.233.207.97','2019-08-23 13:44:04'),(1412,'article','1',0,'116.233.207.97','2019-08-23 13:44:05'),(1413,'article','1',0,'116.233.207.97','2019-08-23 13:44:05'),(1414,'article','1',0,'116.233.207.97','2019-08-23 13:44:05'),(1415,'article','1',0,'116.233.207.97','2019-08-23 13:44:05'),(1416,'article','1',0,'116.233.207.97','2019-08-23 13:44:05'),(1417,'article','1',0,'116.233.207.97','2019-08-23 13:44:05'),(1418,'article','1',0,'116.233.207.97','2019-08-23 13:44:06'),(1419,'article','1',0,'116.233.207.97','2019-08-23 13:44:06'),(1420,'article','1',0,'116.233.207.97','2019-08-23 13:44:06'),(1421,'article','1',0,'116.233.207.97','2019-08-23 13:44:06'),(1422,'article','1',0,'116.233.207.97','2019-08-23 13:44:06'),(1423,'article','1',1,'116.233.207.97','2019-08-23 13:44:06'),(1424,'article','1',0,'116.233.207.97','2019-08-23 13:44:07'),(1425,'article','1',0,'116.233.207.97','2019-08-23 13:44:07'),(1426,'article','1',0,'116.233.207.97','2019-08-23 13:44:07'),(1427,'article','1',0,'116.233.207.97','2019-08-23 13:44:07'),(1428,'article','1',0,'116.233.207.97','2019-08-23 13:44:07'),(1429,'article','1',0,'116.233.207.97','2019-08-23 13:44:07'),(1430,'article','1',0,'116.233.207.97','2019-08-23 13:44:08'),(1431,'article','1',0,'116.233.207.97','2019-08-23 13:44:08'),(1432,'article','1',0,'116.233.207.97','2019-08-23 13:44:11'),(1433,'article','1',0,'116.233.207.97','2019-08-23 13:46:40'),(1434,'article','1',0,'116.233.207.97','2019-08-23 13:46:40'),(1435,'article','1',0,'116.233.207.97','2019-08-23 13:46:41'),(1436,'article','38',0,'117.30.205.38','2019-08-26 00:03:01'),(1437,'article','38',0,'117.30.205.38','2019-08-26 00:03:03'),(1438,'article','38',0,'117.30.205.38','2019-08-26 00:03:04'),(1439,'article','38',0,'117.30.205.38','2019-08-26 00:03:05'),(1440,'article','38',0,'117.30.205.38','2019-08-26 00:03:05'),(1441,'article','38',0,'117.30.205.38','2019-08-26 00:03:06'),(1442,'article','38',0,'117.30.205.38','2019-08-26 00:03:06'),(1443,'article','38',0,'117.30.205.38','2019-08-26 00:03:06'),(1444,'article','38',0,'117.30.205.38','2019-08-26 00:03:06'),(1445,'article','38',0,'117.30.205.38','2019-08-26 00:03:07'),(1446,'article','38',0,'117.30.205.38','2019-08-26 00:03:08'),(1447,'article','38',0,'117.30.205.38','2019-08-26 00:03:08'),(1448,'article','38',0,'117.30.205.38','2019-08-26 00:03:09'),(1449,'article','38',0,'117.30.205.38','2019-08-26 00:03:10'),(1450,'article','38',0,'117.30.205.38','2019-08-26 00:03:10'),(1451,'article','38',0,'117.30.205.38','2019-08-26 00:03:10'),(1452,'article','38',0,'117.30.205.38','2019-08-26 00:03:10'),(1453,'article','38',0,'117.30.205.38','2019-08-26 00:03:11'),(1454,'article','38',0,'117.30.205.38','2019-08-26 00:03:11'),(1455,'article','38',0,'117.30.205.38','2019-08-26 00:03:11'),(1456,'article','38',0,'117.30.205.38','2019-08-26 00:03:11'),(1457,'article','38',0,'117.30.205.38','2019-08-26 00:03:12'),(1458,'article','38',0,'117.30.205.38','2019-08-26 00:03:12'),(1459,'article','38',0,'117.30.205.38','2019-08-26 00:03:12'),(1460,'article','38',0,'117.30.205.38','2019-08-26 00:03:12'),(1461,'article','38',0,'117.30.205.38','2019-08-26 00:03:13'),(1462,'article','38',0,'117.30.205.38','2019-08-26 00:03:13'),(1463,'article','38',0,'117.30.205.38','2019-08-26 00:03:13'),(1464,'article','38',0,'117.30.205.38','2019-08-26 00:03:13'),(1465,'article','38',0,'117.30.205.38','2019-08-26 00:03:14'),(1466,'article','38',0,'117.30.205.38','2019-08-26 00:03:14'),(1467,'article','38',0,'117.30.205.38','2019-08-26 00:03:14'),(1468,'article','38',0,'117.30.205.38','2019-08-26 00:03:14'),(1469,'article','38',0,'117.30.205.38','2019-08-26 00:03:14'),(1470,'article','38',0,'117.30.205.38','2019-08-26 00:03:15'),(1471,'article','38',0,'117.30.205.38','2019-08-26 00:03:15'),(1472,'article','38',0,'117.30.205.38','2019-08-26 00:03:15'),(1473,'article','38',0,'117.30.205.38','2019-08-26 00:03:15'),(1474,'article','38',0,'117.30.205.38','2019-08-26 00:03:16'),(1475,'article','38',0,'117.30.205.38','2019-08-26 00:03:16'),(1476,'article','38',0,'117.30.205.38','2019-08-26 00:03:16'),(1477,'article','38',0,'117.30.205.38','2019-08-26 00:03:16'),(1478,'article','38',0,'117.30.205.38','2019-08-26 00:03:17'),(1479,'article','38',0,'117.30.205.38','2019-08-26 00:03:17'),(1480,'article','38',0,'117.30.205.38','2019-08-26 00:03:17'),(1481,'article','35',0,'183.63.51.77','2019-08-27 16:15:39'),(1482,'article','1',0,'223.20.159.23','2019-08-28 00:41:28'),(1483,'article','1',0,'223.20.159.23','2019-08-28 00:41:30'),(1484,'article','1',0,'223.20.159.23','2019-08-28 00:41:31'),(1485,'article','1',0,'223.20.159.23','2019-08-28 00:41:32'),(1486,'article','1',0,'223.20.159.23','2019-08-28 00:41:32'),(1487,'article','1',0,'223.20.159.23','2019-08-28 00:41:33'),(1488,'article','1',0,'223.20.159.23','2019-08-28 00:41:33'),(1489,'article','1',0,'223.20.159.23','2019-08-28 00:41:33'),(1490,'article','1',0,'223.20.159.23','2019-08-28 00:41:34'),(1491,'article','1',0,'223.20.159.23','2019-08-28 00:41:34'),(1492,'article','1',0,'223.20.159.23','2019-08-28 00:41:34'),(1493,'article','1',0,'223.20.159.23','2019-08-28 00:41:34'),(1494,'article','1',0,'223.20.159.23','2019-08-28 00:41:34'),(1495,'article','1',0,'223.20.159.23','2019-08-28 00:41:34'),(1496,'article','1',0,'223.20.159.23','2019-08-28 00:41:34'),(1497,'article','1',0,'223.20.159.23','2019-08-28 00:41:35'),(1498,'article','1',0,'223.20.159.23','2019-08-28 00:41:35'),(1499,'article','1',0,'223.20.159.23','2019-08-28 00:41:36'),(1500,'article','1',0,'223.20.159.23','2019-08-28 00:41:36'),(1501,'article','1',0,'223.20.159.23','2019-08-28 00:41:37'),(1502,'article','1',0,'223.20.159.23','2019-08-28 00:41:37'),(1503,'article','1',0,'223.20.159.23','2019-08-28 00:41:37'),(1504,'article','1',0,'223.20.159.23','2019-08-28 00:41:37'),(1505,'article','1',0,'223.20.159.23','2019-08-28 00:41:38'),(1506,'article','1',0,'223.20.159.23','2019-08-28 00:41:38'),(1507,'article','1',0,'223.20.159.23','2019-08-28 00:41:38'),(1508,'article','1',0,'223.20.159.23','2019-08-28 00:41:39'),(1509,'article','8',0,'223.20.159.23','2019-08-28 00:46:48'),(1510,'article','8',0,'223.20.159.23','2019-08-28 00:46:49'),(1511,'article','38',0,'120.216.210.81','2019-08-28 21:51:11'),(1512,'article','38',0,'120.216.210.81','2019-08-28 21:51:14'),(1513,'article','38',0,'120.216.210.81','2019-08-28 21:51:15'),(1514,'article','38',0,'120.216.210.81','2019-08-28 21:51:16'),(1515,'article','38',0,'120.216.210.81','2019-08-28 21:51:18'),(1516,'article','38',0,'120.216.210.81','2019-08-28 21:51:18'),(1517,'article','38',0,'120.216.210.81','2019-08-28 21:51:19'),(1518,'article','38',0,'120.216.210.81','2019-08-28 21:51:19'),(1519,'article','38',0,'120.216.210.81','2019-08-28 21:51:19'),(1520,'article','38',0,'120.216.210.81','2019-08-28 21:51:19'),(1521,'article','38',0,'120.216.210.81','2019-08-28 21:51:19'),(1522,'article','38',0,'120.216.210.81','2019-08-28 21:51:20'),(1523,'article','35',0,'112.94.9.66','2019-08-29 17:28:22'),(1524,'book','1',0,'112.94.9.66','2019-08-29 17:28:29'),(1525,'book','2',0,'112.94.9.66','2019-08-29 17:30:41'),(1526,'book','1',0,'120.216.210.81','2019-08-29 19:15:18'),(1527,'book','1',0,'120.216.210.81','2019-08-29 19:15:21'),(1528,'book','2',0,'120.216.210.81','2019-08-29 19:15:22'),(1529,'book','2',0,'120.216.210.81','2019-08-29 19:15:22'),(1530,'article','1',0,'114.249.201.17','2019-08-29 22:37:21'),(1531,'article','15',0,'222.68.65.106','2019-08-31 11:53:49'),(1532,'article','38',0,'118.183.255.166','2019-08-31 12:05:54'),(1533,'article','38',0,'42.243.82.210','2019-08-31 16:06:25'),(1534,'article','38',0,'111.201.145.40','2019-08-31 23:15:54'),(1535,'article','1',0,'114.255.239.101','2019-09-02 14:37:39'),(1536,'article','1',0,'114.255.239.101','2019-09-02 14:37:43'),(1537,'article','1',0,'114.255.239.101','2019-09-02 14:37:44'),(1538,'article','1',0,'114.255.239.101','2019-09-02 14:37:44'),(1539,'article','1',0,'114.255.239.101','2019-09-02 14:37:45'),(1540,'article','1',0,'114.255.239.101','2019-09-02 14:37:45'),(1541,'article','1',0,'114.255.239.101','2019-09-02 14:37:46'),(1542,'article','1',0,'114.255.239.101','2019-09-02 14:37:46'),(1543,'article','1',0,'114.255.239.101','2019-09-02 14:37:47'),(1544,'article','1',0,'114.255.239.101','2019-09-02 14:37:47'),(1545,'article','1',0,'114.255.239.101','2019-09-02 14:37:47'),(1546,'article','1',0,'114.255.239.101','2019-09-02 14:37:47'),(1547,'article','1',0,'114.255.239.101','2019-09-02 14:37:48'),(1548,'article','1',0,'114.255.239.101','2019-09-02 14:37:48'),(1549,'article','1',0,'114.255.239.101','2019-09-02 14:37:48'),(1550,'article','1',0,'114.255.239.101','2019-09-02 14:37:48'),(1551,'article','1',0,'114.255.239.101','2019-09-02 14:37:48'),(1552,'article','1',0,'114.255.239.101','2019-09-02 14:37:49'),(1553,'article','1',0,'114.255.239.101','2019-09-02 14:37:49'),(1554,'article','1',0,'114.255.239.101','2019-09-02 14:37:49'),(1555,'article','1',0,'114.255.239.101','2019-09-02 14:37:49'),(1556,'article','1',0,'114.255.239.101','2019-09-02 14:37:50'),(1557,'article','1',0,'114.255.239.101','2019-09-02 14:37:50'),(1558,'article','1',0,'114.255.239.101','2019-09-02 14:37:50'),(1559,'article','1',0,'114.255.239.101','2019-09-02 14:37:50'),(1560,'article','1',0,'114.255.239.101','2019-09-02 14:37:50'),(1561,'article','1',1,'114.255.239.101','2019-09-02 14:37:51'),(1562,'article','1',0,'114.255.239.101','2019-09-02 14:37:51'),(1563,'article','1',0,'114.255.239.101','2019-09-02 14:37:51'),(1564,'article','1',0,'114.255.239.101','2019-09-02 14:37:51'),(1565,'article','1',0,'114.255.239.101','2019-09-02 14:37:51'),(1566,'article','1',0,'114.255.239.101','2019-09-02 14:37:52'),(1567,'article','1',0,'114.255.239.101','2019-09-02 14:37:52'),(1568,'article','1',0,'114.255.239.101','2019-09-02 14:37:52'),(1569,'article','1',0,'114.255.239.101','2019-09-02 14:37:52'),(1570,'article','1',0,'114.255.239.101','2019-09-02 14:37:53'),(1571,'article','1',0,'114.255.239.101','2019-09-02 14:37:53'),(1572,'article','1',0,'114.255.239.101','2019-09-02 14:37:54'),(1573,'article','1',0,'114.255.239.101','2019-09-02 14:37:54'),(1574,'article','1',0,'114.255.239.101','2019-09-02 14:37:54'),(1575,'article','1',0,'114.255.239.101','2019-09-02 14:37:54'),(1576,'article','1',0,'114.255.239.101','2019-09-02 14:37:54'),(1577,'article','1',0,'114.255.239.101','2019-09-02 14:37:55'),(1578,'article','1',0,'114.255.239.101','2019-09-02 14:37:55'),(1579,'article','1',0,'114.255.239.101','2019-09-02 14:37:55'),(1580,'article','1',0,'114.255.239.101','2019-09-02 14:37:55'),(1581,'article','1',0,'114.255.239.101','2019-09-02 14:37:55'),(1582,'article','1',0,'114.255.239.101','2019-09-02 14:37:56'),(1583,'article','1',0,'114.255.239.101','2019-09-02 14:37:56'),(1584,'article','1',0,'114.255.239.101','2019-09-02 14:37:56'),(1585,'article','1',0,'114.255.239.101','2019-09-02 14:37:56'),(1586,'article','1',0,'114.255.239.101','2019-09-02 14:37:57'),(1587,'article','1',0,'114.255.239.101','2019-09-02 14:37:57'),(1588,'article','1',0,'114.255.239.101','2019-09-02 14:37:57'),(1589,'article','1',0,'114.255.239.101','2019-09-02 14:37:57'),(1590,'article','1',0,'114.255.239.101','2019-09-02 14:38:05'),(1591,'article','1',0,'114.255.239.101','2019-09-02 14:38:06'),(1592,'article','1',0,'114.255.239.101','2019-09-02 14:38:06'),(1593,'article','1',0,'114.255.239.101','2019-09-02 14:38:07'),(1594,'article','1',0,'114.255.239.101','2019-09-02 14:38:07'),(1595,'article','1',0,'114.255.239.101','2019-09-02 14:38:07'),(1596,'article','1',0,'114.255.239.101','2019-09-02 14:38:07'),(1597,'article','1',0,'114.255.239.101','2019-09-02 14:38:07'),(1598,'article','1',0,'114.255.239.101','2019-09-02 14:38:08'),(1599,'article','1',0,'114.255.239.101','2019-09-02 14:38:08'),(1600,'article','1',0,'114.255.239.101','2019-09-02 14:38:08'),(1601,'article','1',0,'114.255.239.101','2019-09-02 14:38:08'),(1602,'article','1',0,'114.255.239.101','2019-09-02 14:38:09'),(1603,'article','1',0,'114.255.239.101','2019-09-02 14:38:09'),(1604,'article','1',0,'114.255.239.101','2019-09-02 14:38:09'),(1605,'article','1',0,'114.255.239.101','2019-09-02 14:38:09'),(1606,'article','1',0,'114.255.239.101','2019-09-02 14:38:09'),(1607,'article','1',0,'114.255.239.101','2019-09-02 14:38:10'),(1608,'article','1',0,'114.255.239.101','2019-09-02 14:38:10'),(1609,'article','1',0,'114.255.239.101','2019-09-02 14:38:10'),(1610,'article','1',0,'114.255.239.101','2019-09-02 14:38:10'),(1611,'article','1',0,'114.255.239.101','2019-09-02 14:38:10'),(1612,'article','1',0,'114.255.239.101','2019-09-02 14:38:11'),(1613,'article','1',0,'114.255.239.101','2019-09-02 14:38:11'),(1614,'article','1',0,'114.255.239.101','2019-09-02 14:38:11'),(1615,'article','1',0,'114.255.239.101','2019-09-02 14:38:11'),(1616,'article','1',0,'114.255.239.101','2019-09-02 14:38:11'),(1617,'article','1',0,'114.255.239.101','2019-09-02 14:38:11'),(1618,'article','1',0,'114.255.239.101','2019-09-02 14:38:12'),(1619,'article','1',0,'114.255.239.101','2019-09-02 14:38:12'),(1620,'article','1',0,'114.255.239.101','2019-09-02 14:38:12'),(1621,'article','1',0,'114.255.239.101','2019-09-02 14:38:12'),(1622,'article','1',0,'114.255.239.101','2019-09-02 14:38:13'),(1623,'article','1',0,'114.255.239.101','2019-09-02 14:38:13'),(1624,'article','1',0,'114.255.239.101','2019-09-02 14:38:13'),(1625,'article','37',0,'114.255.239.101','2019-09-02 14:38:19'),(1626,'article','36',0,'114.255.239.101','2019-09-02 14:38:21'),(1627,'article','36',0,'114.255.239.101','2019-09-02 14:38:21'),(1628,'article','36',0,'114.255.239.101','2019-09-02 14:38:21'),(1629,'article','36',0,'114.255.239.101','2019-09-02 14:38:22'),(1630,'article','36',0,'114.255.239.101','2019-09-02 14:38:22'),(1631,'article','36',0,'114.255.239.101','2019-09-02 14:38:22'),(1632,'article','36',0,'114.255.239.101','2019-09-02 14:38:22'),(1633,'article','36',0,'114.255.239.101','2019-09-02 14:38:22'),(1634,'article','36',0,'114.255.239.101','2019-09-02 14:38:23'),(1635,'article','36',0,'114.255.239.101','2019-09-02 14:38:23'),(1636,'article','36',0,'114.255.239.101','2019-09-02 14:38:23'),(1637,'article','36',0,'114.255.239.101','2019-09-02 14:38:23'),(1638,'article','36',0,'114.255.239.101','2019-09-02 14:38:23'),(1639,'article','36',0,'114.255.239.101','2019-09-02 14:38:24'),(1640,'article','36',0,'114.255.239.101','2019-09-02 14:38:24'),(1641,'article','36',0,'114.255.239.101','2019-09-02 14:38:24'),(1642,'article','36',0,'114.255.239.101','2019-09-02 14:38:24'),(1643,'article','36',0,'114.255.239.101','2019-09-02 14:38:24'),(1644,'article','36',0,'114.255.239.101','2019-09-02 14:38:25'),(1645,'article','36',0,'114.255.239.101','2019-09-02 14:38:25'),(1646,'article','36',0,'114.255.239.101','2019-09-02 14:38:25'),(1647,'article','36',0,'114.255.239.101','2019-09-02 14:38:25'),(1648,'article','36',0,'114.255.239.101','2019-09-02 14:38:25'),(1649,'article','36',0,'114.255.239.101','2019-09-02 14:38:26'),(1650,'article','36',0,'114.255.239.101','2019-09-02 14:38:26'),(1651,'article','36',0,'114.255.239.101','2019-09-02 14:38:26'),(1652,'article','36',0,'114.255.239.101','2019-09-02 14:38:26'),(1653,'article','36',0,'114.255.239.101','2019-09-02 14:38:26'),(1654,'article','36',0,'114.255.239.101','2019-09-02 14:38:27'),(1655,'article','36',0,'114.255.239.101','2019-09-02 14:38:27'),(1656,'article','36',0,'114.255.239.101','2019-09-02 14:38:27'),(1657,'article','36',0,'114.255.239.101','2019-09-02 14:38:27'),(1658,'article','36',0,'114.255.239.101','2019-09-02 14:38:28'),(1659,'article','36',1,'114.255.239.101','2019-09-02 14:38:28'),(1660,'article','36',0,'114.255.239.101','2019-09-02 14:38:28'),(1661,'article','36',0,'114.255.239.101','2019-09-02 14:38:28'),(1662,'article','36',0,'114.255.239.101','2019-09-02 14:38:28'),(1663,'article','36',0,'114.255.239.101','2019-09-02 14:38:29'),(1664,'article','36',0,'114.255.239.101','2019-09-02 14:38:29'),(1665,'article','36',0,'114.255.239.101','2019-09-02 14:38:29'),(1666,'article','36',0,'114.255.239.101','2019-09-02 14:38:29'),(1667,'article','36',0,'114.255.239.101','2019-09-02 14:38:29'),(1668,'article','36',0,'114.255.239.101','2019-09-02 14:38:30'),(1669,'article','36',0,'114.255.239.101','2019-09-02 14:38:30'),(1670,'article','36',0,'114.255.239.101','2019-09-02 14:38:30'),(1671,'article','36',0,'114.255.239.101','2019-09-02 14:38:30'),(1672,'article','36',0,'114.255.239.101','2019-09-02 14:38:30'),(1673,'article','36',0,'114.255.239.101','2019-09-02 14:38:31'),(1674,'article','36',0,'114.255.239.101','2019-09-02 14:38:31'),(1675,'article','36',0,'114.255.239.101','2019-09-02 14:38:31'),(1676,'article','36',0,'114.255.239.101','2019-09-02 14:38:31'),(1677,'article','36',0,'114.255.239.101','2019-09-02 14:38:33'),(1678,'article','36',0,'114.255.239.101','2019-09-02 14:38:33'),(1679,'article','36',0,'114.255.239.101','2019-09-02 14:38:33'),(1680,'article','36',0,'114.255.239.101','2019-09-02 14:38:33'),(1681,'article','36',0,'114.255.239.101','2019-09-02 14:38:34'),(1682,'article','36',0,'114.255.239.101','2019-09-02 14:38:34'),(1683,'article','36',0,'114.255.239.101','2019-09-02 14:38:34'),(1684,'article','36',0,'114.255.239.101','2019-09-02 14:38:34'),(1685,'article','36',0,'114.255.239.101','2019-09-02 14:38:34'),(1686,'article','36',0,'114.255.239.101','2019-09-02 14:38:35'),(1687,'article','36',0,'114.255.239.101','2019-09-02 14:38:35'),(1688,'article','36',0,'114.255.239.101','2019-09-02 14:38:35'),(1689,'article','36',0,'114.255.239.101','2019-09-02 14:38:35'),(1690,'article','36',0,'114.255.239.101','2019-09-02 14:38:38'),(1691,'article','36',0,'114.255.239.101','2019-09-02 14:38:38'),(1692,'article','36',0,'114.255.239.101','2019-09-02 14:38:38'),(1693,'article','36',0,'114.255.239.101','2019-09-02 14:38:39'),(1694,'article','36',0,'114.255.239.101','2019-09-02 14:38:39'),(1695,'article','36',0,'114.255.239.101','2019-09-02 14:38:39'),(1696,'article','36',0,'114.255.239.101','2019-09-02 14:38:40'),(1697,'article','36',0,'114.255.239.101','2019-09-02 14:38:40'),(1698,'article','36',0,'114.255.239.101','2019-09-02 14:38:40'),(1699,'article','36',0,'114.255.239.101','2019-09-02 14:38:41'),(1700,'article','36',0,'114.255.239.101','2019-09-02 14:38:43'),(1701,'article','36',0,'114.255.239.101','2019-09-02 14:38:43'),(1702,'article','36',0,'114.255.239.101','2019-09-02 14:38:43'),(1703,'article','36',0,'114.255.239.101','2019-09-02 14:38:43'),(1704,'article','36',0,'114.255.239.101','2019-09-02 14:38:43'),(1705,'article','36',0,'114.255.239.101','2019-09-02 14:38:44'),(1706,'article','36',0,'114.255.239.101','2019-09-02 14:38:44'),(1707,'article','36',0,'114.255.239.101','2019-09-02 14:38:44'),(1708,'article','36',0,'114.255.239.101','2019-09-02 14:38:44'),(1709,'article','1',0,'202.197.100.84','2019-09-02 14:58:31'),(1710,'article','1',0,'202.197.100.84','2019-09-02 14:58:32'),(1711,'article','1',0,'202.197.100.84','2019-09-02 14:58:33'),(1712,'article','1',0,'202.197.100.84','2019-09-02 14:58:34'),(1713,'article','1',0,'202.197.100.84','2019-09-02 14:58:34'),(1714,'article','1',0,'202.197.100.84','2019-09-02 14:58:34'),(1715,'article','1',0,'202.197.100.84','2019-09-02 14:58:34'),(1716,'article','1',0,'202.197.100.84','2019-09-02 14:58:34'),(1717,'article','1',0,'202.197.100.84','2019-09-02 14:58:34'),(1718,'article','1',0,'202.197.100.84','2019-09-02 14:58:35'),(1719,'article','1',0,'202.197.100.84','2019-09-02 14:58:35'),(1720,'article','1',0,'202.197.100.84','2019-09-02 14:58:35'),(1721,'article','1',0,'202.197.100.84','2019-09-02 14:58:35'),(1722,'article','1',0,'202.197.100.84','2019-09-02 14:58:35'),(1723,'article','1',0,'202.197.100.84','2019-09-02 14:58:36'),(1724,'article','1',0,'202.197.100.84','2019-09-02 14:58:36'),(1725,'article','1',0,'202.197.100.84','2019-09-02 14:58:36'),(1726,'article','1',0,'202.197.100.84','2019-09-02 14:58:36'),(1727,'article','1',0,'202.197.100.84','2019-09-02 14:58:36'),(1728,'article','1',0,'202.197.100.84','2019-09-02 14:58:37'),(1729,'article','1',0,'202.197.100.84','2019-09-02 14:58:37'),(1730,'article','1',0,'202.197.100.84','2019-09-02 14:58:37'),(1731,'article','1',0,'202.197.100.84','2019-09-02 14:58:37'),(1732,'article','1',0,'202.197.100.84','2019-09-02 14:58:37'),(1733,'article','1',0,'202.197.100.84','2019-09-02 14:58:37'),(1734,'article','1',0,'202.197.100.84','2019-09-02 14:58:37'),(1735,'article','1',0,'202.197.100.84','2019-09-02 14:58:38'),(1736,'article','1',0,'202.197.100.84','2019-09-02 14:58:38'),(1737,'article','1',0,'202.197.100.84','2019-09-02 14:58:38'),(1738,'article','1',0,'202.197.100.84','2019-09-02 14:58:38'),(1739,'article','1',0,'202.197.100.84','2019-09-02 14:58:38'),(1740,'article','1',0,'202.197.100.84','2019-09-02 14:58:38'),(1741,'article','1',0,'202.197.100.84','2019-09-02 14:58:39'),(1742,'article','1',0,'202.197.100.84','2019-09-02 14:58:39'),(1743,'article','1',0,'202.197.100.84','2019-09-02 14:58:39'),(1744,'article','1',0,'202.197.100.84','2019-09-02 14:58:39'),(1745,'article','1',0,'202.197.100.84','2019-09-02 14:58:40'),(1746,'article','1',0,'202.197.100.84','2019-09-02 14:58:40'),(1747,'article','1',0,'202.197.100.84','2019-09-02 14:58:40'),(1748,'article','1',1,'202.197.100.84','2019-09-02 14:58:41'),(1749,'article','1',0,'202.197.100.84','2019-09-02 14:58:41'),(1750,'article','1',0,'202.197.100.84','2019-09-02 14:58:41'),(1751,'article','1',0,'202.197.100.84','2019-09-02 14:58:41'),(1752,'article','1',0,'120.253.193.6','2019-09-03 15:03:27'),(1753,'article','1',0,'120.253.193.6','2019-09-03 21:06:08'),(1754,'article','1',0,'120.253.193.6','2019-09-03 21:06:08'),(1755,'article','1',0,'120.253.193.6','2019-09-03 21:06:08'),(1756,'article','1',0,'120.253.193.6','2019-09-03 21:06:08'),(1757,'article','1',0,'120.253.193.6','2019-09-03 21:06:09'),(1758,'article','1',0,'120.253.193.6','2019-09-03 21:06:09'),(1759,'article','1',0,'120.253.193.6','2019-09-03 21:06:09'),(1760,'article','1',0,'120.253.193.6','2019-09-03 21:06:09'),(1761,'article','1',0,'120.253.193.6','2019-09-03 21:06:10'),(1762,'article','1',0,'120.253.193.6','2019-09-03 21:06:10'),(1763,'article','1',0,'120.253.193.6','2019-09-03 21:06:10'),(1764,'article','1',0,'120.253.193.6','2019-09-03 21:06:10'),(1765,'article','1',0,'120.253.193.6','2019-09-03 21:06:11'),(1766,'article','1',0,'120.253.193.6','2019-09-03 21:06:11'),(1767,'article','1',0,'120.253.193.6','2019-09-03 21:06:11'),(1768,'article','1',0,'120.253.193.6','2019-09-03 21:06:12'),(1769,'article','1',0,'120.253.193.6','2019-09-03 21:06:12'),(1770,'article','1',0,'120.253.193.6','2019-09-03 21:06:12'),(1771,'article','1',0,'120.253.193.6','2019-09-03 21:06:13'),(1772,'article','40',0,'60.213.186.250','2019-09-04 19:24:04'),(1773,'article','40',0,'60.213.186.250','2019-09-04 19:24:06'),(1774,'article','40',0,'60.213.186.250','2019-09-04 19:24:06'),(1775,'article','40',0,'60.213.186.250','2019-09-04 19:24:07'),(1776,'article','40',0,'60.213.186.250','2019-09-04 19:24:07'),(1777,'article','40',0,'60.213.186.250','2019-09-04 19:24:07'),(1778,'article','40',0,'60.213.186.250','2019-09-04 19:24:08'),(1779,'article','40',0,'60.213.186.250','2019-09-04 19:24:08'),(1780,'article','40',0,'60.213.186.250','2019-09-04 19:24:10'),(1781,'article','40',0,'60.213.186.250','2019-09-04 19:24:10'),(1782,'article','40',0,'60.213.186.250','2019-09-04 19:24:10'),(1783,'article','40',0,'60.213.186.250','2019-09-04 19:24:10'),(1784,'article','40',0,'60.213.186.250','2019-09-04 19:24:11'),(1785,'article','40',0,'60.213.186.250','2019-09-04 19:24:11'),(1786,'article','40',0,'60.213.186.250','2019-09-04 19:24:11'),(1787,'article','40',0,'60.213.186.250','2019-09-04 19:24:11'),(1788,'article','40',0,'60.213.186.250','2019-09-04 19:24:11'),(1789,'article','40',0,'60.213.186.250','2019-09-04 19:24:12'),(1790,'article','40',0,'60.213.186.250','2019-09-04 19:24:12'),(1791,'article','40',0,'60.213.186.250','2019-09-04 19:24:24'),(1792,'article','40',0,'60.213.186.250','2019-09-04 19:24:25'),(1793,'article','40',0,'60.213.186.250','2019-09-04 19:24:25'),(1794,'article','40',0,'60.213.186.250','2019-09-04 19:24:25'),(1795,'article','40',0,'60.213.186.250','2019-09-04 19:24:25'),(1796,'article','40',0,'60.213.186.250','2019-09-04 19:24:26'),(1797,'article','40',0,'60.213.186.250','2019-09-04 19:24:29'),(1798,'article','40',0,'60.213.186.250','2019-09-04 19:24:29'),(1799,'article','40',0,'60.213.186.250','2019-09-04 19:24:29'),(1800,'article','40',0,'60.213.186.250','2019-09-04 19:24:30'),(1801,'article','40',0,'60.213.186.250','2019-09-04 19:24:30'),(1802,'article','40',0,'60.213.186.250','2019-09-04 19:24:30'),(1803,'article','40',0,'60.213.186.250','2019-09-04 19:24:30'),(1804,'article','40',0,'60.213.186.250','2019-09-04 19:24:30'),(1805,'article','40',0,'60.213.186.250','2019-09-04 19:24:30'),(1806,'article','40',0,'60.213.186.250','2019-09-04 19:24:31'),(1807,'article','40',0,'60.213.186.250','2019-09-04 19:24:31'),(1808,'article','40',0,'60.213.186.250','2019-09-04 19:24:31'),(1809,'article','40',0,'60.213.186.250','2019-09-04 19:24:31'),(1810,'article','40',0,'60.213.186.250','2019-09-04 19:24:31'),(1811,'article','40',0,'60.213.186.250','2019-09-04 19:24:31'),(1812,'article','40',0,'60.213.186.250','2019-09-04 19:24:32'),(1813,'article','40',0,'60.213.186.250','2019-09-04 19:24:32'),(1814,'article','40',0,'60.213.186.250','2019-09-04 19:24:32'),(1815,'article','40',0,'60.213.186.250','2019-09-04 19:24:32'),(1816,'article','40',0,'60.213.186.250','2019-09-04 19:24:32'),(1817,'article','40',0,'60.213.186.250','2019-09-04 19:24:32'),(1818,'article','40',0,'60.213.186.250','2019-09-04 19:24:33'),(1819,'article','40',0,'60.213.186.250','2019-09-04 19:24:33'),(1820,'article','40',0,'60.213.186.250','2019-09-04 19:24:33'),(1821,'article','40',1,'60.213.186.250','2019-09-04 19:24:33'),(1822,'article','40',0,'60.213.186.250','2019-09-04 19:24:33'),(1823,'article','40',0,'60.213.186.250','2019-09-04 19:24:33'),(1824,'article','40',0,'60.213.186.250','2019-09-04 19:24:34'),(1825,'article','40',0,'60.213.186.250','2019-09-04 19:24:34'),(1826,'article','40',0,'60.213.186.250','2019-09-04 19:24:34'),(1827,'article','40',0,'60.213.186.250','2019-09-04 19:24:34'),(1828,'article','40',0,'60.213.186.250','2019-09-04 19:24:34'),(1829,'article','40',0,'60.213.186.250','2019-09-04 19:24:34'),(1830,'article','40',0,'60.213.186.250','2019-09-04 19:24:35'),(1831,'article','40',0,'60.213.186.250','2019-09-04 19:24:35'),(1832,'article','40',0,'60.213.186.250','2019-09-04 19:24:35'),(1833,'article','40',0,'60.213.186.250','2019-09-04 19:24:35'),(1834,'article','40',0,'60.213.186.250','2019-09-04 19:24:35'),(1835,'article','40',0,'60.213.186.250','2019-09-04 19:24:36'),(1836,'article','40',0,'60.213.186.250','2019-09-04 19:24:36'),(1837,'article','40',0,'60.213.186.250','2019-09-04 19:24:36'),(1838,'article','40',0,'60.213.186.250','2019-09-04 19:24:36'),(1839,'article','40',0,'60.213.186.250','2019-09-04 19:24:38'),(1840,'article','40',0,'60.213.186.250','2019-09-04 19:24:38'),(1841,'article','40',0,'60.213.186.250','2019-09-04 19:24:38'),(1842,'article','40',0,'60.213.186.250','2019-09-04 19:24:39'),(1843,'article','40',0,'60.213.186.250','2019-09-04 19:24:39'),(1844,'article','40',0,'60.213.186.250','2019-09-04 19:24:39'),(1845,'article','40',0,'60.213.186.250','2019-09-04 19:24:39'),(1846,'article','40',0,'60.213.186.250','2019-09-04 19:24:39'),(1847,'article','40',0,'60.213.186.250','2019-09-04 19:24:40'),(1848,'article','40',0,'60.213.186.250','2019-09-04 19:24:40'),(1849,'article','40',0,'60.213.186.250','2019-09-04 19:24:40'),(1850,'article','40',0,'60.213.186.250','2019-09-04 19:24:40'),(1851,'article','40',0,'60.213.186.250','2019-09-04 19:24:40'),(1852,'article','40',0,'60.213.186.250','2019-09-04 19:24:41'),(1853,'article','40',0,'60.213.186.250','2019-09-04 19:24:41'),(1854,'article','40',0,'60.213.186.250','2019-09-04 19:24:51'),(1855,'article','40',0,'60.213.186.250','2019-09-04 19:24:51'),(1856,'article','40',0,'60.213.186.250','2019-09-04 19:24:51'),(1857,'article','40',0,'60.213.186.250','2019-09-04 19:24:51'),(1858,'book','1',0,'221.12.104.44','2019-09-05 09:08:47'),(1859,'article','1',0,'222.76.49.153','2019-09-05 10:56:54'),(1860,'article','41',0,'1.198.6.194','2019-09-07 17:29:20'),(1861,'article','41',0,'1.198.6.194','2019-09-07 17:29:24'),(1862,'article','41',0,'1.198.6.194','2019-09-07 17:36:42'),(1863,'article','41',0,'1.198.6.194','2019-09-07 17:36:45'),(1864,'article','1',0,'1.198.6.194','2019-09-07 17:42:38'),(1865,'article','1',0,'1.198.6.194','2019-09-07 17:42:44'),(1866,'article','1',0,'106.38.48.226','2019-09-16 13:40:22'),(1867,'article','1',0,'106.38.48.226','2019-09-16 13:40:23'),(1868,'article','1',0,'106.38.48.226','2019-09-16 13:40:24'),(1869,'article','1',0,'106.38.48.226','2019-09-16 13:40:26'),(1870,'article','1',0,'106.38.48.226','2019-09-16 13:40:27'),(1871,'article','40',0,'114.244.46.30','2019-09-16 15:26:48'),(1872,'article','40',0,'114.244.46.30','2019-09-16 15:26:49'),(1873,'article','43',0,'61.142.233.128','2019-09-19 11:59:02'),(1874,'article','43',0,'61.142.233.128','2019-09-19 13:36:21'),(1875,'article','42',0,'113.88.96.101','2019-09-19 20:49:56'),(1876,'article','46',0,'113.88.97.186','2019-09-22 13:30:11'),(1877,'article','45',0,'117.136.12.161','2019-09-22 16:23:54'),(1878,'article','1',0,'118.199.38.254','2019-09-24 22:32:18'),(1879,'article','1',0,'118.199.38.254','2019-09-24 22:32:19'),(1880,'article','1',0,'124.202.214.202','2019-09-26 16:59:13'),(1881,'article','1',0,'124.202.214.202','2019-09-26 16:59:14'),(1882,'article','46',0,'124.127.132.138','2019-09-27 11:13:28'),(1883,'article','1',0,'220.166.10.204','2019-10-04 11:49:04'),(1884,'article','1',0,'220.166.10.204','2019-10-04 11:49:07'),(1885,'article','1',0,'106.120.100.78','2019-10-08 12:40:55'),(1886,'article','1',0,'106.120.100.78','2019-10-08 12:40:57'),(1887,'article','1',0,'106.120.100.78','2019-10-08 12:40:57'),(1888,'article','1',0,'106.120.100.78','2019-10-08 12:40:58'),(1889,'article','1',0,'106.120.100.78','2019-10-08 12:40:58'),(1890,'article','1',0,'106.120.100.78','2019-10-08 12:40:59'),(1891,'article','1',0,'106.120.100.78','2019-10-08 12:40:59'),(1892,'article','1',0,'106.120.100.78','2019-10-08 12:40:59'),(1893,'article','1',0,'106.120.100.78','2019-10-08 12:40:59'),(1894,'article','1',1,'106.120.100.78','2019-10-08 12:41:00'),(1895,'article','1',0,'106.120.100.78','2019-10-08 12:41:00'),(1896,'article','46',0,'106.120.100.78','2019-10-08 12:41:06'),(1897,'article','46',0,'106.120.100.78','2019-10-08 12:41:06'),(1898,'article','46',0,'106.120.100.78','2019-10-08 12:41:06'),(1899,'article','46',0,'106.120.100.78','2019-10-08 12:41:07'),(1900,'article','4',0,'218.242.6.50','2019-10-08 13:20:54'),(1901,'article','4',0,'218.242.6.50','2019-10-08 13:20:55'),(1902,'article','4',0,'218.242.6.50','2019-10-08 13:20:57'),(1903,'article','46',0,'39.149.17.52','2019-10-08 21:13:39'),(1904,'article','46',0,'39.149.17.52','2019-10-08 21:13:40'),(1905,'article','46',0,'39.149.17.52','2019-10-08 21:13:43'),(1906,'article','46',0,'39.149.17.52','2019-10-08 21:13:44'),(1907,'article','46',0,'39.149.17.52','2019-10-08 21:13:45'),(1908,'article','46',0,'39.149.17.52','2019-10-08 21:13:46'),(1909,'article','46',0,'39.149.17.52','2019-10-08 21:13:46'),(1910,'article','46',0,'39.149.17.52','2019-10-08 21:13:46'),(1911,'article','46',0,'39.149.17.52','2019-10-08 21:13:47'),(1912,'article','46',0,'39.149.17.52','2019-10-08 21:13:47'),(1913,'article','46',0,'39.149.17.52','2019-10-08 21:13:48'),(1914,'article','46',0,'39.149.17.52','2019-10-08 21:13:48'),(1915,'article','46',0,'39.149.17.52','2019-10-08 21:13:49'),(1916,'article','46',0,'39.149.17.52','2019-10-08 21:13:50'),(1917,'article','46',0,'39.149.17.52','2019-10-08 21:13:50'),(1918,'article','46',0,'39.149.17.52','2019-10-08 21:13:51'),(1919,'article','46',0,'39.149.17.52','2019-10-08 21:13:51'),(1920,'article','46',0,'39.149.17.52','2019-10-08 21:13:52'),(1921,'article','1',0,'117.186.242.42','2019-10-09 16:04:55'),(1922,'article','1',0,'117.186.242.42','2019-10-09 16:04:57'),(1923,'article','1',0,'117.186.242.42','2019-10-09 16:04:59'),(1924,'article','1',0,'117.186.242.42','2019-10-09 16:04:59'),(1925,'article','1',0,'117.186.242.42','2019-10-09 16:05:00'),(1926,'article','1',0,'117.186.242.42','2019-10-09 16:05:00'),(1927,'article','1',1,'117.186.242.42','2019-10-09 16:05:00'),(1928,'article','1',0,'117.186.242.42','2019-10-09 16:05:00'),(1929,'article','1',0,'117.186.242.42','2019-10-09 16:05:00'),(1930,'article','1',0,'117.186.242.42','2019-10-09 16:05:01'),(1931,'article','1',0,'117.186.242.42','2019-10-09 16:05:01'),(1932,'article','1',0,'117.186.242.42','2019-10-09 16:05:01'),(1933,'article','1',0,'117.186.242.42','2019-10-09 16:05:01'),(1934,'article','1',0,'117.186.242.42','2019-10-09 16:05:01'),(1935,'article','1',0,'117.186.242.42','2019-10-09 16:05:01'),(1936,'article','1',0,'117.186.242.42','2019-10-09 16:05:02'),(1937,'article','1',0,'117.186.242.42','2019-10-09 16:05:02'),(1938,'article','1',0,'117.186.242.42','2019-10-09 16:05:02'),(1939,'article','1',0,'117.186.242.42','2019-10-09 16:05:02'),(1940,'article','1',0,'117.186.242.42','2019-10-09 16:05:02'),(1941,'article','1',0,'117.186.242.42','2019-10-09 16:05:02'),(1942,'article','1',0,'117.186.242.42','2019-10-09 16:05:03'),(1943,'article','1',0,'117.186.242.42','2019-10-09 16:05:03'),(1944,'article','1',0,'117.186.242.42','2019-10-09 16:05:03'),(1945,'article','1',0,'117.186.242.42','2019-10-09 16:05:03'),(1946,'article','1',0,'117.186.242.42','2019-10-09 16:05:08'),(1947,'article','1',0,'117.186.242.42','2019-10-09 16:05:08'),(1948,'article','1',0,'117.186.242.42','2019-10-09 16:05:09'),(1949,'article','1',0,'117.186.242.42','2019-10-09 16:05:09'),(1950,'article','1',0,'117.186.242.42','2019-10-09 16:05:09'),(1951,'article','1',0,'117.186.242.42','2019-10-09 16:05:09'),(1952,'article','1',0,'117.186.242.42','2019-10-09 16:05:10'),(1953,'article','1',0,'117.186.242.42','2019-10-09 16:05:10'),(1954,'article','1',0,'117.186.242.42','2019-10-09 16:05:10'),(1955,'article','1',0,'117.186.242.42','2019-10-09 16:05:10'),(1956,'article','1',0,'117.186.242.42','2019-10-09 16:05:10'),(1957,'article','1',0,'117.186.242.42','2019-10-09 16:05:10'),(1958,'article','1',0,'117.186.242.42','2019-10-09 16:05:11'),(1959,'article','1',0,'117.186.242.42','2019-10-09 16:05:11'),(1960,'article','1',0,'117.186.242.42','2019-10-09 16:05:11'),(1961,'article','1',0,'117.186.242.42','2019-10-09 16:05:11'),(1962,'article','1',0,'117.186.242.42','2019-10-09 16:05:11'),(1963,'article','1',0,'117.186.242.42','2019-10-09 16:05:11'),(1964,'article','1',0,'117.186.242.42','2019-10-09 16:05:12'),(1965,'article','1',0,'117.186.242.42','2019-10-09 16:05:12'),(1966,'article','1',0,'117.186.242.42','2019-10-09 16:05:12'),(1967,'article','1',0,'117.186.242.42','2019-10-09 16:05:12'),(1968,'article','1',0,'117.186.242.42','2019-10-09 16:05:12'),(1969,'article','1',0,'117.186.242.42','2019-10-09 16:05:13'),(1970,'article','1',0,'117.186.242.42','2019-10-09 16:05:13'),(1971,'article','1',0,'117.186.242.42','2019-10-09 16:05:13'),(1972,'article','1',0,'117.186.242.42','2019-10-09 16:05:14'),(1973,'article','1',0,'117.186.242.42','2019-10-09 16:05:14'),(1974,'article','1',0,'117.186.242.42','2019-10-09 16:05:42'),(1975,'article','1',0,'140.207.23.61','2019-10-09 21:59:29'),(1976,'article','1',0,'140.207.23.61','2019-10-09 21:59:30'),(1977,'article','1',0,'1.193.58.93','2019-10-10 14:57:18'),(1978,'article','1',0,'1.193.58.93','2019-10-10 14:57:20'),(1979,'article','46',0,'117.136.32.50','2019-10-11 14:33:23'),(1980,'article','46',0,'117.136.32.50','2019-10-11 14:33:25'),(1981,'article','1',0,'119.129.115.201','2019-10-11 17:55:34'),(1982,'article','1',0,'119.129.115.201','2019-10-11 17:55:35'),(1983,'article','1',0,'119.129.115.201','2019-10-11 17:55:35'),(1984,'article','1',0,'119.129.115.201','2019-10-11 17:55:36'),(1985,'article','1',0,'119.129.115.201','2019-10-11 17:55:36'),(1986,'article','1',0,'119.129.115.201','2019-10-11 17:55:36'),(1987,'article','1',0,'119.129.115.201','2019-10-11 17:55:36'),(1988,'article','1',0,'119.129.115.201','2019-10-11 17:55:37'),(1989,'article','1',0,'119.129.115.201','2019-10-11 17:55:39'),(1990,'article','1',0,'119.129.115.201','2019-10-11 17:55:39'),(1991,'article','1',0,'119.129.115.201','2019-10-11 17:55:40'),(1992,'article','1',0,'119.129.115.201','2019-10-11 17:55:40'),(1993,'article','1',0,'119.129.115.201','2019-10-11 17:55:40'),(1994,'article','1',0,'119.129.115.201','2019-10-11 17:55:41'),(1995,'article','1',0,'119.129.115.201','2019-10-11 17:55:45'),(1996,'article','1',0,'119.129.115.201','2019-10-11 17:55:53'),(1997,'article','1',0,'119.129.115.201','2019-10-11 17:56:03'),(1998,'article','47',0,'119.129.115.201','2019-10-11 17:56:20'),(1999,'article','47',0,'119.129.115.201','2019-10-11 17:56:34'),(2000,'article','47',0,'119.129.115.201','2019-10-11 17:56:35'),(2001,'article','47',0,'119.129.115.201','2019-10-11 17:56:35'),(2002,'article','47',0,'119.129.115.201','2019-10-11 17:56:35'),(2003,'article','47',0,'119.129.115.201','2019-10-11 17:56:36'),(2004,'article','47',0,'119.129.115.201','2019-10-11 17:56:36'),(2005,'article','47',0,'119.129.115.201','2019-10-11 17:56:36'),(2006,'article','47',0,'119.129.115.201','2019-10-11 17:56:36'),(2007,'article','47',0,'119.129.115.201','2019-10-11 17:56:36'),(2008,'article','47',0,'119.129.115.201','2019-10-11 17:56:38'),(2009,'article','47',0,'119.129.115.201','2019-10-11 17:56:39'),(2010,'article','1',0,'27.38.44.15','2019-10-11 22:32:33'),(2011,'article','1',0,'27.38.44.15','2019-10-11 22:32:34'),(2012,'article','1',0,'27.38.44.15','2019-10-11 22:32:34'),(2013,'article','1',0,'27.38.44.15','2019-10-11 22:32:35'),(2014,'article','1',0,'27.38.44.15','2019-10-11 22:32:35'),(2015,'article','1',0,'27.38.44.15','2019-10-11 22:32:35'),(2016,'article','1',0,'27.38.44.15','2019-10-11 22:32:35'),(2017,'article','1',0,'117.10.154.81','2019-10-16 23:14:18'),(2018,'article','1',0,'221.222.251.37','2019-10-17 00:39:31'),(2019,'article','1',0,'221.222.251.37','2019-10-17 00:39:35'),(2020,'article','1',0,'221.222.251.37','2019-10-17 00:39:36'),(2021,'article','1',0,'221.222.251.37','2019-10-17 00:39:36'),(2022,'article','1',0,'221.222.251.37','2019-10-17 00:39:36'),(2023,'article','1',0,'221.222.251.37','2019-10-17 00:39:37'),(2024,'article','1',0,'221.222.251.37','2019-10-17 00:39:37'),(2025,'article','1',0,'223.104.108.130','2019-10-17 08:50:01'),(2026,'article','1',0,'113.118.113.90','2019-10-17 22:54:54'),(2027,'article','1',0,'113.118.113.90','2019-10-17 22:54:55'),(2028,'article','49',0,'219.239.227.230','2019-10-22 12:45:03'),(2029,'article','49',0,'14.155.220.34','2019-10-22 20:44:30'),(2030,'article','1',0,'183.63.51.65','2019-10-23 20:14:16'),(2031,'article','50',0,'113.87.129.174','2019-10-23 23:25:07'),(2032,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:52'),(2033,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:53'),(2034,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:54'),(2035,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:54'),(2036,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:54'),(2037,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:55'),(2038,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:55'),(2039,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:55'),(2040,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:55'),(2041,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:55'),(2042,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:55'),(2043,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:56'),(2044,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:56'),(2045,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:56'),(2046,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:56'),(2047,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:56'),(2048,'bookNote','9',0,'27.155.247.170','2019-10-24 11:42:57'),(2049,'article','1',0,'171.34.223.59','2019-10-24 23:10:26'),(2050,'article','54',0,'119.123.135.225','2019-10-30 23:01:12'),(2051,'article','54',0,'119.123.135.226','2019-10-30 23:01:13'),(2052,'article','54',0,'113.88.134.198','2019-10-30 23:01:14'),(2053,'article','54',0,'119.123.135.225','2019-10-30 23:01:20'),(2054,'article','49',0,'183.136.182.141','2019-10-31 10:49:54'),(2055,'article','49',0,'183.136.182.141','2019-10-31 10:49:55'),(2056,'article','49',0,'183.136.182.141','2019-10-31 10:49:56'),(2057,'article','49',0,'183.136.182.141','2019-10-31 10:49:56'),(2058,'article','49',0,'183.136.182.141','2019-10-31 10:49:56'),(2059,'article','49',0,'183.136.182.141','2019-10-31 10:49:56'),(2060,'article','49',0,'183.136.182.141','2019-10-31 10:49:57'),(2061,'article','49',0,'183.136.182.141','2019-10-31 10:49:57'),(2062,'article','49',0,'183.136.182.141','2019-10-31 10:49:57'),(2063,'article','49',0,'183.136.182.141','2019-10-31 10:49:57'),(2064,'article','49',0,'183.136.182.141','2019-10-31 10:49:57'),(2065,'article','49',0,'183.136.182.141','2019-10-31 10:49:58'),(2066,'article','49',0,'183.136.182.141','2019-10-31 10:49:58'),(2067,'article','49',0,'183.136.182.141','2019-10-31 10:49:58'),(2068,'article','49',0,'183.136.182.141','2019-10-31 10:49:58'),(2069,'article','49',0,'183.136.182.141','2019-10-31 10:49:59'),(2070,'article','49',0,'183.136.182.141','2019-10-31 10:49:59'),(2071,'article','49',0,'183.136.182.141','2019-10-31 10:49:59'),(2072,'article','49',0,'183.136.182.141','2019-10-31 10:49:59'),(2073,'article','49',0,'183.136.182.141','2019-10-31 10:50:01'),(2074,'article','49',0,'183.136.182.141','2019-10-31 10:50:01'),(2075,'article','49',0,'183.136.182.141','2019-10-31 10:50:02'),(2076,'article','49',0,'183.136.182.141','2019-10-31 10:50:02'),(2077,'article','49',0,'183.136.182.141','2019-10-31 10:50:03'),(2078,'article','49',0,'183.136.182.141','2019-10-31 10:50:04'),(2079,'article','49',0,'183.136.182.141','2019-10-31 10:50:04'),(2080,'article','49',0,'183.136.182.141','2019-10-31 10:50:04'),(2081,'article','49',0,'183.136.182.141','2019-10-31 10:50:04'),(2082,'article','49',0,'183.136.182.141','2019-10-31 10:50:04'),(2083,'article','49',0,'183.136.182.141','2019-10-31 10:50:05'),(2084,'article','49',0,'183.136.182.141','2019-10-31 10:50:05'),(2085,'article','49',0,'183.136.182.141','2019-10-31 10:50:06'),(2086,'article','49',0,'183.136.182.141','2019-10-31 10:50:06'),(2087,'article','49',0,'183.136.182.141','2019-10-31 10:50:06'),(2088,'article','49',0,'183.136.182.141','2019-10-31 10:50:32'),(2089,'article','49',0,'183.136.182.141','2019-10-31 10:50:33'),(2090,'article','49',0,'183.136.182.141','2019-10-31 10:50:34'),(2091,'article','49',0,'183.136.182.141','2019-10-31 10:50:34'),(2092,'article','49',0,'183.136.182.141','2019-10-31 10:50:35'),(2093,'article','49',0,'183.136.182.141','2019-10-31 10:50:35'),(2094,'article','49',0,'183.136.182.141','2019-10-31 10:50:35'),(2095,'article','49',0,'183.136.182.141','2019-10-31 10:50:36'),(2096,'article','49',0,'183.136.182.141','2019-10-31 10:50:36'),(2097,'article','49',0,'183.136.182.141','2019-10-31 10:50:37'),(2098,'article','49',0,'183.136.182.141','2019-10-31 10:50:38'),(2099,'article','49',1,'183.136.182.141','2019-10-31 10:50:39'),(2100,'article','49',0,'183.136.182.141','2019-10-31 10:50:40'),(2101,'article','49',0,'183.136.182.141','2019-10-31 10:50:41'),(2102,'article','49',0,'183.136.182.141','2019-10-31 10:50:41'),(2103,'article','49',0,'183.136.182.141','2019-10-31 10:50:42'),(2104,'article','49',0,'183.136.182.141','2019-10-31 10:50:43'),(2105,'article','49',0,'183.136.182.141','2019-10-31 10:50:43'),(2106,'article','49',0,'183.136.182.141','2019-10-31 10:51:49'),(2107,'article','49',0,'183.136.182.141','2019-10-31 10:51:49'),(2108,'article','49',0,'183.136.182.141','2019-10-31 10:51:50'),(2109,'article','49',0,'183.136.182.141','2019-10-31 10:51:51'),(2110,'article','49',0,'183.136.182.141','2019-10-31 10:51:51'),(2111,'article','49',0,'183.136.182.141','2019-10-31 10:51:52'),(2112,'article','49',0,'183.136.182.141','2019-10-31 10:51:57'),(2113,'article','49',0,'183.136.182.141','2019-10-31 10:51:58'),(2114,'article','49',0,'183.136.182.141','2019-10-31 10:51:58'),(2115,'article','49',0,'183.136.182.141','2019-10-31 10:51:59'),(2116,'article','49',0,'183.136.182.141','2019-10-31 10:51:59'),(2117,'article','49',0,'183.136.182.141','2019-10-31 10:52:00'),(2118,'article','49',0,'183.136.182.141','2019-10-31 10:52:01'),(2119,'article','49',0,'183.136.182.141','2019-10-31 10:52:01'),(2120,'article','49',0,'183.136.182.141','2019-10-31 10:52:02'),(2121,'article','49',0,'183.136.182.141','2019-10-31 10:52:02'),(2122,'article','49',0,'183.136.182.141','2019-10-31 10:52:03'),(2123,'article','49',0,'183.136.182.141','2019-10-31 10:52:04'),(2124,'article','49',0,'183.136.182.141','2019-10-31 10:52:04'),(2125,'article','49',0,'183.136.182.141','2019-10-31 10:52:05'),(2126,'article','49',0,'183.136.182.141','2019-10-31 10:52:06'),(2127,'article','4',0,'210.56.192.130','2019-11-02 14:32:32'),(2128,'article','4',0,'210.56.192.130','2019-11-02 14:32:35'),(2129,'article','4',0,'210.56.192.130','2019-11-02 14:32:37'),(2130,'article','52',0,'112.97.56.107','2019-11-03 14:25:32'),(2131,'article','51',0,'112.97.56.107','2019-11-03 14:25:33'),(2132,'article','51',0,'112.97.56.107','2019-11-03 14:25:33'),(2133,'article','51',0,'112.97.56.107','2019-11-03 14:25:33'),(2134,'article','54',0,'112.97.56.107','2019-11-03 14:26:51'),(2135,'article','54',0,'112.97.56.107','2019-11-03 14:26:51'),(2136,'article','54',0,'112.97.56.107','2019-11-03 14:26:51'),(2137,'article','54',0,'112.97.56.107','2019-11-03 14:26:51'),(2138,'article','54',0,'210.35.68.10','2019-11-04 16:33:57'),(2139,'article','54',0,'210.35.68.10','2019-11-04 16:33:58'),(2140,'article','54',0,'210.35.68.10','2019-11-04 16:33:58'),(2141,'article','54',0,'210.35.68.10','2019-11-04 16:33:59'),(2142,'bookNote','3',0,'117.136.38.144','2019-11-05 16:58:34'),(2143,'article','11',0,'117.136.38.144','2019-11-05 17:00:45'),(2144,'article','52',0,'117.136.38.144','2019-11-06 10:23:29'),(2145,'article','50',0,'117.136.38.144','2019-11-06 10:23:43'),(2146,'article','13',0,'117.136.38.144','2019-11-06 15:30:14'),(2147,'article','13',0,'117.136.38.144','2019-11-06 16:01:05'),(2148,'article','40',0,'117.136.38.144','2019-11-06 16:13:22'),(2149,'article','40',0,'117.136.38.144','2019-11-06 16:13:24'),(2150,'article','40',0,'117.136.38.144','2019-11-06 16:13:27'),(2151,'article','40',0,'117.136.38.144','2019-11-06 16:14:07'),(2152,'article','1',0,'117.136.38.144','2019-11-06 16:16:45'),(2153,'article','54',0,'218.69.11.110','2019-11-06 18:50:10'),(2154,'article','53',0,'27.38.28.203','2019-11-06 18:54:06'),(2155,'article','54',0,'124.64.17.156','2019-11-08 10:44:47'),(2156,'article','1',0,'182.138.104.53','2019-11-08 14:15:51'),(2157,'article','1',0,'182.138.104.53','2019-11-08 14:15:53'),(2158,'article','1',0,'182.138.104.53','2019-11-08 14:15:54'),(2159,'article','1',0,'1.202.237.218','2019-11-09 11:05:10'),(2160,'article','52',0,'113.88.63.166','2019-11-10 17:12:58'),(2161,'article','55',0,'117.136.39.208','2019-11-10 17:36:51'),(2162,'article','1',0,'59.56.82.157','2019-11-11 09:59:02'),(2163,'article','1',0,'59.56.82.157','2019-11-11 09:59:03'),(2164,'article','11',0,'112.64.233.189','2019-11-11 09:25:14'),(2165,'article','11',0,'112.64.233.189','2019-11-11 09:25:15'),(2166,'article','11',0,'112.64.233.189','2019-11-11 09:25:16'),(2167,'article','11',0,'112.64.233.189','2019-11-11 09:25:16'),(2168,'article','11',0,'112.64.233.189','2019-11-11 09:25:17');
/*!40000 ALTER TABLE `log_like` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `log_view`
--

DROP TABLE IF EXISTS `log_view`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `log_view` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `type` varchar(50) DEFAULT NULL COMMENT '浏览类型',
  `method` varchar(200) DEFAULT NULL COMMENT '请求方法',
  `params` varchar(5000) DEFAULT NULL COMMENT '请求参数',
  `time` bigint(20) NOT NULL COMMENT '执行时长(毫秒)',
  `ip` varchar(64) DEFAULT NULL COMMENT 'IP地址',
  `create_date` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8658 DEFAULT CHARSET=utf8mb4 COMMENT='阅读日志';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `log_view`
--

LOCK TABLES `log_view` WRITE;
/*!40000 ALTER TABLE `log_view` DISABLE KEYS */;
INSERT INTO `log_view` VALUES (1,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',20,'1.207.110.28','2019-03-04 18:29:39'),(2,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'223.104.63.173','2019-03-04 18:32:50'),(3,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.39.94','2019-03-04 19:07:52'),(4,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.136.39.94','2019-03-04 19:08:16'),(5,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',12,'117.136.39.94','2019-03-04 19:08:51'),(6,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',9,'171.8.200.3','2019-03-04 20:40:32'),(7,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',438,'171.8.200.3','2019-03-04 20:40:45'),(8,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'42.236.10.78','2019-03-04 20:41:03'),(9,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'171.8.200.3','2019-03-04 20:42:32'),(10,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1077,'171.8.200.3','2019-03-04 20:43:13'),(11,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.26','2019-03-04 20:47:16'),(12,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',34,'223.104.63.26','2019-03-04 20:47:55'),(13,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'117.136.66.149','2019-03-04 21:33:47'),(14,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.15.181.132','2019-03-04 21:51:51'),(15,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.68.36','2019-03-04 21:55:37'),(16,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'183.15.181.132','2019-03-04 23:13:44'),(17,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',9,'183.15.181.132','2019-03-04 23:15:13'),(18,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'183.15.181.132','2019-03-04 23:15:52'),(19,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'183.15.181.132','2019-03-04 23:16:51'),(20,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'183.15.181.132','2019-03-04 23:17:59'),(21,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'183.15.181.132','2019-03-04 23:18:23'),(22,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'183.15.181.132','2019-03-04 23:21:15'),(23,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'183.15.181.132','2019-03-04 23:48:29'),(24,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',5,'183.15.181.132','2019-03-04 23:48:38'),(25,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',11,'183.57.53.177','2019-03-05 01:05:17'),(26,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'117.173.134.175','2019-03-05 07:21:49'),(27,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',22,'117.152.246.182','2019-03-05 09:40:43'),(28,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',20,'117.152.246.182','2019-03-05 09:41:00'),(29,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',7,'117.152.246.182','2019-03-05 09:41:28'),(30,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.152.246.182','2019-03-05 09:44:36'),(31,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',25,'14.157.175.204','2019-03-05 10:27:43'),(32,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'117.136.8.250','2019-03-05 10:38:41'),(33,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',20,'183.63.51.77','2019-03-05 11:45:35'),(34,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'183.63.51.77','2019-03-05 11:45:58'),(35,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-03-05 11:48:08'),(36,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'183.63.51.77','2019-03-05 12:15:41'),(37,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',31,'183.63.51.77','2019-03-05 13:00:56'),(38,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',11,'183.63.51.77','2019-03-05 13:03:41'),(39,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',7,'183.63.51.77','2019-03-05 13:04:25'),(40,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',10,'183.63.51.77','2019-03-05 13:38:02'),(41,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',10,'183.63.51.77','2019-03-05 13:38:39'),(42,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.173.82.242','2019-03-05 14:58:43'),(43,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',16,'36.61.73.117','2019-03-05 15:08:24'),(44,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'36.61.73.117','2019-03-05 15:10:33'),(45,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'117.136.38.184','2019-03-05 15:39:42'),(46,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',21,'202.197.112.15','2019-03-05 15:54:11'),(47,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',228,'183.63.51.77','2019-03-05 16:17:34'),(48,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.118.187.14','2019-03-05 16:24:32'),(49,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',28,'43.250.201.49','2019-03-05 16:32:51'),(50,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.96.241.9','2019-03-05 17:36:50'),(51,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'112.96.241.9','2019-03-05 17:38:52'),(52,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.34.24','2019-03-05 17:50:09'),(53,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1017,'223.104.34.24','2019-03-05 17:50:43'),(54,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.25.43.27','2019-03-05 17:51:31'),(55,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',10,'183.63.51.77','2019-03-05 18:24:40'),(56,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'124.89.107.18','2019-03-05 18:25:06'),(57,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',16,'42.236.10.114','2019-03-05 18:25:42'),(58,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'223.104.63.180','2019-03-05 18:25:58'),(59,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',21,'125.119.77.31','2019-03-05 18:58:45'),(60,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'125.119.77.31','2019-03-05 18:58:53'),(61,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'171.212.125.227','2019-03-05 19:13:48'),(62,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'36.61.185.143','2019-03-05 19:36:58'),(63,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'1.204.145.245','2019-03-05 20:04:12'),(64,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',5,'1.204.145.245','2019-03-05 20:05:56'),(65,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.204.145.245','2019-03-05 20:06:47'),(66,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'220.112.125.237','2019-03-05 20:38:37'),(67,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',13,'220.112.124.180','2019-03-05 20:44:59'),(68,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'183.57.53.177','2019-03-05 20:45:42'),(69,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'182.151.254.100','2019-03-05 20:57:55'),(70,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',22,'119.130.228.216','2019-03-05 22:19:16'),(71,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'119.130.228.216','2019-03-05 22:19:32'),(72,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'119.130.228.216','2019-03-05 22:19:35'),(73,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'116.22.54.41','2019-03-05 22:20:02'),(74,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.244.106.68','2019-03-05 22:22:12'),(75,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.244.106.68','2019-03-05 22:22:29'),(76,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'120.244.106.68','2019-03-05 22:22:34'),(77,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'120.244.106.68','2019-03-05 22:22:51'),(78,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'221.130.110.242','2019-03-05 22:23:15'),(79,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',13,'116.22.54.41','2019-03-05 22:36:18'),(80,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'42.236.10.117','2019-03-05 22:36:39'),(81,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'157.230.163.100','2019-03-05 22:41:46'),(82,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'153.3.215.67','2019-03-06 00:28:32'),(83,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',12,'60.1.206.18','2019-03-06 00:40:22'),(84,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'60.1.206.18','2019-03-06 00:41:59'),(85,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'183.57.53.177','2019-03-06 01:15:45'),(86,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.211.241','2019-03-06 08:01:01'),(87,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.211.241','2019-03-06 08:05:05'),(88,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'123.139.85.130','2019-03-06 08:38:13'),(89,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'123.139.85.130','2019-03-06 08:39:03'),(90,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'117.136.0.181','2019-03-06 08:43:18'),(91,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'123.139.85.130','2019-03-06 08:48:03'),(92,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.120.127.11','2019-03-06 09:24:18'),(93,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'106.120.127.11','2019-03-06 09:25:15'),(94,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',11,'183.63.51.77','2019-03-06 12:17:34'),(95,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2,'183.63.51.77','2019-03-06 12:19:13'),(96,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-06 12:21:05'),(97,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2,'183.63.51.77','2019-03-06 12:26:16'),(98,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2,'183.63.51.77','2019-03-06 12:32:46'),(99,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'106.120.127.11','2019-03-06 14:48:19'),(100,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'223.104.170.14','2019-03-06 19:35:42'),(101,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'58.100.51.153','2019-03-06 20:46:53'),(102,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.100.51.153','2019-03-06 20:52:08'),(103,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'112.17.247.5','2019-03-06 21:55:16'),(104,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2,'183.209.32.4','2019-03-06 22:52:04'),(105,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'219.134.114.23','2019-03-07 08:33:05'),(106,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.134.114.23','2019-03-07 08:37:14'),(107,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.107.208.164','2019-03-07 11:50:24'),(108,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',1,'202.107.208.164','2019-03-07 11:51:33'),(109,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'123.139.81.191','2019-03-07 12:24:47'),(110,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',1,'123.139.81.191','2019-03-07 12:27:03'),(111,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'183.63.51.77','2019-03-07 12:32:28'),(112,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',14,'183.63.51.77','2019-03-07 12:39:33'),(113,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'183.63.51.77','2019-03-07 12:53:47'),(114,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'183.63.51.77','2019-03-07 13:01:33'),(115,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'111.18.94.128','2019-03-07 13:34:42'),(116,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',206,'183.63.51.77','2019-03-07 15:22:35'),(117,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.96.193.44','2019-03-08 02:08:06'),(118,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',5,'117.136.12.166','2019-03-08 11:17:13'),(119,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.12.166','2019-03-08 11:17:57'),(120,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',1,'117.136.12.166','2019-03-08 11:18:17'),(121,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2,'183.63.51.77','2019-03-08 15:38:20'),(122,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'183.63.51.77','2019-03-08 15:38:33'),(123,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-03-08 15:38:52'),(124,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-03-08 15:38:55'),(125,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.246.192.154','2019-03-08 17:44:55'),(126,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'113.246.192.154','2019-03-08 18:02:50'),(127,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'223.104.212.32','2019-03-08 20:43:31'),(128,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'36.157.162.189','2019-03-09 00:37:34'),(129,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'153.3.114.218','2019-03-09 10:48:39'),(130,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'113.88.99.50','2019-03-09 15:07:53'),(131,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',48,'0:0:0:0:0:0:0:1','2019-03-09 16:58:45'),(132,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',30,'0:0:0:0:0:0:0:1','2019-03-09 17:01:16'),(133,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',26,'0:0:0:0:0:0:0:1','2019-03-09 17:08:38'),(134,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',27,'0:0:0:0:0:0:0:1','2019-03-09 17:09:49'),(135,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',41,'222.173.10.194','2019-03-09 19:19:17'),(136,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',270,'113.88.99.70','2019-03-09 19:25:28'),(137,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',34,'42.248.51.250','2019-03-10 03:23:18'),(138,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'113.88.99.70','2019-03-10 12:01:57'),(139,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',8,'113.88.99.70','2019-03-10 12:02:02'),(140,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',32,'113.88.99.70','2019-03-10 12:02:18'),(141,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'113.88.99.70','2019-03-10 12:07:29'),(142,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',75,'113.88.99.70','2019-03-10 12:07:34'),(143,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'113.88.99.70','2019-03-10 12:08:38'),(144,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',13,'113.88.99.70','2019-03-10 12:08:52'),(145,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'113.88.99.70','2019-03-10 13:32:00'),(146,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',6,'113.88.99.70','2019-03-10 15:27:37'),(147,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',2,'113.88.99.70','2019-03-10 15:28:45'),(148,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'113.88.99.70','2019-03-10 15:29:51'),(149,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',7,'113.88.99.70','2019-03-10 15:30:56'),(150,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',17,'113.88.99.70','2019-03-10 15:32:35'),(151,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',6,'113.88.99.70','2019-03-10 15:33:12'),(152,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'113.88.99.70','2019-03-10 15:49:06'),(153,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2,'183.57.53.177','2019-03-10 16:02:38'),(154,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',242,'110.184.50.43','2019-03-10 16:56:19'),(155,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.163.220.5','2019-03-10 16:56:51'),(156,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'14.28.21.197','2019-03-10 16:59:21'),(157,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'14.28.21.197','2019-03-10 16:59:35'),(158,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',221,'113.88.99.70','2019-03-10 16:59:58'),(159,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',5,'180.89.98.155','2019-03-10 17:00:06'),(160,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'101.206.168.17','2019-03-10 17:46:24'),(161,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.206.168.17','2019-03-10 17:48:13'),(162,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',21,'101.206.168.17','2019-03-10 17:48:44'),(163,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.205.212.84','2019-03-10 17:54:16'),(164,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'124.205.212.84','2019-03-10 17:54:57'),(165,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',34,'117.21.5.13','2019-03-10 18:00:59'),(166,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',1,'117.21.5.13','2019-03-10 18:01:18'),(167,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'117.21.5.13','2019-03-10 18:01:47'),(168,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'117.136.64.89','2019-03-10 18:22:37'),(169,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'14.25.40.242','2019-03-10 18:29:51'),(170,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'14.25.40.242','2019-03-10 18:29:59'),(171,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'113.129.171.212','2019-03-10 18:53:00'),(172,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',425,'113.129.171.212','2019-03-10 18:53:17'),(173,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'112.17.240.187','2019-03-10 18:53:36'),(174,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'113.129.171.212','2019-03-10 18:53:37'),(175,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',427,'183.92.250.32','2019-03-10 18:57:40'),(176,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',457,'183.92.250.32','2019-03-10 18:57:46'),(177,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'183.92.250.32','2019-03-10 18:59:28'),(178,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.140.51','2019-03-10 19:09:39'),(179,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'58.22.113.61','2019-03-10 20:46:12'),(180,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',35,'58.22.113.61','2019-03-10 20:47:43'),(181,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'117.136.39.100','2019-03-10 22:08:11'),(182,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',23,'223.104.187.69','2019-03-10 22:09:59'),(183,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'223.104.187.69','2019-03-10 22:10:39'),(184,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.178.239.44','2019-03-10 22:12:02'),(185,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'59.174.64.224','2019-03-10 22:24:43'),(186,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',28,'59.174.64.224','2019-03-10 22:25:48'),(187,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'114.231.220.97','2019-03-10 22:57:24'),(188,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'42.236.10.78','2019-03-10 22:57:51'),(189,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'113.116.140.51','2019-03-11 00:40:16'),(190,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',19,'1.119.133.62','2019-03-11 10:48:48'),(191,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.103.214.149','2019-03-11 11:54:01'),(192,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',8,'119.103.214.149','2019-03-11 11:54:43'),(193,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'119.103.214.149','2019-03-11 11:54:56'),(194,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',15,'119.103.214.149','2019-03-11 11:56:28'),(195,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.233.114.133','2019-03-11 12:40:15'),(196,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'123.233.114.133','2019-03-11 12:40:42'),(197,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'123.233.114.133','2019-03-11 12:44:02'),(198,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'123.233.114.133','2019-03-11 12:46:26'),(199,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'183.63.51.77','2019-03-11 13:01:29'),(200,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',6,'183.63.51.77','2019-03-11 13:03:41'),(201,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',16,'183.63.51.77','2019-03-11 14:14:57'),(202,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'101.88.184.77','2019-03-11 14:54:54'),(203,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',232,'101.88.188.132','2019-03-11 14:55:35'),(204,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'110.249.185.43','2019-03-11 15:53:42'),(205,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'110.249.185.43','2019-03-11 15:54:45'),(206,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'110.249.185.43','2019-03-11 15:56:15'),(207,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'113.201.55.242','2019-03-11 16:03:39'),(208,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',13,'61.140.238.173','2019-03-11 16:28:59'),(209,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'113.67.73.137','2019-03-11 16:29:23'),(210,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.67.74.117','2019-03-11 16:29:39'),(211,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'220.189.223.178','2019-03-11 16:44:19'),(212,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'220.189.223.178','2019-03-11 16:45:02'),(213,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',668,'220.189.223.178','2019-03-11 16:45:57'),(214,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'183.67.63.190','2019-03-11 16:50:55'),(215,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'180.163.220.68','2019-03-11 17:04:54'),(216,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',232,'0:0:0:0:0:0:0:1','2019-03-11 20:04:58'),(217,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',81,'0:0:0:0:0:0:0:1','2019-03-11 20:05:08'),(218,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.97.204','2019-03-11 22:44:32'),(219,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'113.88.97.204','2019-03-11 22:45:17'),(220,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'218.26.55.108','2019-03-11 23:14:45'),(221,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',2,'223.104.213.47','2019-03-11 23:44:51'),(222,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'117.136.79.1','2019-03-12 00:27:10'),(223,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.79.1','2019-03-12 00:29:17'),(224,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'117.136.79.1','2019-03-12 00:30:08'),(225,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',7,'117.136.79.1','2019-03-12 00:30:13'),(226,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',7,'117.136.79.1','2019-03-12 00:31:54'),(227,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'183.57.53.177','2019-03-12 04:47:09'),(228,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'113.88.97.204','2019-03-12 07:37:48'),(229,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'183.63.51.77','2019-03-12 11:41:01'),(230,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'183.63.51.77','2019-03-12 11:44:30'),(231,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'219.133.170.76','2019-03-12 12:26:57'),(232,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'113.47.139.166','2019-03-12 12:49:57'),(233,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'183.63.51.77','2019-03-12 13:33:35'),(234,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-03-12 14:27:08'),(235,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'183.63.51.77','2019-03-12 17:47:19'),(236,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'116.21.92.12','2019-03-12 17:51:40'),(237,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'222.64.192.94','2019-03-12 17:53:08'),(238,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'222.64.192.94','2019-03-12 17:53:18'),(239,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.21.92.12','2019-03-12 17:53:20'),(240,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-03-12 17:54:01'),(241,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'223.71.238.110','2019-03-12 17:57:05'),(242,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-03-12 18:02:23'),(243,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',675,'58.33.212.82','2019-03-12 20:55:50'),(244,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'117.136.79.43','2019-03-12 20:56:58'),(245,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'117.136.79.43','2019-03-12 20:58:15'),(246,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'112.28.158.77','2019-03-12 23:33:04'),(247,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'112.28.158.77','2019-03-12 23:33:23'),(248,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.28.158.77','2019-03-12 23:34:33'),(249,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.28.158.77','2019-03-12 23:34:57'),(250,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'112.28.158.77','2019-03-12 23:35:01'),(251,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.28.158.77','2019-03-12 23:36:10'),(252,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.28.158.77','2019-03-12 23:36:16'),(253,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.28.158.77','2019-03-12 23:36:17'),(254,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'112.28.158.77','2019-03-12 23:36:22'),(255,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.28.158.77','2019-03-12 23:36:23'),(256,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'112.28.158.77','2019-03-12 23:37:21'),(257,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'59.108.36.225','2019-03-13 10:26:58'),(258,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',3,'183.237.178.8','2019-03-13 14:03:20'),(259,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'113.218.63.235','2019-03-13 20:08:53'),(260,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.218.63.235','2019-03-13 20:09:13'),(261,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'49.80.74.117','2019-03-13 20:14:12'),(262,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.82.123.74','2019-03-13 22:32:03'),(263,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'114.82.123.74','2019-03-13 22:33:01'),(264,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'114.82.123.74','2019-03-13 22:34:07'),(265,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',2,'114.82.123.74','2019-03-13 22:34:42'),(266,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',2,'114.82.123.74','2019-03-13 22:42:06'),(267,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',2,'117.136.40.231','2019-03-14 08:33:07'),(268,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','6',2,'121.9.226.234','2019-03-14 09:29:27'),(269,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'202.121.145.11','2019-03-14 10:31:35'),(270,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.191','2019-03-15 08:50:35'),(271,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'61.158.148.7','2019-03-16 14:18:01'),(272,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',634,'61.158.148.7','2019-03-16 14:18:27'),(273,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.20.121.144','2019-03-16 20:02:32'),(274,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'112.20.121.144','2019-03-16 20:02:52'),(275,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'112.20.121.144','2019-03-16 20:09:22'),(276,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'112.20.121.144','2019-03-16 20:09:44'),(277,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'42.196.137.219','2019-03-17 02:14:01'),(278,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',170,'0:0:0:0:0:0:0:1','2019-03-17 11:02:45'),(279,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',62,'0:0:0:0:0:0:0:1','2019-03-17 11:06:19'),(280,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',38,'0:0:0:0:0:0:0:1','2019-03-17 11:10:05'),(281,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',48,'183.15.182.152','2019-03-17 22:07:20'),(282,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.182.152','2019-03-17 23:02:31'),(283,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'183.15.182.152','2019-03-17 23:04:26'),(284,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',14,'112.97.61.8','2019-03-17 23:07:55'),(285,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',33,'112.97.61.8','2019-03-17 23:08:36'),(286,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',34,'183.15.182.152','2019-03-17 23:23:39'),(287,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'1.198.223.155','2019-03-17 23:29:39'),(288,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'1.198.223.155','2019-03-17 23:29:59'),(289,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',59,'1.198.223.155','2019-03-17 23:30:06'),(290,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',5,'1.198.223.155','2019-03-17 23:30:22'),(291,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',165,'183.15.182.152','2019-03-18 00:30:12'),(292,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',11,'183.57.53.177','2019-03-18 02:51:28'),(293,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',28,'218.108.33.165','2019-03-18 16:20:04'),(294,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',20,'117.136.79.118','2019-03-18 18:32:49'),(295,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',63,'183.63.51.77','2019-03-19 12:55:39'),(296,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'183.63.51.77','2019-03-19 13:06:24'),(297,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',8,'183.63.51.77','2019-03-19 13:42:44'),(298,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'183.63.51.77','2019-03-19 13:42:55'),(299,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'180.168.194.234','2019-03-19 14:12:19'),(300,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'180.168.194.234','2019-03-19 14:13:45'),(301,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',69,'180.168.194.234','2019-03-19 14:15:44'),(302,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',10,'180.168.194.234','2019-03-19 14:16:35'),(303,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',26,'117.136.52.231','2019-03-19 14:42:00'),(304,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'113.228.160.113','2019-03-19 19:46:06'),(305,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.18.128.188','2019-03-20 07:41:58'),(306,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',18,'117.136.12.165','2019-03-20 08:39:09'),(307,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-03-20 09:41:01'),(308,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',15,'183.63.51.77','2019-03-20 10:48:38'),(309,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',28,'183.63.51.77','2019-03-20 11:04:19'),(310,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-20 11:04:31'),(311,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',15,'183.251.21.248','2019-03-20 22:09:24'),(312,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'183.251.21.248','2019-03-20 22:14:10'),(313,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.251.21.248','2019-03-20 22:14:37'),(314,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.251.21.248','2019-03-20 22:14:43'),(315,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'183.251.21.248','2019-03-20 22:15:05'),(316,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'117.136.39.86','2019-03-21 19:27:53'),(317,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'117.136.39.86','2019-03-21 19:28:01'),(318,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'121.35.96.6','2019-03-21 21:27:49'),(319,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'121.35.96.6','2019-03-21 21:27:52'),(320,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.63.51.77','2019-03-22 11:43:11'),(321,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'183.63.51.77','2019-03-22 11:48:48'),(322,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',6,'183.63.51.77','2019-03-22 11:49:15'),(323,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',22,'183.63.51.77','2019-03-22 12:24:57'),(324,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',2319,'163.135.151.81','2019-03-22 16:30:01'),(325,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',5,'163.135.151.81','2019-03-22 16:30:06'),(326,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',13,'163.135.151.81','2019-03-22 16:30:29'),(327,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',10,'163.135.151.81','2019-03-22 16:31:00'),(328,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'163.135.151.81','2019-03-22 16:31:56'),(329,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',10,'157.230.163.100','2019-03-22 16:32:26'),(330,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'163.135.151.81','2019-03-22 16:33:26'),(331,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',7,'223.71.249.142','2019-03-22 16:49:47'),(332,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'163.135.151.81','2019-03-22 17:20:31'),(333,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'163.135.151.81','2019-03-22 17:20:49'),(334,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'163.135.151.81','2019-03-22 17:21:33'),(335,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'163.135.151.81','2019-03-22 17:22:34'),(336,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.63.51.77','2019-03-22 17:57:50'),(337,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',18,'183.63.51.77','2019-03-22 18:38:49'),(338,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',46,'183.63.51.77','2019-03-22 18:40:51'),(339,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',24,'183.63.51.77','2019-03-22 18:41:06'),(340,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',27,'183.63.51.77','2019-03-22 18:41:11'),(341,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'183.63.51.77','2019-03-22 18:41:27'),(342,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',51,'171.8.203.62','2019-03-22 22:25:36'),(343,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',32,'117.136.79.165','2019-03-22 23:56:19'),(344,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',30,'112.28.158.112','2019-03-23 00:30:08'),(345,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'106.34.34.1','2019-03-23 07:22:02'),(346,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',4,'120.229.45.71','2019-03-24 11:25:31'),(347,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'61.131.28.226','2019-03-24 20:03:11'),(348,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',8,'61.165.126.175','2019-03-24 20:22:26'),(349,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'61.165.126.175','2019-03-24 20:22:47'),(350,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.63.51.77','2019-03-25 10:24:53'),(351,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.0.232','2019-03-25 10:34:51'),(352,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',20,'117.136.0.232','2019-03-25 10:35:00'),(353,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',29,'117.136.0.232','2019-03-25 10:36:47'),(354,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',16,'117.136.0.232','2019-03-25 10:37:03'),(355,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.142.114.74','2019-03-25 14:24:58'),(356,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'183.63.51.77','2019-03-26 13:50:40'),(357,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'36.61.247.240','2019-03-27 17:48:22'),(358,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'223.64.158.245','2019-03-28 16:13:36'),(359,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',6,'182.84.19.16','2019-03-28 17:15:22'),(360,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',28,'42.236.10.124','2019-03-28 17:15:32'),(361,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'64.104.125.224','2019-03-28 17:29:29'),(362,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'64.104.125.239','2019-03-29 09:04:07'),(363,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'64.104.125.239','2019-03-29 09:05:24'),(364,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'183.63.51.77','2019-03-29 10:12:16'),(365,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',68,'157.230.163.100','2019-03-29 11:23:34'),(366,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',20,'157.230.163.100','2019-03-29 11:30:56'),(367,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'183.57.53.177','2019-03-29 13:51:05'),(368,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',13,'183.63.51.77','2019-03-29 14:41:19'),(369,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',44,'183.63.51.77','2019-03-29 14:46:35'),(370,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-29 14:58:53'),(371,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-29 15:15:25'),(372,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-29 15:15:42'),(373,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-29 15:29:41'),(374,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'183.63.51.77','2019-03-29 15:31:32'),(375,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',13,'183.63.51.77','2019-03-29 15:32:07'),(376,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',14,'183.63.51.77','2019-03-29 15:32:40'),(377,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-29 16:05:17'),(378,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'183.63.51.77','2019-03-29 16:05:48'),(379,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'183.63.51.77','2019-03-29 16:06:11'),(380,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-29 16:06:12'),(381,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-29 16:35:22'),(382,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-29 16:36:00'),(383,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-29 16:36:46'),(384,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',12,'183.63.51.77','2019-03-29 16:38:58'),(385,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',18,'183.63.51.77','2019-03-29 16:56:41'),(386,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.77','2019-03-29 16:57:26'),(387,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',8,'218.70.255.237','2019-03-29 21:34:12'),(388,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'101.206.167.243','2019-03-30 13:05:25'),(389,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'101.206.167.243','2019-03-30 13:06:50'),(390,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.206.167.243','2019-03-30 13:07:10'),(391,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',38,'0:0:0:0:0:0:0:1','2019-03-30 13:14:33'),(392,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',22,'0:0:0:0:0:0:0:1','2019-03-30 13:38:17'),(393,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',90,'0:0:0:0:0:0:0:1','2019-03-30 13:46:17'),(394,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',25,'0:0:0:0:0:0:0:1','2019-03-30 13:47:35'),(395,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',22,'0:0:0:0:0:0:0:1','2019-03-30 13:50:43'),(396,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',22,'0:0:0:0:0:0:0:1','2019-03-30 13:51:54'),(397,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',33,'0:0:0:0:0:0:0:1','2019-03-30 13:54:34'),(398,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',26,'0:0:0:0:0:0:0:1','2019-03-30 13:55:25'),(399,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',25,'0:0:0:0:0:0:0:1','2019-03-30 13:58:26'),(400,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',23,'0:0:0:0:0:0:0:1','2019-03-30 14:01:16'),(401,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',23,'0:0:0:0:0:0:0:1','2019-03-30 14:03:02'),(402,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',20,'0:0:0:0:0:0:0:1','2019-03-30 14:04:54'),(403,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',62,'0:0:0:0:0:0:0:1','2019-03-30 14:05:51'),(404,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',32,'0:0:0:0:0:0:0:1','2019-03-30 14:07:24'),(405,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',67,'0:0:0:0:0:0:0:1','2019-03-30 14:09:29'),(406,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',38,'0:0:0:0:0:0:0:1','2019-03-30 14:10:04'),(407,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',40,'0:0:0:0:0:0:0:1','2019-03-30 14:11:35'),(408,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',49,'0:0:0:0:0:0:0:1','2019-03-30 14:12:25'),(409,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',31,'0:0:0:0:0:0:0:1','2019-03-30 14:13:29'),(410,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',37,'0:0:0:0:0:0:0:1','2019-03-30 14:13:43'),(411,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',35,'0:0:0:0:0:0:0:1','2019-03-30 14:15:14'),(412,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',95,'0:0:0:0:0:0:0:1','2019-03-30 14:15:47'),(413,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',31,'0:0:0:0:0:0:0:1','2019-03-30 14:16:10'),(414,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.88.98.141','2019-03-30 14:20:46'),(415,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',41,'113.88.98.141','2019-03-30 14:23:05'),(416,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',695,'113.88.98.141','2019-03-30 14:23:50'),(417,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'113.88.98.141','2019-03-30 14:28:36'),(418,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',654,'113.88.98.141','2019-03-30 14:41:35'),(419,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'113.88.98.141','2019-03-30 15:14:37'),(420,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'113.88.98.141','2019-03-30 16:14:44'),(421,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'113.88.98.141','2019-03-30 19:07:44'),(422,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',5,'113.88.98.141','2019-03-30 19:11:37'),(423,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'113.88.98.141','2019-03-30 19:12:17'),(424,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'113.88.98.141','2019-03-30 19:12:44'),(425,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'113.88.98.141','2019-03-30 19:23:31'),(426,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'113.88.98.141','2019-03-30 21:54:04'),(427,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.96.179','2019-03-31 10:36:35'),(428,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',13,'113.88.96.179','2019-03-31 10:56:21'),(429,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',3,'113.88.96.179','2019-03-31 16:53:54'),(430,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',3,'113.88.96.179','2019-03-31 17:17:06'),(431,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',654,'113.88.96.179','2019-03-31 17:53:35'),(432,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',867,'61.142.114.74','2019-03-31 20:47:29'),(433,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',23,'67.216.207.58','2019-03-31 20:56:08'),(434,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'113.88.98.255','2019-03-31 21:11:19'),(435,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',646,'113.88.98.255','2019-03-31 21:11:21'),(436,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',830,'117.136.40.223','2019-03-31 21:12:18'),(437,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',3,'113.88.98.255','2019-03-31 21:12:49'),(438,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.63.128','2019-04-01 01:12:02'),(439,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'180.163.220.68','2019-04-01 01:12:23'),(440,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',825,'223.104.63.128','2019-04-01 01:12:47'),(441,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',13,'42.236.10.117','2019-04-01 01:13:14'),(442,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'223.104.63.128','2019-04-01 01:14:13'),(443,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'42.236.10.106','2019-04-01 01:14:33'),(444,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'223.104.63.128','2019-04-01 01:21:14'),(445,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'180.163.220.5','2019-04-01 01:21:35'),(446,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',14,'223.104.63.128','2019-04-01 01:22:52'),(447,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'180.163.220.3','2019-04-01 01:23:14'),(448,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',37,'61.142.114.74','2019-04-01 09:08:06'),(449,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'64.104.125.230','2019-04-01 09:38:55'),(450,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'61.142.114.74','2019-04-01 10:43:06'),(451,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-04-01 16:15:35'),(452,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',6,'117.136.31.126','2019-04-01 16:36:29'),(453,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'218.17.197.218','2019-04-01 18:47:57'),(454,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'218.17.197.218','2019-04-01 18:48:40'),(455,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',8,'113.88.96.181','2019-04-01 23:44:02'),(456,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',4,'117.36.16.162','2019-04-01 23:47:39'),(457,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'175.188.180.71','2019-04-02 11:59:13'),(458,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'175.188.180.71','2019-04-02 11:59:30'),(459,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'175.188.180.71','2019-04-02 11:59:44'),(460,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'183.63.51.77','2019-04-02 17:28:01'),(461,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'183.63.51.77','2019-04-02 18:24:10'),(462,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'210.13.127.17','2019-04-02 19:23:53'),(463,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',9,'61.135.169.84','2019-04-02 19:40:01'),(464,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',993,'117.136.40.244','2019-04-02 20:07:05'),(465,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',6,'39.130.101.216','2019-04-02 21:03:06'),(466,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2067,'49.77.207.166','2019-04-02 22:14:59'),(467,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',865,'153.35.11.162','2019-04-02 22:44:25'),(468,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',10,'124.79.113.222','2019-04-02 23:34:27'),(469,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',7,'113.67.73.17','2019-04-03 00:10:28'),(470,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1032,'36.27.77.244','2019-04-03 00:41:16'),(471,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',433,'60.191.94.120','2019-04-03 08:39:15'),(472,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',6,'124.193.91.166','2019-04-03 09:08:38'),(473,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',640,'114.242.249.22','2019-04-03 09:21:17'),(474,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1091,'122.224.131.228','2019-04-03 09:34:26'),(475,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',8,'211.144.197.66','2019-04-03 09:56:27'),(476,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'140.207.113.90','2019-04-03 10:05:08'),(477,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',221,'106.39.118.132','2019-04-03 10:11:24'),(478,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'113.140.24.4','2019-04-03 10:14:03'),(479,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'114.244.37.38','2019-04-03 10:40:22'),(480,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',418,'121.35.189.37','2019-04-03 11:00:39'),(481,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',7,'135.245.48.86','2019-04-03 11:04:22'),(482,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2345,'113.140.82.86','2019-04-03 11:08:47'),(483,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',462,'113.204.9.70','2019-04-03 11:09:24'),(484,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',638,'211.144.197.66','2019-04-03 11:09:41'),(485,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',848,'115.236.44.178','2019-04-03 11:09:51'),(486,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'101.91.60.104','2019-04-03 11:10:49'),(487,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'218.81.86.192','2019-04-03 11:28:56'),(488,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'219.142.102.162','2019-04-03 12:57:03'),(489,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',3,'183.63.51.77','2019-04-03 12:58:31'),(490,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',3,'183.63.51.77','2019-04-03 13:33:56'),(491,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',78,'0:0:0:0:0:0:0:1','2019-04-03 14:27:54'),(492,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1485,'111.203.226.194','2019-04-03 14:33:04'),(493,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',844,'183.12.48.14','2019-04-03 14:48:16'),(494,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',3,'183.63.51.77','2019-04-03 14:51:43'),(495,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'113.110.225.118','2019-04-03 14:58:05'),(496,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.110.225.118','2019-04-03 14:58:46'),(497,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.110.225.118','2019-04-03 14:59:49'),(498,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.110.225.118','2019-04-03 15:00:44'),(499,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',665,'120.199.10.50','2019-04-03 15:41:52'),(500,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',206,'210.22.4.227','2019-04-03 16:25:34'),(501,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1088,'101.71.255.194','2019-04-03 17:24:56'),(502,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',431,'180.167.119.254','2019-04-03 17:30:05'),(503,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'60.191.0.169','2019-04-03 17:35:30'),(504,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'60.191.0.169','2019-04-03 17:40:35'),(505,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'223.93.174.216','2019-04-03 17:41:36'),(506,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'183.40.217.47','2019-04-03 18:08:37'),(507,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'111.161.250.201','2019-04-03 19:25:59'),(508,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',842,'180.164.114.70','2019-04-03 23:09:16'),(509,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',842,'124.227.201.172','2019-04-04 08:46:13'),(510,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',872,'219.141.157.33','2019-04-04 10:55:13'),(511,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',208,'116.24.96.75','2019-04-04 11:06:11'),(512,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.109.77.79','2019-04-04 12:01:56'),(513,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'113.109.77.79','2019-04-04 12:03:36'),(514,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'171.221.52.9','2019-04-04 12:51:07'),(515,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'180.112.180.182','2019-04-04 13:01:32'),(516,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'180.112.180.182','2019-04-04 13:01:53'),(517,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'171.8.70.61','2019-04-04 13:18:24'),(518,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'171.8.70.61','2019-04-04 13:18:45'),(519,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.8.70.61','2019-04-04 13:18:54'),(520,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.160.213.254','2019-04-04 14:07:34'),(521,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',4,'124.160.213.254','2019-04-04 14:09:02'),(522,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'60.191.0.169','2019-04-04 14:10:15'),(523,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'60.191.0.169','2019-04-04 14:10:31'),(524,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.8.70.61','2019-04-04 14:26:46'),(525,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'171.8.70.61','2019-04-04 14:30:41'),(526,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.160.213.254','2019-04-04 14:32:55'),(527,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'106.11.34.13','2019-04-04 15:37:07'),(528,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'59.109.158.106','2019-04-04 16:35:57'),(529,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'180.163.220.5','2019-04-04 16:37:30'),(530,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'222.128.6.202','2019-04-04 17:31:37'),(531,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.144.96.114','2019-04-04 22:37:28'),(532,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'61.144.96.114','2019-04-04 22:44:27'),(533,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',18,'113.116.51.157','2019-04-04 22:57:34'),(534,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1922,'115.60.61.73','2019-04-05 01:40:13'),(535,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2663,'180.163.220.5','2019-04-05 01:40:14'),(536,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'117.136.79.159','2019-04-05 16:39:06'),(537,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'123.139.41.250','2019-04-06 21:58:23'),(538,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',12,'113.87.225.177','2019-04-07 11:32:46'),(539,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',9,'119.123.78.177','2019-04-07 20:27:46'),(540,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'180.163.220.5','2019-04-07 20:27:51'),(541,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',4,'113.88.97.67','2019-04-07 21:41:44'),(542,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',4,'113.88.97.67','2019-04-07 21:43:20'),(543,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',41,'0:0:0:0:0:0:0:1','2019-04-07 21:47:22'),(544,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',119,'0:0:0:0:0:0:0:1','2019-04-07 21:49:42'),(545,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',84,'0:0:0:0:0:0:0:1','2019-04-07 22:04:32'),(546,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',58,'113.88.97.67','2019-04-07 22:22:21'),(547,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',895,'113.88.97.67','2019-04-07 22:22:47'),(548,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',30,'183.63.51.77','2019-04-08 11:53:10'),(549,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',28,'183.63.51.77','2019-04-08 11:53:21'),(550,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',7,'183.63.51.77','2019-04-08 12:47:35'),(551,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',13,'183.63.51.77','2019-04-08 12:47:43'),(552,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',893,'183.54.43.105','2019-04-08 13:25:46'),(553,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',227,'106.11.34.4','2019-04-08 13:41:17'),(554,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1519,'111.75.167.90','2019-04-08 14:15:32'),(555,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',291,'101.89.19.149','2019-04-08 14:16:30'),(556,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',19,'211.137.127.238','2019-04-08 15:01:50'),(557,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',222,'103.218.216.114','2019-04-08 16:33:42'),(558,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',468,'115.236.45.50','2019-04-08 16:48:24'),(559,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1068,'183.14.134.8','2019-04-08 16:52:32'),(560,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',57,'211.138.20.165','2019-04-08 17:23:23'),(561,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'211.138.20.165','2019-04-08 17:27:45'),(562,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'211.138.20.165','2019-04-08 17:30:00'),(563,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',11,'211.138.20.165','2019-04-08 17:32:14'),(564,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',14,'211.138.20.165','2019-04-08 17:34:21'),(565,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'211.138.20.165','2019-04-08 17:39:09'),(566,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'211.138.20.165','2019-04-08 17:47:08'),(567,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',15,'211.138.20.165','2019-04-08 17:47:31'),(568,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'211.138.20.165','2019-04-08 17:48:14'),(569,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',494,'211.138.20.165','2019-04-08 17:48:49'),(570,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',20,'211.138.20.165','2019-04-08 17:49:12'),(571,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',636,'116.24.67.227','2019-04-08 19:24:44'),(572,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',6,'61.135.169.84','2019-04-08 21:59:27'),(573,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.116.140.199','2019-04-08 23:40:47'),(574,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'115.60.61.92','2019-04-08 23:47:50'),(575,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',457,'113.116.140.200','2019-04-09 00:44:50'),(576,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',56,'103.218.216.127','2019-04-09 08:59:23'),(577,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',27,'183.63.51.77','2019-04-09 11:57:40'),(578,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',1572,'183.63.51.77','2019-04-09 11:59:00'),(579,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'183.63.51.77','2019-04-09 12:55:36'),(580,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',4,'183.63.51.77','2019-04-09 13:37:26'),(581,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',422,'110.184.114.169','2019-04-09 14:05:21'),(582,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',26,'110.184.114.169','2019-04-09 14:12:33'),(583,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',37,'110.184.114.169','2019-04-09 14:12:50'),(584,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',14,'183.63.51.77','2019-04-09 14:17:52'),(585,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-04-09 15:03:04'),(586,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1293,'111.21.32.154','2019-04-09 15:30:46'),(587,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1455,'199.116.169.254','2019-04-09 15:34:07'),(588,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2494,'27.223.76.242','2019-04-09 15:34:07'),(589,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',211,'111.198.88.242','2019-04-09 15:36:14'),(590,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',237,'124.235.252.218','2019-04-09 15:52:06'),(591,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',895,'124.235.252.218','2019-04-09 15:52:23'),(592,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',874,'124.235.252.218','2019-04-09 15:52:34'),(593,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.235.252.218','2019-04-09 15:53:19'),(594,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.235.252.218','2019-04-09 15:53:57'),(595,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',17,'183.63.51.77','2019-04-09 15:58:26'),(596,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'58.135.84.51','2019-04-09 16:00:49'),(597,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',16,'220.112.237.158','2019-04-09 16:29:37'),(598,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',13,'220.112.237.158','2019-04-09 16:29:45'),(599,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'220.112.237.158','2019-04-09 16:29:49'),(600,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'111.198.88.242','2019-04-09 16:41:08'),(601,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',54,'36.33.1.219','2019-04-09 17:36:23'),(602,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'36.33.1.219','2019-04-09 17:38:24'),(603,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'211.138.20.165','2019-04-09 18:02:14'),(604,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',21,'211.138.20.165','2019-04-09 18:02:31'),(605,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'220.178.112.44','2019-04-09 19:08:28'),(606,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'220.178.112.44','2019-04-09 19:10:10'),(607,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'220.178.112.44','2019-04-09 19:10:15'),(608,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'220.178.112.44','2019-04-09 19:10:49'),(609,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'220.178.112.44','2019-04-09 19:10:57'),(610,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'220.178.112.44','2019-04-09 19:11:04'),(611,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.91','2019-04-09 22:17:07'),(612,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',16,'183.15.183.91','2019-04-09 22:17:38'),(613,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'183.15.183.91','2019-04-09 23:23:34'),(614,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'183.15.183.91','2019-04-09 23:23:37'),(615,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.117.98','2019-04-10 09:09:51'),(616,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',28,'124.235.252.218','2019-04-10 09:20:21'),(617,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.235.252.218','2019-04-10 09:21:17'),(618,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',435,'124.235.252.218','2019-04-10 09:21:22'),(619,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'135.245.48.77','2019-04-10 10:40:40'),(620,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'183.63.51.77','2019-04-10 11:21:34'),(621,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',263,'183.63.51.77','2019-04-10 11:21:46'),(622,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',26,'183.63.51.77','2019-04-10 11:24:48'),(623,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'183.63.51.77','2019-04-10 11:25:05'),(624,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-04-10 11:25:14'),(625,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'135.245.48.77','2019-04-10 13:38:41'),(626,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',631,'183.63.51.77','2019-04-10 16:43:28'),(627,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'183.63.51.77','2019-04-10 16:43:48'),(628,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'110.184.114.169','2019-04-10 17:00:16'),(629,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'124.207.29.254','2019-04-10 17:55:22'),(630,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.207.29.254','2019-04-10 17:55:31'),(631,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',10,'122.193.33.86','2019-04-10 18:17:52'),(632,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'122.193.33.86','2019-04-10 18:21:29'),(633,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'122.193.33.86','2019-04-10 18:22:07'),(634,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',631,'122.193.33.86','2019-04-10 18:22:22'),(635,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.193.33.86','2019-04-10 18:22:33'),(636,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',125,'0:0:0:0:0:0:0:1','2019-04-10 19:02:33'),(637,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.73.61.90','2019-04-10 22:01:08'),(638,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'223.73.61.90','2019-04-10 22:02:50'),(639,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'122.192.44.245','2019-04-10 22:47:30'),(640,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'135.245.48.77','2019-04-11 09:20:52'),(641,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',124,'0:0:0:0:0:0:0:1','2019-04-11 09:24:37'),(642,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'116.24.98.156','2019-04-11 15:39:35'),(643,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',15,'39.161.242.49','2019-04-11 16:24:49'),(644,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',14,'39.161.242.49','2019-04-11 16:25:24'),(645,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'39.161.242.49','2019-04-11 16:25:56'),(646,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.138.253.159','2019-04-11 16:46:39'),(647,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'61.138.253.159','2019-04-11 16:46:49'),(648,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.184.115.28','2019-04-11 19:56:03'),(649,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.184.115.28','2019-04-11 19:59:38'),(650,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'61.184.115.28','2019-04-11 20:00:33'),(651,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'61.184.115.28','2019-04-11 20:00:49'),(652,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'113.88.99.94','2019-04-11 21:21:48'),(653,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',1042,'113.88.99.94','2019-04-11 21:31:24'),(654,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.88.99.94','2019-04-11 22:16:18'),(655,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'221.224.159.26','2019-04-12 13:31:21'),(656,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',6,'221.224.159.26','2019-04-12 13:31:22'),(657,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'221.224.159.26','2019-04-12 13:31:27'),(658,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'221.224.159.26','2019-04-12 13:31:30'),(659,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'221.224.159.26','2019-04-12 13:31:33'),(660,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.224.159.26','2019-04-12 13:48:35'),(661,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',12,'183.63.51.77','2019-04-12 13:53:10'),(662,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',3,'183.63.51.77','2019-04-12 13:53:29'),(663,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'49.65.109.231','2019-04-12 14:16:20'),(664,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'49.65.109.231','2019-04-12 14:17:05'),(665,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2,'135.245.48.86','2019-04-12 14:26:42'),(666,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',122,'0:0:0:0:0:0:0:1','2019-04-12 14:27:11'),(667,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',81,'0:0:0:0:0:0:0:1','2019-04-12 14:28:07'),(668,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',113,'0:0:0:0:0:0:0:1','2019-04-12 14:28:55'),(669,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',126,'0:0:0:0:0:0:0:1','2019-04-12 14:29:08'),(670,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',194,'0:0:0:0:0:0:0:1','2019-04-12 14:30:55'),(671,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'183.63.51.77','2019-04-12 14:39:15'),(672,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'183.63.51.77','2019-04-12 14:40:07'),(673,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.63.51.77','2019-04-12 15:49:29'),(674,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-04-12 15:49:34'),(675,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',4,'183.63.51.77','2019-04-12 16:54:07'),(676,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',424,'183.63.51.77','2019-04-12 16:54:42'),(677,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',3,'183.63.51.77','2019-04-12 17:03:41'),(678,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'140.207.155.74','2019-04-12 21:33:01'),(679,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'140.207.155.74','2019-04-12 21:33:43'),(680,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'140.207.155.74','2019-04-12 21:34:05'),(681,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',17,'123.150.43.2','2019-04-12 23:40:22'),(682,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'42.236.10.93','2019-04-12 23:40:42'),(683,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',16,'112.97.50.12','2019-04-13 10:36:05'),(684,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.97.54.12','2019-04-13 10:38:14'),(685,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.97.54.12','2019-04-13 10:38:22'),(686,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'112.97.54.12','2019-04-13 10:40:17'),(687,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.97.54.12','2019-04-13 10:41:19'),(688,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'113.88.98.147','2019-04-13 11:36:44'),(689,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'113.88.98.147','2019-04-13 12:20:24'),(690,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.88.98.147','2019-04-13 12:31:42'),(691,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',8,'121.254.78.188','2019-04-13 12:50:02'),(692,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',66,'112.97.54.12','2019-04-13 16:12:03'),(693,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'119.123.64.203','2019-04-13 17:35:28'),(694,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',453,'107.3.179.200','2019-04-13 23:43:31'),(695,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'113.88.97.101','2019-04-14 09:07:48'),(696,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',4,'112.0.58.25','2019-04-14 16:57:10'),(697,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'112.0.58.25','2019-04-14 16:57:31'),(698,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',1,'120.204.17.73','2019-04-14 16:58:10'),(699,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.204.17.71','2019-04-14 16:58:31'),(700,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.0.58.25','2019-04-14 18:47:24'),(701,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'210.47.175.248','2019-04-14 20:18:10'),(702,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'210.47.175.248','2019-04-14 20:49:29'),(703,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',9,'111.128.148.139','2019-04-14 22:31:55'),(704,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',219,'124.235.107.188','2019-04-15 07:44:26'),(705,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'120.42.128.95','2019-04-15 09:31:21'),(706,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',465,'119.145.82.208','2019-04-15 10:58:18'),(707,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'183.63.51.77','2019-04-15 15:24:16'),(708,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'210.47.175.248','2019-04-15 17:25:40'),(709,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'210.47.175.248','2019-04-15 17:27:43'),(710,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1079,'61.140.77.129','2019-04-15 20:15:28'),(711,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'116.21.93.224','2019-04-17 03:58:32'),(712,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'116.21.93.224','2019-04-17 03:58:49'),(713,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.21.93.224','2019-04-17 03:59:03'),(714,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'116.21.93.224','2019-04-17 04:02:30'),(715,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',112,'211.138.20.170','2019-04-17 10:12:49'),(716,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'183.63.51.77','2019-04-17 12:33:38'),(717,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'39.77.197.74','2019-04-17 22:25:19'),(718,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'39.77.197.74','2019-04-17 22:32:51'),(719,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.100.29.207','2019-04-17 22:51:23'),(720,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',5,'182.100.29.207','2019-04-17 22:51:39'),(721,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',893,'182.100.29.207','2019-04-17 22:51:44'),(722,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'123.144.96.94','2019-04-17 23:04:46'),(723,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'123.144.96.94','2019-04-17 23:05:01'),(724,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',877,'117.136.45.141','2019-04-17 23:05:13'),(725,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'117.136.45.141','2019-04-17 23:05:18'),(726,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',213,'27.38.28.219, 10.123.149.43','2019-04-17 23:08:05'),(727,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'113.68.108.237','2019-04-17 23:12:21'),(728,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'219.143.128.47','2019-04-17 23:14:01'),(729,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',211,'219.143.128.47','2019-04-17 23:14:30'),(730,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'42.236.10.93','2019-04-17 23:15:00'),(731,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1282,'120.36.227.163','2019-04-17 23:18:22'),(732,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',259,'120.36.227.163','2019-04-17 23:19:07'),(733,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',210,'1.80.91.139','2019-04-17 23:20:36'),(734,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',632,'112.32.92.21','2019-04-17 23:29:48'),(735,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'112.112.73.85','2019-04-17 23:30:39'),(736,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'112.112.73.85','2019-04-17 23:32:26'),(737,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.112.73.85','2019-04-17 23:32:44'),(738,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',447,'210.73.97.35','2019-04-17 23:33:19'),(739,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1460,'210.73.97.35','2019-04-17 23:34:02'),(740,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'27.38.127.144','2019-04-17 23:34:57'),(741,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.38.127.144','2019-04-17 23:35:12'),(742,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'27.38.127.144','2019-04-17 23:38:23'),(743,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'79.134.37.156','2019-04-17 23:41:36'),(744,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',12,'79.134.37.156','2019-04-17 23:50:48'),(745,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.229.74.84','2019-04-17 23:51:53'),(746,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.229.74.84','2019-04-17 23:52:05'),(747,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'180.159.35.0','2019-04-17 23:52:59'),(748,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',546,'79.134.37.156','2019-04-17 23:53:05'),(749,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'39.130.94.162','2019-04-17 23:58:43'),(750,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',441,'39.130.94.162','2019-04-17 23:59:09'),(751,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'113.77.80.96','2019-04-18 00:05:36'),(752,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'103.216.43.190','2019-04-18 00:09:47'),(753,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'180.163.220.68','2019-04-18 00:10:11'),(754,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'122.96.73.28','2019-04-18 00:21:38'),(755,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'111.0.234.140','2019-04-18 00:29:48'),(756,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'79.134.37.156','2019-04-18 00:42:34'),(757,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',4,'79.134.37.156','2019-04-18 00:42:54'),(758,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'79.134.37.156','2019-04-18 00:43:46'),(759,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'79.134.37.156','2019-04-18 00:43:53'),(760,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'79.134.37.156','2019-04-18 00:44:02'),(761,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'79.134.37.156','2019-04-18 00:44:13'),(762,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',2,'79.134.37.156','2019-04-18 00:44:29'),(763,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'79.134.37.156','2019-04-18 00:44:39'),(764,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',14,'79.134.37.156','2019-04-18 00:44:58'),(765,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'223.104.3.55','2019-04-18 01:04:20'),(766,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.229.71.97','2019-04-18 01:27:55'),(767,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.229.71.97','2019-04-18 01:31:14'),(768,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.79.143.118','2019-04-18 01:58:16'),(769,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',6,'124.79.143.118','2019-04-18 01:59:53'),(770,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'124.79.143.118','2019-04-18 02:00:30'),(771,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1142,'124.79.143.118','2019-04-18 02:00:54'),(772,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'124.79.143.118','2019-04-18 02:00:57'),(773,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'27.17.177.61','2019-04-18 04:13:25'),(774,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.80','2019-04-18 06:29:23'),(775,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.73.36.159','2019-04-18 06:50:15'),(776,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'114.244.180.200','2019-04-18 06:50:42'),(777,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.73.36.159','2019-04-18 06:52:12'),(778,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',16,'125.107.239.5','2019-04-18 07:03:51'),(779,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'125.107.239.5','2019-04-18 07:04:17'),(780,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'125.107.239.5','2019-04-18 07:04:20'),(781,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',5,'111.201.235.214','2019-04-18 07:09:10'),(782,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'111.201.235.214','2019-04-18 07:14:13'),(783,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.143.191.147','2019-04-18 07:17:07'),(784,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'49.95.161.209','2019-04-18 07:24:28'),(785,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.38.161','2019-04-18 07:33:19'),(786,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'223.104.212.117','2019-04-18 07:36:53'),(787,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.119.29','2019-04-18 07:42:30'),(788,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'117.136.119.29','2019-04-18 07:49:44'),(789,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'1.89.210.152','2019-04-18 07:50:46'),(790,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'110.86.17.122','2019-04-18 08:02:15'),(791,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',651,'175.9.75.186','2019-04-18 08:07:55'),(792,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'175.9.75.186','2019-04-18 08:10:49'),(793,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'117.136.38.161','2019-04-18 08:17:02'),(794,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'124.67.69.174','2019-04-18 08:22:29'),(795,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',221,'52.141.34.58','2019-04-18 08:23:41'),(796,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'175.9.75.186','2019-04-18 08:24:36'),(797,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.97.60.106','2019-04-18 08:25:17'),(798,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',822,'218.26.54.140','2019-04-18 08:28:47'),(799,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',694,'39.153.169.100','2019-04-18 08:31:37'),(800,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'39.153.169.100','2019-04-18 08:32:40'),(801,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'39.153.169.100','2019-04-18 08:33:06'),(802,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'39.153.169.100','2019-04-18 08:33:12'),(803,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'39.153.169.100','2019-04-18 08:33:44'),(804,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',636,'223.72.75.50','2019-04-18 08:34:37'),(805,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',7,'39.153.169.100','2019-04-18 08:34:49'),(806,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.123.131.169','2019-04-18 08:34:51'),(807,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',466,'39.153.169.100','2019-04-18 08:35:52'),(808,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'171.209.170.97','2019-04-18 08:36:03'),(809,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'39.153.169.100','2019-04-18 08:36:05'),(810,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'203.110.162.125','2019-04-18 08:38:37'),(811,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.129.6.151','2019-04-18 08:39:36'),(812,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'60.173.195.121','2019-04-18 08:39:43'),(813,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'60.173.195.121','2019-04-18 08:40:10'),(814,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.149.173.229','2019-04-18 08:41:18'),(815,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',25,'112.17.240.123','2019-04-18 08:43:21'),(816,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',474,'112.17.240.123','2019-04-18 08:44:16'),(817,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',464,'223.104.64.28','2019-04-18 08:46:17'),(818,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1079,'111.201.241.186','2019-04-18 08:46:17'),(819,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',420,'203.110.162.125','2019-04-18 08:46:53'),(820,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',754,'117.107.143.110','2019-04-18 08:47:41'),(821,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',220,'101.89.29.86','2019-04-18 08:47:52'),(822,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'114.242.105.123','2019-04-18 08:56:39'),(823,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.242.105.123','2019-04-18 08:57:22'),(824,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',206,'180.168.61.126','2019-04-18 08:57:37'),(825,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',876,'183.14.134.123','2019-04-18 08:58:18'),(826,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',646,'1.192.61.34','2019-04-18 08:59:43'),(827,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.38.161','2019-04-18 09:00:21'),(828,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1866,'119.139.198.189','2019-04-18 09:00:55'),(829,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',666,'119.139.198.189','2019-04-18 09:02:34'),(830,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',967,'1.192.61.34','2019-04-18 09:02:55'),(831,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'182.148.120.227','2019-04-18 09:04:06'),(832,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',877,'182.148.120.227','2019-04-18 09:04:29'),(833,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1251,'182.148.120.227','2019-04-18 09:05:01'),(834,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'182.148.120.227','2019-04-18 09:05:14'),(835,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',624,'140.206.35.122','2019-04-18 09:05:18'),(836,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'182.148.120.227','2019-04-18 09:05:49'),(837,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2048,'117.103.129.30','2019-04-18 09:06:43'),(838,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'140.206.35.122','2019-04-18 09:07:36'),(839,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',1891,'182.148.120.227','2019-04-18 09:07:49'),(840,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',444,'182.148.120.227','2019-04-18 09:08:19'),(841,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',510,'58.210.146.70','2019-04-18 09:11:53'),(842,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'58.210.146.70','2019-04-18 09:12:34'),(843,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'159.226.194.44','2019-04-18 09:16:43'),(844,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',25,'159.226.194.44','2019-04-18 09:16:46'),(845,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'159.226.194.44','2019-04-18 09:16:48'),(846,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'159.226.194.44','2019-04-18 09:16:49'),(847,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'159.226.194.44','2019-04-18 09:16:50'),(848,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'159.226.194.44','2019-04-18 09:16:50'),(849,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',5,'159.226.194.44','2019-04-18 09:16:51'),(850,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'159.226.194.44','2019-04-18 09:16:57'),(851,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'159.226.194.44','2019-04-18 09:18:58'),(852,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',887,'58.210.4.122','2019-04-18 09:19:52'),(853,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1889,'58.210.4.122','2019-04-18 09:19:57'),(854,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.124.21.173','2019-04-18 09:20:32'),(855,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',1299,'1.192.61.34','2019-04-18 09:24:21'),(856,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',631,'171.8.223.21','2019-04-18 09:24:27'),(857,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',1083,'106.39.69.26','2019-04-18 09:25:03'),(858,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',209,'1.192.61.34','2019-04-18 09:25:12'),(859,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'61.148.243.77','2019-04-18 09:26:41'),(860,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1247,'182.148.120.227','2019-04-18 09:29:12'),(861,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',737,'122.225.193.202','2019-04-18 09:30:07'),(862,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',665,'122.225.193.202','2019-04-18 09:30:21'),(863,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.148.120.227','2019-04-18 09:32:03'),(864,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'182.148.120.227','2019-04-18 09:32:08'),(865,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'182.148.120.227','2019-04-18 09:35:42'),(866,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.38.133','2019-04-18 09:37:50'),(867,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'220.248.45.106','2019-04-18 09:49:49'),(868,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',206,'114.88.103.166','2019-04-18 09:50:51'),(869,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'220.248.45.106','2019-04-18 09:50:52'),(870,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',429,'220.248.45.106','2019-04-18 09:50:57'),(871,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',218,'220.248.45.106','2019-04-18 09:50:57'),(872,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',251,'220.248.45.106','2019-04-18 09:50:59'),(873,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2170,'180.163.220.3','2019-04-18 09:51:05'),(874,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'106.11.34.8','2019-04-18 09:51:38'),(875,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',974,'114.88.103.166','2019-04-18 09:52:16'),(876,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.253.113.176','2019-04-18 09:54:39'),(877,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'124.64.16.52','2019-04-18 09:58:09'),(878,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'124.64.16.52','2019-04-18 09:58:10'),(879,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',208,'124.64.16.52','2019-04-18 09:59:31'),(880,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'117.175.169.59','2019-04-18 10:00:12'),(881,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.175.169.59','2019-04-18 10:00:40'),(882,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'117.175.169.59','2019-04-18 10:03:03'),(883,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'117.175.169.59','2019-04-18 10:03:15'),(884,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.175.169.59','2019-04-18 10:03:39'),(885,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'118.144.62.226','2019-04-18 10:14:37'),(886,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',624,'114.253.113.176','2019-04-18 10:19:37'),(887,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'116.231.99.203','2019-04-18 10:20:32'),(888,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'118.144.62.226','2019-04-18 10:23:45'),(889,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'118.144.62.226','2019-04-18 10:24:28'),(890,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',883,'49.77.251.188','2019-04-18 10:24:50'),(891,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'49.77.251.188','2019-04-18 10:25:15'),(892,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',24,'114.253.113.176','2019-04-18 10:25:22'),(893,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'49.77.251.188','2019-04-18 10:25:37'),(894,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',20,'114.253.113.176','2019-04-18 10:25:38'),(895,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'58.135.84.51','2019-04-18 10:29:24'),(896,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'114.253.113.176','2019-04-18 10:33:14'),(897,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'159.226.21.21','2019-04-18 10:41:36'),(898,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'159.226.21.21','2019-04-18 10:41:49'),(899,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',128,'0:0:0:0:0:0:0:1','2019-04-18 10:43:24'),(900,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'119.145.8.228','2019-04-18 10:44:44'),(901,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',6,'119.145.8.228','2019-04-18 10:47:37'),(902,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'175.10.128.179','2019-04-18 10:48:21'),(903,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.11.128.68','2019-04-18 10:49:21'),(904,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',204,'112.11.128.68','2019-04-18 10:50:32'),(905,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',2058,'119.145.8.228','2019-04-18 10:50:50'),(906,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.11.128.68','2019-04-18 10:50:54'),(907,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'112.11.128.68','2019-04-18 10:51:01'),(908,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'52.231.201.236','2019-04-18 10:52:04'),(909,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.11.128.68','2019-04-18 10:52:30'),(910,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',627,'1.203.163.198','2019-04-18 10:55:21'),(911,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',218,'1.203.163.198','2019-04-18 11:00:43'),(912,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'159.226.21.21','2019-04-18 11:03:24'),(913,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'159.226.21.21','2019-04-18 11:04:03'),(914,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',25,'159.226.21.21','2019-04-18 11:04:08'),(915,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'159.226.21.21','2019-04-18 11:04:15'),(916,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',5,'112.11.128.68','2019-04-18 11:05:47'),(917,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'223.72.64.209','2019-04-18 11:13:00'),(918,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'106.38.66.250','2019-04-18 11:14:22'),(919,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'106.38.66.250','2019-04-18 11:14:29'),(920,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'106.38.66.250','2019-04-18 11:14:50'),(921,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'223.18.52.55','2019-04-18 11:22:00'),(922,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'223.18.52.55','2019-04-18 11:22:14'),(923,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'1.203.163.198','2019-04-18 11:23:34'),(924,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.107.143.110','2019-04-18 11:24:21'),(925,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.213.108.69','2019-04-18 11:34:49'),(926,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.213.108.69','2019-04-18 11:37:37'),(927,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'58.213.108.69','2019-04-18 11:38:28'),(928,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.164.186.22','2019-04-18 11:39:29'),(929,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1853,'114.242.105.123','2019-04-18 11:45:25'),(930,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.204.163.114','2019-04-18 11:45:34'),(931,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'113.110.172.131','2019-04-18 11:47:33'),(932,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',17,'140.206.46.74','2019-04-18 12:00:35'),(933,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'18.212.42.148','2019-04-18 12:01:23'),(934,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'114.242.105.123','2019-04-18 12:03:31'),(935,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.242.105.123','2019-04-18 12:04:42'),(936,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.254.75','2019-04-18 12:21:23'),(937,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'59.108.53.146','2019-04-18 12:24:18'),(938,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'59.108.53.146','2019-04-18 12:24:37'),(939,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'59.108.53.146','2019-04-18 12:25:43'),(940,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',8,'59.108.53.146','2019-04-18 12:26:57'),(941,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'223.104.254.75','2019-04-18 12:27:17'),(942,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.223.44.1','2019-04-18 12:27:45'),(943,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.223.44.1','2019-04-18 12:27:56'),(944,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'221.223.44.1','2019-04-18 12:29:09'),(945,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.223.44.1','2019-04-18 12:31:31'),(946,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2091,'221.223.44.1','2019-04-18 12:32:39'),(947,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'117.23.83.226','2019-04-18 12:38:55'),(948,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',34,'117.23.83.226','2019-04-18 12:39:09'),(949,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-04-18 12:40:36'),(950,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'183.63.51.77','2019-04-18 12:41:17'),(951,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.139.243.8','2019-04-18 12:43:01'),(952,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',486,'0:0:0:0:0:0:0:1','2019-04-18 13:18:00'),(953,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',158,'0:0:0:0:0:0:0:1','2019-04-18 13:19:37'),(954,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'183.63.51.77','2019-04-18 13:31:12'),(955,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',16,'220.194.45.154','2019-04-18 13:39:31'),(956,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'220.194.45.154','2019-04-18 13:39:41'),(957,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'52.91.61.38','2019-04-18 13:41:37'),(958,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'18.212.42.148','2019-04-18 13:42:21'),(959,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'222.33.61.115','2019-04-18 13:45:52'),(960,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'222.33.61.115','2019-04-18 13:47:46'),(961,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'219.142.246.143','2019-04-18 13:53:20'),(962,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.72.49.1','2019-04-18 13:56:50'),(963,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.173.11.242','2019-04-18 14:00:05'),(964,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.165.222.134','2019-04-18 14:01:07'),(965,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'114.242.105.123','2019-04-18 14:04:29'),(966,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-04-18 14:06:31'),(967,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',474,'58.56.96.27','2019-04-18 14:14:28'),(968,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'59.175.122.127','2019-04-18 14:15:19'),(969,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'121.69.10.182','2019-04-18 14:31:21'),(970,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.69.10.182','2019-04-18 14:31:23'),(971,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'202.85.208.11','2019-04-18 14:36:04'),(972,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'202.85.208.11','2019-04-18 14:37:01'),(973,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'103.103.12.216','2019-04-18 14:41:28'),(974,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.103.12.216','2019-04-18 14:41:56'),(975,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',677,'103.103.12.216','2019-04-18 14:42:02'),(976,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'103.103.12.216','2019-04-18 14:42:12'),(977,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'58.56.96.27','2019-04-18 14:45:30'),(978,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'111.206.110.13','2019-04-18 14:46:54'),(979,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.56.96.27','2019-04-18 14:47:36'),(980,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',14,'49.5.10.170','2019-04-18 14:52:48'),(981,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',415,'203.110.162.125','2019-04-18 14:57:11'),(982,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'58.240.115.182','2019-04-18 14:58:58'),(983,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.240.115.182','2019-04-18 15:03:26'),(984,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.134.203.8','2019-04-18 15:04:05'),(985,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1733,'112.11.128.68','2019-04-18 15:06:10'),(986,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',876,'112.11.128.68','2019-04-18 15:06:24'),(987,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'180.165.240.37','2019-04-18 15:08:02'),(988,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'58.240.115.182','2019-04-18 15:09:13'),(989,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'58.240.115.182','2019-04-18 15:09:51'),(990,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1243,'106.16.168.252','2019-04-18 15:11:11'),(991,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',418,'112.11.128.68','2019-04-18 15:11:31'),(992,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1469,'112.11.128.68','2019-04-18 15:11:43'),(993,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'106.16.168.252','2019-04-18 15:11:56'),(994,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'114.112.124.66','2019-04-18 15:12:04'),(995,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'113.67.156.197','2019-04-18 15:12:29'),(996,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'114.112.124.66','2019-04-18 15:13:18'),(997,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'219.149.223.102','2019-04-18 15:16:38'),(998,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',2767,'221.130.253.135','2019-04-18 15:26:43'),(999,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',9,'123.150.8.194','2019-04-18 15:27:20'),(1000,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'27.223.78.168','2019-04-18 15:33:03'),(1001,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',6,'180.169.31.170','2019-04-18 15:35:11'),(1002,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'180.169.31.170','2019-04-18 15:37:17'),(1003,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'180.169.31.170','2019-04-18 15:51:04'),(1004,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'222.190.129.194','2019-04-18 16:00:57'),(1005,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.178.153.117','2019-04-18 16:03:38'),(1006,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',640,'221.178.153.117','2019-04-18 16:03:52'),(1007,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.178.153.117','2019-04-18 16:04:31'),(1008,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.247.23.133','2019-04-18 16:09:16'),(1009,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.5.10.170','2019-04-18 16:09:31'),(1010,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'1.193.36.134','2019-04-18 16:11:03'),(1011,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'101.91.62.65','2019-04-18 16:12:03'),(1012,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3573,'49.5.10.170','2019-04-18 16:17:24'),(1013,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'211.161.168.131','2019-04-18 16:18:27'),(1014,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.161.168.131','2019-04-18 16:18:34'),(1015,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-04-18 16:23:45'),(1016,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'61.48.82.110','2019-04-18 16:25:51'),(1017,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'49.5.10.170','2019-04-18 16:33:20'),(1018,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-04-18 16:47:16'),(1019,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'59.173.139.231','2019-04-18 16:48:55'),(1020,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'59.173.139.231','2019-04-18 16:49:23'),(1021,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'59.173.139.231','2019-04-18 16:49:47'),(1022,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.207.214.2','2019-04-18 16:55:24'),(1023,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'27.38.22.251','2019-04-18 17:15:10'),(1024,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'112.11.128.68','2019-04-18 17:15:51'),(1025,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'27.38.22.251','2019-04-18 17:18:57'),(1026,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.38.22.251','2019-04-18 17:19:02'),(1027,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.97.242.46','2019-04-18 17:26:55'),(1028,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',629,'119.97.242.46','2019-04-18 17:27:10'),(1029,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'112.11.128.68','2019-04-18 17:30:56'),(1030,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'221.214.61.166','2019-04-18 17:42:28'),(1031,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.130.253.135','2019-04-18 17:45:26'),(1032,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.38.22.251','2019-04-18 18:04:21'),(1033,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'114.251.159.69','2019-04-18 18:14:23'),(1034,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'211.95.26.70','2019-04-18 18:27:16'),(1035,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'211.95.26.70','2019-04-18 18:27:39'),(1036,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.155.17.34','2019-04-18 18:28:54'),(1037,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.155.17.34','2019-04-18 18:31:33'),(1038,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'61.155.17.34','2019-04-18 18:31:49'),(1039,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.155.17.34','2019-04-18 18:32:03'),(1040,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.155.17.34','2019-04-18 18:32:03'),(1041,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.155.17.34','2019-04-18 18:32:04'),(1042,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'61.155.17.34','2019-04-18 18:32:05'),(1043,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',13,'223.104.64.225','2019-04-18 18:56:41'),(1044,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',24,'223.104.64.225','2019-04-18 18:57:14'),(1045,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.48.82.110','2019-04-18 19:23:43'),(1046,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'223.12.97.89','2019-04-18 19:45:50'),(1047,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.142.161','2019-04-18 20:09:44'),(1048,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',6,'123.166.70.9','2019-04-18 20:45:56'),(1049,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.73.36.159','2019-04-18 20:57:49'),(1050,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'120.229.48.100','2019-04-18 21:10:27'),(1051,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.29.204','2019-04-18 21:15:42'),(1052,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'223.104.29.204','2019-04-18 21:17:14'),(1053,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.116.142.161','2019-04-18 21:25:26'),(1054,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'113.116.142.161','2019-04-18 22:15:33'),(1055,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.142.161','2019-04-18 23:29:58'),(1056,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',3,'49.65.111.78','2019-04-19 00:07:53'),(1057,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'79.134.37.156','2019-04-19 00:08:12'),(1058,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'79.134.37.156','2019-04-19 00:12:00'),(1059,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'79.134.37.156','2019-04-19 00:12:45'),(1060,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'79.134.37.156','2019-04-19 00:14:39'),(1061,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'49.65.111.78','2019-04-19 00:17:02'),(1062,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'49.65.111.78','2019-04-19 00:18:15'),(1063,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'49.74.115.239','2019-04-19 00:20:56'),(1064,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'79.134.37.156','2019-04-19 00:27:06'),(1065,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'49.65.111.78','2019-04-19 00:35:56'),(1066,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'49.65.111.78','2019-04-19 00:42:11'),(1067,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',32,'115.171.61.96','2019-04-19 07:37:01'),(1068,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.84.77.87','2019-04-19 08:17:43'),(1069,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.191.98.125','2019-04-19 08:32:21'),(1070,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1659,'60.191.98.125','2019-04-19 08:34:40'),(1071,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'60.191.98.125','2019-04-19 08:35:09'),(1072,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',208,'60.191.98.125','2019-04-19 08:36:07'),(1073,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.191.98.125','2019-04-19 08:36:10'),(1074,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'60.191.98.125','2019-04-19 08:36:12'),(1075,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'222.168.49.124','2019-04-19 08:47:22'),(1076,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'117.71.59.15','2019-04-19 09:04:32'),(1077,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1480,'218.17.157.55','2019-04-19 09:17:45'),(1078,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-04-19 09:17:46'),(1079,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'218.17.157.55','2019-04-19 09:17:49'),(1080,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',12,'218.17.157.55','2019-04-19 09:17:55'),(1081,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'218.17.157.55','2019-04-19 09:18:23'),(1082,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'61.151.179.84','2019-04-19 09:18:44'),(1083,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'61.151.178.174','2019-04-19 09:18:48'),(1084,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'61.151.178.177','2019-04-19 09:18:55'),(1085,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'218.17.157.55','2019-04-19 09:19:16'),(1086,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'218.17.157.55','2019-04-19 09:19:34'),(1087,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'101.89.239.238','2019-04-19 09:20:15'),(1088,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'101.89.29.97','2019-04-19 09:20:34'),(1089,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'171.120.124.226','2019-04-19 09:33:18'),(1090,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'171.120.124.226','2019-04-19 09:33:40'),(1091,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'171.120.124.226','2019-04-19 09:34:52'),(1092,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'218.17.157.55','2019-04-19 09:35:25'),(1093,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'218.17.157.55','2019-04-19 09:35:48'),(1094,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'218.17.157.55','2019-04-19 09:35:54'),(1095,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',410,'101.91.60.104','2019-04-19 09:36:26'),(1096,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'111.41.143.178','2019-04-19 09:36:44'),(1097,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'101.89.239.230','2019-04-19 09:36:47'),(1098,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'171.120.124.226','2019-04-19 09:39:07'),(1099,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',870,'171.120.124.226','2019-04-19 09:39:52'),(1100,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'171.120.124.226','2019-04-19 09:40:20'),(1101,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'171.120.124.226','2019-04-19 09:41:37'),(1102,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'202.105.41.170','2019-04-19 09:42:11'),(1103,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'202.96.41.2','2019-04-19 09:45:02'),(1104,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',629,'202.96.41.9','2019-04-19 09:45:33'),(1105,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'115.238.153.226','2019-04-19 09:45:47'),(1106,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'115.238.153.226','2019-04-19 09:47:04'),(1107,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',14,'115.238.153.226','2019-04-19 09:47:28'),(1108,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.238.153.226','2019-04-19 09:48:10'),(1109,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',90,'119.130.238.105','2019-04-19 09:50:41'),(1110,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'202.96.41.12','2019-04-19 09:52:03'),(1111,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.108.14.240','2019-04-19 10:08:48'),(1112,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.108.14.240','2019-04-19 10:08:58'),(1113,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'202.108.14.240','2019-04-19 10:09:53'),(1114,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'10.0.197.18','2019-04-19 10:11:45'),(1115,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.135.133.66','2019-04-19 10:20:02'),(1116,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'219.135.133.66','2019-04-19 10:21:20'),(1117,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'219.135.133.66','2019-04-19 10:22:02'),(1118,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'211.138.20.166','2019-04-19 10:37:27'),(1119,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',631,'219.135.133.66','2019-04-19 10:41:33'),(1120,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'124.202.211.210','2019-04-19 10:45:21'),(1121,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'116.228.14.22','2019-04-19 10:55:27'),(1122,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.228.14.22','2019-04-19 10:55:48'),(1123,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'180.169.182.130','2019-04-19 10:58:21'),(1124,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'210.25.24.114','2019-04-19 11:00:42'),(1125,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'183.202.90.152','2019-04-19 11:38:42'),(1126,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.79.134.41','2019-04-19 11:39:25'),(1127,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.97.55.209','2019-04-19 11:42:22'),(1128,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'112.97.55.209','2019-04-19 11:42:39'),(1129,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'112.97.55.209','2019-04-19 11:43:13'),(1130,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.254.166.184','2019-04-19 12:25:44'),(1131,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'122.224.71.152','2019-04-19 12:31:05'),(1132,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'122.224.71.152','2019-04-19 12:34:40'),(1133,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.224.71.152','2019-04-19 12:34:51'),(1134,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.224.71.152','2019-04-19 12:36:17'),(1135,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'114.253.113.176','2019-04-19 13:15:10'),(1136,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',5,'114.253.113.176','2019-04-19 13:15:21'),(1137,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.99.217.114','2019-04-19 13:20:12'),(1138,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.99.217.114','2019-04-19 13:20:44'),(1139,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.139.193.156','2019-04-19 13:36:13'),(1140,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'59.173.52.165','2019-04-19 13:42:59'),(1141,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'59.173.52.165','2019-04-19 13:44:51'),(1142,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'183.63.51.77','2019-04-19 13:56:59'),(1143,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'183.63.51.77','2019-04-19 13:57:04'),(1144,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'183.63.51.77','2019-04-19 13:57:07'),(1145,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'124.64.19.28','2019-04-19 14:20:36'),(1146,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'81.233.200.200','2019-04-19 14:42:57'),(1147,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'81.233.200.200','2019-04-19 14:46:19'),(1148,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.236.167.157','2019-04-19 15:05:44'),(1149,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'120.236.167.157','2019-04-19 15:05:53'),(1150,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'120.236.167.157','2019-04-19 15:06:13'),(1151,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'120.236.167.157','2019-04-19 15:06:37'),(1152,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'101.227.139.161','2019-04-19 15:06:53'),(1153,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',9,'61.151.178.174','2019-04-19 15:07:36'),(1154,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.236.167.157','2019-04-19 15:08:23'),(1155,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',7,'61.173.15.106','2019-04-19 15:38:27'),(1156,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',207,'123.150.8.194','2019-04-19 15:56:20'),(1157,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'115.236.71.65','2019-04-19 15:57:40'),(1158,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'115.236.71.65','2019-04-19 15:58:06'),(1159,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'115.236.71.65','2019-04-19 15:58:34'),(1160,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'115.236.71.65','2019-04-19 15:59:41'),(1161,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'115.236.71.65','2019-04-19 16:07:52'),(1162,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',21,'115.236.71.65','2019-04-19 16:15:44'),(1163,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'115.236.71.65','2019-04-19 16:17:11'),(1164,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'112.11.128.71','2019-04-19 16:38:21'),(1165,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',7,'112.11.128.71','2019-04-19 16:38:27'),(1166,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'122.70.153.18','2019-04-19 16:46:06'),(1167,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',681,'122.70.153.18','2019-04-19 16:47:26'),(1168,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.70.153.18','2019-04-19 16:47:52'),(1169,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'112.65.48.38','2019-04-19 17:03:02'),(1170,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',16,'112.65.48.38','2019-04-19 17:03:11'),(1171,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'180.154.160.18','2019-04-19 17:07:12'),(1172,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.154.160.18','2019-04-19 17:07:13'),(1173,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.154.160.18','2019-04-19 17:07:35'),(1174,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.154.160.18','2019-04-19 17:08:19'),(1175,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'180.154.160.18','2019-04-19 17:08:29'),(1176,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.154.160.18','2019-04-19 17:31:51'),(1177,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1440,'180.154.160.18','2019-04-19 17:31:54'),(1178,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'180.154.160.18','2019-04-19 17:32:05'),(1179,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.154.160.18','2019-04-19 17:32:07'),(1180,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'180.154.160.18','2019-04-19 17:32:08'),(1181,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'210.41.243.21','2019-04-19 17:34:34'),(1182,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'210.41.243.21','2019-04-19 17:35:02'),(1183,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'183.63.51.77','2019-04-19 17:56:50'),(1184,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',9,'183.63.51.77','2019-04-19 17:57:16'),(1185,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.235.118.20','2019-04-19 18:06:38'),(1186,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'112.11.128.71','2019-04-19 18:46:32'),(1187,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'112.11.128.71','2019-04-19 18:47:19'),(1188,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.11.128.71','2019-04-19 18:47:39'),(1189,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'112.11.128.71','2019-04-19 18:48:21'),(1190,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.21.44.31','2019-04-19 19:31:50'),(1191,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'124.64.18.31','2019-04-19 20:13:17'),(1192,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'124.64.18.31','2019-04-19 20:14:01'),(1193,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'124.64.18.31','2019-04-19 20:16:29'),(1194,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'223.72.36.39','2019-04-19 20:53:15'),(1195,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.229.54.15','2019-04-19 21:59:14'),(1196,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'115.35.183.75','2019-04-19 22:37:59'),(1197,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'60.186.120.62','2019-04-19 23:04:03'),(1198,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'60.186.120.62','2019-04-19 23:04:27'),(1199,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'60.186.120.62','2019-04-19 23:04:51'),(1200,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',654,'60.186.120.62','2019-04-19 23:05:15'),(1201,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'60.186.120.62','2019-04-19 23:05:21'),(1202,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'118.113.72.207','2019-04-19 23:23:33'),(1203,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'101.85.209.46','2019-04-19 23:26:51'),(1204,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'101.85.209.46','2019-04-19 23:27:36'),(1205,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1072,'114.91.148.217','2019-04-19 23:57:11'),(1206,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',1029,'114.91.148.217','2019-04-19 23:57:23'),(1207,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'114.91.148.217','2019-04-19 23:57:27'),(1208,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',419,'114.91.148.217','2019-04-19 23:57:34'),(1209,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.127.38.45','2019-04-19 23:57:38'),(1210,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'27.38.248.74','2019-04-20 01:17:27'),(1211,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'223.255.127.159','2019-04-20 02:16:21'),(1212,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'223.255.127.159','2019-04-20 02:17:26'),(1213,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'223.255.127.159','2019-04-20 02:17:28'),(1214,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'223.255.127.159','2019-04-20 02:17:31'),(1215,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.255.127.159','2019-04-20 02:17:32'),(1216,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',930,'220.202.233.194','2019-04-20 03:20:52'),(1217,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'220.202.233.194','2019-04-20 03:20:54'),(1218,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',13,'157.0.72.133','2019-04-20 09:14:06'),(1219,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',659,'157.0.72.133','2019-04-20 09:14:17'),(1220,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'157.0.72.133','2019-04-20 09:15:09'),(1221,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'157.0.72.133','2019-04-20 09:15:44'),(1222,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'157.0.72.133','2019-04-20 09:17:20'),(1223,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'157.0.72.133','2019-04-20 09:17:25'),(1224,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'157.0.72.133','2019-04-20 09:19:22'),(1225,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'112.11.128.77','2019-04-20 10:18:28'),(1226,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.142.7','2019-04-20 10:33:27'),(1227,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'113.119.8.96','2019-04-20 11:37:38'),(1228,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.119.8.96','2019-04-20 11:38:07'),(1229,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',836,'210.47.175.248','2019-04-20 11:54:57'),(1230,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'223.104.251.52','2019-04-20 11:55:38'),(1231,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'223.104.251.52','2019-04-20 11:56:55'),(1232,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.251.52','2019-04-20 11:57:38'),(1233,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1198,'183.62.45.90','2019-04-20 12:01:30'),(1234,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'171.82.10.3','2019-04-20 12:02:07'),(1235,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'171.82.10.3','2019-04-20 12:04:00'),(1236,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'112.28.150.39','2019-04-20 13:13:15'),(1237,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'222.173.36.10','2019-04-20 14:33:30'),(1238,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'52.231.27.85','2019-04-20 15:12:23'),(1239,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'52.231.27.85','2019-04-20 15:13:56'),(1240,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.248.2.14','2019-04-20 15:31:08'),(1241,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.109.122.201','2019-04-20 15:33:58'),(1242,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.72.124.220','2019-04-20 15:37:12'),(1243,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',3,'120.194.4.158','2019-04-20 15:39:02'),(1244,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.194.4.158','2019-04-20 15:39:40'),(1245,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.194.4.158','2019-04-20 15:40:34'),(1246,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'120.194.4.158','2019-04-20 15:40:55'),(1247,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'120.194.4.158','2019-04-20 15:41:42'),(1248,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',471,'120.194.4.158','2019-04-20 15:43:12'),(1249,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',10,'223.104.3.9','2019-04-20 15:44:10'),(1250,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.11.128.77','2019-04-20 15:46:12'),(1251,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.194.4.158','2019-04-20 15:48:39'),(1252,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.194.4.158','2019-04-20 15:48:55'),(1253,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',5,'120.194.4.158','2019-04-20 15:49:23'),(1254,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'120.194.4.158','2019-04-20 15:49:50'),(1255,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',45,'120.194.4.158','2019-04-20 15:50:32'),(1256,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',660,'120.194.4.158','2019-04-20 15:50:38'),(1257,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.194.4.158','2019-04-20 16:03:27'),(1258,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'120.194.4.158','2019-04-20 16:05:39'),(1259,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'223.72.124.239','2019-04-20 16:16:04'),(1260,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'171.43.205.181','2019-04-20 16:28:39'),(1261,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'171.43.205.181','2019-04-20 16:28:51'),(1262,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1477,'180.102.205.198','2019-04-20 16:31:27'),(1263,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',881,'58.248.2.14','2019-04-20 16:32:34'),(1264,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'171.43.205.181','2019-04-20 16:33:16'),(1265,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',14,'42.91.104.233','2019-04-20 16:36:56'),(1266,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',634,'42.91.104.233','2019-04-20 16:37:02'),(1267,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'111.198.88.242','2019-04-20 16:44:03'),(1268,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'171.82.10.3','2019-04-20 16:58:10'),(1269,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'210.73.97.35','2019-04-20 18:38:18'),(1270,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'123.165.49.73','2019-04-20 18:52:44'),(1271,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',204,'112.11.128.77','2019-04-20 19:15:20'),(1272,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',12,'114.91.178.33','2019-04-20 19:17:30'),(1273,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.91.178.33','2019-04-20 19:19:42'),(1274,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.121.13.28','2019-04-20 19:28:14'),(1275,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'122.238.176.99','2019-04-20 20:01:53'),(1276,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'122.238.176.99','2019-04-20 20:02:00'),(1277,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',6,'122.238.176.99','2019-04-20 20:04:27'),(1278,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'125.119.251.222','2019-04-20 20:08:16'),(1279,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'211.161.248.160','2019-04-20 20:10:55'),(1280,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.202.202.238','2019-04-20 20:12:42'),(1281,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',212,'115.172.227.84','2019-04-20 21:44:56'),(1282,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'115.172.227.84','2019-04-20 21:47:13'),(1283,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'115.172.227.84','2019-04-20 21:48:27'),(1284,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'36.24.255.110','2019-04-20 22:14:09'),(1285,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',8,'36.24.255.110','2019-04-20 22:14:34'),(1286,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'117.188.14.247','2019-04-20 22:32:11'),(1287,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.188.14.247','2019-04-20 22:32:49'),(1288,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.188.14.247','2019-04-20 22:34:44'),(1289,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'117.188.14.247','2019-04-20 22:35:09'),(1290,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'59.33.48.63','2019-04-20 23:01:07'),(1291,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'59.33.48.63','2019-04-20 23:01:22'),(1292,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'113.45.106.237','2019-04-20 23:11:12'),(1293,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.45.106.237','2019-04-20 23:11:17'),(1294,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',830,'113.45.106.237','2019-04-20 23:26:26'),(1295,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'113.45.106.237','2019-04-20 23:26:58'),(1296,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'111.198.224.225','2019-04-20 23:28:46'),(1297,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',217,'111.198.224.225','2019-04-20 23:29:01'),(1298,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.198.224.225','2019-04-20 23:29:44'),(1299,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'223.167.152.53','2019-04-20 23:29:45'),(1300,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1640,'210.22.245.219','2019-04-20 23:30:02'),(1301,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'111.198.224.225','2019-04-20 23:30:05'),(1302,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',6,'111.198.224.225','2019-04-20 23:30:22'),(1303,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.246.221.162','2019-04-20 23:30:44'),(1304,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'210.22.245.219','2019-04-20 23:31:04'),(1305,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1456,'58.246.221.61','2019-04-20 23:31:24'),(1306,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.198.224.225','2019-04-20 23:32:10'),(1307,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'111.198.224.225','2019-04-20 23:33:36'),(1308,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'111.198.224.225','2019-04-20 23:34:14'),(1309,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',652,'111.198.224.225','2019-04-20 23:34:22'),(1310,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'111.198.224.225','2019-04-20 23:34:35'),(1311,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.198.224.225','2019-04-20 23:35:12'),(1312,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'58.247.204.63','2019-04-20 23:35:13'),(1313,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',221,'210.22.245.219','2019-04-20 23:35:35'),(1314,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.198.224.225','2019-04-20 23:38:13'),(1315,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.198.224.225','2019-04-20 23:38:41'),(1316,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',35,'111.198.224.225','2019-04-20 23:40:11'),(1317,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.198.224.225','2019-04-20 23:40:27'),(1318,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'58.247.212.141','2019-04-20 23:41:11'),(1319,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'111.198.224.225','2019-04-20 23:45:33'),(1320,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'122.238.176.99','2019-04-20 23:48:18'),(1321,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'122.238.176.99','2019-04-20 23:48:51'),(1322,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'27.38.240.65','2019-04-21 01:33:45'),(1323,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'171.255.168.213','2019-04-21 02:10:51'),(1324,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',6,'171.255.168.213','2019-04-21 02:11:44'),(1325,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'42.196.39.36','2019-04-21 12:35:08'),(1326,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.196.39.36','2019-04-21 12:35:51'),(1327,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'42.196.39.36','2019-04-21 12:37:02'),(1328,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'42.196.39.36','2019-04-21 12:38:57'),(1329,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.11.128.72','2019-04-21 12:48:12'),(1330,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'36.110.14.218','2019-04-21 13:31:02'),(1331,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'36.110.14.218','2019-04-21 13:32:31'),(1332,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'111.198.224.225','2019-04-21 14:06:33'),(1333,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',4,'111.198.224.225','2019-04-21 14:07:20'),(1334,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'223.167.152.70','2019-04-21 14:07:33'),(1335,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'116.128.128.79','2019-04-21 14:08:20'),(1336,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'111.198.224.225','2019-04-21 14:10:06'),(1337,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'111.198.224.225','2019-04-21 14:10:28'),(1338,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'111.198.224.225','2019-04-21 14:10:46'),(1339,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'223.166.151.197','2019-04-21 14:11:05'),(1340,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.198.224.225','2019-04-21 14:11:12'),(1341,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',7,'111.198.224.225','2019-04-21 14:11:29'),(1342,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'58.246.221.61','2019-04-21 14:11:45'),(1343,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',204,'58.246.221.61','2019-04-21 14:12:29'),(1344,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'112.11.128.72','2019-04-21 14:17:55'),(1345,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',218,'112.11.128.72','2019-04-21 14:18:20'),(1346,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.198.224.225','2019-04-21 14:18:30'),(1347,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'111.198.224.225','2019-04-21 14:18:37'),(1348,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'111.198.224.225','2019-04-21 14:18:44'),(1349,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'222.90.31.197','2019-04-21 15:21:40'),(1350,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'221.218.72.129','2019-04-21 15:21:52'),(1351,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',6,'111.198.224.225','2019-04-21 15:26:18'),(1352,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'210.22.245.226','2019-04-21 15:27:18'),(1353,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'45.124.44.156','2019-04-21 15:32:29'),(1354,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'45.124.44.156','2019-04-21 15:32:34'),(1355,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',883,'45.124.44.156','2019-04-21 15:32:35'),(1356,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'101.89.29.97','2019-04-21 15:33:29'),(1357,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'101.91.60.107','2019-04-21 15:33:34'),(1358,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'111.198.224.225','2019-04-21 15:39:42'),(1359,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',1,'111.198.224.225','2019-04-21 15:39:44'),(1360,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'111.198.224.225','2019-04-21 15:39:45'),(1361,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.198.224.225','2019-04-21 15:39:53'),(1362,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'111.198.224.225','2019-04-21 15:41:56'),(1363,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'111.198.224.225','2019-04-21 15:42:36'),(1364,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'111.198.224.225','2019-04-21 15:42:58'),(1365,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.198.224.225','2019-04-21 15:44:56'),(1366,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',8,'111.198.224.225','2019-04-21 15:46:44'),(1367,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',2,'111.198.224.225','2019-04-21 15:52:10'),(1368,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'111.198.224.225','2019-04-21 16:10:07'),(1369,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.198.224.225','2019-04-21 16:15:51'),(1370,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',15,'183.25.64.231','2019-04-21 17:30:09'),(1371,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3752,'160.202.34.24','2019-04-21 18:12:21'),(1372,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5339,'160.202.34.24','2019-04-21 18:12:31'),(1373,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',2491,'160.202.34.24','2019-04-21 18:12:32'),(1374,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1646,'160.202.34.24','2019-04-21 18:12:40'),(1375,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'160.202.34.24','2019-04-21 18:12:52'),(1376,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'160.202.34.24','2019-04-21 18:12:52'),(1377,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'160.202.34.24','2019-04-21 18:13:08'),(1378,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'171.82.10.3','2019-04-21 20:43:04'),(1379,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.140.166','2019-04-21 21:01:35'),(1380,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'116.21.95.142','2019-04-21 21:38:34'),(1381,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.21.95.142','2019-04-21 21:43:32'),(1382,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'111.198.228.163','2019-04-21 22:07:28'),(1383,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'111.198.228.163','2019-04-21 22:08:09'),(1384,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',208,'111.198.228.163','2019-04-21 22:08:31'),(1385,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'111.198.228.163','2019-04-21 22:31:50'),(1386,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.150.97.121','2019-04-21 22:46:36'),(1387,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',3,'113.116.140.166','2019-04-21 23:06:44'),(1388,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'114.253.113.176','2019-04-22 08:17:42'),(1389,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'218.4.136.119','2019-04-22 08:26:53'),(1390,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.4.136.119','2019-04-22 08:31:20'),(1391,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.4.136.119','2019-04-22 08:37:15'),(1392,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'58.210.84.242','2019-04-22 09:53:15'),(1393,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'211.161.194.221','2019-04-22 11:13:52'),(1394,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'183.63.51.77','2019-04-22 11:30:29'),(1395,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',6,'183.63.51.77','2019-04-22 12:43:15'),(1396,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',6,'183.63.51.77','2019-04-22 12:46:15'),(1397,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'183.63.51.77','2019-04-22 12:50:09'),(1398,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',6,'183.63.51.77','2019-04-22 13:34:32'),(1399,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',6,'183.63.51.77','2019-04-22 13:53:04'),(1400,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',421,'14.222.181.166','2019-04-22 14:55:25'),(1401,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'14.222.181.166','2019-04-22 14:55:47'),(1402,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.17.76.170','2019-04-22 15:07:08'),(1403,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.236.10.78','2019-04-22 15:07:45'),(1404,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'101.87.18.138','2019-04-22 15:20:45'),(1405,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'101.87.18.138','2019-04-22 15:23:08'),(1406,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.87.18.138','2019-04-22 15:23:19'),(1407,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',207,'101.87.18.138','2019-04-22 15:23:25'),(1408,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.87.18.138','2019-04-22 15:25:22'),(1409,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.87.18.138','2019-04-22 15:25:26'),(1410,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.87.18.138','2019-04-22 15:25:28'),(1411,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.87.18.138','2019-04-22 15:25:30'),(1412,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.87.18.138','2019-04-22 15:25:33'),(1413,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'101.87.18.138','2019-04-22 15:28:00'),(1414,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'217.196.30.229','2019-04-22 16:46:16'),(1415,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.32.30.219','2019-04-22 17:02:26'),(1416,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.247.135.19','2019-04-22 17:17:15'),(1417,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',495,'223.166.145.91','2019-04-22 17:31:08'),(1418,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'183.63.51.77','2019-04-22 17:40:09'),(1419,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',5,'36.110.14.218','2019-04-22 17:46:44'),(1420,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'61.148.52.194','2019-04-22 17:50:54'),(1421,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',98,'127.0.0.1','2019-04-22 18:02:28'),(1422,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',106,'127.0.0.1','2019-04-22 18:02:44'),(1423,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'114.249.28.138','2019-04-22 18:20:36'),(1424,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',9,'114.249.28.138','2019-04-22 18:30:19'),(1425,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.249.28.138','2019-04-22 18:30:24'),(1426,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',430,'114.249.28.138','2019-04-22 18:30:40'),(1427,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'42.236.10.114','2019-04-22 18:30:48'),(1428,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'114.249.28.138','2019-04-22 20:09:32'),(1429,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'114.249.28.138','2019-04-22 20:10:05'),(1430,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',2,'114.249.28.138','2019-04-22 20:10:26'),(1431,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'114.249.28.138','2019-04-22 20:11:20'),(1432,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.161.240.166','2019-04-22 20:55:17'),(1433,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'211.161.240.166','2019-04-22 20:56:52'),(1434,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'211.161.240.166','2019-04-22 21:00:19'),(1435,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',8,'114.249.28.138','2019-04-22 21:33:48'),(1436,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.249.28.138','2019-04-22 21:36:17'),(1437,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.249.28.138','2019-04-22 22:01:25'),(1438,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'114.249.28.138','2019-04-22 22:01:59'),(1439,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',20,'211.161.194.221','2019-04-23 09:00:45'),(1440,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.11.128.67','2019-04-23 10:30:53'),(1441,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.11.128.67','2019-04-23 10:31:44'),(1442,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',82,'0:0:0:0:0:0:0:1','2019-04-23 12:38:44'),(1443,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'114.84.47.210','2019-04-23 13:11:15'),(1444,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'114.84.47.210','2019-04-23 13:11:36'),(1445,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'117.135.125.102','2019-04-23 13:15:54'),(1446,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',26,'114.255.24.6','2019-04-23 14:35:49'),(1447,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'120.36.248.188','2019-04-23 14:50:20'),(1448,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.25.23.120','2019-04-23 17:17:12'),(1449,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.221.140.80','2019-04-23 17:39:15'),(1450,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.25.23.120','2019-04-23 17:46:44'),(1451,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'58.213.111.210','2019-04-23 19:06:22'),(1452,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',72,'183.63.51.77','2019-04-23 20:34:52'),(1453,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',19,'183.63.51.77','2019-04-23 20:38:53'),(1454,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',26,'183.63.51.77','2019-04-23 20:39:56'),(1455,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.63.51.77','2019-04-23 20:41:21'),(1456,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',53,'183.63.51.77','2019-04-23 20:43:59'),(1457,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'183.63.51.77','2019-04-23 20:44:36'),(1458,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',47,'183.63.51.77','2019-04-23 20:45:01'),(1459,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',8,'58.247.135.19','2019-04-23 21:09:42'),(1460,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',17,'211.161.240.156','2019-04-23 21:43:09'),(1461,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'163.125.229.220','2019-04-23 22:06:26'),(1462,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',23,'223.166.145.91','2019-04-23 22:36:59'),(1463,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'183.228.56.162','2019-04-24 01:08:06'),(1464,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',16,'183.228.56.162','2019-04-24 01:08:24'),(1465,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',26,'183.228.56.162','2019-04-24 01:13:30'),(1466,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.228.56.162','2019-04-24 01:41:02'),(1467,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'183.228.56.162','2019-04-24 01:41:10'),(1468,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'183.228.56.162','2019-04-24 01:41:32'),(1469,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',12,'183.228.56.162','2019-04-24 01:45:16'),(1470,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'183.228.56.162','2019-04-24 01:46:56'),(1471,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'183.228.56.162','2019-04-24 02:12:54'),(1472,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'183.228.56.162','2019-04-24 02:18:54'),(1473,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'183.228.56.162','2019-04-24 02:20:42'),(1474,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',684,'183.228.56.162','2019-04-24 02:20:51'),(1475,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'183.228.56.162','2019-04-24 02:20:58'),(1476,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'183.228.56.162','2019-04-24 02:21:04'),(1477,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',25,'183.228.56.162','2019-04-24 02:21:16'),(1478,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'183.228.56.162','2019-04-24 02:21:47'),(1479,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',28,'183.228.56.162','2019-04-24 02:22:04'),(1480,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1473,'183.228.56.162','2019-04-24 02:22:18'),(1481,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'183.228.56.162','2019-04-24 02:22:36'),(1482,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',11,'117.136.79.123','2019-04-24 08:25:33'),(1483,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',7,'117.136.79.123','2019-04-24 08:33:25'),(1484,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.234.128.48','2019-04-24 10:19:22'),(1485,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',657,'124.234.128.48','2019-04-24 10:20:51'),(1486,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',948,'124.234.128.48','2019-04-24 10:21:01'),(1487,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',40,'124.234.128.48','2019-04-24 10:21:07'),(1488,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',36,'124.234.128.48','2019-04-24 10:21:08'),(1489,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'124.234.128.48','2019-04-24 10:22:28'),(1490,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.234.128.48','2019-04-24 10:23:29'),(1491,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1293,'124.234.128.48','2019-04-24 10:23:50'),(1492,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'203.110.162.125','2019-04-24 10:41:43'),(1493,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.151.178.163','2019-04-24 10:42:42'),(1494,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'203.110.162.125','2019-04-24 11:30:25'),(1495,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',8,'1.119.53.54','2019-04-24 11:58:24'),(1496,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.119.53.54','2019-04-24 11:58:56'),(1497,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.119.53.54','2019-04-24 12:02:27'),(1498,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'1.119.53.54','2019-04-24 12:02:32'),(1499,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'1.119.53.54','2019-04-24 12:02:36'),(1500,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'121.21.95.122','2019-04-24 12:50:34'),(1501,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'223.104.210.249','2019-04-24 12:51:43'),(1502,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'1.119.53.54','2019-04-24 13:09:26'),(1503,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'203.110.162.125','2019-04-24 13:32:31'),(1504,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'112.11.128.65','2019-04-24 13:52:24'),(1505,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2222222',0,'112.11.128.65','2019-04-24 13:52:32'),(1506,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','123123123',5,'112.11.128.65','2019-04-24 13:53:10'),(1507,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'36.110.40.18','2019-04-24 14:17:44'),(1508,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'36.110.40.18','2019-04-24 14:18:37'),(1509,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.110.40.18','2019-04-24 15:17:55'),(1510,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'139.226.172.192','2019-04-24 15:20:44'),(1511,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'139.226.172.192','2019-04-24 15:20:53'),(1512,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',4,'222.134.70.138','2019-04-24 15:40:39'),(1513,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'222.134.70.138','2019-04-24 15:40:57'),(1514,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.134.70.138','2019-04-24 15:41:34'),(1515,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'222.134.70.138','2019-04-24 15:41:39'),(1516,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.238.131.162','2019-04-24 17:01:22'),(1517,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'221.238.131.162','2019-04-24 17:02:47'),(1518,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.238.131.162','2019-04-24 17:03:07'),(1519,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'221.238.131.162','2019-04-24 17:03:37'),(1520,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.238.131.162','2019-04-24 17:04:40'),(1521,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',17,'221.238.131.162','2019-04-24 17:42:42'),(1522,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'221.238.131.162','2019-04-24 17:42:46'),(1523,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'114.249.104.37','2019-04-24 19:38:50'),(1524,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'180.163.220.3','2019-04-24 19:39:19'),(1525,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'39.180.58.11','2019-04-24 19:42:38'),(1526,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',205,'39.180.58.11','2019-04-24 19:43:41'),(1527,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',57,'183.228.56.162','2019-04-24 20:18:14'),(1528,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',9,'183.63.51.77','2019-04-24 20:22:49'),(1529,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'183.63.51.77','2019-04-24 20:27:19'),(1530,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.228.56.162','2019-04-24 20:29:45'),(1531,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'36.110.14.218','2019-04-24 21:19:59'),(1532,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1295,'36.110.14.218','2019-04-24 21:20:25'),(1533,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'114.249.220.113','2019-04-24 23:45:54'),(1534,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.249.220.113','2019-04-24 23:49:21'),(1535,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'114.249.220.113','2019-04-24 23:50:07'),(1536,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'114.249.220.113','2019-04-24 23:50:36'),(1537,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'125.115.189.100','2019-04-25 00:04:36'),(1538,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'180.163.220.66','2019-04-25 00:05:04'),(1539,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'223.104.4.43','2019-04-25 09:23:44'),(1540,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',40,'103.61.153.114','2019-04-25 10:10:00'),(1541,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'103.61.153.114','2019-04-25 10:10:29'),(1542,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',7,'103.61.153.114','2019-04-25 10:17:40'),(1543,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'103.61.153.114','2019-04-25 10:17:50'),(1544,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'221.238.131.162','2019-04-25 10:46:45'),(1545,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'61.132.138.217','2019-04-25 11:10:35'),(1546,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.72.86.101','2019-04-25 11:59:26'),(1547,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',28,'114.246.213.97','2019-04-25 13:09:08'),(1548,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',5,'221.238.131.162','2019-04-25 13:46:34'),(1549,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.190.113.250','2019-04-25 14:34:21'),(1550,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',646,'180.157.51.250','2019-04-25 14:50:22'),(1551,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'58.246.143.76','2019-04-25 15:38:15'),(1552,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'58.246.143.76','2019-04-25 15:40:40'),(1553,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',26,'202.121.146.139','2019-04-25 15:50:01'),(1554,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'202.121.146.139','2019-04-25 15:50:21'),(1555,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',12,'202.121.146.139','2019-04-25 15:50:53'),(1556,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'202.121.146.139','2019-04-25 15:51:02'),(1557,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.121.146.139','2019-04-25 15:51:05'),(1558,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',37,'36.46.73.240','2019-04-25 16:12:23'),(1559,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.46.73.240','2019-04-25 16:12:36'),(1560,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',17,'36.46.73.240','2019-04-25 16:12:36'),(1561,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',429,'36.46.73.240','2019-04-25 16:12:38'),(1562,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'58.48.165.173','2019-04-25 16:21:18'),(1563,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'58.48.165.173','2019-04-25 16:22:19'),(1564,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'58.48.165.173','2019-04-25 16:22:19'),(1565,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.48.165.173','2019-04-25 16:22:21'),(1566,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'223.112.161.10','2019-04-25 16:29:48'),(1567,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'119.122.89.110','2019-04-25 17:01:45'),(1568,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'222.221.181.195','2019-04-25 17:04:25'),(1569,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.181.84.114','2019-04-25 17:04:53'),(1570,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'61.181.84.114','2019-04-25 17:07:40'),(1571,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'61.181.84.114','2019-04-25 17:08:02'),(1572,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'222.221.181.195','2019-04-25 17:10:52'),(1573,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'222.221.181.195','2019-04-25 17:12:33'),(1574,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.255.67.90','2019-04-25 18:47:55'),(1575,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'47.74.17.170','2019-04-25 22:51:01'),(1576,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'47.74.17.170','2019-04-25 22:51:12'),(1577,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.17.232.176','2019-04-26 04:33:47'),(1578,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.17.232.176','2019-04-26 04:43:09'),(1579,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'27.17.232.176','2019-04-26 04:43:14'),(1580,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.17.232.176','2019-04-26 04:44:26'),(1581,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'171.120.117.11','2019-04-26 08:43:27'),(1582,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'61.181.84.114','2019-04-26 10:03:30'),(1583,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',851,'101.231.201.50','2019-04-26 11:36:07'),(1584,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',9,'221.178.153.117','2019-04-26 13:57:16'),(1585,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.178.153.117','2019-04-26 13:58:11'),(1586,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.178.153.117','2019-04-26 15:22:22'),(1587,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1245,'221.214.95.122','2019-04-26 16:44:10'),(1588,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',16,'180.163.220.3','2019-04-26 16:44:46'),(1589,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',5,'219.220.50.2','2019-04-26 20:04:50'),(1590,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'171.43.220.115','2019-04-26 22:42:51'),(1591,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'171.43.220.115','2019-04-26 22:49:04'),(1592,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.97.52.11','2019-04-27 09:02:09'),(1593,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.97.52.11','2019-04-27 09:07:53'),(1594,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'122.238.176.243','2019-04-27 11:31:05'),(1595,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'182.84.17.57','2019-04-27 12:43:12'),(1596,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'42.236.10.84','2019-04-27 12:43:16'),(1597,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',9,'116.7.10.32','2019-04-27 13:12:12'),(1598,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1257,'116.7.10.32','2019-04-27 13:26:08'),(1599,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',48,'116.7.10.32','2019-04-27 13:32:02'),(1600,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.7.10.32','2019-04-27 13:45:13'),(1601,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',14,'114.249.214.208','2019-04-27 20:02:19'),(1602,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'111.193.250.56','2019-04-27 21:14:41'),(1603,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',6,'60.249.144.190','2019-04-28 00:00:38'),(1604,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',15,'114.246.213.97','2019-04-28 08:22:26'),(1605,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'101.107.199.238','2019-04-28 10:14:52'),(1606,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'101.107.199.238','2019-04-28 10:40:02'),(1607,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'121.20.198.167','2019-04-28 11:10:58'),(1608,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'58.246.221.61','2019-04-28 11:11:57'),(1609,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'121.20.198.167','2019-04-28 11:15:35'),(1610,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',700,'210.22.245.219','2019-04-28 11:16:37'),(1611,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'121.21.92.110','2019-04-28 11:17:56'),(1612,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-04-28 11:25:10'),(1613,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'183.159.180.191','2019-04-28 20:17:42'),(1614,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.159.180.191','2019-04-28 20:19:11'),(1615,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'183.159.180.191','2019-04-28 20:19:26'),(1616,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.159.180.191','2019-04-28 20:19:36'),(1617,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.159.180.191','2019-04-28 20:19:40'),(1618,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'183.159.180.191','2019-04-28 20:20:52'),(1619,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.159.180.191','2019-04-28 20:21:19'),(1620,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',5,'183.159.180.191','2019-04-28 20:28:27'),(1621,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'171.43.195.20','2019-04-28 20:45:46'),(1622,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1232,'171.43.195.20','2019-04-28 20:46:28'),(1623,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.222.171.234','2019-04-29 09:12:45'),(1624,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'114.222.171.234','2019-04-29 09:12:56'),(1625,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'60.255.136.205','2019-04-29 12:28:17'),(1626,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'42.236.10.125','2019-04-29 12:28:43'),(1627,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'58.246.221.163','2019-04-29 12:29:16'),(1628,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'121.20.205.158','2019-04-29 12:57:03'),(1629,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1901,'122.224.145.42','2019-04-29 17:04:36'),(1630,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',6,'124.23.132.189','2019-04-29 17:58:37'),(1631,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'121.20.205.158','2019-04-29 19:53:59'),(1632,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.20.198.193','2019-04-29 19:54:09'),(1633,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'121.20.205.158','2019-04-29 19:54:47'),(1634,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'101.17.124.51','2019-04-29 19:59:32'),(1635,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.174.224.237','2019-04-29 21:03:04'),(1636,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'183.159.180.191','2019-04-29 21:39:53'),(1637,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'183.159.180.191','2019-04-29 21:40:06'),(1638,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',18,'183.159.180.191','2019-04-29 21:40:50'),(1639,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.159.180.191','2019-04-29 21:41:02'),(1640,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'60.186.107.59','2019-04-29 22:11:44'),(1641,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.200.135.111','2019-04-29 22:52:24'),(1642,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.200.135.111','2019-04-29 22:52:30'),(1643,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'124.200.135.111','2019-04-29 22:53:41'),(1644,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'124.200.135.111','2019-04-29 22:54:33'),(1645,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.200.135.111','2019-04-29 22:55:05'),(1646,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'124.200.135.111','2019-04-29 22:55:10'),(1647,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',6,'101.71.41.226','2019-04-30 15:53:11'),(1648,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'101.71.41.226','2019-04-30 15:53:51'),(1649,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'211.138.20.170','2019-04-30 17:28:43'),(1650,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.4.211.218','2019-04-30 17:50:51'),(1651,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.96.112.218','2019-04-30 19:28:29'),(1652,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',420,'180.163.220.68','2019-04-30 19:29:04'),(1653,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',232,'112.96.112.218','2019-04-30 19:29:55'),(1654,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'42.236.10.117','2019-04-30 19:30:24'),(1655,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'112.96.112.218','2019-04-30 20:24:10'),(1656,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'180.163.220.4','2019-04-30 20:24:35'),(1657,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.97.162.82','2019-04-30 21:12:28'),(1658,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.97.162.82','2019-04-30 21:13:56'),(1659,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'115.192.190.35','2019-04-30 21:45:58'),(1660,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',45,'115.192.190.35','2019-04-30 21:46:06'),(1661,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',442,'115.192.190.35','2019-04-30 21:46:14'),(1662,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'115.192.190.35','2019-04-30 21:46:28'),(1663,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.192.190.35','2019-04-30 21:46:46'),(1664,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'115.192.190.35','2019-04-30 21:57:45'),(1665,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'112.97.162.82','2019-04-30 22:26:01'),(1666,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'42.236.10.125','2019-04-30 22:26:30'),(1667,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',55,'112.97.251.129','2019-04-30 22:40:03'),(1668,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',220,'180.163.220.4','2019-04-30 22:40:27'),(1669,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',30,'117.172.254.54','2019-04-30 23:33:48'),(1670,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.172.254.54','2019-04-30 23:36:18'),(1671,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'112.97.163.247','2019-05-01 00:17:22'),(1672,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.196.242.238','2019-05-01 01:43:33'),(1673,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'115.192.190.35','2019-05-01 08:12:19'),(1674,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'115.192.190.35','2019-05-01 08:13:12'),(1675,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',5,'115.192.190.35','2019-05-01 08:13:27'),(1676,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'115.192.190.35','2019-05-01 09:00:53'),(1677,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',8,'115.192.190.35','2019-05-01 09:01:11'),(1678,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'115.192.190.35','2019-05-01 09:01:12'),(1679,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'115.192.190.35','2019-05-01 09:01:13'),(1680,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'115.192.190.35','2019-05-01 09:01:13'),(1681,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'115.192.190.35','2019-05-01 09:01:14'),(1682,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'115.192.190.35','2019-05-01 09:01:14'),(1683,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',206,'115.192.190.35','2019-05-01 09:01:15'),(1684,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',211,'115.192.190.35','2019-05-01 09:01:15'),(1685,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',411,'115.192.190.35','2019-05-01 09:01:16'),(1686,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',1442,'115.192.190.35','2019-05-01 09:01:16'),(1687,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',639,'115.192.190.35','2019-05-01 09:01:16'),(1688,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',624,'115.192.190.35','2019-05-01 09:01:17'),(1689,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',220,'115.192.190.35','2019-05-01 09:01:17'),(1690,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'120.4.156.221','2019-05-01 10:15:46'),(1691,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.4.156.221','2019-05-01 12:35:44'),(1692,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'58.246.221.163','2019-05-01 12:36:43'),(1693,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'121.20.198.86','2019-05-01 12:56:33'),(1694,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.154.161.19','2019-05-01 19:29:08'),(1695,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.154.161.19','2019-05-01 19:29:20'),(1696,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'111.196.22.5','2019-05-01 22:42:33'),(1697,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'111.196.22.5','2019-05-01 22:43:36'),(1698,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.196.22.5','2019-05-01 22:43:41'),(1699,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',47,'112.28.187.185','2019-05-01 23:10:16'),(1700,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.28.187.185','2019-05-01 23:10:51'),(1701,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',426,'112.28.187.185','2019-05-01 23:11:14'),(1702,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'111.196.22.5','2019-05-02 00:55:21'),(1703,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.196.22.5','2019-05-02 00:56:02'),(1704,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',629,'111.196.22.5','2019-05-02 00:56:27'),(1705,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'60.249.144.190','2019-05-02 01:20:03'),(1706,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'218.79.127.79','2019-05-02 16:02:17'),(1707,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.79.127.79','2019-05-02 16:02:49'),(1708,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',17,'111.146.68.241','2019-05-04 01:22:16'),(1709,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',633,'113.116.143.60','2019-05-04 16:24:52'),(1710,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',24,'180.165.88.158','2019-05-04 18:37:28'),(1711,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.89.19.197','2019-05-04 18:38:28'),(1712,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.10.94.22','2019-05-04 18:51:06'),(1713,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.10.94.22','2019-05-04 18:51:41'),(1714,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',6,'112.10.94.22','2019-05-04 19:26:30'),(1715,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.10.94.22','2019-05-04 19:26:53'),(1716,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.10.94.22','2019-05-04 19:26:55'),(1717,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'112.10.94.22','2019-05-04 21:09:28'),(1718,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',11,'111.193.233.100','2019-05-05 08:32:29'),(1719,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.127.12.170','2019-05-05 10:54:13'),(1720,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'123.127.12.170','2019-05-05 10:55:15'),(1721,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'123.127.12.170','2019-05-05 10:55:52'),(1722,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',626,'210.47.175.248','2019-05-05 11:42:42'),(1723,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'47.74.157.148','2019-05-05 11:57:55'),(1724,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'47.74.157.148','2019-05-05 12:00:49'),(1725,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'61.181.84.114','2019-05-05 12:46:09'),(1726,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'61.181.84.114','2019-05-05 12:58:45'),(1727,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'47.74.157.148','2019-05-05 14:03:01'),(1728,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-05-05 14:27:13'),(1729,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.14.28.130','2019-05-05 15:42:22'),(1730,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'183.14.28.130','2019-05-05 15:49:32'),(1731,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'183.14.28.130','2019-05-05 15:49:54'),(1732,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'113.246.106.227','2019-05-05 15:55:12'),(1733,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',630,'113.246.106.227','2019-05-05 15:55:20'),(1734,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'113.246.106.227','2019-05-05 15:55:31'),(1735,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.242.67.50','2019-05-05 16:00:57'),(1736,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.246.106.227','2019-05-05 16:02:35'),(1737,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.246.106.227','2019-05-05 16:06:53'),(1738,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',14,'47.74.157.148','2019-05-05 16:12:11'),(1739,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'113.246.106.227','2019-05-05 16:16:25'),(1740,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.246.106.227','2019-05-05 16:29:01'),(1741,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.246.106.227','2019-05-05 16:29:04'),(1742,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.246.106.227','2019-05-05 16:29:05'),(1743,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.88.5.147','2019-05-05 17:50:48'),(1744,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'117.88.5.147','2019-05-05 17:52:50'),(1745,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',222,'117.88.5.147','2019-05-05 17:54:05'),(1746,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'117.88.5.147','2019-05-05 17:54:35'),(1747,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',212,'117.88.5.147','2019-05-05 17:54:48'),(1748,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'221.5.109.16','2019-05-05 18:50:43'),(1749,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.5.109.16','2019-05-05 18:53:52'),(1750,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.246.106.227','2019-05-05 20:04:10'),(1751,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.246.106.227','2019-05-05 20:04:40'),(1752,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'125.89.7.88','2019-05-06 09:40:38'),(1753,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'180.155.91.15','2019-05-06 09:50:43'),(1754,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.210.240','2019-05-06 10:29:51'),(1755,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',682,'116.6.229.10','2019-05-06 11:43:34'),(1756,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',233,'116.6.229.10','2019-05-06 11:43:38'),(1757,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',425,'116.6.229.10','2019-05-06 11:43:43'),(1758,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.16.60.19','2019-05-06 11:57:43'),(1759,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'183.63.51.77','2019-05-06 12:45:15'),(1760,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',14,'183.63.51.77','2019-05-06 12:45:32'),(1761,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.63.51.77','2019-05-06 12:45:51'),(1762,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'183.63.51.77','2019-05-06 12:46:09'),(1763,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',17,'183.63.51.77','2019-05-06 12:46:33'),(1764,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'183.63.51.77','2019-05-06 12:55:56'),(1765,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.178.153.117','2019-05-06 13:52:49'),(1766,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'222.247.211.130','2019-05-06 14:25:18'),(1767,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.247.211.130','2019-05-06 14:25:51'),(1768,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.63.51.77','2019-05-06 14:49:09'),(1769,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-05-06 14:50:19'),(1770,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.118.186.81','2019-05-06 15:40:01'),(1771,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.69.66.50','2019-05-06 16:27:45'),(1772,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'222.247.211.130','2019-05-06 18:32:00'),(1773,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.0.145','2019-05-06 20:22:16'),(1774,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'42.236.10.84','2019-05-06 20:22:50'),(1775,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',631,'117.136.0.145','2019-05-06 20:23:23'),(1776,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',1024,'42.236.10.93','2019-05-06 20:23:49'),(1777,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.196.86.82','2019-05-06 23:08:36'),(1778,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.14.6.99','2019-05-07 02:11:29'),(1779,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.166.151.191','2019-05-07 02:12:29'),(1780,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.16.60.19','2019-05-07 09:21:06'),(1781,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.178.153.117','2019-05-07 09:25:54'),(1782,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.89.64.240','2019-05-07 10:21:22'),(1783,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.89.64.240','2019-05-07 10:21:37'),(1784,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'23.106.145.186','2019-05-07 10:47:53'),(1785,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',5,'23.106.145.186','2019-05-07 10:48:34'),(1786,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.196.86.82','2019-05-07 12:10:36'),(1787,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',211,'122.193.33.86','2019-05-07 16:43:38'),(1788,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'122.193.33.86','2019-05-07 16:43:44'),(1789,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'223.104.213.79','2019-05-07 17:40:25'),(1790,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.98.47.197','2019-05-07 17:48:18'),(1791,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.10.131.252','2019-05-07 21:09:55'),(1792,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.10.131.252','2019-05-07 21:16:04'),(1793,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'117.154.9.239','2019-05-07 22:58:34'),(1794,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'117.154.9.239','2019-05-08 00:25:22'),(1795,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'117.154.9.239','2019-05-08 00:49:26'),(1796,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.154.9.239','2019-05-08 00:50:54'),(1797,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',5,'113.246.54.86','2019-05-08 10:23:08'),(1798,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'113.246.54.86','2019-05-08 10:24:02'),(1799,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'113.246.54.86','2019-05-08 10:28:56'),(1800,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'23.106.145.186','2019-05-08 11:55:13'),(1801,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'23.106.145.186','2019-05-08 11:57:50'),(1802,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'23.106.145.186','2019-05-08 12:01:41'),(1803,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'23.106.145.186','2019-05-08 12:02:18'),(1804,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'125.69.42.232','2019-05-08 13:01:05'),(1805,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'125.69.42.232','2019-05-08 13:30:08'),(1806,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',207,'211.144.197.66','2019-05-08 13:37:53'),(1807,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'58.40.17.70','2019-05-08 13:45:51'),(1808,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',429,'210.47.175.248','2019-05-08 15:46:42'),(1809,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'210.47.175.248','2019-05-08 16:47:36'),(1810,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'210.47.175.248','2019-05-08 17:00:48'),(1811,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',10,'110.80.18.234','2019-05-08 17:38:14'),(1812,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',214,'110.80.18.234','2019-05-08 17:38:23'),(1813,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',664,'110.80.18.234','2019-05-08 17:38:41'),(1814,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'14.222.180.65','2019-05-08 19:29:06'),(1815,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'14.222.180.65','2019-05-08 19:29:14'),(1816,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'42.100.230.209','2019-05-08 20:49:19'),(1817,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1038,'210.47.175.248','2019-05-08 20:53:38'),(1818,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',7,'140.243.245.65','2019-05-08 21:55:12'),(1819,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'140.243.245.65','2019-05-08 21:56:54'),(1820,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',211,'119.103.188.34','2019-05-09 00:25:14'),(1821,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'119.103.188.34','2019-05-09 00:27:59'),(1822,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'210.47.175.248','2019-05-09 11:08:49'),(1823,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'112.17.240.149','2019-05-09 12:20:55'),(1824,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.115.79.130','2019-05-09 13:28:47'),(1825,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'27.115.79.130','2019-05-09 13:29:20'),(1826,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',208,'42.236.10.117','2019-05-09 13:29:54'),(1827,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'27.115.79.130','2019-05-09 13:30:19'),(1828,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1543,'27.115.79.130','2019-05-09 13:30:45'),(1829,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'117.155.124.93','2019-05-09 13:58:07'),(1830,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'223.104.212.214','2019-05-09 16:07:55'),(1831,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1298,'58.40.17.70','2019-05-09 17:51:29'),(1832,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'58.40.17.70','2019-05-09 17:54:11'),(1833,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',6,'58.40.17.70','2019-05-09 17:54:15'),(1834,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',421,'58.40.17.70','2019-05-09 17:54:20'),(1835,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'58.40.17.70','2019-05-09 17:55:02'),(1836,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',5,'58.40.17.70','2019-05-09 17:55:37'),(1837,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',624,'183.63.51.77','2019-05-09 17:56:47'),(1838,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'183.63.51.77','2019-05-09 18:16:18'),(1839,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'183.63.51.77','2019-05-09 18:16:56'),(1840,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',5,'183.63.51.77','2019-05-09 18:17:00'),(1841,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'111.58.48.39','2019-05-09 19:40:31'),(1842,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'211.97.30.208','2019-05-09 22:43:23'),(1843,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'125.42.146.217','2019-05-10 00:29:08'),(1844,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'125.42.146.217','2019-05-10 00:29:49'),(1845,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'125.42.146.217','2019-05-10 00:33:17'),(1846,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.42.146.200','2019-05-10 09:39:03'),(1847,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'125.42.146.200','2019-05-10 09:39:52'),(1848,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'125.42.146.200','2019-05-10 09:40:17'),(1849,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'125.42.146.200','2019-05-10 09:40:32'),(1850,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'125.42.146.200','2019-05-10 09:40:50'),(1851,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',6,'125.42.146.200','2019-05-10 09:41:03'),(1852,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'125.42.146.200','2019-05-10 09:42:04'),(1853,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'125.42.146.200','2019-05-10 09:43:33'),(1854,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.42.146.200','2019-05-10 09:49:32'),(1855,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'211.138.20.170','2019-05-10 11:04:12'),(1856,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'211.138.20.170','2019-05-10 11:05:40'),(1857,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'180.154.219.230','2019-05-10 11:37:14'),(1858,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.154.219.230','2019-05-10 11:37:36'),(1859,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'218.80.192.218','2019-05-10 14:25:09'),(1860,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.80.192.218','2019-05-10 14:25:25'),(1861,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'117.136.110.196','2019-05-10 14:55:04'),(1862,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'117.136.110.196','2019-05-10 14:55:26'),(1863,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'43.224.45.154','2019-05-10 15:20:37'),(1864,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'180.173.198.194','2019-05-10 16:17:36'),(1865,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'112.97.212.172','2019-05-10 21:03:55'),(1866,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',673,'42.236.10.78','2019-05-10 21:04:23'),(1867,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'112.97.163.87','2019-05-10 23:16:52'),(1868,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'180.163.220.5','2019-05-10 23:17:33'),(1869,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',9,'223.72.93.156','2019-05-10 23:45:35'),(1870,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'223.72.93.156','2019-05-10 23:46:57'),(1871,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'223.72.93.156','2019-05-10 23:47:08'),(1872,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'223.72.93.156','2019-05-10 23:47:12'),(1873,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1624,'180.163.220.66','2019-05-10 23:48:12'),(1874,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1522,'223.72.93.156','2019-05-10 23:48:15'),(1875,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',6,'121.51.32.144','2019-05-10 23:49:13'),(1876,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'117.136.52.61','2019-05-11 00:50:37'),(1877,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.52.61','2019-05-11 00:52:21'),(1878,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'39.178.41.207','2019-05-11 08:12:52'),(1879,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'39.178.41.207','2019-05-11 08:14:06'),(1880,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'39.178.41.207','2019-05-11 08:14:24'),(1881,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',7,'39.178.41.207','2019-05-11 08:14:48'),(1882,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'39.178.41.207','2019-05-11 08:17:25'),(1883,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.41.145.24','2019-05-11 15:39:16'),(1884,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.41.145.24','2019-05-11 15:40:23'),(1885,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',6,'180.160.196.19','2019-05-12 08:50:58'),(1886,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',5,'180.160.196.19','2019-05-12 08:51:07'),(1887,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.160.196.19','2019-05-12 08:54:41'),(1888,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.159.197.160','2019-05-12 11:50:02'),(1889,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'183.159.197.160','2019-05-12 11:58:40'),(1890,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.159.197.160','2019-05-12 11:59:05'),(1891,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',5,'14.28.131.64','2019-05-12 17:43:26'),(1892,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'14.28.131.64','2019-05-12 17:44:11'),(1893,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'14.28.131.64','2019-05-12 17:45:26'),(1894,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',5,'14.28.131.64','2019-05-12 17:46:33'),(1895,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'14.28.131.64','2019-05-12 17:46:56'),(1896,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',4,'117.136.40.227','2019-05-12 19:21:04'),(1897,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.192.87.138','2019-05-12 23:36:21'),(1898,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'115.192.87.138','2019-05-12 23:36:57'),(1899,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'115.192.87.138','2019-05-12 23:38:40'),(1900,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'115.192.87.138','2019-05-12 23:38:45'),(1901,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.192.87.138','2019-05-12 23:38:59'),(1902,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'115.192.87.138','2019-05-12 23:39:07'),(1903,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'210.42.24.134','2019-05-13 07:22:25'),(1904,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'180.160.196.19','2019-05-13 09:14:27'),(1905,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',6,'125.33.127.166','2019-05-13 09:48:30'),(1906,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'202.121.146.139','2019-05-13 10:03:29'),(1907,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'202.121.146.139','2019-05-13 10:03:34'),(1908,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'202.121.146.139','2019-05-13 10:03:46'),(1909,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'202.121.146.139','2019-05-13 10:04:11'),(1910,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'202.121.146.139','2019-05-13 10:05:17'),(1911,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'36.110.40.18','2019-05-13 10:18:17'),(1912,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.110.40.18','2019-05-13 10:18:47'),(1913,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'114.87.150.19','2019-05-13 12:36:14'),(1914,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.87.150.19','2019-05-13 12:36:46'),(1915,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.110.40.18','2019-05-13 13:55:00'),(1916,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.110.40.18','2019-05-13 14:19:07'),(1917,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.110.40.18','2019-05-13 14:19:11'),(1918,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'36.110.40.18','2019-05-13 14:19:15'),(1919,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.235.107.18','2019-05-13 15:15:33'),(1920,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',218,'43.224.45.154','2019-05-13 16:45:13'),(1921,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'43.224.45.154','2019-05-13 16:45:31'),(1922,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',13,'43.224.45.154','2019-05-13 16:46:11'),(1923,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',462,'220.112.121.241','2019-05-13 22:42:21'),(1924,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'220.112.121.241','2019-05-13 22:42:26'),(1925,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',17,'124.15.200.35','2019-05-14 06:30:56'),(1926,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'118.203.125.66','2019-05-14 11:45:46'),(1927,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'61.129.6.159','2019-05-14 11:46:46'),(1928,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'36.110.40.18','2019-05-14 14:41:06'),(1929,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',613,'59.42.75.20','2019-05-14 18:17:42'),(1930,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.160.196.19','2019-05-14 18:30:33'),(1931,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.85.77.138','2019-05-15 08:00:56'),(1932,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'120.85.77.138','2019-05-15 08:03:16'),(1933,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'120.85.77.138','2019-05-15 08:03:46'),(1934,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'120.85.77.138','2019-05-15 08:04:20'),(1935,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'120.85.77.138','2019-05-15 08:05:22'),(1936,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'120.85.77.138','2019-05-15 08:06:00'),(1937,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.85.77.138','2019-05-15 08:06:22'),(1938,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'120.85.77.138','2019-05-15 08:14:30'),(1939,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'120.85.77.138','2019-05-15 08:16:50'),(1940,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'120.85.77.138','2019-05-15 08:17:09'),(1941,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.85.77.138','2019-05-15 09:05:25'),(1942,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'120.85.77.138','2019-05-15 09:08:06'),(1943,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'223.72.37.80','2019-05-15 09:15:38'),(1944,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'121.51.32.144','2019-05-15 09:16:38'),(1945,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',15,'223.73.73.46','2019-05-15 09:46:24'),(1946,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.73.73.46','2019-05-15 09:47:51'),(1947,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'223.73.73.46','2019-05-15 09:59:46'),(1948,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'223.73.73.46','2019-05-15 10:01:48'),(1949,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'223.73.73.46','2019-05-15 10:03:32'),(1950,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'223.73.73.46','2019-05-15 10:05:20'),(1951,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.73.73.46','2019-05-15 10:05:26'),(1952,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.119.143.250','2019-05-15 10:47:44'),(1953,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'1.119.143.250','2019-05-15 10:48:03'),(1954,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'1.119.143.250','2019-05-15 10:48:14'),(1955,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',219,'1.119.143.250','2019-05-15 11:03:01'),(1956,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'58.211.45.114','2019-05-15 11:38:40'),(1957,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'125.70.203.96','2019-05-15 13:42:12'),(1958,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'171.214.218.107','2019-05-15 14:13:06'),(1959,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'125.70.203.96','2019-05-15 15:59:43'),(1960,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',682,'125.70.203.96','2019-05-15 16:07:04'),(1961,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'125.70.203.96','2019-05-15 16:12:52'),(1962,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'125.70.203.96','2019-05-15 16:23:21'),(1963,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',13,'125.70.203.96','2019-05-15 16:26:44'),(1964,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',207,'125.70.203.96','2019-05-15 16:27:09'),(1965,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'125.70.203.96','2019-05-15 16:27:34'),(1966,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'125.70.203.96','2019-05-15 16:28:14'),(1967,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',7,'60.28.142.26','2019-05-15 17:02:29'),(1968,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'39.178.47.16','2019-05-15 17:44:51'),(1969,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'202.120.146.16','2019-05-15 18:02:01'),(1970,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'202.120.146.16','2019-05-15 18:09:55'),(1971,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'115.192.84.66','2019-05-15 19:49:56'),(1972,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'115.192.84.66','2019-05-15 19:50:21'),(1973,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'42.102.250.123','2019-05-15 21:21:12'),(1974,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.217.216.216','2019-05-15 22:30:06'),(1975,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',693,'60.28.142.26','2019-05-16 08:35:35'),(1976,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'222.68.54.73','2019-05-16 09:05:19'),(1977,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'60.28.142.26','2019-05-16 09:11:43'),(1978,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',8,'60.28.142.26','2019-05-16 09:11:57'),(1979,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'60.28.142.26','2019-05-16 09:13:50'),(1980,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'60.28.142.26','2019-05-16 09:53:44'),(1981,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'180.167.136.123','2019-05-16 11:13:35'),(1982,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'103.214.84.237','2019-05-16 11:20:22'),(1983,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'103.214.84.237','2019-05-16 11:20:42'),(1984,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',2,'103.214.84.237','2019-05-16 11:20:50'),(1985,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'1.82.253.50','2019-05-16 11:28:28'),(1986,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'114.241.82.181','2019-05-16 12:01:42'),(1987,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'114.241.82.181','2019-05-16 12:02:05'),(1988,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'114.241.82.181','2019-05-16 12:03:05'),(1989,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.241.82.181','2019-05-16 12:04:05'),(1990,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.138.253.107','2019-05-16 12:21:43'),(1991,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'103.214.84.237','2019-05-16 13:09:04'),(1992,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'202.121.146.139','2019-05-16 13:31:17'),(1993,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'202.121.146.139','2019-05-16 13:33:55'),(1994,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'114.241.82.181','2019-05-16 13:56:33'),(1995,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'114.241.82.181','2019-05-16 13:56:58'),(1996,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',2,'114.241.82.181','2019-05-16 14:06:46'),(1997,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.241.82.181','2019-05-16 14:07:11'),(1998,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.138.20.170','2019-05-16 14:08:59'),(1999,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'49.71.203.255','2019-05-16 14:19:43'),(2000,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'114.241.82.181','2019-05-16 14:24:41'),(2001,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.241.82.181','2019-05-16 14:25:23'),(2002,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.241.82.181','2019-05-16 14:25:33'),(2003,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',30,'117.62.191.229','2019-05-16 14:35:34'),(2004,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.62.191.229','2019-05-16 14:36:25'),(2005,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'61.129.6.227','2019-05-16 14:36:34'),(2006,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.129.8.179','2019-05-16 14:37:24'),(2007,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'103.214.84.237','2019-05-16 14:49:43'),(2008,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.214.84.237','2019-05-16 14:53:19'),(2009,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',46,'103.214.84.237','2019-05-16 14:55:04'),(2010,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.28.142.26','2019-05-16 15:34:36'),(2011,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.227.254.225','2019-05-16 15:54:57'),(2012,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'103.214.84.237','2019-05-16 17:20:27'),(2013,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'101.229.72.10','2019-05-16 17:23:22'),(2014,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'101.229.72.10','2019-05-16 17:25:58'),(2015,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'114.241.82.181','2019-05-16 18:17:25'),(2016,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'114.241.82.181','2019-05-16 18:19:32'),(2017,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.241.82.181','2019-05-16 18:25:57'),(2018,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'114.241.82.181','2019-05-16 18:26:08'),(2019,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'114.241.82.181','2019-05-16 18:27:57'),(2020,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'103.214.84.237','2019-05-16 19:40:56'),(2021,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'103.214.84.237','2019-05-16 19:45:00'),(2022,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'103.214.84.237','2019-05-16 19:48:14'),(2023,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',672,'223.104.21.37','2019-05-16 20:20:18'),(2024,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',3510,'220.115.233.150','2019-05-16 22:24:23'),(2025,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'114.241.82.181','2019-05-16 23:17:19'),(2026,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'203.208.60.95','2019-05-17 08:29:54'),(2027,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'203.208.60.120','2019-05-17 08:29:58'),(2028,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'203.208.60.103','2019-05-17 08:30:01'),(2029,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'203.208.60.102','2019-05-17 08:30:02'),(2030,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'203.208.60.111','2019-05-17 08:30:13'),(2031,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'203.208.60.54','2019-05-17 08:30:25'),(2032,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'203.208.60.75','2019-05-17 08:30:41'),(2033,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',2,'203.208.60.52','2019-05-17 08:33:07'),(2034,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'125.33.127.166','2019-05-17 09:29:35'),(2035,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.214.84.237','2019-05-17 09:35:55'),(2036,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'103.214.84.237','2019-05-17 09:35:58'),(2037,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.49.45.138','2019-05-17 09:46:55'),(2038,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',5,'112.28.157.192','2019-05-17 10:24:48'),(2039,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'103.214.84.237','2019-05-17 11:16:00'),(2040,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'103.214.84.237','2019-05-17 11:17:00'),(2041,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'103.214.84.237','2019-05-17 11:20:44'),(2042,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',662,'103.214.84.237','2019-05-17 11:53:02'),(2043,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'103.214.84.237','2019-05-17 11:53:09'),(2044,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'103.214.84.237','2019-05-17 11:53:12'),(2045,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',4,'103.214.84.237','2019-05-17 11:53:46'),(2046,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.28.142.26','2019-05-17 12:52:25'),(2047,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'122.96.41.96','2019-05-17 13:19:35'),(2048,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.28.142.26','2019-05-17 13:30:13'),(2049,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.28.142.26','2019-05-17 13:30:17'),(2050,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'103.214.84.237','2019-05-17 14:00:31'),(2051,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'103.214.84.237','2019-05-17 14:02:08'),(2052,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'182.149.66.9','2019-05-17 15:31:04'),(2053,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.149.66.9','2019-05-17 15:41:13'),(2054,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.149.66.9','2019-05-17 15:41:23'),(2055,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'182.149.66.9','2019-05-17 15:41:26'),(2056,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.149.66.9','2019-05-17 15:43:49'),(2057,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.204.220.62','2019-05-17 17:48:20'),(2058,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'111.204.220.62','2019-05-17 17:48:33'),(2059,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'59.46.93.142','2019-05-17 18:05:33'),(2060,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'39.178.45.72','2019-05-17 19:29:05'),(2061,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.109.120.168','2019-05-17 21:09:32'),(2062,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'113.109.120.168','2019-05-17 21:09:45'),(2063,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',268,'211.138.20.167','2019-05-18 09:40:11'),(2064,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'36.36.18.43','2019-05-18 12:29:19'),(2065,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',634,'36.36.18.43','2019-05-18 12:29:50'),(2066,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',432,'36.36.18.43','2019-05-18 12:30:06'),(2067,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'218.197.153.185','2019-05-19 11:16:19'),(2068,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'178.154.171.28','2019-05-19 12:16:24'),(2069,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.93.155.197','2019-05-19 13:05:04'),(2070,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.246.221.61','2019-05-19 13:06:04'),(2071,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',5,'117.100.159.16','2019-05-19 14:13:27'),(2072,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'117.100.159.16','2019-05-19 14:13:55'),(2073,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.123.246.15','2019-05-19 21:30:02'),(2074,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'119.123.246.15','2019-05-19 21:31:05'),(2075,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'58.247.68.219','2019-05-19 23:39:21'),(2076,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'58.247.68.219','2019-05-19 23:39:37'),(2077,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'58.247.68.219','2019-05-19 23:41:38'),(2078,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'58.247.68.219','2019-05-19 23:41:59'),(2079,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'61.149.14.8','2019-05-20 08:49:02'),(2080,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',303,'60.190.7.252','2019-05-20 11:37:33'),(2081,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'54.186.178.251','2019-05-20 11:47:02'),(2082,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.232.10.234','2019-05-20 17:50:23'),(2083,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'123.232.10.234','2019-05-20 17:51:06'),(2084,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.232.10.234','2019-05-20 17:51:39'),(2085,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'123.232.10.234','2019-05-20 17:52:37'),(2086,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.232.10.234','2019-05-20 17:53:09'),(2087,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'123.232.10.234','2019-05-20 17:58:03'),(2088,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'27.115.79.130','2019-05-20 18:20:17'),(2089,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',642,'27.115.79.130','2019-05-20 18:20:30'),(2090,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',7,'123.232.10.234','2019-05-20 18:31:41'),(2091,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'123.232.10.234','2019-05-20 18:34:18'),(2092,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'123.232.10.234','2019-05-20 18:34:55'),(2093,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.232.10.234','2019-05-20 18:39:13'),(2094,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'123.232.10.234','2019-05-20 19:12:23'),(2095,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'123.112.20.250','2019-05-20 22:44:07'),(2096,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',863,'112.11.128.71','2019-05-20 23:18:50'),(2097,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2244,'123.112.20.250','2019-05-20 23:19:40'),(2098,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.70.16.107','2019-05-21 09:21:19'),(2099,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'27.159.207.64','2019-05-21 10:11:18'),(2100,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'117.28.131.77','2019-05-21 11:08:17'),(2101,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.85.77.30','2019-05-21 12:12:07'),(2102,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'60.28.142.26','2019-05-21 14:42:27'),(2103,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'113.102.97.241','2019-05-21 15:44:04'),(2104,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.88.96.94','2019-05-21 21:46:19'),(2105,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'113.88.96.94','2019-05-21 21:46:33'),(2106,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.88.210.52','2019-05-21 22:30:43'),(2107,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',5,'112.96.165.127','2019-05-22 09:30:05'),(2108,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'60.28.142.26','2019-05-22 11:05:36'),(2109,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'40.83.101.57','2019-05-22 12:07:47'),(2110,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.160.27.118','2019-05-22 13:51:16'),(2111,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'61.149.14.8','2019-05-22 15:17:46'),(2112,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',676,'60.28.142.26','2019-05-22 15:23:50'),(2113,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',269,'113.235.126.45','2019-05-22 16:16:47'),(2114,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'113.235.126.45','2019-05-22 16:18:54'),(2115,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.120.146.16','2019-05-22 17:24:33'),(2116,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'202.120.146.16','2019-05-22 17:26:41'),(2117,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'1.203.173.90','2019-05-22 18:00:41'),(2118,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'1.203.173.90','2019-05-22 18:03:56'),(2119,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'1.203.173.90','2019-05-22 18:04:16'),(2120,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.203.173.90','2019-05-22 18:04:25'),(2121,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'1.203.173.90','2019-05-22 18:04:39'),(2122,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'1.203.173.90','2019-05-22 18:05:37'),(2123,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.203.173.90','2019-05-22 18:05:46'),(2124,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'1.203.173.90','2019-05-22 18:06:16'),(2125,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2,'1.203.173.90','2019-05-22 18:07:21'),(2126,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.113.187.245','2019-05-22 18:59:04'),(2127,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'116.56.147.83','2019-05-22 23:15:10'),(2128,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'116.56.147.83','2019-05-22 23:16:01'),(2129,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'115.35.42.41','2019-05-23 00:18:37'),(2130,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'1.119.143.250','2019-05-23 10:39:42'),(2131,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'1.119.143.250','2019-05-23 10:39:52'),(2132,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',430,'1.119.143.250','2019-05-23 10:39:56'),(2133,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'59.46.93.142','2019-05-23 12:02:02'),(2134,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.9.217.8','2019-05-23 15:48:35'),(2135,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'117.154.11.60','2019-05-23 15:52:23'),(2136,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.154.11.60','2019-05-23 15:55:36'),(2137,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'112.254.100.253','2019-05-23 16:11:10'),(2138,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',35,'112.254.100.253','2019-05-23 16:11:45'),(2139,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'122.224.209.165','2019-05-23 20:28:18'),(2140,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.3','2019-05-23 20:29:01'),(2141,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.140.29.20','2019-05-23 21:10:05'),(2142,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'111.172.10.79','2019-05-23 22:03:31'),(2143,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',39,'171.13.138.226','2019-05-24 13:47:57'),(2144,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'171.13.138.226','2019-05-24 13:48:22'),(2145,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'222.76.243.172','2019-05-24 13:55:05'),(2146,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',46,'36.110.41.66','2019-05-24 14:46:05'),(2147,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'106.47.102.40','2019-05-24 16:00:13'),(2148,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',10,'106.47.102.40','2019-05-24 16:00:35'),(2149,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'222.76.243.172','2019-05-24 16:13:34'),(2150,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'222.76.243.172','2019-05-24 16:13:47'),(2151,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',5,'222.76.243.172','2019-05-24 16:14:31'),(2152,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',9,'222.76.243.172','2019-05-24 16:15:34'),(2153,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',7,'222.76.243.172','2019-05-24 16:21:20'),(2154,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'222.76.243.172','2019-05-24 16:21:31'),(2155,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'222.76.243.172','2019-05-24 16:27:05'),(2156,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',8,'125.42.146.216','2019-05-24 16:46:51'),(2157,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'125.42.146.216','2019-05-24 16:50:48'),(2158,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',87,'123.232.10.234','2019-05-24 17:54:41'),(2159,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',34,'123.232.10.234','2019-05-24 17:56:21'),(2160,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'106.34.13.10','2019-05-25 09:39:47'),(2161,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'106.34.13.10','2019-05-25 09:40:20'),(2162,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'106.34.13.10','2019-05-25 09:41:53'),(2163,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.34.13.10','2019-05-25 09:46:30'),(2164,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.6.90.251','2019-05-25 10:42:27'),(2165,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',13,'183.6.90.251','2019-05-25 10:44:35'),(2166,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'219.137.49.166','2019-05-25 11:33:25'),(2167,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',11,'219.137.49.166','2019-05-25 11:33:31'),(2168,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',236,'219.137.49.166','2019-05-25 11:33:35'),(2169,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',6,'58.62.52.102','2019-05-25 15:38:43'),(2170,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',9,'58.62.52.102','2019-05-25 15:38:46'),(2171,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'58.62.52.102','2019-05-25 15:38:55'),(2172,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.128.95.150','2019-05-25 16:54:49'),(2173,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'117.154.8.69','2019-05-25 20:44:54'),(2174,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.154.8.69','2019-05-25 20:51:01'),(2175,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',7,'120.85.77.245','2019-05-25 20:57:51'),(2176,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'106.34.13.10','2019-05-25 22:10:25'),(2177,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'106.34.13.10','2019-05-25 22:16:24'),(2178,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'106.34.13.10','2019-05-25 22:16:33'),(2179,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'106.34.13.10','2019-05-25 22:16:40'),(2180,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'106.34.13.10','2019-05-25 22:16:44'),(2181,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',10,'106.34.13.10','2019-05-25 22:16:51'),(2182,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'106.34.13.10','2019-05-25 22:16:59'),(2183,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'106.34.13.10','2019-05-25 22:17:12'),(2184,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'14.127.178.219','2019-05-26 10:34:38'),(2185,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'106.34.13.10','2019-05-26 10:35:52'),(2186,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',224,'14.127.178.219','2019-05-26 11:33:07'),(2187,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.65.36.91','2019-05-26 13:49:47'),(2188,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5595,'42.48.77.54','2019-05-26 14:16:31'),(2189,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',13,'42.48.77.54','2019-05-26 14:33:42'),(2190,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',25,'202.199.6.64','2019-05-26 15:39:18'),(2191,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',14,'118.199.27.61','2019-05-26 15:43:45'),(2192,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',49,'118.199.27.61','2019-05-26 15:44:12'),(2193,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',8,'118.199.27.61','2019-05-26 15:44:21'),(2194,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'118.199.27.61','2019-05-26 15:44:27'),(2195,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'101.54.134.198','2019-05-26 17:26:06'),(2196,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'120.230.126.224','2019-05-26 21:45:05'),(2197,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',1250,'120.230.126.224','2019-05-26 21:45:18'),(2198,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'180.163.220.66','2019-05-26 21:45:26'),(2199,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',665,'120.230.126.224','2019-05-26 21:45:28'),(2200,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.34.62.155','2019-05-26 22:25:26'),(2201,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'106.34.62.155','2019-05-26 22:25:29'),(2202,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'106.34.62.155','2019-05-26 22:25:32'),(2203,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',5,'118.199.27.61','2019-05-26 22:39:01'),(2204,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'118.199.27.61','2019-05-26 22:39:12'),(2205,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.197.176.219','2019-05-27 09:05:56'),(2206,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',15,'135.245.48.87','2019-05-27 09:20:02'),(2207,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'23.106.145.186','2019-05-27 15:12:43'),(2208,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',9,'14.223.177.11','2019-05-27 17:00:35'),(2209,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'14.223.177.11','2019-05-27 17:01:46'),(2210,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.223.177.11','2019-05-27 17:07:55'),(2211,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'14.223.177.11','2019-05-27 17:07:59'),(2212,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'114.241.81.5','2019-05-27 18:51:45'),(2213,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'114.241.81.5','2019-05-27 18:54:09'),(2214,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',25,'123.165.54.7','2019-05-27 19:42:26'),(2215,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'211.101.61.49','2019-05-27 22:38:35'),(2216,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'180.152.104.20','2019-05-27 23:14:54'),(2217,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'14.28.26.239','2019-05-28 00:16:05'),(2218,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'14.28.26.239','2019-05-28 00:17:12'),(2219,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.28.26.239','2019-05-28 00:17:40'),(2220,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'14.28.26.239','2019-05-28 00:25:16'),(2221,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'117.136.52.235','2019-05-28 13:29:42'),(2222,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',7,'43.247.230.44','2019-05-28 13:33:42'),(2223,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',225,'183.17.233.112','2019-05-28 14:21:59'),(2224,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'14.223.176.36','2019-05-28 14:30:59'),(2225,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',8,'59.41.22.25','2019-05-28 17:40:16'),(2226,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'14.223.176.36','2019-05-28 18:24:09'),(2227,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'14.223.176.36','2019-05-28 18:24:52'),(2228,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'14.223.176.36','2019-05-28 18:25:18'),(2229,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'114.241.81.5','2019-05-28 19:43:14'),(2230,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'223.73.111.40','2019-05-29 09:38:57'),(2231,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.159.17.219','2019-05-29 10:17:12'),(2232,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.159.17.219','2019-05-29 10:42:39'),(2233,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.159.17.219','2019-05-29 10:59:26'),(2234,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.159.17.219','2019-05-29 10:59:30'),(2235,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'117.159.17.219','2019-05-29 11:08:26'),(2236,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',18,'117.159.17.219','2019-05-29 11:17:34'),(2237,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'117.159.17.219','2019-05-29 11:17:48'),(2238,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',7,'117.159.17.219','2019-05-29 14:59:34'),(2239,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'117.159.17.219','2019-05-29 14:59:46'),(2240,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'117.159.17.219','2019-05-29 15:00:39'),(2241,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',17,'222.247.164.53','2019-05-29 15:19:43'),(2242,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'222.247.164.53','2019-05-29 15:20:57'),(2243,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'218.57.140.130','2019-05-29 16:07:12'),(2244,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.57.140.130','2019-05-29 16:08:11'),(2245,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'218.57.140.130','2019-05-29 16:09:13'),(2246,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'218.57.140.130','2019-05-29 16:09:50'),(2247,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'218.57.140.130','2019-05-29 16:10:58'),(2248,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'218.57.140.130','2019-05-29 16:11:10'),(2249,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.57.140.130','2019-05-29 16:14:14'),(2250,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',26,'60.12.250.58','2019-05-29 17:42:33'),(2251,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.159.17.219','2019-05-29 17:45:13'),(2252,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'223.71.54.134','2019-05-29 19:25:38'),(2253,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',23,'223.71.54.134','2019-05-29 19:25:49'),(2254,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',9,'219.143.13.53','2019-05-29 20:26:19'),(2255,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.143.13.53','2019-05-29 20:26:31'),(2256,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',13,'219.143.13.53','2019-05-29 20:34:21'),(2257,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.155.223.226','2019-05-29 20:48:35'),(2258,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'14.155.223.226','2019-05-29 20:51:10'),(2259,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.155.223.113','2019-05-29 20:55:43'),(2260,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'14.155.223.226','2019-05-29 20:59:14'),(2261,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'14.155.223.226','2019-05-29 20:59:27'),(2262,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',14,'14.155.223.226','2019-05-29 21:00:12'),(2263,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',14,'120.230.126.96','2019-05-29 21:13:53'),(2264,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1466,'120.230.126.96','2019-05-29 21:14:17'),(2265,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'180.163.220.5','2019-05-29 21:15:00'),(2266,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'223.104.63.28','2019-05-29 21:43:50'),(2267,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',6,'223.104.63.28','2019-05-29 21:43:54'),(2268,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'223.104.63.28','2019-05-29 21:44:05'),(2269,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',210,'222.212.90.203','2019-05-30 11:10:45'),(2270,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'183.209.33.8','2019-05-30 12:30:13'),(2271,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'219.159.139.59','2019-05-30 13:52:46'),(2272,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'219.159.139.59','2019-05-30 13:52:58'),(2273,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'219.159.139.59','2019-05-30 13:55:00'),(2274,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',4,'61.155.17.34','2019-05-30 15:43:07'),(2275,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'61.155.17.34','2019-05-30 15:43:14'),(2276,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'122.233.157.177','2019-05-30 16:11:00'),(2277,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'122.233.157.177','2019-05-30 16:11:16'),(2278,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'122.233.157.177','2019-05-30 16:17:47'),(2279,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'122.233.157.177','2019-05-30 16:20:03'),(2280,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.223.177.181','2019-05-30 16:26:27'),(2281,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'14.223.177.181','2019-05-30 16:35:48'),(2282,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'123.127.45.4','2019-05-30 18:33:22'),(2283,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'123.127.45.4','2019-05-30 18:33:40'),(2284,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',211,'14.223.177.181','2019-05-30 18:48:41'),(2285,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',221,'14.223.177.181','2019-05-30 18:49:55'),(2286,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-05-30 19:12:26'),(2287,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'106.38.108.212','2019-05-30 19:23:57'),(2288,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.38.108.212','2019-05-30 19:25:04'),(2289,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'106.38.108.212','2019-05-30 19:28:51'),(2290,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'183.63.51.77','2019-05-30 19:45:32'),(2291,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-05-30 19:58:57'),(2292,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'183.63.51.77','2019-05-30 19:59:32'),(2293,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',421,'117.136.0.141','2019-05-30 22:59:02'),(2294,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'117.136.0.141','2019-05-30 23:02:57'),(2295,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',8,'117.136.0.141','2019-05-30 23:04:30'),(2296,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'14.223.178.230','2019-05-31 09:40:35'),(2297,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'61.235.163.210','2019-05-31 10:20:20'),(2298,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',617,'218.108.100.230','2019-05-31 10:42:10'),(2299,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'54.188.2.104','2019-05-31 10:43:34'),(2300,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-05-31 12:23:04'),(2301,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.196.73.175','2019-05-31 16:25:44'),(2302,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.196.73.175','2019-05-31 16:27:06'),(2303,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.155.221.129','2019-05-31 19:27:28'),(2304,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.155.221.129','2019-05-31 19:33:28'),(2305,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'14.155.221.129','2019-05-31 19:33:36'),(2306,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'14.155.221.129','2019-05-31 19:34:24'),(2307,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',2,'14.155.221.129','2019-05-31 19:34:39'),(2308,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'14.155.221.129','2019-05-31 19:35:46'),(2309,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',7,'14.155.221.129','2019-05-31 19:35:52'),(2310,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.29.60.105','2019-05-31 19:38:45'),(2311,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'120.85.77.127','2019-06-01 00:31:09'),(2312,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'210.13.117.105','2019-06-01 11:55:51'),(2313,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'210.13.117.105','2019-06-01 11:56:19'),(2314,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',4,'118.199.40.3','2019-06-01 16:10:32'),(2315,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'118.199.40.3','2019-06-01 16:11:09'),(2316,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',422,'14.223.178.173','2019-06-01 16:27:43'),(2317,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'14.223.178.173','2019-06-01 16:27:55'),(2318,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'14.223.178.173','2019-06-01 16:27:58'),(2319,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',18,'14.223.178.173','2019-06-01 16:28:21'),(2320,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'14.223.178.173','2019-06-01 16:29:13'),(2321,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.223.178.173','2019-06-01 16:29:15'),(2322,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'210.47.175.248','2019-06-01 20:33:45'),(2323,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',14,'114.243.213.17','2019-06-01 22:57:43'),(2324,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.119.46.18','2019-06-02 09:30:24'),(2325,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'202.119.46.18','2019-06-02 09:33:37'),(2326,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.119.46.18','2019-06-02 09:35:11'),(2327,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.230.126.161','2019-06-02 12:32:03'),(2328,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.230.126.161','2019-06-02 12:34:30'),(2329,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',15,'223.73.116.236','2019-06-02 15:05:14'),(2330,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',206,'223.73.116.236','2019-06-02 16:58:48'),(2331,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'223.73.116.236','2019-06-02 18:51:24'),(2332,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'223.73.116.236','2019-06-02 18:52:27'),(2333,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.77.33.0','2019-06-03 05:41:57'),(2334,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.77.33.0','2019-06-03 06:05:57'),(2335,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.186.242.50','2019-06-03 10:10:46'),(2336,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.235.105.126','2019-06-03 11:09:15'),(2337,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',855,'113.70.219.76','2019-06-03 12:02:15'),(2338,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'222.247.211.242','2019-06-03 17:18:46'),(2339,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'183.63.51.77','2019-06-03 17:22:14'),(2340,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-03 17:22:34'),(2341,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-06-03 17:22:37'),(2342,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'183.63.51.77','2019-06-03 17:23:03'),(2343,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'183.63.51.77','2019-06-03 17:23:13'),(2344,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'222.247.211.242','2019-06-03 17:28:48'),(2345,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.72.19.208','2019-06-03 17:43:56'),(2346,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'211.162.237.131','2019-06-03 20:08:09'),(2347,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.65.108.17','2019-06-03 21:41:44'),(2348,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.23.132.134','2019-06-03 22:06:30'),(2349,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'124.23.132.134','2019-06-03 22:20:06'),(2350,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'124.23.132.134','2019-06-03 22:20:29'),(2351,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'117.81.114.12','2019-06-04 00:12:43'),(2352,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'124.23.132.244','2019-06-04 09:22:29'),(2353,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'222.247.211.242','2019-06-04 09:56:23'),(2354,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'110.80.39.178','2019-06-04 10:15:40'),(2355,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'110.80.39.178','2019-06-04 10:17:05'),(2356,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'110.80.39.178','2019-06-04 10:25:09'),(2357,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'110.80.39.178','2019-06-04 10:37:34'),(2358,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.153.150.121','2019-06-04 12:12:41'),(2359,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.153.150.121','2019-06-04 12:13:04'),(2360,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.153.150.121','2019-06-04 12:13:26'),(2361,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'110.53.253.173','2019-06-04 12:59:07'),(2362,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'218.68.102.109','2019-06-04 13:12:09'),(2363,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'218.68.102.109','2019-06-04 13:18:04'),(2364,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2483,'218.68.102.109','2019-06-04 13:18:49'),(2365,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'218.68.102.109','2019-06-04 13:30:07'),(2366,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'114.91.81.43','2019-06-04 14:17:12'),(2367,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.91.81.43','2019-06-04 14:17:39'),(2368,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',671,'114.91.81.43','2019-06-04 14:18:34'),(2369,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',674,'112.224.75.96','2019-06-04 15:38:58'),(2370,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'110.80.39.178','2019-06-04 15:47:01'),(2371,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'110.80.39.178','2019-06-04 15:47:09'),(2372,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',26,'110.80.39.178','2019-06-04 15:47:21'),(2373,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'110.80.39.178','2019-06-04 16:07:28'),(2374,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'221.221.146.152','2019-06-04 16:39:55'),(2375,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',13,'222.129.5.134','2019-06-04 18:14:32'),(2376,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.129.5.134','2019-06-04 18:35:22'),(2377,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'222.129.5.134','2019-06-04 18:39:59'),(2378,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.146.176.174','2019-06-04 20:02:45'),(2379,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.32.29','2019-06-05 15:42:13'),(2380,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.65.137.186','2019-06-05 17:04:03'),(2381,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'61.144.88.210','2019-06-05 17:34:14'),(2382,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'61.144.88.210','2019-06-05 17:34:42'),(2383,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'115.171.168.10','2019-06-05 19:09:29'),(2384,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.32.54.40','2019-06-05 20:21:45'),(2385,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'123.233.142.35','2019-06-05 20:38:49'),(2386,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'14.24.129.185','2019-06-06 09:40:42'),(2387,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.86.228.194','2019-06-06 10:22:02'),(2388,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'162.220.51.132','2019-06-06 10:25:40'),(2389,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'116.21.92.86','2019-06-06 10:35:52'),(2390,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'116.21.92.86','2019-06-06 10:38:13'),(2391,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'116.21.92.86','2019-06-06 10:39:58'),(2392,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.21.92.86','2019-06-06 10:40:35'),(2393,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'116.21.92.86','2019-06-06 10:41:43'),(2394,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'210.72.227.110','2019-06-06 11:59:42'),(2395,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2798,'210.72.227.110','2019-06-06 11:59:57'),(2396,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'117.71.53.46','2019-06-06 15:13:08'),(2397,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'117.71.53.46','2019-06-06 15:13:11'),(2398,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.71.53.46','2019-06-06 15:13:55'),(2399,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'117.71.53.46','2019-06-06 15:14:33'),(2400,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'117.71.53.46','2019-06-06 15:14:48'),(2401,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'117.71.53.46','2019-06-06 15:15:23'),(2402,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.119.108.49','2019-06-06 15:17:06'),(2403,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'113.68.238.248','2019-06-07 01:51:44'),(2404,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'113.68.238.248','2019-06-07 01:52:03'),(2405,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.68.238.248','2019-06-07 01:55:39'),(2406,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',1,'27.38.242.191','2019-06-07 06:52:05'),(2407,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.38.242.191','2019-06-07 06:52:23'),(2408,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'113.119.175.217','2019-06-07 07:39:32'),(2409,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.119.175.217','2019-06-07 07:39:39'),(2410,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'113.119.175.217','2019-06-07 07:39:53'),(2411,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',39,'183.160.107.46','2019-06-07 09:29:24'),(2412,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.160.107.46','2019-06-07 09:29:30'),(2413,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'183.160.107.46','2019-06-07 09:29:58'),(2414,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'39.155.232.78','2019-06-07 10:02:02'),(2415,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'125.118.95.87','2019-06-07 13:24:19'),(2416,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'125.118.95.87','2019-06-07 13:59:55'),(2417,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.71.30.36','2019-06-07 15:27:56'),(2418,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1653,'223.73.116.59','2019-06-07 16:09:46'),(2419,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1477,'183.192.164.71','2019-06-07 16:10:46'),(2420,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.65.108.167','2019-06-07 17:05:25'),(2421,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.65.108.167','2019-06-07 17:05:58'),(2422,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.148.24.184','2019-06-07 17:09:23'),(2423,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.240.120.85','2019-06-07 20:31:03'),(2424,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'112.64.0.142','2019-06-07 20:36:52'),(2425,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'117.155.129.103','2019-06-07 21:16:41'),(2426,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'223.104.16.105','2019-06-07 22:47:28'),(2427,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.16.105','2019-06-07 22:47:57'),(2428,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'36.33.4.11','2019-06-07 23:29:20'),(2429,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'211.137.22.224','2019-06-08 10:21:22'),(2430,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.137.22.224','2019-06-08 10:21:29'),(2431,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.137.22.224','2019-06-08 10:37:47'),(2432,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'182.239.121.101','2019-06-08 10:46:37'),(2433,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'182.239.121.101','2019-06-08 10:47:20'),(2434,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'111.114.0.3','2019-06-08 14:42:57'),(2435,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.119.175.232','2019-06-08 15:11:53'),(2436,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'111.114.0.3','2019-06-08 15:12:19'),(2437,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',672,'113.119.175.232','2019-06-08 15:13:00'),(2438,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.119.175.232','2019-06-08 15:13:10'),(2439,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'113.119.175.232','2019-06-08 15:13:12'),(2440,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.114.0.3','2019-06-08 15:13:37'),(2441,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'113.119.175.232','2019-06-08 16:44:23'),(2442,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'113.119.175.232','2019-06-08 16:45:53'),(2443,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'113.119.175.232','2019-06-08 16:46:05'),(2444,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'113.119.175.232','2019-06-08 16:46:15'),(2445,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.141.12','2019-06-08 21:12:01'),(2446,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'120.244.26.191','2019-06-09 10:52:20'),(2447,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.244.26.191','2019-06-09 17:45:05'),(2448,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'42.236.10.117','2019-06-09 17:45:32'),(2449,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.155.126.168','2019-06-09 18:47:28'),(2450,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.233.142.35','2019-06-10 12:16:53'),(2451,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',7,'218.2.97.91','2019-06-10 12:40:49'),(2452,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'118.112.74.217','2019-06-10 16:36:19'),(2453,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'118.112.74.217','2019-06-10 17:37:02'),(2454,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'118.112.74.217','2019-06-10 17:38:13'),(2455,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'118.112.74.217','2019-06-10 17:55:19'),(2456,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'118.112.74.217','2019-06-10 17:55:49'),(2457,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'118.112.74.217','2019-06-10 17:56:04'),(2458,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'118.112.74.217','2019-06-10 19:50:05'),(2459,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',612,'14.223.177.186','2019-06-10 20:13:23'),(2460,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.136.130.157','2019-06-11 09:01:54'),(2461,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'218.89.239.53','2019-06-11 09:23:49'),(2462,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.89.239.53','2019-06-11 09:23:59'),(2463,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'218.89.239.53','2019-06-11 09:24:34'),(2464,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',221,'14.223.176.37','2019-06-11 14:48:25'),(2465,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.34.52.89','2019-06-11 17:47:59'),(2466,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'59.173.52.10','2019-06-11 18:12:24'),(2467,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'116.23.126.9','2019-06-11 20:01:40'),(2468,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'116.23.126.9','2019-06-11 20:01:48'),(2469,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'61.151.178.197','2019-06-11 20:02:39'),(2470,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',220,'101.89.239.216','2019-06-11 20:02:48'),(2471,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',7,'116.23.126.9','2019-06-11 20:03:53'),(2472,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'61.151.178.163','2019-06-11 20:04:53'),(2473,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.136.205.66','2019-06-11 22:12:24'),(2474,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.95.204.82','2019-06-11 23:05:16'),(2475,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'222.95.204.82','2019-06-11 23:09:55'),(2476,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'222.95.204.82','2019-06-11 23:51:13'),(2477,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.96.42.201','2019-06-12 08:50:55'),(2478,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.221.44.26','2019-06-12 09:45:41'),(2479,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'59.60.13.122','2019-06-12 10:18:12'),(2480,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'59.60.13.122','2019-06-12 10:18:25'),(2481,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'59.60.13.122','2019-06-12 10:18:41'),(2482,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'59.60.13.122','2019-06-12 10:18:48'),(2483,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'59.60.13.122','2019-06-12 10:19:10'),(2484,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'59.60.13.122','2019-06-12 10:19:15'),(2485,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'59.60.13.122','2019-06-12 10:23:15'),(2486,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',39,'59.60.13.122','2019-06-12 10:25:49'),(2487,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',11,'59.60.13.122','2019-06-12 10:25:57'),(2488,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'59.60.13.122','2019-06-12 10:28:51'),(2489,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'59.60.13.122','2019-06-12 10:29:10'),(2490,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'59.60.13.122','2019-06-12 10:30:25'),(2491,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'114.222.131.79','2019-06-12 12:16:52'),(2492,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.57.140.130','2019-06-12 16:17:19'),(2493,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',72,'0:0:0:0:0:0:0:1','2019-06-12 16:37:27'),(2494,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',145,'0:0:0:0:0:0:0:1','2019-06-12 16:37:34'),(2495,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',6,'183.63.51.77','2019-06-12 16:55:37'),(2496,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'183.63.51.77','2019-06-12 16:56:00'),(2497,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.222.131.79','2019-06-12 18:54:01'),(2498,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.222.131.79','2019-06-12 18:54:18'),(2499,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'114.222.131.79','2019-06-12 18:54:43'),(2500,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1048,'114.222.131.79','2019-06-12 18:54:47'),(2501,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.222.131.79','2019-06-12 18:55:07'),(2502,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.154.87.141','2019-06-12 22:01:48'),(2503,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'60.1.218.122','2019-06-13 00:27:26'),(2504,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.1.218.122','2019-06-13 00:28:28'),(2505,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',33,'218.57.140.130','2019-06-13 07:47:52'),(2506,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.57.140.130','2019-06-13 09:03:16'),(2507,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'61.48.131.174','2019-06-13 10:10:41'),(2508,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'123.232.10.234','2019-06-13 11:56:56'),(2509,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.232.10.234','2019-06-13 11:57:30'),(2510,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'43.224.45.154','2019-06-13 13:51:22'),(2511,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'124.78.19.250','2019-06-13 14:03:31'),(2512,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'124.78.19.250','2019-06-13 14:03:39'),(2513,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.78.19.250','2019-06-13 14:04:11'),(2514,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'61.48.131.174','2019-06-13 14:50:35'),(2515,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',35,'61.139.124.102','2019-06-13 16:54:33'),(2516,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'114.91.121.106','2019-06-13 23:40:24'),(2517,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'114.91.121.106','2019-06-13 23:43:49'),(2518,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'101.206.167.29','2019-06-14 08:20:16'),(2519,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.57.140.130','2019-06-14 08:53:19'),(2520,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.246.124.42','2019-06-14 09:43:35'),(2521,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1866,'183.63.51.77','2019-06-14 10:47:13'),(2522,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',657,'114.221.44.26','2019-06-14 15:35:10'),(2523,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'114.221.44.26','2019-06-14 15:35:12'),(2524,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',5,'115.238.39.106','2019-06-14 15:54:25'),(2525,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'115.238.39.106','2019-06-14 15:54:52'),(2526,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.238.39.106','2019-06-14 15:55:08'),(2527,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'115.238.39.106','2019-06-14 15:55:23'),(2528,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',30,'115.238.39.106','2019-06-14 15:56:09'),(2529,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'115.238.39.106','2019-06-14 15:56:35'),(2530,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'115.238.39.106','2019-06-14 18:08:18'),(2531,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.238.39.106','2019-06-14 18:08:52'),(2532,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'123.123.151.195','2019-06-14 19:39:51'),(2533,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.123.151.195','2019-06-14 19:40:11'),(2534,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'123.123.151.195','2019-06-14 19:40:13'),(2535,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.123.151.195','2019-06-14 19:40:54'),(2536,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'123.123.151.195','2019-06-14 19:42:18'),(2537,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',9,'61.142.232.227','2019-06-14 20:45:52'),(2538,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'118.250.185.200','2019-06-14 23:16:07'),(2539,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'118.250.185.200','2019-06-14 23:16:40'),(2540,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'118.250.185.200','2019-06-14 23:33:23'),(2541,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'113.88.114.68','2019-06-15 02:51:54'),(2542,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.88.114.68','2019-06-15 02:52:01'),(2543,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.13','2019-06-15 06:15:59'),(2544,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'114.246.124.42','2019-06-15 10:29:03'),(2545,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.246.124.42','2019-06-15 16:03:18'),(2546,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',269,'61.140.236.112','2019-06-15 17:10:19'),(2547,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1730,'61.140.236.112','2019-06-15 17:10:33'),(2548,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.75.93','2019-06-15 18:00:37'),(2549,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.22.92.14','2019-06-15 23:19:04'),(2550,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',4,'36.33.4.214','2019-06-15 23:31:53'),(2551,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.75.120','2019-06-16 08:44:54'),(2552,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'110.80.39.178','2019-06-16 10:52:13'),(2553,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'110.80.39.178','2019-06-16 10:59:53'),(2554,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'117.154.10.52','2019-06-16 14:53:06'),(2555,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.6.81','2019-06-16 16:34:30'),(2556,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'116.21.94.213','2019-06-16 17:14:33'),(2557,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'117.154.10.114','2019-06-16 20:54:00'),(2558,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'117.154.10.114','2019-06-16 20:55:00'),(2559,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.40.21','2019-06-16 20:59:45'),(2560,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'58.100.91.63','2019-06-16 22:29:39'),(2561,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.154.10.114','2019-06-16 22:48:13'),(2562,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'117.154.10.114','2019-06-16 22:48:35'),(2563,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',5,'117.154.10.114','2019-06-16 22:52:16'),(2564,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',8,'117.154.10.114','2019-06-16 23:50:52'),(2565,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.152.147.156','2019-06-17 12:58:35'),(2566,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.204.17.71','2019-06-17 12:59:39'),(2567,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'117.152.147.156','2019-06-17 13:21:15'),(2568,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'117.152.147.156','2019-06-17 13:21:43'),(2569,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'117.152.147.156','2019-06-17 13:21:54'),(2570,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.192.164.85','2019-06-17 13:22:16'),(2571,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',13,'117.152.147.156','2019-06-17 13:22:46'),(2572,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'120.204.17.73','2019-06-17 13:25:00'),(2573,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'120.204.17.71','2019-06-17 13:27:04'),(2574,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'183.192.164.85','2019-06-17 13:27:17'),(2575,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.152.147.156','2019-06-17 13:29:33'),(2576,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.160.214.240','2019-06-17 16:00:39'),(2577,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.160.214.240','2019-06-17 16:00:48'),(2578,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'124.160.214.240','2019-06-17 16:08:51'),(2579,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.160.214.240','2019-06-17 16:10:50'),(2580,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'124.160.214.240','2019-06-17 16:15:26'),(2581,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.94.5.73','2019-06-17 16:16:54'),(2582,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.154.10.114','2019-06-17 16:32:43'),(2583,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'182.48.96.195','2019-06-17 16:46:47'),(2584,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',423,'182.48.96.195','2019-06-17 16:47:03'),(2585,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'14.155.221.196','2019-06-17 19:47:27'),(2586,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'123.119.218.15','2019-06-17 22:27:47'),(2587,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.119.218.15','2019-06-17 22:28:03'),(2588,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'123.119.218.15','2019-06-17 22:28:46'),(2589,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'115.236.167.10','2019-06-18 09:19:58'),(2590,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-18 10:31:58'),(2591,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'182.138.88.47','2019-06-18 10:50:58'),(2592,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.97.60.135','2019-06-18 11:13:12'),(2593,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.97.60.135','2019-06-18 11:17:24'),(2594,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'183.63.51.77','2019-06-18 12:44:16'),(2595,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'183.63.51.77','2019-06-18 12:44:37'),(2596,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'183.63.51.77','2019-06-18 12:44:42'),(2597,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',4,'183.63.51.77','2019-06-18 12:45:11'),(2598,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'183.63.51.77','2019-06-18 12:48:02'),(2599,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'183.63.51.77','2019-06-18 12:49:28'),(2600,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'183.63.51.77','2019-06-18 12:51:30'),(2601,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-18 14:41:13'),(2602,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',638,'183.63.51.77','2019-06-18 15:02:24'),(2603,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'58.248.229.159','2019-06-18 15:59:06'),(2604,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',5,'183.63.51.77','2019-06-18 16:06:56'),(2605,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'183.63.51.77','2019-06-18 16:07:06'),(2606,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-18 16:07:34'),(2607,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',9,'183.63.51.77','2019-06-18 16:07:42'),(2608,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.82.235.203','2019-06-18 17:39:41'),(2609,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',7,'120.228.89.187','2019-06-18 21:17:34'),(2610,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'110.80.39.178','2019-06-18 21:34:40'),(2611,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.107.247.27','2019-06-18 21:35:08'),(2612,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.107.247.27','2019-06-18 21:35:39'),(2613,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.53','2019-06-19 01:39:28'),(2614,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.252.21.121','2019-06-19 02:48:50'),(2615,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.37','2019-06-19 08:19:26'),(2616,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.37','2019-06-19 08:28:50'),(2617,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'223.104.63.37','2019-06-19 08:29:07'),(2618,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'223.104.63.37','2019-06-19 08:29:14'),(2619,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'223.104.63.37','2019-06-19 08:29:38'),(2620,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'223.104.63.37','2019-06-19 08:35:11'),(2621,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'117.136.79.53','2019-06-19 08:40:24'),(2622,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'117.136.79.53','2019-06-19 08:40:45'),(2623,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.129.118.122','2019-06-19 09:09:22'),(2624,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'221.234.237.98','2019-06-19 09:21:18'),(2625,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'221.234.237.98','2019-06-19 09:22:03'),(2626,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.234.237.98','2019-06-19 09:22:28'),(2627,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'119.129.118.122','2019-06-19 09:27:12'),(2628,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.129.118.122','2019-06-19 09:27:20'),(2629,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-19 13:33:11'),(2630,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',834,'183.63.51.77','2019-06-19 14:21:21'),(2631,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'171.84.5.2','2019-06-19 15:01:44'),(2632,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',857,'14.223.179.50','2019-06-19 17:20:14'),(2633,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.129','2019-06-19 18:33:38'),(2634,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',650,'183.156.2.23','2019-06-19 18:57:09'),(2635,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.63.8','2019-06-19 21:04:08'),(2636,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.79.135','2019-06-20 08:13:52'),(2637,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.97.53.166','2019-06-20 09:09:51'),(2638,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'115.200.213.214','2019-06-20 09:24:35'),(2639,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'115.200.213.214','2019-06-20 09:24:55'),(2640,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'124.160.214.240','2019-06-20 10:48:17'),(2641,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'124.160.214.240','2019-06-20 10:50:08'),(2642,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-06-20 15:06:19'),(2643,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',218,'211.138.20.170','2019-06-20 16:42:31'),(2644,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.138.20.170','2019-06-20 16:45:41'),(2645,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'210.21.200.74','2019-06-20 17:18:35'),(2646,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'210.21.200.74','2019-06-20 17:19:01'),(2647,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.41.32','2019-06-20 17:19:07'),(2648,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'210.21.200.74','2019-06-20 17:19:11'),(2649,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'117.136.41.32','2019-06-20 17:20:21'),(2650,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'117.136.41.32','2019-06-20 17:21:19'),(2651,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'183.192.164.85','2019-06-20 17:21:24'),(2652,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'183.192.164.214','2019-06-20 17:22:23'),(2653,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'117.136.41.32','2019-06-20 17:23:09'),(2654,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'117.136.41.32','2019-06-20 17:24:01'),(2655,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'120.204.17.73','2019-06-20 17:24:15'),(2656,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.41.32','2019-06-20 17:24:26'),(2657,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'117.136.41.32','2019-06-20 17:25:48'),(2658,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',840,'183.192.164.85','2019-06-20 17:26:49'),(2659,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-20 18:43:46'),(2660,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'123.181.51.120','2019-06-20 20:39:24'),(2661,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.181.51.120','2019-06-20 20:42:00'),(2662,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',21,'123.181.51.120','2019-06-20 20:42:02'),(2663,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',26,'120.230.131.120','2019-06-20 21:23:55'),(2664,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'163.177.139.240','2019-06-20 21:35:12'),(2665,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.230.131.120','2019-06-20 23:56:26'),(2666,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.230.131.120','2019-06-21 00:01:41'),(2667,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-21 09:20:20'),(2668,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'183.63.51.77','2019-06-21 09:20:33'),(2669,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'183.63.51.77','2019-06-21 09:20:43'),(2670,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.63.51.77','2019-06-21 09:20:50'),(2671,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',251,'183.63.51.77','2019-06-21 09:20:55'),(2672,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',207,'183.63.51.77','2019-06-21 09:22:10'),(2673,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.138.20.170','2019-06-21 09:54:24'),(2674,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'113.119.108.200','2019-06-21 10:27:33'),(2675,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'113.119.108.200','2019-06-21 10:27:41'),(2676,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'180.167.136.123','2019-06-21 10:54:04'),(2677,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',6,'180.167.136.123','2019-06-21 10:55:18'),(2678,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.129.130.86','2019-06-21 11:02:46'),(2679,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-06-21 11:56:55'),(2680,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',409,'183.63.51.77','2019-06-21 11:57:41'),(2681,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',666,'211.97.30.32','2019-06-21 11:57:58'),(2682,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-06-21 11:58:32'),(2683,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-21 12:04:43'),(2684,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'14.213.152.111','2019-06-21 13:06:44'),(2685,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.129.130.86','2019-06-21 13:24:34'),(2686,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'119.129.130.86','2019-06-21 13:32:31'),(2687,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.135.169.81','2019-06-21 14:07:58'),(2688,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-21 16:12:40'),(2689,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.17.124.178','2019-06-21 16:29:55'),(2690,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',8,'218.17.124.178','2019-06-21 16:30:01'),(2691,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'218.17.124.178','2019-06-21 16:30:37'),(2692,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'218.17.124.178','2019-06-21 16:30:48'),(2693,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'180.167.136.123','2019-06-21 16:32:42'),(2694,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'210.21.200.74','2019-06-21 16:36:28'),(2695,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'52.24.9.187','2019-06-21 16:36:47'),(2696,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',5,'210.21.200.74','2019-06-21 16:37:06'),(2697,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'210.21.200.74','2019-06-21 16:44:39'),(2698,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'35.164.172.2','2019-06-21 16:52:06'),(2699,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-21 17:54:47'),(2700,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-06-21 18:00:34'),(2701,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'183.15.181.171','2019-06-22 11:22:43'),(2702,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.22.235.44','2019-06-22 18:32:03'),(2703,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.192.164.85','2019-06-22 18:33:04'),(2704,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',7,'113.88.67.21','2019-06-23 09:46:34'),(2705,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.67.21','2019-06-23 09:46:56'),(2706,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1471,'183.15.181.168','2019-06-23 11:12:43'),(2707,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'183.202.204.55','2019-06-23 14:16:22'),(2708,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.202.204.55','2019-06-23 14:17:04'),(2709,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',13,'61.129.7.235','2019-06-23 14:17:23'),(2710,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'14.223.177.92','2019-06-23 15:54:01'),(2711,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'112.80.62.194','2019-06-23 16:02:02'),(2712,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',209,'112.80.62.194','2019-06-23 16:02:18'),(2713,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'112.80.62.194','2019-06-23 16:03:20'),(2714,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'112.80.62.194','2019-06-23 16:08:35'),(2715,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',3,'122.235.87.244','2019-06-23 17:12:57'),(2716,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.34.235.168','2019-06-23 22:28:26'),(2717,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'183.202.67.54','2019-06-23 23:02:31'),(2718,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'183.202.67.54','2019-06-23 23:03:11'),(2719,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'101.89.29.86','2019-06-23 23:03:31'),(2720,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.202.67.54','2019-06-23 23:09:31'),(2721,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.33','2019-06-24 08:36:40'),(2722,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'106.38.58.194','2019-06-24 10:42:48'),(2723,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'106.38.58.194','2019-06-24 10:43:32'),(2724,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',7,'106.38.58.194','2019-06-24 10:43:38'),(2725,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'106.38.58.194','2019-06-24 10:43:51'),(2726,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'106.38.58.194','2019-06-24 10:44:02'),(2727,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'106.38.58.194','2019-06-24 10:44:24'),(2728,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.175.169.59','2019-06-24 10:56:09'),(2729,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.175.169.59','2019-06-24 10:57:20'),(2730,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.192.164.71','2019-06-24 11:08:04'),(2731,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'36.149.13.167','2019-06-24 12:42:34'),(2732,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'36.149.13.167','2019-06-24 12:42:43'),(2733,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'47.244.238.175','2019-06-24 15:45:11'),(2734,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'222.76.243.172','2019-06-24 17:44:35'),(2735,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'222.76.243.172','2019-06-24 17:44:47'),(2736,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.76.243.172','2019-06-24 17:50:32'),(2737,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'113.111.50.11','2019-06-24 18:34:10'),(2738,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'220.187.230.46','2019-06-24 21:26:22'),(2739,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'125.118.25.55','2019-06-24 21:52:57'),(2740,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'203.208.60.86','2019-06-24 22:06:40'),(2741,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',5,'203.208.60.21','2019-06-24 22:07:54'),(2742,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'203.208.60.13','2019-06-24 22:08:05'),(2743,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',7,'203.208.60.40','2019-06-24 22:09:27'),(2744,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'203.208.60.107','2019-06-24 22:11:20'),(2745,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'203.208.60.73','2019-06-24 22:12:11'),(2746,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',1,'66.249.79.205','2019-06-24 22:14:09'),(2747,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.118.25.55','2019-06-25 00:09:20'),(2748,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.134.72.26','2019-06-25 08:21:41'),(2749,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'125.118.25.55','2019-06-25 12:14:49'),(2750,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'125.118.25.55','2019-06-25 13:01:16'),(2751,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'125.118.25.55','2019-06-25 13:01:25'),(2752,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'125.118.25.55','2019-06-25 13:01:43'),(2753,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.239.131.218','2019-06-25 14:37:57'),(2754,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.226.243.230','2019-06-25 15:52:01'),(2755,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',3,'121.33.218.226','2019-06-25 17:00:36'),(2756,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'121.33.218.226','2019-06-25 17:01:23'),(2757,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'121.33.218.226','2019-06-25 17:02:11'),(2758,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'121.33.218.226','2019-06-25 17:02:16'),(2759,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'121.33.218.226','2019-06-25 17:03:15'),(2760,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'125.118.25.55','2019-06-25 17:03:37'),(2761,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.118.25.55','2019-06-25 17:04:32'),(2762,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'125.118.25.55','2019-06-25 17:04:34'),(2763,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'125.118.25.55','2019-06-25 17:04:57'),(2764,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'121.33.218.226','2019-06-25 17:06:03'),(2765,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.33.218.226','2019-06-25 17:11:04'),(2766,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'121.33.218.226','2019-06-25 17:11:35'),(2767,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.33.218.226','2019-06-25 17:21:43'),(2768,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'121.33.218.226','2019-06-25 17:31:28'),(2769,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-06-25 17:52:42'),(2770,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.236.10.117','2019-06-26 01:49:34'),(2771,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.80.62.194','2019-06-26 10:55:08'),(2772,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',1857,'180.168.173.18','2019-06-26 10:58:05'),(2773,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8011,'180.168.173.18','2019-06-26 10:58:19'),(2774,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.80.62.194','2019-06-26 11:03:44'),(2775,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-06-26 11:52:58'),(2776,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'116.6.229.10','2019-06-26 12:04:46'),(2777,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.6.229.10','2019-06-26 12:06:09'),(2778,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'116.6.229.10','2019-06-26 12:06:23'),(2779,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'116.6.229.10','2019-06-26 12:06:53'),(2780,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'116.6.229.10','2019-06-26 12:07:30'),(2781,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'125.118.25.55','2019-06-26 13:18:35'),(2782,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'125.118.25.55','2019-06-26 13:37:31'),(2783,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',208,'125.118.25.55','2019-06-26 13:37:42'),(2784,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',3,'125.118.25.55','2019-06-26 13:39:35'),(2785,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'125.118.25.55','2019-06-26 13:40:15'),(2786,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'125.118.25.55','2019-06-26 13:51:18'),(2787,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.131.81.141','2019-06-26 14:23:05'),(2788,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'125.118.25.55','2019-06-26 14:23:24'),(2789,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'125.118.25.55','2019-06-26 14:23:29'),(2790,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'180.168.160.246','2019-06-26 14:37:39'),(2791,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.236.64.90','2019-06-26 15:45:08'),(2792,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'121.33.218.226','2019-06-26 16:39:52'),(2793,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'61.183.151.86','2019-06-26 16:41:01'),(2794,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'61.183.151.86','2019-06-26 16:43:09'),(2795,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'59.41.161.53','2019-06-26 17:41:24'),(2796,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'59.41.161.53','2019-06-26 17:51:16'),(2797,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'59.41.161.53','2019-06-26 17:51:22'),(2798,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',2,'205.209.185.238','2019-06-26 19:56:05'),(2799,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'205.209.185.238','2019-06-26 19:56:20'),(2800,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'205.209.185.238','2019-06-26 19:56:44'),(2801,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.128.102.129','2019-06-26 21:54:21'),(2802,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.128.102.129','2019-06-26 21:55:59'),(2803,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-06-27 09:10:21'),(2804,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.42.31.131','2019-06-27 10:12:24'),(2805,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'124.42.31.133','2019-06-27 10:13:16'),(2806,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.42.31.131','2019-06-27 10:14:22'),(2807,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.42.31.132','2019-06-27 10:17:24'),(2808,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',11,'124.42.31.131','2019-06-27 10:26:04'),(2809,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.42.31.131','2019-06-27 10:33:34'),(2810,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'124.42.31.131','2019-06-27 10:34:06'),(2811,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.87.17.137','2019-06-27 11:08:00'),(2812,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'121.33.218.226','2019-06-27 11:21:59'),(2813,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'121.33.218.226','2019-06-27 11:26:12'),(2814,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',5,'49.74.173.181','2019-06-27 12:49:27'),(2815,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'1.202.219.21','2019-06-27 13:23:38'),(2816,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.202.219.21','2019-06-27 13:24:07'),(2817,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',1085,'103.94.40.40','2019-06-27 13:24:58'),(2818,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',5,'59.41.161.53','2019-06-27 13:44:57'),(2819,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'59.41.161.53','2019-06-27 13:45:21'),(2820,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'121.33.218.226','2019-06-27 14:02:24'),(2821,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'121.33.218.226','2019-06-27 14:05:03'),(2822,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'121.33.218.226','2019-06-27 14:27:05'),(2823,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'121.33.218.226','2019-06-27 14:27:21'),(2824,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',1,'121.33.218.226','2019-06-27 14:28:10'),(2825,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'121.33.218.226','2019-06-27 14:46:31'),(2826,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'121.33.218.226','2019-06-27 14:58:43'),(2827,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'121.33.218.226','2019-06-27 15:32:28'),(2828,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'101.230.234.6','2019-06-27 17:00:22'),(2829,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'101.230.234.6','2019-06-27 17:01:29'),(2830,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',1,'101.230.234.6','2019-06-27 17:01:56'),(2831,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'101.230.234.6','2019-06-27 17:01:59'),(2832,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-06-27 17:04:39'),(2833,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'101.230.234.6','2019-06-27 17:28:24'),(2834,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'180.110.165.40','2019-06-27 17:29:55'),(2835,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.110.165.40','2019-06-27 17:30:37'),(2836,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'101.230.234.6','2019-06-27 17:54:53'),(2837,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'101.230.234.6','2019-06-27 17:54:57'),(2838,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'101.230.234.6','2019-06-27 17:55:45'),(2839,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'101.230.234.6','2019-06-27 17:55:48'),(2840,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.82.107.235','2019-06-27 20:17:42'),(2841,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'211.143.72.148','2019-06-27 21:18:14'),(2842,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'211.143.72.148','2019-06-27 21:18:53'),(2843,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',5,'211.143.72.148','2019-06-27 21:18:57'),(2844,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.143.72.148','2019-06-27 21:19:17'),(2845,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.60.207.36','2019-06-27 22:32:40'),(2846,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.10.253.42','2019-06-27 22:33:39'),(2847,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'112.10.253.42','2019-06-27 22:34:00'),(2848,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',684,'112.10.253.42','2019-06-27 22:34:03'),(2849,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'112.10.253.42','2019-06-27 22:34:18'),(2850,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.141.17','2019-06-28 07:56:04'),(2851,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',4,'125.69.40.7','2019-06-28 08:21:40'),(2852,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'125.69.40.7','2019-06-28 08:22:17'),(2853,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',2,'101.89.19.197','2019-06-28 08:22:39'),(2854,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'125.69.40.7','2019-06-28 08:23:12'),(2855,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',1462,'61.151.178.165','2019-06-28 08:23:19'),(2856,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'180.163.220.66','2019-06-28 08:24:05'),(2857,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',1,'58.247.206.142','2019-06-28 08:24:11'),(2858,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.106.239.248','2019-06-28 10:34:52'),(2859,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.106.239.248','2019-06-28 10:35:16'),(2860,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',850,'42.236.10.93','2019-06-28 11:04:19'),(2861,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'122.224.99.210','2019-06-28 11:15:32'),(2862,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'122.224.99.210','2019-06-28 11:16:06'),(2863,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.224.99.210','2019-06-28 11:16:07'),(2864,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'122.224.99.210','2019-06-28 11:16:43'),(2865,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.224.99.210','2019-06-28 11:17:13'),(2866,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',1,'122.224.99.210','2019-06-28 11:17:45'),(2867,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'122.224.99.210','2019-06-28 11:18:10'),(2868,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'122.224.99.210','2019-06-28 11:18:31'),(2869,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'125.69.40.7','2019-06-28 11:18:34'),(2870,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'122.224.99.210','2019-06-28 11:18:51'),(2871,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.224.99.210','2019-06-28 11:19:04'),(2872,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.224.99.210','2019-06-28 11:19:46'),(2873,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'122.224.99.210','2019-06-28 11:19:49'),(2874,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',217,'61.151.178.197','2019-06-28 11:30:17'),(2875,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',218,'183.63.51.77','2019-06-28 11:48:15'),(2876,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.10.84.154','2019-06-28 13:09:23'),(2877,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.131.81.141','2019-06-28 15:34:22'),(2878,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'49.74.22.85','2019-06-28 17:12:24'),(2879,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'122.224.99.210','2019-06-28 18:00:02'),(2880,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'14.223.178.111','2019-06-29 09:37:30'),(2881,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'112.10.253.42','2019-06-29 22:19:28'),(2882,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.170.234','2019-06-29 23:10:20'),(2883,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'149.28.254.29','2019-06-30 14:46:29'),(2884,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'221.217.50.106','2019-06-30 22:33:48'),(2885,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'223.166.151.199','2019-06-30 22:34:52'),(2886,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.217.50.106','2019-06-30 22:36:48'),(2887,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.246.221.61','2019-06-30 22:37:48'),(2888,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.217.50.106','2019-06-30 22:38:33'),(2889,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'221.217.50.106','2019-06-30 22:38:52'),(2890,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',12,'221.217.50.106','2019-06-30 22:39:35'),(2891,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'223.167.152.53','2019-06-30 22:40:35'),(2892,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.217.50.106','2019-06-30 22:41:30'),(2893,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'115.26.4.14','2019-07-01 09:20:51'),(2894,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'115.26.4.14','2019-07-01 09:21:02'),(2895,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',217,'115.26.4.14','2019-07-01 09:49:21'),(2896,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.26.4.14','2019-07-01 09:49:34'),(2897,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'118.186.228.195','2019-07-01 13:55:04'),(2898,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'118.186.228.195','2019-07-01 14:02:25'),(2899,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',26,'113.140.250.110','2019-07-01 14:11:39'),(2900,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.105.131.120','2019-07-01 15:13:20'),(2901,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-01 15:15:27'),(2902,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'116.4.97.216','2019-07-01 15:18:28'),(2903,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'116.4.97.216','2019-07-01 15:18:36'),(2904,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',894,'101.230.234.6','2019-07-01 16:45:16'),(2905,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'101.230.234.6','2019-07-01 16:45:58'),(2906,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',97,'101.230.234.6','2019-07-01 16:56:21'),(2907,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1043,'101.230.234.6','2019-07-01 17:17:24'),(2908,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',455,'183.63.51.77','2019-07-01 17:21:01'),(2909,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'210.152.87.239','2019-07-01 18:27:27'),(2910,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'120.236.164.84','2019-07-02 09:46:33'),(2911,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.155.250.93','2019-07-02 11:51:37'),(2912,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'120.231.147.64','2019-07-02 12:07:54'),(2913,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'183.129.40.121','2019-07-02 15:10:01'),(2914,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'117.159.13.118','2019-07-02 16:24:42'),(2915,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'117.159.13.118','2019-07-02 16:28:56'),(2916,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'117.159.13.118','2019-07-02 16:29:02'),(2917,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-02 17:31:22'),(2918,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',5,'183.64.214.3','2019-07-02 20:45:59'),(2919,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.64.214.3','2019-07-02 20:49:14'),(2920,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.96.89','2019-07-03 02:04:41'),(2921,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.255.168.60','2019-07-03 09:33:07'),(2922,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'183.63.51.77','2019-07-03 10:20:05'),(2923,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'116.30.216.158','2019-07-03 11:07:23'),(2924,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',422,'113.104.191.51','2019-07-03 11:19:13'),(2925,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'183.64.214.3','2019-07-03 11:19:14'),(2926,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'183.64.214.3','2019-07-03 11:19:20'),(2927,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',210,'183.64.214.3','2019-07-03 11:19:36'),(2928,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',213,'183.64.214.3','2019-07-03 11:19:42'),(2929,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.104.191.51','2019-07-03 11:19:56'),(2930,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'183.64.214.3','2019-07-03 11:21:33'),(2931,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',651,'183.64.214.3','2019-07-03 11:21:36'),(2932,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'183.64.214.3','2019-07-03 11:21:45'),(2933,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.104.191.51','2019-07-03 11:22:16'),(2934,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.64.214.3','2019-07-03 11:22:54'),(2935,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.104.191.51','2019-07-03 11:37:15'),(2936,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.104.191.51','2019-07-03 11:37:19'),(2937,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.104.191.51','2019-07-03 11:37:20'),(2938,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.104.191.51','2019-07-03 11:40:51'),(2939,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'27.19.136.199','2019-07-03 17:46:32'),(2940,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'27.19.136.199','2019-07-03 17:46:52'),(2941,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.19.136.199','2019-07-03 17:47:56'),(2942,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.104.191.51','2019-07-03 17:49:57'),(2943,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.104.191.51','2019-07-03 17:50:49'),(2944,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'113.104.191.51','2019-07-03 17:53:09'),(2945,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'113.104.191.51','2019-07-03 17:53:25'),(2946,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'113.104.191.51','2019-07-03 17:55:20'),(2947,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',1,'27.19.136.199','2019-07-03 17:55:25'),(2948,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.104.191.51','2019-07-03 17:58:23'),(2949,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'113.104.191.51','2019-07-03 17:59:13'),(2950,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.104.191.51','2019-07-03 17:59:46'),(2951,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','14',2,'113.104.191.51','2019-07-03 17:59:55'),(2952,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.104.191.51','2019-07-03 18:00:19'),(2953,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',640,'49.222.85.198','2019-07-03 21:34:49'),(2954,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'111.196.245.221','2019-07-03 22:59:31'),(2955,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',840,'223.73.115.221','2019-07-04 07:21:12'),(2956,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',39,'223.73.115.221','2019-07-04 07:22:10'),(2957,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',134,'183.192.164.71','2019-07-04 07:22:12'),(2958,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.40.221.102','2019-07-04 08:44:13'),(2959,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'103.40.221.102','2019-07-04 08:45:20'),(2960,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',5,'103.40.221.102','2019-07-04 08:46:43'),(2961,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'59.77.42.147','2019-07-04 11:02:54'),(2962,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'59.77.42.147','2019-07-04 11:04:58'),(2963,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'59.77.42.147','2019-07-04 11:09:39'),(2964,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'180.110.140.85','2019-07-04 11:12:40'),(2965,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.110.140.85','2019-07-04 11:12:52'),(2966,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.64.214.3','2019-07-04 14:08:00'),(2967,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',29,'183.64.214.3','2019-07-04 14:11:12'),(2968,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'183.64.214.3','2019-07-04 14:12:38'),(2969,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'183.64.214.3','2019-07-04 14:14:20'),(2970,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',12,'183.64.214.3','2019-07-04 14:16:08'),(2971,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'36.153.143.162','2019-07-04 14:17:01'),(2972,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'36.153.143.162','2019-07-04 14:17:26'),(2973,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.153.143.162','2019-07-04 14:17:55'),(2974,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'36.153.143.162','2019-07-04 14:18:54'),(2975,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'36.153.143.162','2019-07-04 14:19:08'),(2976,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.64.214.3','2019-07-04 14:23:25'),(2977,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'183.64.214.3','2019-07-04 14:29:10'),(2978,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'183.64.214.3','2019-07-04 14:33:40'),(2979,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.183.151.86','2019-07-04 14:37:23'),(2980,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',10,'61.183.151.86','2019-07-04 14:37:32'),(2981,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'124.64.16.83','2019-07-04 14:42:33'),(2982,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.153.143.162','2019-07-04 14:53:18'),(2983,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.183.151.86','2019-07-04 14:53:26'),(2984,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',624,'61.183.151.86','2019-07-04 14:54:05'),(2985,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'61.183.151.86','2019-07-04 15:06:53'),(2986,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',74,'61.183.151.86','2019-07-04 15:15:22'),(2987,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.57.119.18','2019-07-04 15:38:17'),(2988,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.57.119.18','2019-07-04 15:39:16'),(2989,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.57.119.18','2019-07-04 15:39:28'),(2990,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'117.146.176.174','2019-07-04 16:11:03'),(2991,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'113.87.117.108','2019-07-04 18:03:39'),(2992,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-04 19:35:15'),(2993,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',220,'113.87.117.108','2019-07-04 19:54:07'),(2994,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'49.222.85.198','2019-07-04 22:18:30'),(2995,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',5,'115.190.12.139','2019-07-04 23:57:11'),(2996,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'115.190.12.139','2019-07-04 23:58:28'),(2997,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'115.190.12.139','2019-07-04 23:59:52'),(2998,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'115.190.12.139','2019-07-05 01:11:36'),(2999,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',3,'115.190.12.139','2019-07-05 01:12:01'),(3000,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'171.43.145.152','2019-07-05 09:09:41'),(3001,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'171.43.145.152','2019-07-05 09:10:01'),(3002,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-05 12:28:20'),(3003,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',34,'113.200.203.6','2019-07-05 14:08:01'),(3004,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'211.161.170.40','2019-07-05 14:50:31'),(3005,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.161.170.40','2019-07-05 14:51:13'),(3006,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.161.170.40','2019-07-05 14:52:00'),(3007,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'101.254.208.162','2019-07-05 16:45:00'),(3008,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'101.254.208.162','2019-07-05 16:45:13'),(3009,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'101.254.208.162','2019-07-05 16:45:22'),(3010,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.63.154.123','2019-07-05 21:19:01'),(3011,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.196.245.221','2019-07-05 22:59:37'),(3012,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',16,'111.196.245.221','2019-07-05 23:01:40'),(3013,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'111.196.245.221','2019-07-05 23:01:46'),(3014,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'49.77.135.150','2019-07-06 15:32:32'),(3015,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.169','2019-07-06 18:50:40'),(3016,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',218,'223.104.63.169','2019-07-06 18:57:00'),(3017,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'222.129.52.245','2019-07-07 06:05:55'),(3018,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'222.129.52.245','2019-07-07 06:59:03'),(3019,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.129.52.245','2019-07-07 06:59:33'),(3020,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'222.129.52.245','2019-07-07 07:00:01'),(3021,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.140.14','2019-07-07 11:28:10'),(3022,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.147.246.99','2019-07-07 12:33:51'),(3023,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',522,'180.110.140.85','2019-07-07 14:55:28'),(3024,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'118.230.232.230','2019-07-07 17:12:43'),(3025,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'103.40.221.102','2019-07-07 20:29:46'),(3026,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'103.40.221.102','2019-07-07 20:30:17'),(3027,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'103.40.221.102','2019-07-07 20:30:32'),(3028,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'103.40.221.102','2019-07-07 20:30:52'),(3029,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.141.187','2019-07-07 22:09:57'),(3030,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.141.188','2019-07-07 22:47:04'),(3031,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.95.250.81','2019-07-07 22:58:55'),(3032,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'183.95.250.81','2019-07-07 23:00:36'),(3033,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'124.200.102.202','2019-07-08 10:00:43'),(3034,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',424,'183.63.51.77','2019-07-08 12:54:13'),(3035,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'182.150.63.191','2019-07-08 14:23:44'),(3036,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'182.150.63.191','2019-07-08 14:23:54'),(3037,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'182.150.63.191','2019-07-08 14:24:16'),(3038,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.150.63.191','2019-07-08 14:24:25'),(3039,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',673,'182.150.63.191','2019-07-08 14:27:59'),(3040,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'182.150.63.191','2019-07-08 14:28:53'),(3041,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.150.63.191','2019-07-08 14:28:58'),(3042,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.233.246.98','2019-07-08 16:58:51'),(3043,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'123.233.246.98','2019-07-08 16:59:44'),(3044,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'123.233.246.98','2019-07-08 16:59:59'),(3045,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'123.233.246.98','2019-07-08 17:00:10'),(3046,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.233.246.98','2019-07-08 17:00:26'),(3047,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'123.233.246.98','2019-07-08 17:00:50'),(3048,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','14',2,'123.233.246.98','2019-07-08 17:00:59'),(3049,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.233.246.98','2019-07-08 17:01:17'),(3050,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'123.233.246.98','2019-07-08 17:04:07'),(3051,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.233.246.98','2019-07-08 17:04:45'),(3052,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'123.233.246.98','2019-07-08 17:05:24'),(3053,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'123.233.246.98','2019-07-08 17:06:28'),(3054,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.233.246.98','2019-07-08 17:13:14'),(3055,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',629,'123.233.246.98','2019-07-08 17:13:20'),(3056,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1302,'113.70.218.151','2019-07-08 17:54:42'),(3057,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'119.57.117.216','2019-07-08 20:00:44'),(3058,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.57.117.216','2019-07-08 20:01:14'),(3059,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'119.57.117.216','2019-07-08 20:01:18'),(3060,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.230.101.45','2019-07-08 20:37:54'),(3061,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'120.230.101.45','2019-07-08 20:38:11'),(3062,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'120.230.101.45','2019-07-08 20:38:55'),(3063,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.175.132.220','2019-07-08 21:12:11'),(3064,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.129.52.245','2019-07-09 06:16:54'),(3065,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.129.52.245','2019-07-09 06:23:08'),(3066,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'211.141.92.6','2019-07-09 10:10:36'),(3067,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'121.237.141.176','2019-07-09 10:58:28'),(3068,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'121.237.141.176','2019-07-09 10:58:41'),(3069,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'119.4.240.159','2019-07-09 11:21:23'),(3070,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',3,'119.4.240.159','2019-07-09 11:21:39'),(3071,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'119.4.240.159','2019-07-09 11:21:43'),(3072,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'119.4.240.159','2019-07-09 11:21:52'),(3073,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.4.240.159','2019-07-09 11:23:07'),(3074,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.4.240.159','2019-07-09 11:23:41'),(3075,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'119.4.240.159','2019-07-09 11:24:17'),(3076,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-09 12:01:59'),(3077,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'1.119.15.246','2019-07-09 12:41:58'),(3078,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.153.143.162','2019-07-09 15:23:32'),(3079,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.153.143.162','2019-07-09 15:34:33'),(3080,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',675,'210.21.200.74','2019-07-09 15:53:10'),(3081,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'210.21.200.74','2019-07-09 15:57:11'),(3082,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'49.77.135.150','2019-07-09 20:12:52'),(3083,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'121.227.247.46','2019-07-09 20:49:30'),(3084,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'121.227.247.46','2019-07-09 20:49:47'),(3085,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.227.247.46','2019-07-09 20:50:26'),(3086,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.162.8.29','2019-07-09 21:24:56'),(3087,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'116.26.16.152','2019-07-09 21:49:14'),(3088,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'49.77.68.20','2019-07-09 22:35:22'),(3089,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',5,'49.77.68.20','2019-07-09 22:35:34'),(3090,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.77.68.20','2019-07-09 22:36:21'),(3091,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'27.17.131.61','2019-07-09 22:38:54'),(3092,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'27.17.131.61','2019-07-09 22:39:05'),(3093,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.17.131.61','2019-07-09 22:39:42'),(3094,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.17.131.61','2019-07-09 22:44:45'),(3095,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'27.17.131.61','2019-07-09 22:45:16'),(3096,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',469,'27.17.131.61','2019-07-09 22:45:23'),(3097,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.35.6.128','2019-07-09 23:12:34'),(3098,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'211.97.129.56','2019-07-09 23:16:20'),(3099,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'211.97.129.56','2019-07-09 23:19:53'),(3100,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'211.97.129.56','2019-07-09 23:21:55'),(3101,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'211.97.129.56','2019-07-09 23:22:10'),(3102,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'112.5.203.25','2019-07-09 23:47:55'),(3103,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',436,'49.77.135.150','2019-07-09 23:52:57'),(3104,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',623,'211.97.129.56','2019-07-10 00:09:29'),(3105,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.39.103','2019-07-10 08:25:13'),(3106,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.183.158.210','2019-07-10 08:42:47'),(3107,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'36.153.143.162','2019-07-10 09:31:15'),(3108,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'36.153.143.162','2019-07-10 09:32:09'),(3109,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'36.153.143.162','2019-07-10 09:33:01'),(3110,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.183.234.146','2019-07-10 09:58:25'),(3111,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'59.172.5.212','2019-07-10 10:04:22'),(3112,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.112.74.239','2019-07-10 11:10:47'),(3113,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-10 11:29:48'),(3114,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'61.183.234.146','2019-07-10 13:30:03'),(3115,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'58.213.215.98','2019-07-10 13:48:37'),(3116,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'58.213.215.98','2019-07-10 13:49:51'),(3117,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'58.213.215.98','2019-07-10 13:51:17'),(3118,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'58.213.215.98','2019-07-10 13:53:01'),(3119,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'58.213.215.98','2019-07-10 13:54:05'),(3120,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.153.143.162','2019-07-10 15:40:38'),(3121,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.153.143.162','2019-07-10 15:40:56'),(3122,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'110.87.189.113','2019-07-10 17:22:33'),(3123,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.49.47.173','2019-07-10 17:32:14'),(3124,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'183.49.47.173','2019-07-10 17:33:08'),(3125,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.49.47.173','2019-07-10 17:33:47'),(3126,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'183.49.47.173','2019-07-10 17:33:59'),(3127,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'106.38.90.43','2019-07-10 17:41:35'),(3128,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'106.38.90.43','2019-07-10 17:42:43'),(3129,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.38.90.43','2019-07-10 17:42:56'),(3130,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'106.38.90.43','2019-07-10 17:43:10'),(3131,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'119.139.197.47','2019-07-10 17:44:34'),(3132,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'119.139.197.47','2019-07-10 17:45:21'),(3133,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'119.139.197.47','2019-07-10 17:46:35'),(3134,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'119.139.197.47','2019-07-10 17:46:49'),(3135,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'119.139.197.47','2019-07-10 17:47:22'),(3136,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',3,'211.97.128.98','2019-07-10 20:08:13'),(3137,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.97.128.98','2019-07-10 20:09:15'),(3138,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'211.97.128.98','2019-07-10 20:17:42'),(3139,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'211.97.128.98','2019-07-10 20:36:18'),(3140,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.74.88.234','2019-07-10 20:49:34'),(3141,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',11,'119.139.199.155','2019-07-11 09:57:29'),(3142,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'220.172.49.140','2019-07-11 10:04:27'),(3143,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'220.172.49.140','2019-07-11 10:04:42'),(3144,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'220.172.49.140','2019-07-11 10:05:52'),(3145,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.213.215.98','2019-07-11 10:29:13'),(3146,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'58.213.215.98','2019-07-11 10:31:10'),(3147,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.104.230.36','2019-07-11 11:21:01'),(3148,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.18.149.202','2019-07-11 13:50:26'),(3149,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.153.143.162','2019-07-11 13:56:27'),(3150,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',6,'122.224.152.194','2019-07-11 15:44:11'),(3151,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.224.152.194','2019-07-11 15:44:30'),(3152,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.224.152.194','2019-07-11 15:49:37'),(3153,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'218.94.95.62','2019-07-11 15:55:10'),(3154,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.94.95.62','2019-07-11 15:55:40'),(3155,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',1,'218.94.95.62','2019-07-11 15:57:40'),(3156,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'122.224.152.194','2019-07-11 15:58:57'),(3157,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'218.94.95.62','2019-07-11 16:01:24'),(3158,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-11 16:55:58'),(3159,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',477,'119.139.199.139','2019-07-11 17:13:11'),(3160,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',10,'119.139.199.139','2019-07-11 17:14:24'),(3161,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.139.199.139','2019-07-11 17:20:10'),(3162,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'183.64.214.3','2019-07-11 18:48:10'),(3163,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'117.149.10.42','2019-07-11 19:04:58'),(3164,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'42.120.74.122','2019-07-11 19:35:52'),(3165,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'42.120.74.122','2019-07-11 19:36:02'),(3166,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.120.74.122','2019-07-11 19:36:17'),(3167,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'113.44.47.54','2019-07-12 07:15:00'),(3168,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1087,'183.63.51.77','2019-07-12 10:26:13'),(3169,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'101.89.64.236','2019-07-12 10:43:17'),(3170,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'61.164.47.179','2019-07-12 11:11:16'),(3171,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',12,'61.164.47.179','2019-07-12 11:11:29'),(3172,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.164.47.179','2019-07-12 11:12:22'),(3173,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.153.143.162','2019-07-12 14:08:07'),(3174,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.153.143.162','2019-07-12 14:38:42'),(3175,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.153.143.162','2019-07-12 14:55:41'),(3176,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',678,'119.139.196.99','2019-07-12 16:49:18'),(3177,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'103.40.221.98','2019-07-12 17:23:21'),(3178,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'103.40.221.98','2019-07-12 17:23:26'),(3179,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.40.221.98','2019-07-12 17:23:59'),(3180,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.40.221.98','2019-07-12 17:27:11'),(3181,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.137.52.80','2019-07-12 22:32:06'),(3182,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'112.19.189.184','2019-07-12 22:53:33'),(3183,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.19.189.184','2019-07-12 22:58:25'),(3184,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'121.35.1.169','2019-07-12 23:22:25'),(3185,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'121.35.1.169','2019-07-12 23:22:47'),(3186,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'121.35.1.169','2019-07-12 23:42:38'),(3187,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',6,'121.35.1.169','2019-07-12 23:44:09'),(3188,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'121.35.1.169','2019-07-12 23:44:31'),(3189,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'121.35.1.169','2019-07-12 23:45:20'),(3190,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.70.217.100','2019-07-13 10:10:20'),(3191,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',11,'183.128.161.126','2019-07-13 10:29:02'),(3192,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.255.108.162','2019-07-13 14:24:52'),(3193,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.10.66.87','2019-07-13 15:17:33'),(3194,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',10,'112.10.66.87','2019-07-13 15:17:56'),(3195,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'112.10.66.87','2019-07-13 15:20:10'),(3196,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',258,'112.10.66.87','2019-07-13 15:20:18'),(3197,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'120.85.77.150','2019-07-13 19:36:59'),(3198,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',7,'120.85.77.150','2019-07-13 19:38:16'),(3199,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.85.77.150','2019-07-13 19:40:02'),(3200,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'171.83.3.224','2019-07-13 22:04:05'),(3201,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'101.91.60.110','2019-07-13 22:05:10'),(3202,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'114.253.23.136','2019-07-13 23:11:27'),(3203,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.253.23.136','2019-07-13 23:12:15'),(3204,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1498,'113.116.140.139','2019-07-14 14:30:09'),(3205,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'219.134.217.104','2019-07-14 15:39:52'),(3206,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',104,'45.76.195.16','2019-07-14 16:19:51'),(3207,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',84,'113.116.140.139','2019-07-14 16:22:59'),(3208,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',13,'113.116.140.139','2019-07-14 16:25:35'),(3209,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',17,'113.116.140.139','2019-07-14 17:05:53'),(3210,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',29,'113.116.140.139','2019-07-14 17:14:48'),(3211,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',42,'113.116.140.139','2019-07-14 17:14:58'),(3212,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',41,'180.164.237.180','2019-07-14 19:41:30'),(3213,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',75,'180.164.237.180','2019-07-14 19:41:36'),(3214,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',20,'218.68.105.8','2019-07-14 22:12:35'),(3215,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',9,'218.68.105.8','2019-07-14 22:13:52'),(3216,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'117.136.124.150','2019-07-15 00:32:14'),(3217,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',9,'117.136.124.150','2019-07-15 00:32:36'),(3218,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',26,'117.136.124.150','2019-07-15 00:33:10'),(3219,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'222.85.144.70','2019-07-15 09:54:50'),(3220,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',8,'36.153.143.162','2019-07-15 10:36:39'),(3221,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'36.153.143.162','2019-07-15 10:44:20'),(3222,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',14,'36.153.143.162','2019-07-15 11:24:14'),(3223,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'183.63.51.77','2019-07-15 12:52:59'),(3224,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-15 12:54:39'),(3225,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',859,'183.63.51.77','2019-07-15 13:04:19'),(3226,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-15 13:04:30'),(3227,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-15 13:04:49'),(3228,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',28,'183.63.51.77','2019-07-15 13:05:20'),(3229,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.63.51.77','2019-07-15 13:06:10'),(3230,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',28,'183.63.51.77','2019-07-15 13:06:57'),(3231,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',68,'183.63.51.77','2019-07-15 13:07:09'),(3232,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',641,'183.63.51.77','2019-07-15 13:36:53'),(3233,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',25,'183.63.51.77','2019-07-15 13:37:04'),(3234,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',27,'183.63.51.77','2019-07-15 13:38:30'),(3235,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',13,'36.153.143.162','2019-07-15 14:32:34'),(3236,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.153.143.162','2019-07-15 14:32:56'),(3237,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'36.153.143.162','2019-07-15 14:35:49'),(3238,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'218.20.5.5','2019-07-15 14:39:02'),(3239,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.20.5.5','2019-07-15 14:39:31'),(3240,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',22,'36.153.143.162','2019-07-15 14:45:29'),(3241,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',10,'36.153.143.162','2019-07-15 14:46:17'),(3242,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',5,'14.155.222.170','2019-07-15 15:01:25'),(3243,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-15 15:09:57'),(3244,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'14.155.222.170','2019-07-15 15:39:45'),(3245,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',417,'183.63.51.77','2019-07-15 16:05:20'),(3246,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-15 16:36:30'),(3247,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',36,'221.238.132.118','2019-07-15 16:40:27'),(3248,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'221.238.132.118','2019-07-15 16:40:30'),(3249,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.238.132.118','2019-07-15 16:40:32'),(3250,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.238.132.118','2019-07-15 17:16:32'),(3251,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',661,'113.70.218.107','2019-07-15 18:45:11'),(3252,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-15 19:40:07'),(3253,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',644,'183.63.51.77','2019-07-15 19:45:05'),(3254,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',6,'183.63.51.77','2019-07-15 19:53:35'),(3255,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',6,'183.63.51.77','2019-07-15 19:53:46'),(3256,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'183.63.51.77','2019-07-15 19:54:30'),(3257,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-15 19:54:41'),(3258,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-15 19:54:54'),(3259,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'183.63.51.77','2019-07-15 19:55:08'),(3260,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.63.51.77','2019-07-15 19:55:22'),(3261,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'183.63.51.77','2019-07-15 19:55:27'),(3262,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',9,'183.63.51.77','2019-07-15 19:55:35'),(3263,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',634,'183.63.51.77','2019-07-15 19:55:41'),(3264,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',433,'183.63.51.77','2019-07-15 19:55:48'),(3265,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'183.63.51.77','2019-07-15 19:56:00'),(3266,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',5,'183.63.51.77','2019-07-15 19:56:08'),(3267,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',17,'183.63.51.77','2019-07-15 19:56:24'),(3268,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',7,'183.63.51.77','2019-07-15 19:56:31'),(3269,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',1880,'183.63.51.77','2019-07-15 19:56:57'),(3270,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',7,'183.63.51.77','2019-07-15 19:57:12'),(3271,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'183.63.51.77','2019-07-15 19:57:25'),(3272,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.10.14.16','2019-07-15 20:21:43'),(3273,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'183.63.51.77','2019-07-15 20:22:51'),(3274,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-15 20:23:18'),(3275,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',6,'183.63.51.77','2019-07-15 20:23:41'),(3276,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'183.63.51.77','2019-07-15 20:24:09'),(3277,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-15 20:24:23'),(3278,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'183.63.51.77','2019-07-15 20:24:44'),(3279,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-15 20:24:55'),(3280,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'183.63.51.77','2019-07-15 20:25:11'),(3281,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.63.51.77','2019-07-15 20:25:27'),(3282,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.63.51.77','2019-07-15 20:25:39'),(3283,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'183.63.51.77','2019-07-15 20:25:52'),(3284,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',234,'183.63.51.77','2019-07-15 20:26:01'),(3285,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'113.88.99.77','2019-07-16 00:18:32'),(3286,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'111.199.186.251','2019-07-16 00:28:42'),(3287,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',18,'113.88.99.77','2019-07-16 00:29:35'),(3288,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'113.88.99.77','2019-07-16 00:41:29'),(3289,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.88.99.77','2019-07-16 00:41:39'),(3290,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.88.99.77','2019-07-16 00:41:46'),(3291,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'113.88.99.77','2019-07-16 00:41:53'),(3292,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',6,'113.88.99.77','2019-07-16 00:42:19'),(3293,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'113.88.99.77','2019-07-16 00:42:54'),(3294,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.88.99.77','2019-07-16 00:43:03'),(3295,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.88.99.77','2019-07-16 00:44:02'),(3296,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',874,'113.88.99.77','2019-07-16 00:44:10'),(3297,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',216,'113.88.99.77','2019-07-16 01:04:21'),(3298,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'113.88.99.77','2019-07-16 01:04:52'),(3299,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1080,'113.88.99.77','2019-07-16 01:05:17'),(3300,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.88.99.77','2019-07-16 01:05:28'),(3301,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'112.97.162.68','2019-07-16 07:17:45'),(3302,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.64.142','2019-07-16 08:15:08'),(3303,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'223.104.64.142','2019-07-16 08:15:08'),(3304,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'117.136.79.160','2019-07-16 08:27:10'),(3305,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',5,'117.136.79.160','2019-07-16 08:27:30'),(3306,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'171.221.175.80','2019-07-16 08:58:07'),(3307,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',123,'171.221.175.80','2019-07-16 08:58:31'),(3308,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',13,'171.221.175.80','2019-07-16 09:00:22'),(3309,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'171.221.175.80','2019-07-16 09:03:33'),(3310,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.136.79.160','2019-07-16 10:54:47'),(3311,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'117.136.79.160','2019-07-16 10:54:51'),(3312,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.161.170.127','2019-07-16 11:37:59'),(3313,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.40.221.97','2019-07-16 12:09:07'),(3314,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-16 12:28:19'),(3315,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-16 12:55:23'),(3316,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',546,'183.63.51.77','2019-07-16 12:55:40'),(3317,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-16 12:57:18'),(3318,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-16 12:57:31'),(3319,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',39,'183.63.51.77','2019-07-16 13:00:31'),(3320,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-16 13:00:43'),(3321,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',23,'183.63.51.77','2019-07-16 13:00:56'),(3322,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',5,'183.63.51.77','2019-07-16 13:46:56'),(3323,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-16 13:47:18'),(3324,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'183.63.51.77','2019-07-16 13:47:52'),(3325,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',9,'183.63.51.77','2019-07-16 13:48:30'),(3326,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',636,'36.153.143.162','2019-07-16 14:02:33'),(3327,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'36.153.143.162','2019-07-16 14:02:44'),(3328,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.153.143.162','2019-07-16 14:02:54'),(3329,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'36.153.143.162','2019-07-16 14:02:57'),(3330,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.223.111.113','2019-07-16 14:23:06'),(3331,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',7,'114.141.190.70','2019-07-16 14:26:57'),(3332,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-16 14:35:49'),(3333,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'114.224.18.173','2019-07-16 14:40:30'),(3334,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.141.190.70','2019-07-16 14:41:13'),(3335,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.141.190.70','2019-07-16 14:42:26'),(3336,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.225.200.148','2019-07-16 14:45:42'),(3337,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',295,'117.136.79.160','2019-07-16 14:46:02'),(3338,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.160','2019-07-16 14:47:10'),(3339,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.160','2019-07-16 14:47:30'),(3340,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'117.136.79.160','2019-07-16 14:47:40'),(3341,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.160','2019-07-16 14:47:50'),(3342,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',10,'117.136.79.160','2019-07-16 14:53:40'),(3343,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'114.141.190.70','2019-07-16 14:59:09'),(3344,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'114.141.190.70','2019-07-16 15:01:13'),(3345,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'114.141.190.70','2019-07-16 15:01:29'),(3346,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'114.141.190.70','2019-07-16 15:01:48'),(3347,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'144.255.32.238','2019-07-16 16:13:39'),(3348,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'144.255.32.238','2019-07-16 16:14:27'),(3349,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.79.160','2019-07-16 16:52:37'),(3350,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'117.136.79.160','2019-07-16 16:53:03'),(3351,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'117.136.79.160','2019-07-16 16:55:43'),(3352,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'117.136.79.160','2019-07-16 16:58:41'),(3353,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'117.177.41.68','2019-07-16 17:43:49'),(3354,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.177.41.68','2019-07-16 17:45:06'),(3355,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',210,'101.230.234.6','2019-07-16 18:04:43'),(3356,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'203.208.60.125','2019-07-16 21:19:05'),(3357,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'43.243.137.242','2019-07-16 22:02:06'),(3358,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',430,'43.243.137.242','2019-07-16 22:02:25'),(3359,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'43.243.137.242','2019-07-16 22:03:51'),(3360,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'222.35.128.210','2019-07-16 22:19:17'),(3361,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'49.66.107.112','2019-07-16 22:24:42'),(3362,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'113.88.99.77','2019-07-16 22:34:23'),(3363,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.99.77','2019-07-16 22:34:50'),(3364,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'113.88.99.77','2019-07-16 22:35:04'),(3365,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'113.88.99.77','2019-07-16 22:35:14'),(3366,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'113.88.99.77','2019-07-16 22:35:30'),(3367,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',11,'113.88.99.77','2019-07-16 22:35:44'),(3368,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.99.77','2019-07-16 22:41:20'),(3369,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.19.95.212','2019-07-16 22:57:47'),(3370,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'111.199.186.251','2019-07-16 23:19:10'),(3371,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.88.99.77','2019-07-16 23:21:20'),(3372,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.99.77','2019-07-16 23:22:13'),(3373,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',27,'113.88.99.77','2019-07-16 23:22:41'),(3374,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'113.88.99.77','2019-07-16 23:22:57'),(3375,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.99.77','2019-07-16 23:23:07'),(3376,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.99.77','2019-07-16 23:23:17'),(3377,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.99.77','2019-07-16 23:23:24'),(3378,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.99.77','2019-07-16 23:23:42'),(3379,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.99.77','2019-07-16 23:23:52'),(3380,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.99.77','2019-07-16 23:24:15'),(3381,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.99.77','2019-07-16 23:24:39'),(3382,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.99.77','2019-07-16 23:25:06'),(3383,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.99.77','2019-07-16 23:25:17'),(3384,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'117.62.180.133','2019-07-16 23:35:16'),(3385,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.62.180.133','2019-07-16 23:35:46'),(3386,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.62.180.133','2019-07-16 23:37:33'),(3387,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'223.72.45.30','2019-07-16 23:49:30'),(3388,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'42.236.10.93','2019-07-16 23:49:41'),(3389,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',4,'113.88.99.77','2019-07-17 00:06:06'),(3390,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',6,'113.88.99.77','2019-07-17 00:06:27'),(3391,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',428,'113.88.99.77','2019-07-17 00:06:31'),(3392,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.46.78.236','2019-07-17 07:31:41'),(3393,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.46.78.236','2019-07-17 07:31:44'),(3394,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'210.22.245.219','2019-07-17 07:32:40'),(3395,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.46.78.236','2019-07-17 07:32:47'),(3396,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',421,'117.136.79.115','2019-07-17 08:07:23'),(3397,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.79.115','2019-07-17 08:07:58'),(3398,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',207,'222.90.73.18','2019-07-17 08:10:57'),(3399,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.115','2019-07-17 08:36:11'),(3400,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.131.134.18','2019-07-17 09:21:23'),(3401,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'123.131.134.18','2019-07-17 09:21:42'),(3402,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-17 09:36:26'),(3403,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.253.10.134','2019-07-17 09:55:46'),(3404,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',10,'183.63.51.77','2019-07-17 09:57:13'),(3405,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-17 09:57:33'),(3406,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'116.247.112.151','2019-07-17 10:42:49'),(3407,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'36.152.32.170','2019-07-17 13:58:24'),(3408,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'36.152.32.170','2019-07-17 14:01:02'),(3409,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'36.152.32.170','2019-07-17 14:02:19'),(3410,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-17 14:48:18'),(3411,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-17 14:48:21'),(3412,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-17 14:48:29'),(3413,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',428,'183.63.51.77','2019-07-17 15:01:27'),(3414,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-17 15:01:36'),(3415,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',615,'183.63.51.77','2019-07-17 15:01:42'),(3416,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'112.10.14.16','2019-07-17 15:21:17'),(3417,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'114.141.190.70','2019-07-17 16:27:49'),(3418,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',868,'114.141.190.70','2019-07-17 16:29:42'),(3419,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.153.143.162','2019-07-17 16:29:46'),(3420,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'114.141.190.70','2019-07-17 16:29:59'),(3421,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',26,'117.107.139.22','2019-07-17 16:50:49'),(3422,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',458,'183.63.51.77','2019-07-17 16:55:37'),(3423,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',22,'183.63.51.77','2019-07-17 16:56:04'),(3424,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'36.152.32.170','2019-07-17 17:29:58'),(3425,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',642,'183.63.51.77','2019-07-17 17:39:54'),(3426,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'203.208.60.118','2019-07-17 17:57:53'),(3427,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'222.76.251.163','2019-07-17 18:19:28'),(3428,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'222.76.251.163','2019-07-17 18:19:52'),(3429,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'222.76.251.163','2019-07-17 18:19:58'),(3430,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'222.76.251.163','2019-07-17 18:20:44'),(3431,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'222.76.251.163','2019-07-17 18:21:23'),(3432,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'222.76.251.163','2019-07-17 18:21:58'),(3433,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'222.76.251.163','2019-07-17 18:22:54'),(3434,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.63.51.77','2019-07-17 20:40:04'),(3435,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-17 20:54:20'),(3436,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.201.145.70','2019-07-17 22:49:46'),(3437,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'183.15.182.250','2019-07-17 23:31:16'),(3438,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.182.250','2019-07-17 23:31:59'),(3439,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'183.15.182.250','2019-07-17 23:32:10'),(3440,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',11,'183.15.182.250','2019-07-17 23:32:15'),(3441,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.15.182.250','2019-07-17 23:50:21'),(3442,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.65.250.37','2019-07-17 23:59:06'),(3443,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'223.104.64.150','2019-07-18 01:14:11'),(3444,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.64.150','2019-07-18 01:14:15'),(3445,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'42.236.10.75','2019-07-18 05:10:16'),(3446,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'180.163.220.3','2019-07-18 05:54:07'),(3447,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'180.163.220.5','2019-07-18 06:56:52'),(3448,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1350,'223.104.63.188','2019-07-18 08:01:08'),(3449,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'223.104.63.188','2019-07-18 08:01:28'),(3450,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'36.153.143.162','2019-07-18 09:35:21'),(3451,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'36.153.143.162','2019-07-18 09:36:38'),(3452,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',2,'36.153.143.162','2019-07-18 09:45:42'),(3453,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'36.153.143.162','2019-07-18 10:14:38'),(3454,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.139.96.31','2019-07-18 10:21:16'),(3455,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.139.96.31','2019-07-18 10:23:02'),(3456,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',432,'36.153.143.162','2019-07-18 10:37:16'),(3457,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',5,'36.153.143.162','2019-07-18 10:37:21'),(3458,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'36.153.143.162','2019-07-18 10:37:32'),(3459,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.153.143.162','2019-07-18 10:37:52'),(3460,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'36.153.143.162','2019-07-18 10:38:02'),(3461,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'36.153.143.162','2019-07-18 10:38:23'),(3462,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',11,'36.153.143.162','2019-07-18 10:38:34'),(3463,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',2,'36.153.143.162','2019-07-18 10:38:37'),(3464,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',8,'36.152.32.170','2019-07-18 10:42:01'),(3465,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'36.152.32.170','2019-07-18 10:43:14'),(3466,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',212,'114.141.190.70','2019-07-18 10:55:45'),(3467,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'125.111.198.193','2019-07-18 11:04:59'),(3468,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'125.111.198.193','2019-07-18 11:12:37'),(3469,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.141.190.70','2019-07-18 11:15:26'),(3470,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',267,'114.141.190.70','2019-07-18 11:15:30'),(3471,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.200.200.98','2019-07-18 11:35:49'),(3472,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'180.163.220.5','2019-07-18 13:26:45'),(3473,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-18 14:10:18'),(3474,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'183.63.51.77','2019-07-18 14:10:35'),(3475,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',207,'183.63.51.77','2019-07-18 14:10:46'),(3476,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',17,'183.63.51.77','2019-07-18 14:10:51'),(3477,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'183.63.51.77','2019-07-18 14:11:05'),(3478,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',46,'36.153.143.162','2019-07-18 14:41:02'),(3479,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.153.143.162','2019-07-18 14:41:07'),(3480,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',6,'113.104.182.97','2019-07-18 14:45:57'),(3481,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'113.104.182.97','2019-07-18 14:46:20'),(3482,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'171.221.236.38','2019-07-18 15:10:41'),(3483,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'171.221.236.38','2019-07-18 15:12:21'),(3484,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'113.104.182.97','2019-07-18 16:09:16'),(3485,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-18 16:16:56'),(3486,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'58.211.245.229','2019-07-18 16:27:28'),(3487,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.11.241.235','2019-07-18 16:30:59'),(3488,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',233,'183.11.241.235','2019-07-18 16:31:06'),(3489,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',232,'183.11.241.235','2019-07-18 16:31:11'),(3490,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.11.241.235','2019-07-18 16:31:30'),(3491,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'113.104.182.97','2019-07-18 17:15:34'),(3492,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.104.182.97','2019-07-18 17:15:39'),(3493,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',5,'113.104.182.97','2019-07-18 17:15:47'),(3494,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'113.104.182.97','2019-07-18 17:18:10'),(3495,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'222.128.2.82','2019-07-18 18:21:29'),(3496,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.128.2.82','2019-07-18 18:21:54'),(3497,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.128.2.82','2019-07-18 18:21:56'),(3498,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-18 19:41:09'),(3499,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',5,'183.63.51.77','2019-07-18 19:45:48'),(3500,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'36.152.32.170','2019-07-18 20:09:48'),(3501,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.152.32.170','2019-07-18 20:10:45'),(3502,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.152.32.170','2019-07-18 20:10:51'),(3503,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'36.152.32.170','2019-07-18 20:10:53'),(3504,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'113.104.182.97','2019-07-18 20:51:25'),(3505,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'61.241.201.39','2019-07-18 20:53:14'),(3506,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',35,'183.15.183.128','2019-07-18 23:56:10'),(3507,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'183.15.183.128','2019-07-18 23:57:32'),(3508,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',51,'183.15.183.128','2019-07-18 23:57:43'),(3509,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',27,'183.15.183.128','2019-07-19 00:03:09'),(3510,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'183.15.183.128','2019-07-19 00:52:04'),(3511,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',44,'180.163.220.5','2019-07-19 03:19:34'),(3512,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',25,'42.236.10.78','2019-07-19 03:37:31'),(3513,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',17,'183.15.183.128','2019-07-19 07:50:23'),(3514,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'222.128.2.82','2019-07-19 08:49:05'),(3515,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'219.140.43.65','2019-07-19 09:21:44'),(3516,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'219.140.43.65','2019-07-19 09:22:02'),(3517,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'219.140.43.65','2019-07-19 09:24:31'),(3518,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',17,'183.63.51.77','2019-07-19 09:30:56'),(3519,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',1090,'183.63.51.77','2019-07-19 10:28:52'),(3520,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',40,'58.213.215.98','2019-07-19 10:32:41'),(3521,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',27,'58.213.215.98','2019-07-19 10:41:20'),(3522,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',20,'117.136.79.128','2019-07-19 12:40:20'),(3523,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'210.12.17.100','2019-07-19 13:57:10'),(3524,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',17,'210.12.17.100','2019-07-19 13:57:31'),(3525,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'210.12.17.100','2019-07-19 13:57:44'),(3526,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',17,'210.12.17.100','2019-07-19 13:57:46'),(3527,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'210.12.17.100','2019-07-19 13:57:49'),(3528,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',39,'171.213.12.57','2019-07-19 14:05:02'),(3529,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'183.63.51.77','2019-07-19 15:02:57'),(3530,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'219.140.43.65','2019-07-19 16:36:26'),(3531,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'183.63.51.77','2019-07-19 16:37:15'),(3532,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'59.46.181.226','2019-07-19 17:22:56'),(3533,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'59.46.181.226','2019-07-19 17:23:45'),(3534,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.63.51.77','2019-07-19 19:17:00'),(3535,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.183.109','2019-07-19 21:20:35'),(3536,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',5,'114.249.132.32','2019-07-19 21:51:07'),(3537,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',7,'114.249.132.32','2019-07-19 21:51:24'),(3538,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'183.15.183.109','2019-07-19 21:58:56'),(3539,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',36,'112.32.32.47','2019-07-19 22:02:23'),(3540,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',5,'112.32.32.47','2019-07-19 22:03:24'),(3541,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',5,'183.15.183.109','2019-07-19 22:16:58'),(3542,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'183.15.183.109','2019-07-19 22:17:07'),(3543,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'183.15.183.109','2019-07-19 22:17:26'),(3544,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',5,'58.101.44.109','2019-07-19 22:27:54'),(3545,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',8,'183.15.183.109','2019-07-19 22:45:12'),(3546,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',844,'183.15.183.109','2019-07-19 22:45:28'),(3547,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',27,'183.15.183.109','2019-07-19 22:45:46'),(3548,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',1079,'183.15.183.109','2019-07-19 22:48:38'),(3549,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'183.15.183.109','2019-07-19 22:48:50'),(3550,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'183.15.183.109','2019-07-19 22:49:57'),(3551,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'183.15.183.109','2019-07-19 22:50:33'),(3552,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',19,'183.15.183.109','2019-07-19 22:51:48'),(3553,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'183.15.183.109','2019-07-19 22:52:05'),(3554,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'183.15.183.109','2019-07-19 22:53:25'),(3555,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',1673,'183.15.183.109','2019-07-19 22:56:59'),(3556,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',38,'183.15.183.109','2019-07-19 23:05:19'),(3557,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',7,'183.15.183.109','2019-07-19 23:05:30'),(3558,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',12,'183.15.183.109','2019-07-19 23:05:53'),(3559,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',24,'183.15.183.109','2019-07-19 23:13:07'),(3560,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'183.15.183.109','2019-07-19 23:13:16'),(3561,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',429,'183.15.183.109','2019-07-19 23:17:54'),(3562,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',38,'183.15.183.109','2019-07-19 23:18:04'),(3563,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',14,'183.15.183.109','2019-07-19 23:18:22'),(3564,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'183.15.183.109','2019-07-19 23:18:41'),(3565,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',853,'183.15.183.109','2019-07-19 23:22:08'),(3566,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',633,'115.150.60.4','2019-07-19 23:22:44'),(3567,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'115.150.60.4','2019-07-19 23:22:59'),(3568,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',628,'183.15.183.109','2019-07-19 23:26:52'),(3569,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',844,'183.15.183.109','2019-07-19 23:30:12'),(3570,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',690,'183.15.183.109','2019-07-19 23:30:32'),(3571,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.183.109','2019-07-19 23:33:08'),(3572,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'183.15.183.109','2019-07-19 23:33:35'),(3573,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',433,'183.15.183.109','2019-07-19 23:39:23'),(3574,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',426,'183.15.183.109','2019-07-19 23:39:41'),(3575,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'183.15.183.109','2019-07-19 23:39:59'),(3576,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'183.15.183.109','2019-07-19 23:41:53'),(3577,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'183.15.183.109','2019-07-19 23:42:24'),(3578,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'183.15.183.109','2019-07-19 23:43:21'),(3579,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',12,'183.15.183.109','2019-07-19 23:43:37'),(3580,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'183.15.183.109','2019-07-19 23:44:38'),(3581,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.15.183.109','2019-07-19 23:44:54'),(3582,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',5,'183.15.183.109','2019-07-19 23:50:07'),(3583,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',14,'183.15.183.109','2019-07-19 23:50:14'),(3584,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'183.15.183.109','2019-07-19 23:53:23'),(3585,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',26,'183.15.183.109','2019-07-19 23:53:44'),(3586,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'183.15.183.109','2019-07-19 23:54:11'),(3587,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.15.183.109','2019-07-19 23:54:37'),(3588,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'183.15.183.109','2019-07-19 23:55:10'),(3589,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'183.15.183.109','2019-07-19 23:55:26'),(3590,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.15.183.109','2019-07-19 23:56:23'),(3591,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',16,'183.15.183.109','2019-07-19 23:58:47'),(3592,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.109','2019-07-19 23:58:57'),(3593,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.109','2019-07-19 23:59:06'),(3594,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'183.15.183.109','2019-07-19 23:59:56'),(3595,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'183.15.183.109','2019-07-20 00:01:46'),(3596,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.109','2019-07-20 00:02:04'),(3597,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'183.15.183.109','2019-07-20 00:03:39'),(3598,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'183.15.183.109','2019-07-20 00:14:10'),(3599,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.109','2019-07-20 00:14:44'),(3600,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'183.15.183.109','2019-07-20 00:14:58'),(3601,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.15.183.109','2019-07-20 00:17:01'),(3602,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.15.183.109','2019-07-20 00:17:19'),(3603,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',621,'183.15.183.109','2019-07-20 00:22:44'),(3604,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'183.15.183.109','2019-07-20 00:22:55'),(3605,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',213,'183.15.183.109','2019-07-20 00:23:57'),(3606,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'183.15.183.109','2019-07-20 00:24:16'),(3607,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'183.15.183.109','2019-07-20 00:24:51'),(3608,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.109','2019-07-20 00:26:01'),(3609,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.112','2019-07-20 00:26:08'),(3610,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.183.109','2019-07-20 00:27:58'),(3611,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'183.15.183.109','2019-07-20 00:28:40'),(3612,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.109','2019-07-20 00:29:10'),(3613,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.183.109','2019-07-20 00:29:17'),(3614,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.109','2019-07-20 00:29:29'),(3615,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'183.15.183.109','2019-07-20 00:31:23'),(3616,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'183.15.183.109','2019-07-20 00:33:37'),(3617,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'183.15.183.109','2019-07-20 00:33:46'),(3618,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'183.15.183.109','2019-07-20 00:34:03'),(3619,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',882,'183.15.183.109','2019-07-20 00:35:47'),(3620,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'183.15.183.109','2019-07-20 00:35:54'),(3621,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',6,'183.15.183.109','2019-07-20 00:36:11'),(3622,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'183.15.183.109','2019-07-20 00:36:23'),(3623,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'36.152.32.170','2019-07-20 10:21:22'),(3624,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',5,'183.15.181.242','2019-07-20 10:23:01'),(3625,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'183.15.181.242','2019-07-20 10:23:12'),(3626,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'36.152.32.170','2019-07-20 10:38:36'),(3627,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'36.152.32.170','2019-07-20 10:53:19'),(3628,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',4,'36.152.32.170','2019-07-20 10:54:39'),(3629,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',208,'183.15.181.242','2019-07-20 11:21:02'),(3630,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'183.15.181.242','2019-07-20 11:21:29'),(3631,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'183.15.181.242','2019-07-20 11:22:13'),(3632,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',13,'183.15.181.242','2019-07-20 11:32:52'),(3633,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',635,'183.15.181.242','2019-07-20 11:36:48'),(3634,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',419,'183.15.181.242','2019-07-20 11:42:52'),(3635,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.181.242','2019-07-20 11:44:15'),(3636,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.181.242','2019-07-20 11:44:38'),(3637,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',429,'183.15.181.242','2019-07-20 11:47:43'),(3638,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',717,'183.15.181.242','2019-07-20 11:51:04'),(3639,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',11,'183.15.181.242','2019-07-20 11:59:04'),(3640,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'183.15.181.242','2019-07-20 11:59:15'),(3641,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.181.242','2019-07-20 11:59:22'),(3642,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',205,'183.15.181.242','2019-07-20 12:00:47'),(3643,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'183.15.181.242','2019-07-20 12:01:13'),(3644,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.15.181.242','2019-07-20 12:01:28'),(3645,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'183.15.181.242','2019-07-20 12:01:36'),(3646,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'183.15.181.242','2019-07-20 12:02:10'),(3647,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'183.15.181.242','2019-07-20 12:03:55'),(3648,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',12,'183.15.181.242','2019-07-20 12:04:48'),(3649,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'183.15.181.242','2019-07-20 12:05:02'),(3650,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',6,'183.15.181.242','2019-07-20 12:05:09'),(3651,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'213.59.119.127','2019-07-20 12:23:42'),(3652,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'213.59.119.127','2019-07-20 12:27:24'),(3653,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.15.181.242','2019-07-20 12:31:43'),(3654,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',33,'183.15.181.242','2019-07-20 12:31:59'),(3655,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.181.242','2019-07-20 12:32:15'),(3656,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'183.15.181.242','2019-07-20 12:32:22'),(3657,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'183.15.181.242','2019-07-20 12:32:28'),(3658,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'183.15.181.242','2019-07-20 12:32:47'),(3659,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',9,'183.15.181.242','2019-07-20 12:32:53'),(3660,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',6,'183.15.181.242','2019-07-20 12:33:08'),(3661,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'183.15.181.242','2019-07-20 12:33:14'),(3662,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'183.15.181.242','2019-07-20 12:33:58'),(3663,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',28,'183.15.181.242','2019-07-20 12:36:32'),(3664,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.15.181.242','2019-07-20 12:37:27'),(3665,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',11,'213.59.119.127','2019-07-20 12:38:02'),(3666,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'183.15.181.242','2019-07-20 12:43:47'),(3667,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',8,'183.15.181.242','2019-07-20 12:44:08'),(3668,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'183.15.181.242','2019-07-20 12:44:32'),(3669,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'183.15.181.242','2019-07-20 12:49:26'),(3670,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',16,'183.15.181.242','2019-07-20 12:49:51'),(3671,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'203.208.60.95','2019-07-20 12:50:01'),(3672,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',30,'213.59.119.127','2019-07-20 12:54:07'),(3673,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',433,'183.15.181.242','2019-07-20 12:55:06'),(3674,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.181.242','2019-07-20 12:58:07'),(3675,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.15.181.242','2019-07-20 13:03:12'),(3676,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.15.181.242','2019-07-20 13:05:01'),(3677,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',16,'183.15.181.242','2019-07-20 13:05:47'),(3678,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'183.15.181.242','2019-07-20 13:15:04'),(3679,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',7,'183.15.181.242','2019-07-20 13:30:52'),(3680,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'183.15.181.242','2019-07-20 13:31:50'),(3681,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',21,'183.15.181.242','2019-07-20 13:32:30'),(3682,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'183.15.181.242','2019-07-20 13:32:37'),(3683,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',4,'183.15.181.242','2019-07-20 13:33:18'),(3684,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',6,'183.15.181.242','2019-07-20 13:34:08'),(3685,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.181.242','2019-07-20 13:34:25'),(3686,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',15,'183.15.181.242','2019-07-20 13:34:45'),(3687,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'183.15.181.242','2019-07-20 13:35:40'),(3688,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'183.15.181.242','2019-07-20 13:36:12'),(3689,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',4,'183.15.181.242','2019-07-20 13:36:39'),(3690,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'183.15.181.242','2019-07-20 13:37:22'),(3691,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'222.64.94.197','2019-07-20 13:41:58'),(3692,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'183.15.181.242','2019-07-20 14:03:22'),(3693,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',272,'223.104.63.188','2019-07-20 22:49:15'),(3694,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.63.188','2019-07-20 22:59:47'),(3695,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'223.104.63.188','2019-07-20 23:02:08'),(3696,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',17,'14.223.176.154','2019-07-20 23:09:39'),(3697,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',38,'14.223.176.154','2019-07-20 23:11:03'),(3698,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',55,'180.163.220.68','2019-07-21 00:59:19'),(3699,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',49,'223.104.63.188','2019-07-21 01:23:32'),(3700,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',24,'223.104.63.188','2019-07-21 01:23:40'),(3701,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',79,'223.104.63.188','2019-07-21 01:23:54'),(3702,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',24,'223.104.63.188','2019-07-21 01:24:09'),(3703,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',26,'223.104.63.188','2019-07-21 01:24:16'),(3704,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',48,'223.104.63.188','2019-07-21 01:24:25'),(3705,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'223.104.63.188','2019-07-21 01:25:05'),(3706,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',956,'180.163.220.68','2019-07-21 05:25:08'),(3707,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',18,'223.72.60.66','2019-07-21 09:02:48'),(3708,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'183.15.181.240','2019-07-21 09:55:38'),(3709,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'183.15.181.240','2019-07-21 11:52:51'),(3710,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.127.151.226','2019-07-21 12:35:05'),(3711,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',19,'183.15.181.240','2019-07-21 13:21:23'),(3712,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',18,'183.15.181.240','2019-07-21 13:21:33'),(3713,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'223.104.63.42','2019-07-21 16:38:58'),(3714,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',12,'27.18.86.248','2019-07-21 18:07:34'),(3715,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',9,'101.89.29.94','2019-07-21 18:08:33'),(3716,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',10,'203.208.60.26','2019-07-21 19:33:05'),(3717,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.15.182.3','2019-07-21 20:04:15'),(3718,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'221.219.169.112','2019-07-21 20:10:16'),(3719,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',61,'220.115.183.140','2019-07-21 20:59:49'),(3720,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',30,'220.115.183.140','2019-07-21 20:59:57'),(3721,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.15.181.240','2019-07-21 22:30:54'),(3722,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.15.181.240','2019-07-21 23:24:38'),(3723,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',63,'203.208.60.33','2019-07-22 07:22:22'),(3724,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'117.136.39.92','2019-07-22 08:38:33'),(3725,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',4,'117.136.39.92','2019-07-22 08:38:44'),(3726,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',33,'117.136.39.92','2019-07-22 08:38:51'),(3727,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',3,'117.136.39.92','2019-07-22 08:39:01'),(3728,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',3,'117.136.39.92','2019-07-22 08:39:06'),(3729,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',3,'117.136.39.92','2019-07-22 08:39:11'),(3730,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.136.39.92','2019-07-22 08:48:59'),(3731,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',46,'223.104.63.183','2019-07-22 12:48:06'),(3732,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',9,'203.208.60.48','2019-07-22 13:25:29'),(3733,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'114.141.190.70','2019-07-22 13:47:26'),(3734,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',56,'114.141.190.70','2019-07-22 13:47:59'),(3735,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'118.112.57.166','2019-07-22 14:32:17'),(3736,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',7,'111.198.88.242','2019-07-22 15:00:57'),(3737,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',56,'114.141.190.70','2019-07-22 15:01:34'),(3738,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'114.141.190.70','2019-07-22 15:01:44'),(3739,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'114.141.190.70','2019-07-22 15:01:55'),(3740,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.141.190.70','2019-07-22 15:26:33'),(3741,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.141.190.70','2019-07-22 15:26:59'),(3742,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'114.141.190.70','2019-07-22 15:38:52'),(3743,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',5,'114.141.190.70','2019-07-22 15:38:56'),(3744,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',38,'223.104.63.183','2019-07-22 16:22:20'),(3745,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.63.183','2019-07-22 16:24:39'),(3746,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'223.104.63.183','2019-07-22 16:40:17'),(3747,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'114.242.192.132','2019-07-22 16:42:53'),(3748,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',5,'114.242.192.132','2019-07-22 16:43:31'),(3749,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.183','2019-07-22 17:57:54'),(3750,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'14.155.222.170','2019-07-22 18:39:05'),(3751,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.242.192.132','2019-07-22 18:40:56'),(3752,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'114.242.192.132','2019-07-22 18:42:50'),(3753,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.155.222.170','2019-07-22 18:43:25'),(3754,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'223.104.63.185','2019-07-22 19:55:08'),(3755,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'223.104.63.185','2019-07-22 19:59:31'),(3756,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.185','2019-07-22 19:59:49'),(3757,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.116.143.192','2019-07-22 21:33:53'),(3758,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'121.237.30.242','2019-07-22 22:04:48'),(3759,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.192','2019-07-22 22:09:19'),(3760,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',4,'112.96.136.45','2019-07-22 22:28:58'),(3761,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',7,'112.96.136.45','2019-07-22 22:29:26'),(3762,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',5,'3.83.10.206','2019-07-22 22:30:07'),(3763,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'54.224.230.57','2019-07-22 22:30:37'),(3764,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'112.96.136.45','2019-07-22 22:31:36'),(3765,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',40,'34.222.231.242','2019-07-22 22:32:58'),(3766,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',16,'113.116.143.192','2019-07-22 23:46:32'),(3767,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',28,'113.116.143.192','2019-07-22 23:48:52'),(3768,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',2,'113.116.143.192','2019-07-22 23:48:54'),(3769,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.3','2019-07-23 01:27:17'),(3770,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'42.236.10.125','2019-07-23 02:31:45'),(3771,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'42.236.10.93','2019-07-23 03:38:05'),(3772,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',47,'113.116.143.192','2019-07-23 07:33:49'),(3773,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',2,'113.116.143.192','2019-07-23 07:47:22'),(3774,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',5,'36.152.32.170','2019-07-23 08:35:25'),(3775,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',2,'36.152.32.170','2019-07-23 08:47:26'),(3776,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.114','2019-07-23 08:54:31'),(3777,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'36.152.32.170','2019-07-23 09:01:00'),(3778,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',6,'36.152.32.170','2019-07-23 09:03:37'),(3779,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',7,'36.152.32.170','2019-07-23 09:03:39'),(3780,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'39.82.251.57','2019-07-23 09:29:51'),(3781,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',35,'39.82.251.57','2019-07-23 09:30:40'),(3782,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'117.136.79.108','2019-07-23 10:48:38'),(3783,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',410,'121.237.30.242','2019-07-23 11:05:04'),(3784,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',463,'14.223.176.64','2019-07-23 11:19:37'),(3785,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.79.108','2019-07-23 11:53:54'),(3786,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'219.133.170.78','2019-07-23 13:30:35'),(3787,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'219.133.170.78','2019-07-23 13:35:54'),(3788,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.133.170.78','2019-07-23 13:35:59'),(3789,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'219.133.170.78','2019-07-23 13:37:17'),(3790,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',17,'219.133.170.78','2019-07-23 13:38:03'),(3791,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'219.133.170.78','2019-07-23 13:38:17'),(3792,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'114.242.192.132','2019-07-23 13:56:29'),(3793,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',8,'114.242.192.132','2019-07-23 13:56:51'),(3794,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'123.150.146.2','2019-07-23 14:57:15'),(3795,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'123.150.146.2','2019-07-23 14:59:20'),(3796,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.213.111.210','2019-07-23 14:59:30'),(3797,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.150.146.2','2019-07-23 14:59:42'),(3798,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.136.79.108','2019-07-23 15:48:04'),(3799,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'175.6.23.60','2019-07-23 15:50:00'),(3800,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',5,'175.6.6.226','2019-07-23 15:50:06'),(3801,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.76.8.17','2019-07-23 15:50:25'),(3802,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'110.52.210.202','2019-07-23 15:52:09'),(3803,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'110.52.210.202','2019-07-23 15:52:13'),(3804,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'175.6.6.226','2019-07-23 15:52:53'),(3805,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'175.6.6.226','2019-07-23 15:53:07'),(3806,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',12,'222.240.205.238','2019-07-23 15:53:15'),(3807,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.128.2.82','2019-07-23 16:02:05'),(3808,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',24,'101.230.234.6','2019-07-23 16:04:23'),(3809,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.237.30.242','2019-07-23 17:05:17'),(3810,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.79.108','2019-07-23 17:26:02'),(3811,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-23 20:02:03'),(3812,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-23 20:02:07'),(3813,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',2,'183.63.51.77','2019-07-23 20:02:17'),(3814,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'183.63.51.77','2019-07-23 20:02:42'),(3815,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',8,'183.63.51.77','2019-07-23 20:02:52'),(3816,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',662,'183.63.51.77','2019-07-23 20:03:37'),(3817,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'183.63.51.77','2019-07-23 20:28:31'),(3818,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-23 20:28:35'),(3819,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'183.63.51.77','2019-07-23 20:28:43'),(3820,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.39.102','2019-07-23 21:49:22'),(3821,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.39.102','2019-07-23 21:50:43'),(3822,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',5,'113.88.97.234','2019-07-23 23:43:23'),(3823,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',433,'113.88.97.234','2019-07-23 23:44:10'),(3824,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',220,'113.88.97.234','2019-07-23 23:44:53'),(3825,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.97.234','2019-07-24 07:54:33'),(3826,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'114.141.190.70','2019-07-24 09:44:37'),(3827,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'114.141.190.70','2019-07-24 09:44:41'),(3828,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.141.190.70','2019-07-24 09:44:45'),(3829,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.19.110.185','2019-07-24 11:52:43'),(3830,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'27.19.110.185','2019-07-24 11:53:31'),(3831,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.79.106','2019-07-24 12:03:22'),(3832,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'61.183.234.146','2019-07-24 12:05:34'),(3833,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-24 12:38:01'),(3834,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',24,'183.63.51.77','2019-07-24 12:38:06'),(3835,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'111.172.199.123','2019-07-24 13:10:47'),(3836,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',70,'58.213.215.98','2019-07-24 13:19:35'),(3837,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'1.83.124.99','2019-07-24 14:31:40'),(3838,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'110.90.122.1','2019-07-24 15:17:03'),(3839,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',456,'114.141.190.70','2019-07-24 15:21:37'),(3840,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',19,'101.230.234.6','2019-07-24 15:33:07'),(3841,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'101.230.234.6','2019-07-24 15:34:11'),(3842,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',4,'117.186.251.6','2019-07-24 15:37:15'),(3843,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',26,'117.186.251.6','2019-07-24 15:41:37'),(3844,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'117.186.251.6','2019-07-24 15:41:47'),(3845,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'5.253.16.169','2019-07-24 15:45:13'),(3846,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',83,'5.253.16.169','2019-07-24 15:45:37'),(3847,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'5.253.16.169','2019-07-24 15:46:05'),(3848,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.247.20.26','2019-07-24 16:15:20'),(3849,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-24 16:24:50'),(3850,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'117.186.251.6','2019-07-24 16:42:19'),(3851,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'114.141.190.70','2019-07-24 16:55:24'),(3852,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.141.190.70','2019-07-24 16:55:28'),(3853,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'117.186.251.6','2019-07-24 17:16:57'),(3854,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'101.230.234.6','2019-07-24 17:20:00'),(3855,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.204.220.59','2019-07-24 17:36:59'),(3856,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'111.204.220.59','2019-07-24 17:37:40'),(3857,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',10,'117.186.251.6','2019-07-24 17:49:39'),(3858,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-24 17:58:52'),(3859,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',4,'183.63.51.77','2019-07-24 17:59:03'),(3860,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',29,'183.63.51.77','2019-07-24 17:59:11'),(3861,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',27,'183.63.51.77','2019-07-24 17:59:24'),(3862,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'59.52.220.30','2019-07-24 18:43:37'),(3863,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.154','2019-07-24 18:59:48'),(3864,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',31,'117.136.79.154','2019-07-24 19:59:34'),(3865,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'218.17.124.178','2019-07-24 20:14:02'),(3866,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'218.17.124.178','2019-07-24 20:15:46'),(3867,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'34.218.49.222','2019-07-24 20:30:37'),(3868,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'42.236.10.117','2019-07-24 21:48:00'),(3869,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',7,'113.88.99.134','2019-07-24 23:33:23'),(3870,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',5,'113.88.99.134','2019-07-24 23:47:52'),(3871,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',5,'223.104.63.174','2019-07-24 23:56:20'),(3872,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'42.236.10.78','2019-07-25 00:07:30'),(3873,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',12,'113.88.99.134','2019-07-25 00:41:19'),(3874,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',4,'113.88.99.134','2019-07-25 00:41:31'),(3875,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',17,'113.88.99.134','2019-07-25 00:41:53'),(3876,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'180.163.220.4','2019-07-25 04:58:45'),(3877,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'203.208.60.120','2019-07-25 07:10:48'),(3878,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.97.224','2019-07-25 07:47:11'),(3879,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'113.88.99.134','2019-07-25 07:47:16'),(3880,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.99.134','2019-07-25 07:47:25'),(3881,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',5,'117.136.40.189','2019-07-25 08:30:17'),(3882,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.40.189','2019-07-25 08:31:39'),(3883,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'218.68.156.221','2019-07-25 09:09:15'),(3884,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.251.9.210','2019-07-25 09:18:19'),(3885,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',4,'58.251.9.210','2019-07-25 09:19:19'),(3886,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'58.213.215.98','2019-07-25 09:31:45'),(3887,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-25 09:56:37'),(3888,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'183.63.51.77','2019-07-25 09:59:47'),(3889,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'183.63.51.77','2019-07-25 10:02:20'),(3890,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'113.70.216.185','2019-07-25 10:40:13'),(3891,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'110.90.122.1','2019-07-25 10:57:13'),(3892,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'110.90.122.1','2019-07-25 11:04:23'),(3893,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'183.63.51.77','2019-07-25 11:05:40'),(3894,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-25 11:06:22'),(3895,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'180.163.220.66','2019-07-25 11:48:50'),(3896,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'183.63.51.77','2019-07-25 13:31:45'),(3897,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',250,'183.63.51.77','2019-07-25 13:32:09'),(3898,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'183.63.51.77','2019-07-25 13:32:21'),(3899,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-25 13:32:50'),(3900,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'122.5.18.10','2019-07-25 14:05:48'),(3901,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',2,'223.223.190.98','2019-07-25 14:48:20'),(3902,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'203.208.60.12','2019-07-25 14:54:10'),(3903,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.224.196.97','2019-07-25 15:14:51'),(3904,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.145.37.16','2019-07-25 15:46:12'),(3905,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'219.145.37.16','2019-07-25 15:46:23'),(3906,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'222.128.2.82','2019-07-25 15:49:16'),(3907,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.128.2.82','2019-07-25 15:49:52'),(3908,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',6,'222.128.2.82','2019-07-25 15:50:59'),(3909,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.128.2.82','2019-07-25 15:51:31'),(3910,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'222.128.2.82','2019-07-25 15:53:35'),(3911,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'222.128.2.82','2019-07-25 15:55:01'),(3912,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'222.128.2.82','2019-07-25 15:55:36'),(3913,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-25 16:10:22'),(3914,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'203.208.60.67','2019-07-25 16:30:47'),(3915,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'219.142.102.162','2019-07-25 16:33:16'),(3916,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'219.142.102.162','2019-07-25 16:34:21'),(3917,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',18,'219.142.102.162','2019-07-25 16:34:36'),(3918,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.142.102.162','2019-07-25 16:34:53'),(3919,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'116.6.229.10','2019-07-25 16:39:05'),(3920,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',623,'180.163.220.68','2019-07-25 16:48:24'),(3921,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',2325,'42.236.10.78','2019-07-25 16:52:36'),(3922,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'42.236.10.78','2019-07-25 16:52:48'),(3923,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'42.236.10.93','2019-07-25 16:54:02'),(3924,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'114.241.211.154','2019-07-25 17:28:34'),(3925,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',15,'183.63.51.77','2019-07-25 17:34:26'),(3926,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',69,'183.63.51.77','2019-07-25 17:34:45'),(3927,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',3,'183.63.51.77','2019-07-25 17:34:49'),(3928,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',2,'183.63.51.77','2019-07-25 17:58:57'),(3929,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'183.63.51.77','2019-07-25 17:59:11'),(3930,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'183.63.51.77','2019-07-25 17:59:19'),(3931,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'183.63.51.77','2019-07-25 17:59:26'),(3932,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.115.70.86','2019-07-25 18:36:58'),(3933,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.64.129','2019-07-25 18:48:08'),(3934,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'223.104.64.129','2019-07-25 18:48:24'),(3935,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',25,'223.104.63.42','2019-07-25 19:43:46'),(3936,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',11,'124.79.8.114','2019-07-25 21:09:53'),(3937,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'124.79.8.114','2019-07-25 21:10:36'),(3938,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',5,'183.15.183.174','2019-07-25 21:41:42'),(3939,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.183.174','2019-07-25 21:44:03'),(3940,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'183.15.183.174','2019-07-25 21:48:19'),(3941,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'183.15.183.174','2019-07-25 21:48:33'),(3942,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'183.15.183.174','2019-07-25 21:48:41'),(3943,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'183.15.183.174','2019-07-25 21:49:15'),(3944,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'42.236.10.93','2019-07-25 22:33:04'),(3945,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.85.25.195','2019-07-25 22:53:02'),(3946,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',4,'183.15.183.174','2019-07-25 23:33:43'),(3947,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',5,'183.15.183.174','2019-07-25 23:51:33'),(3948,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'180.163.220.3','2019-07-26 02:21:45'),(3949,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',207,'117.136.39.96','2019-07-26 08:07:43'),(3950,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.205.77.96','2019-07-26 10:57:39'),(3951,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'124.205.77.96','2019-07-26 11:03:27'),(3952,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'124.205.77.96','2019-07-26 11:03:43'),(3953,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'124.205.77.96','2019-07-26 11:04:20'),(3954,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'124.205.77.96','2019-07-26 11:27:35'),(3955,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-26 11:28:21'),(3956,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'183.63.51.77','2019-07-26 11:28:35'),(3957,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'183.63.51.77','2019-07-26 11:28:41'),(3958,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.205.77.96','2019-07-26 11:30:44'),(3959,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'221.15.218.95','2019-07-26 11:39:46'),(3960,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-07-26 11:53:17'),(3961,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'117.136.79.141','2019-07-26 12:55:42'),(3962,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'117.136.79.141','2019-07-26 12:56:01'),(3963,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'58.213.215.98','2019-07-26 13:03:39'),(3964,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'203.208.60.66','2019-07-26 13:16:59'),(3965,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'113.70.216.185','2019-07-26 13:38:20'),(3966,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'219.142.102.162','2019-07-26 14:00:57'),(3967,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.142.102.162','2019-07-26 14:01:45'),(3968,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-26 14:25:08'),(3969,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-26 14:51:57'),(3970,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'27.17.2.165','2019-07-26 15:13:57'),(3971,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.17.2.165','2019-07-26 15:14:12'),(3972,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'27.17.2.165','2019-07-26 15:14:28'),(3973,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.17.2.165','2019-07-26 15:14:52'),(3974,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',4,'27.17.2.165','2019-07-26 15:16:34'),(3975,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'101.89.29.92','2019-07-26 15:16:54'),(3976,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'61.151.207.186','2019-07-26 15:21:14'),(3977,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.151.178.197','2019-07-26 15:23:15'),(3978,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.195.65.50','2019-07-26 15:55:27'),(3979,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'120.195.65.50','2019-07-26 15:58:05'),(3980,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.195.65.50','2019-07-26 15:58:41'),(3981,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'120.195.65.50','2019-07-26 15:58:54'),(3982,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.195.65.50','2019-07-26 15:59:08'),(3983,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',57,'120.195.65.50','2019-07-26 15:59:19'),(3984,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'120.195.65.50','2019-07-26 15:59:47'),(3985,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.195.65.50','2019-07-26 15:59:54'),(3986,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.17.2.165','2019-07-26 16:04:58'),(3987,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'27.115.70.86','2019-07-26 16:06:44'),(3988,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'211.161.170.77','2019-07-26 16:24:20'),(3989,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'110.184.86.5','2019-07-26 16:24:42'),(3990,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.161.170.77','2019-07-26 16:26:08'),(3991,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',5,'211.161.170.77','2019-07-26 16:26:13'),(3992,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'58.210.9.130','2019-07-26 16:34:07'),(3993,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'122.193.33.86','2019-07-26 16:34:27'),(3994,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'122.193.33.86','2019-07-26 16:34:43'),(3995,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.193.33.86','2019-07-26 16:39:11'),(3996,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',5,'122.193.33.86','2019-07-26 16:40:33'),(3997,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.204.113.130','2019-07-26 17:05:46'),(3998,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'101.95.178.146','2019-07-26 17:37:45'),(3999,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.95.178.146','2019-07-26 17:37:55'),(4000,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'27.115.70.86','2019-07-26 17:45:16'),(4001,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'219.133.249.172','2019-07-26 21:18:52'),(4002,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'219.133.249.172','2019-07-26 22:47:23'),(4003,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',7,'219.133.249.172','2019-07-26 22:48:33'),(4004,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'219.133.249.172','2019-07-26 22:49:54'),(4005,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'219.133.249.172','2019-07-26 22:50:53'),(4006,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'203.208.60.91','2019-07-27 03:11:18'),(4007,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',62,'121.35.2.19','2019-07-27 05:19:53'),(4008,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'121.35.2.19','2019-07-27 05:20:29'),(4009,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',44,'121.35.2.19','2019-07-27 05:21:45'),(4010,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.0.185.49','2019-07-27 08:52:59'),(4011,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.0.185.49','2019-07-27 09:04:47'),(4012,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.0.185.49','2019-07-27 09:07:59'),(4013,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'203.208.60.101','2019-07-27 09:11:12'),(4014,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'111.0.185.49','2019-07-27 09:18:09'),(4015,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.230','2019-07-27 10:01:45'),(4016,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'223.104.177.82','2019-07-27 10:41:58'),(4017,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'223.104.177.82','2019-07-27 10:42:14'),(4018,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'223.104.177.82','2019-07-27 10:42:34'),(4019,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'223.104.177.82','2019-07-27 10:42:45'),(4020,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'203.208.60.67','2019-07-27 11:26:29'),(4021,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',4,'183.15.183.230','2019-07-27 12:40:04'),(4022,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'183.15.183.230','2019-07-27 12:58:18'),(4023,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'183.15.183.230','2019-07-27 13:24:12'),(4024,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',2,'183.15.183.230','2019-07-27 13:36:41'),(4025,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',2,'183.15.183.230','2019-07-27 13:44:25'),(4026,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'183.15.183.230','2019-07-27 13:44:35'),(4027,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',3,'120.195.65.50','2019-07-27 13:56:42'),(4028,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.195.65.50','2019-07-27 13:57:27'),(4029,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',3,'183.15.183.230','2019-07-27 14:40:34'),(4030,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',6,'183.15.183.230','2019-07-27 15:15:46'),(4031,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.223.178.163','2019-07-27 15:41:46'),(4032,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',18,'14.223.178.163','2019-07-27 15:57:27'),(4033,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',3,'14.223.178.163','2019-07-27 16:11:10'),(4034,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.223.178.163','2019-07-27 16:24:58'),(4035,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',4,'183.15.183.230','2019-07-27 17:01:02'),(4036,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'171.221.141.240','2019-07-27 17:17:00'),(4037,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'171.221.141.240','2019-07-27 17:19:00'),(4038,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'14.223.178.163','2019-07-27 17:22:36'),(4039,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.173.34.80','2019-07-27 17:23:51'),(4040,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'183.15.183.230','2019-07-27 17:33:53'),(4041,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.133.249.172','2019-07-27 17:48:18'),(4042,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.133.249.172','2019-07-27 17:50:51'),(4043,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'219.133.249.172','2019-07-27 17:53:01'),(4044,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'14.223.178.163','2019-07-27 18:03:31'),(4045,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',3,'183.15.183.230','2019-07-27 19:03:35'),(4046,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'183.15.183.230','2019-07-27 19:03:51'),(4047,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',2,'183.15.183.230','2019-07-27 19:04:55'),(4048,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',2,'183.15.183.230','2019-07-27 19:05:02'),(4049,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',6,'183.15.183.230','2019-07-27 19:05:10'),(4050,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.230','2019-07-27 19:05:28'),(4051,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',612,'114.241.180.148','2019-07-27 20:37:13'),(4052,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'114.241.180.148','2019-07-27 21:06:58'),(4053,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',5,'219.133.249.172','2019-07-27 22:13:08'),(4054,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.39.80','2019-07-27 22:15:07'),(4055,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',3,'117.136.39.80','2019-07-27 22:15:21'),(4056,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',2,'117.136.39.80','2019-07-27 22:15:25'),(4057,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',2,'117.136.39.80','2019-07-27 22:15:28'),(4058,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'219.133.249.172','2019-07-27 22:16:28'),(4059,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.133.249.172','2019-07-27 22:17:11'),(4060,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.230','2019-07-27 23:29:00'),(4061,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.66.254.29','2019-07-27 23:40:38'),(4062,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.230','2019-07-28 00:54:12'),(4063,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.83.0.235','2019-07-28 08:55:22'),(4064,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'111.0.185.49','2019-07-28 10:46:50'),(4065,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.116','2019-07-28 12:10:22'),(4066,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'113.116.143.207','2019-07-28 12:10:40'),(4067,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',12,'113.116.143.207','2019-07-28 12:10:45'),(4068,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',3,'113.116.143.207','2019-07-28 12:10:49'),(4069,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',4,'113.116.143.207','2019-07-28 12:10:53'),(4070,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.207','2019-07-28 13:45:30'),(4071,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.207','2019-07-28 13:45:34'),(4072,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',2,'113.116.143.207','2019-07-28 14:08:35'),(4073,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',3,'113.116.143.207','2019-07-28 14:10:53'),(4074,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'113.116.143.207','2019-07-28 14:11:45'),(4075,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'113.116.143.207','2019-07-28 14:11:56'),(4076,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',2,'117.136.92.113','2019-07-28 14:35:11'),(4077,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.92.113','2019-07-28 14:35:26'),(4078,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'117.136.92.113','2019-07-28 14:40:06'),(4079,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'59.64.129.35','2019-07-28 15:09:05'),(4080,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',262,'113.116.143.207','2019-07-28 15:18:28'),(4081,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',5,'113.116.143.207','2019-07-28 15:18:36'),(4082,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',220,'113.116.143.207','2019-07-28 15:20:01'),(4083,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',1292,'113.116.143.207','2019-07-28 15:20:37'),(4084,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',1079,'113.116.143.207','2019-07-28 15:22:18'),(4085,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.116.143.207','2019-07-28 15:24:54'),(4086,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.207','2019-07-28 15:25:20'),(4087,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.116.143.207','2019-07-28 15:26:44'),(4088,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.143.207','2019-07-28 15:27:22'),(4089,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'113.116.143.207','2019-07-28 15:27:22'),(4090,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.207','2019-07-28 15:27:22'),(4091,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.207','2019-07-28 15:27:22'),(4092,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.207','2019-07-28 15:27:22'),(4093,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',216,'113.116.143.207','2019-07-28 15:27:23'),(4094,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',613,'113.116.143.207','2019-07-28 15:27:23'),(4095,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',462,'113.116.143.207','2019-07-28 15:27:23'),(4096,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',875,'113.116.143.207','2019-07-28 15:27:23'),(4097,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',428,'113.116.143.207','2019-07-28 15:27:24'),(4098,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',415,'113.116.143.207','2019-07-28 15:27:24'),(4099,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1457,'113.116.143.207','2019-07-28 15:27:24'),(4100,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1083,'113.116.143.207','2019-07-28 15:27:24'),(4101,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',617,'113.116.143.207','2019-07-28 15:27:25'),(4102,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',841,'113.116.143.207','2019-07-28 15:27:25'),(4103,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1193,'113.116.143.207','2019-07-28 15:27:25'),(4104,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1221,'113.116.143.207','2019-07-28 15:27:25'),(4105,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1507,'113.116.143.207','2019-07-28 15:27:26'),(4106,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2071,'113.116.143.207','2019-07-28 15:27:26'),(4107,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2275,'113.116.143.207','2019-07-28 15:27:26'),(4108,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.207','2019-07-28 15:27:42'),(4109,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.207','2019-07-28 15:27:56'),(4110,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.143.207','2019-07-28 15:27:56'),(4111,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',36,'113.116.143.207','2019-07-28 15:27:56'),(4112,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'113.116.143.207','2019-07-28 15:27:56'),(4113,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.207','2019-07-28 15:27:56'),(4114,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',658,'113.116.143.207','2019-07-28 15:27:57'),(4115,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',618,'113.116.143.207','2019-07-28 15:27:57'),(4116,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',636,'113.116.143.207','2019-07-28 15:27:57'),(4117,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',936,'113.116.143.207','2019-07-28 15:27:57'),(4118,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',834,'113.116.143.207','2019-07-28 15:27:57'),(4119,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1253,'113.116.143.207','2019-07-28 15:27:57'),(4120,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1243,'113.116.143.207','2019-07-28 15:27:57'),(4121,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1664,'113.116.143.207','2019-07-28 15:27:58'),(4122,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',821,'113.116.143.207','2019-07-28 15:27:58'),(4123,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1952,'113.116.143.207','2019-07-28 15:27:59'),(4124,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1466,'113.116.143.207','2019-07-28 15:27:59'),(4125,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2888,'113.116.143.207','2019-07-28 15:27:59'),(4126,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1530,'113.116.143.207','2019-07-28 15:27:59'),(4127,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3262,'113.116.143.207','2019-07-28 15:27:59'),(4128,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2726,'113.116.143.207','2019-07-28 15:28:00'),(4129,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.116.143.207','2019-07-28 15:28:09'),(4130,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'113.116.143.207','2019-07-28 15:28:26'),(4131,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',3,'113.116.143.207','2019-07-28 15:33:48'),(4132,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',12,'113.116.143.207','2019-07-28 16:02:36'),(4133,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',3,'113.116.143.207','2019-07-28 16:21:05'),(4134,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'203.208.60.84','2019-07-28 16:54:19'),(4135,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'203.208.60.102','2019-07-28 16:54:28'),(4136,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',4,'203.208.60.121','2019-07-28 16:54:31'),(4137,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'203.208.60.30','2019-07-28 16:54:34'),(4138,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'203.208.60.59','2019-07-28 16:54:36'),(4139,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'203.208.60.82','2019-07-28 16:54:37'),(4140,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'203.208.60.95','2019-07-28 16:54:37'),(4141,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'203.208.60.88','2019-07-28 16:54:38'),(4142,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'203.208.60.44','2019-07-28 16:54:40'),(4143,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'203.208.60.56','2019-07-28 16:54:43'),(4144,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'203.208.60.102','2019-07-28 16:54:46'),(4145,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'203.208.60.118','2019-07-28 16:54:47'),(4146,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'203.208.60.16','2019-07-28 16:54:47'),(4147,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'203.208.60.94','2019-07-28 16:55:04'),(4148,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',5,'117.136.39.81','2019-07-28 17:48:27'),(4149,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',7,'117.136.39.81','2019-07-28 17:48:31'),(4150,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'116.22.32.119','2019-07-28 18:10:47'),(4151,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',2,'113.116.143.207','2019-07-28 18:37:13'),(4152,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'59.64.129.35','2019-07-28 18:50:19'),(4153,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',12,'113.116.143.202','2019-07-28 20:55:12'),(4154,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',23,'113.116.143.202','2019-07-28 20:55:15'),(4155,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'113.54.215.206','2019-07-28 21:46:43'),(4156,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'117.136.9.169','2019-07-28 22:46:55'),(4157,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',4,'113.116.143.202','2019-07-28 23:38:09'),(4158,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'103.40.221.99','2019-07-29 00:16:50'),(4159,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'103.40.221.99','2019-07-29 00:17:35'),(4160,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'203.208.60.11','2019-07-29 02:28:48'),(4161,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',3,'203.208.60.124','2019-07-29 02:29:06'),(4162,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'203.208.60.29','2019-07-29 02:29:39'),(4163,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',54,'183.15.183.114','2019-07-29 07:58:19'),(4164,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'113.116.143.202','2019-07-29 07:58:29'),(4165,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'203.208.60.68','2019-07-29 08:00:14'),(4166,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'223.104.63.29','2019-07-29 08:14:48'),(4167,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-29 09:15:40'),(4168,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.56.42.148','2019-07-29 09:39:27'),(4169,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'14.223.177.161','2019-07-29 09:49:24'),(4170,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.56.42.148','2019-07-29 10:13:25'),(4171,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'60.181.68.71','2019-07-29 10:18:36'),(4172,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'60.181.68.71','2019-07-29 10:22:17'),(4173,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'60.181.68.71','2019-07-29 10:22:24'),(4174,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'27.17.2.165','2019-07-29 10:28:36'),(4175,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'27.17.2.165','2019-07-29 10:28:46'),(4176,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-29 10:36:55'),(4177,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'27.17.2.165','2019-07-29 10:37:49'),(4178,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'27.17.2.165','2019-07-29 10:38:45'),(4179,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'101.227.139.161','2019-07-29 10:40:27'),(4180,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.89.19.197','2019-07-29 10:40:55'),(4181,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'101.89.19.197','2019-07-29 10:49:56'),(4182,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'101.91.60.104','2019-07-29 10:50:22'),(4183,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'119.98.200.113','2019-07-29 11:02:37'),(4184,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'119.98.200.113','2019-07-29 11:03:29'),(4185,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'119.98.200.113','2019-07-29 11:03:33'),(4186,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'119.98.200.113','2019-07-29 11:03:37'),(4187,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'119.98.200.113','2019-07-29 11:03:44'),(4188,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-29 11:04:32'),(4189,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',222,'119.98.200.113','2019-07-29 11:05:54'),(4190,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.98.200.113','2019-07-29 11:07:02'),(4191,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'119.98.200.113','2019-07-29 11:07:20'),(4192,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'119.98.200.113','2019-07-29 11:07:28'),(4193,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'60.181.68.71','2019-07-29 11:11:41'),(4194,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'27.17.2.165','2019-07-29 11:42:42'),(4195,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',621,'27.17.2.165','2019-07-29 11:42:53'),(4196,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.98.200.113','2019-07-29 11:43:53'),(4197,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'101.227.139.161','2019-07-29 11:54:34'),(4198,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'61.129.6.251','2019-07-29 11:54:41'),(4199,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-29 12:14:46'),(4200,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',6,'183.63.51.77','2019-07-29 12:18:07'),(4201,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'119.98.200.113','2019-07-29 12:37:51'),(4202,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.98.200.113','2019-07-29 12:38:50'),(4203,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.17.2.165','2019-07-29 13:30:04'),(4204,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'203.208.60.116','2019-07-29 13:53:00'),(4205,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.134.3.146','2019-07-29 14:07:36'),(4206,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.134.3.146','2019-07-29 14:07:41'),(4207,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',870,'119.98.200.113','2019-07-29 14:12:08'),(4208,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-29 14:37:30'),(4209,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'27.17.2.165','2019-07-29 15:06:04'),(4210,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',22,'27.17.2.165','2019-07-29 15:06:18'),(4211,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',2,'27.17.2.165','2019-07-29 15:06:44'),(4212,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',2,'101.89.239.216','2019-07-29 15:18:30'),(4213,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'61.129.6.251','2019-07-29 15:18:35'),(4214,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',2,'101.91.60.107','2019-07-29 15:19:26'),(4215,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-29 16:20:03'),(4216,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.98.200.113','2019-07-29 16:42:22'),(4217,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'203.208.60.76','2019-07-29 17:24:19'),(4218,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'203.208.60.106','2019-07-29 17:31:50'),(4219,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',2,'203.208.60.31','2019-07-29 17:34:05'),(4220,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',3,'203.208.60.35','2019-07-29 17:44:30'),(4221,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.152.32.170','2019-07-29 19:10:11'),(4222,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-29 19:12:11'),(4223,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.152.32.170','2019-07-29 20:11:31'),(4224,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.92.35.88','2019-07-29 20:12:25'),(4225,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.155.221.135','2019-07-29 20:53:12'),(4226,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',2,'203.208.60.30','2019-07-29 20:55:18'),(4227,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'203.208.60.93','2019-07-29 21:37:16'),(4228,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'203.208.60.99','2019-07-29 21:37:20'),(4229,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.143.170','2019-07-29 22:29:38'),(4230,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'113.116.143.170','2019-07-29 22:31:51'),(4231,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',4,'113.116.143.170','2019-07-29 23:45:07'),(4232,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',1123,'113.116.143.170','2019-07-29 23:45:39'),(4233,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',4,'113.116.143.170','2019-07-29 23:46:56'),(4234,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.170','2019-07-29 23:47:56'),(4235,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.170','2019-07-29 23:48:20'),(4236,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.236.10.117','2019-07-30 00:46:11'),(4237,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',95,'203.208.60.122','2019-07-30 05:04:56'),(4238,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',5,'203.208.60.109','2019-07-30 05:44:05'),(4239,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'203.208.60.76','2019-07-30 06:36:18'),(4240,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'203.208.60.73','2019-07-30 06:37:42'),(4241,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'203.208.60.107','2019-07-30 06:39:34'),(4242,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',658,'183.15.183.109','2019-07-30 07:49:44'),(4243,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',7,'113.116.143.170','2019-07-30 07:49:48'),(4244,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.143.170','2019-07-30 07:50:02'),(4245,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',6,'203.208.60.36','2019-07-30 09:27:04'),(4246,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',2,'203.208.60.45','2019-07-30 10:04:20'),(4247,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.253.39.10','2019-07-30 10:43:53'),(4248,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',3,'114.253.39.10','2019-07-30 10:44:21'),(4249,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-30 10:53:32'),(4250,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',2,'183.63.51.77','2019-07-30 10:53:53'),(4251,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',11,'183.63.51.77','2019-07-30 10:53:59'),(4252,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.251.9.210','2019-07-30 10:57:53'),(4253,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.2.223.28','2019-07-30 11:21:41'),(4254,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.2.223.28','2019-07-30 11:21:42'),(4255,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'112.30.117.254','2019-07-30 11:48:29'),(4256,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'183.63.51.77','2019-07-30 11:49:31'),(4257,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'183.63.51.77','2019-07-30 11:49:43'),(4258,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',2,'183.63.51.77','2019-07-30 11:49:46'),(4259,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.40.182','2019-07-30 11:55:22'),(4260,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',2,'117.136.40.182','2019-07-30 12:00:35'),(4261,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.40.182','2019-07-30 12:18:34'),(4262,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'117.136.40.182','2019-07-30 12:18:46'),(4263,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',2,'117.136.40.182','2019-07-30 12:19:05'),(4264,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'117.136.40.182','2019-07-30 12:19:13'),(4265,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.30.117.254','2019-07-30 12:31:56'),(4266,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'112.30.117.254','2019-07-30 12:32:00'),(4267,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',2,'113.235.123.130','2019-07-30 13:13:08'),(4268,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'203.208.60.84','2019-07-30 13:48:50'),(4269,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'203.208.60.99','2019-07-30 15:11:04'),(4270,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.205.77.96','2019-07-30 16:56:32'),(4271,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',2,'203.208.60.68','2019-07-30 17:20:53'),(4272,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',2,'203.208.60.99','2019-07-30 17:24:33'),(4273,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-30 18:12:02'),(4274,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-30 19:02:29'),(4275,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'183.63.51.77','2019-07-30 19:02:41'),(4276,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',6,'183.63.51.77','2019-07-30 19:02:44'),(4277,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',3,'183.63.51.77','2019-07-30 19:02:47'),(4278,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'183.63.51.77','2019-07-30 19:02:52'),(4279,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 19:04:34'),(4280,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 19:09:01'),(4281,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'117.139.249.167','2019-07-30 19:12:11'),(4282,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'117.139.249.167','2019-07-30 19:13:46'),(4283,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 19:15:00'),(4284,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 19:15:06'),(4285,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 19:15:19'),(4286,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 19:16:20'),(4287,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 19:18:56'),(4288,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.139.249.167','2019-07-30 19:20:44'),(4289,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'117.139.249.167','2019-07-30 19:22:37'),(4290,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 19:23:32'),(4291,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'203.208.60.92','2019-07-30 19:23:44'),(4292,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 19:25:12'),(4293,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'14.155.221.135','2019-07-30 19:35:10'),(4294,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-30 20:36:38'),(4295,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.175.34.54','2019-07-30 21:12:21'),(4296,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'111.175.34.54','2019-07-30 21:16:48'),(4297,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'111.175.34.54','2019-07-30 21:17:25'),(4298,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.0.185.49','2019-07-30 21:19:10'),(4299,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'111.0.185.49','2019-07-30 21:19:14'),(4300,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',24,'117.139.249.167','2019-07-30 21:32:13'),(4301,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.139.249.167','2019-07-30 21:38:08'),(4302,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.139.249.167','2019-07-30 21:39:39'),(4303,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 21:40:04'),(4304,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.139.249.167','2019-07-30 21:46:13'),(4305,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-30 21:56:08'),(4306,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.38.22.220','2019-07-30 22:02:12'),(4307,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.38.22.220','2019-07-30 22:02:46'),(4308,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'115.174.246.6','2019-07-30 23:07:53'),(4309,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'115.174.246.6','2019-07-30 23:08:15'),(4310,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.114','2019-07-30 23:09:00'),(4311,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.114','2019-07-31 00:07:31'),(4312,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'183.15.183.114','2019-07-31 00:08:02'),(4313,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.114','2019-07-31 00:08:10'),(4314,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'203.208.60.102','2019-07-31 00:26:25'),(4315,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.114','2019-07-31 00:35:15'),(4316,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'203.208.60.73','2019-07-31 00:48:30'),(4317,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.67','2019-07-31 03:35:21'),(4318,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.114','2019-07-31 07:52:19'),(4319,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.130','2019-07-31 08:33:46'),(4320,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',2,'117.136.79.130','2019-07-31 08:33:54'),(4321,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-31 10:00:18'),(4322,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.249.167','2019-07-31 11:12:04'),(4323,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-31 11:44:21'),(4324,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'203.208.60.73','2019-07-31 13:27:14'),(4325,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.64.17.172','2019-07-31 14:53:39'),(4326,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-31 16:07:21'),(4327,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-31 16:07:39'),(4328,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-07-31 16:09:06'),(4329,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',2,'183.63.51.77','2019-07-31 16:11:29'),(4330,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',4,'183.63.51.77','2019-07-31 16:11:32'),(4331,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',2,'183.63.51.77','2019-07-31 16:11:36'),(4332,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'183.63.51.77','2019-07-31 16:11:40'),(4333,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'119.98.200.113','2019-07-31 16:30:11'),(4334,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'119.98.200.113','2019-07-31 16:30:24'),(4335,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.98.200.113','2019-07-31 16:30:29'),(4336,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.98.200.113','2019-07-31 16:30:30'),(4337,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.115.142.201','2019-07-31 16:35:16'),(4338,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'112.94.9.66','2019-07-31 17:34:50'),(4339,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'210.22.245.219','2019-07-31 17:45:34'),(4340,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'183.63.51.77','2019-07-31 19:20:00'),(4341,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.246.191.228','2019-07-31 19:42:35'),(4342,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'113.246.191.228','2019-07-31 19:53:33'),(4343,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-07-31 19:55:55'),(4344,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'183.63.51.77','2019-07-31 19:56:04'),(4345,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'113.246.191.228','2019-07-31 19:56:54'),(4346,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',2,'219.142.102.162','2019-07-31 20:42:38'),(4347,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'58.212.132.104','2019-07-31 21:07:06'),(4348,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.160','2019-07-31 21:31:00'),(4349,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.136.79.160','2019-07-31 21:44:32'),(4350,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.243','2019-08-01 01:04:13'),(4351,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.64','2019-08-01 07:55:54'),(4352,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',90,'14.221.236.197','2019-08-01 08:46:21'),(4353,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',5,'113.99.17.9','2019-08-01 09:18:15'),(4354,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',160,'58.250.57.98','2019-08-01 10:25:11'),(4355,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.250.57.98','2019-08-01 10:25:40'),(4356,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'58.250.57.98','2019-08-01 10:25:51'),(4357,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',4,'61.173.4.217','2019-08-01 10:31:08'),(4358,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-01 11:14:49'),(4359,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.173','2019-08-01 11:52:42'),(4360,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'124.64.16.65','2019-08-01 11:53:21'),(4361,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.64.228','2019-08-01 14:36:36'),(4362,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'119.98.200.113','2019-08-01 14:38:19'),(4363,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',209,'119.98.200.113','2019-08-01 14:38:38'),(4364,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'171.223.187.82','2019-08-01 15:01:07'),(4365,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-01 16:59:11'),(4366,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-01 18:02:47'),(4367,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'183.63.51.77','2019-08-01 18:06:28'),(4368,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-01 18:14:23'),(4369,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-01 20:40:56'),(4370,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',2,'14.155.223.162','2019-08-01 20:55:56'),(4371,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.155.223.162','2019-08-01 20:56:18'),(4372,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.155.223.162','2019-08-01 21:03:38'),(4373,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'14.155.223.162','2019-08-01 21:03:57'),(4374,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'14.155.223.162','2019-08-01 21:04:12'),(4375,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.173','2019-08-01 21:18:27'),(4376,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.89.226.29','2019-08-01 23:24:41'),(4377,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.173','2019-08-02 00:27:07'),(4378,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.79.173','2019-08-02 00:50:43'),(4379,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.173','2019-08-02 00:50:47'),(4380,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',74,'117.136.79.173','2019-08-02 08:04:59'),(4381,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',170,'5.45.207.84','2019-08-02 09:24:21'),(4382,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.30.99.219','2019-08-02 10:00:34'),(4383,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'103.68.172.94','2019-08-02 13:28:12'),(4384,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'103.68.172.94','2019-08-02 13:28:19'),(4385,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'103.68.172.94','2019-08-02 13:28:44'),(4386,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',634,'103.68.172.94','2019-08-02 13:29:05'),(4387,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.68.172.94','2019-08-02 13:29:17'),(4388,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.68.172.94','2019-08-02 13:29:28'),(4389,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.155.223.162','2019-08-02 15:45:00'),(4390,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'14.155.223.162','2019-08-02 15:45:25'),(4391,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'45.255.152.82','2019-08-02 15:50:00'),(4392,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'45.255.152.82','2019-08-02 15:50:38'),(4393,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'183.62.24.58','2019-08-02 16:06:44'),(4394,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.62.24.58','2019-08-02 16:07:02'),(4395,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'103.30.99.219','2019-08-02 16:08:29'),(4396,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-02 16:58:46'),(4397,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.141.14.69','2019-08-02 18:29:38'),(4398,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.40.186','2019-08-02 19:08:15'),(4399,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'117.136.40.186','2019-08-02 19:08:26'),(4400,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.57','2019-08-02 20:36:52'),(4401,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.109','2019-08-02 20:36:59'),(4402,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'219.133.251.222','2019-08-02 21:19:45'),(4403,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'219.133.251.222','2019-08-02 21:23:27'),(4404,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.133.251.222','2019-08-02 21:23:30'),(4405,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.133.251.222','2019-08-02 21:23:31'),(4406,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'219.133.251.222','2019-08-02 21:25:27'),(4407,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'117.136.30.122','2019-08-02 22:16:35'),(4408,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'117.136.30.122','2019-08-02 22:17:39'),(4409,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'117.136.30.122','2019-08-02 22:18:46'),(4410,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'117.136.30.122','2019-08-02 22:19:03'),(4411,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.30.122','2019-08-02 22:19:55'),(4412,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'219.133.251.222','2019-08-02 22:30:22'),(4413,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'219.133.251.222','2019-08-02 23:02:50'),(4414,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'219.133.251.222','2019-08-02 23:05:20'),(4415,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'219.133.251.222','2019-08-02 23:06:34'),(4416,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'219.133.251.222','2019-08-02 23:06:48'),(4417,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'219.133.251.222','2019-08-02 23:07:19'),(4418,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'219.133.251.222','2019-08-02 23:07:29'),(4419,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'219.133.251.222','2019-08-02 23:07:35'),(4420,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.15.191.179','2019-08-03 02:17:48'),(4421,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'219.133.251.222','2019-08-03 11:07:01'),(4422,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.133.251.222','2019-08-03 11:07:07'),(4423,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'219.133.251.222','2019-08-03 11:07:14'),(4424,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'45.255.152.51','2019-08-03 11:32:09'),(4425,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'58.100.107.157','2019-08-03 12:10:15'),(4426,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.141.132','2019-08-03 13:21:18'),(4427,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'36.23.253.12','2019-08-03 13:37:39'),(4428,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'60.28.142.26','2019-08-03 14:40:36'),(4429,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.236.10.106','2019-08-03 14:45:26'),(4430,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'219.133.251.222','2019-08-03 14:52:02'),(4431,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'219.133.251.222','2019-08-03 14:55:50'),(4432,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.251.48','2019-08-03 15:11:39'),(4433,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.66.250.126','2019-08-03 15:53:42'),(4434,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'116.22.54.165','2019-08-03 15:54:51'),(4435,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.136.204.117','2019-08-03 15:55:45'),(4436,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',2,'116.22.54.165','2019-08-03 15:57:10'),(4437,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'116.22.54.165','2019-08-03 16:20:28'),(4438,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'113.66.250.126','2019-08-03 16:21:04'),(4439,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'43.227.138.213','2019-08-03 18:46:48'),(4440,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'219.133.251.222','2019-08-03 22:07:18'),(4441,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.133.251.222','2019-08-03 22:58:58'),(4442,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.116.141.132','2019-08-03 23:41:03'),(4443,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',17,'120.228.125.237','2019-08-04 10:32:15'),(4444,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.228.125.237','2019-08-04 10:34:11'),(4445,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'183.16.231.123','2019-08-04 10:51:50'),(4446,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'183.16.231.123','2019-08-04 10:53:46'),(4447,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',4,'183.16.231.123','2019-08-04 10:54:26'),(4448,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',2,'183.16.231.123','2019-08-04 11:56:17'),(4449,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',2,'183.15.182.45','2019-08-04 13:57:11'),(4450,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.182.45','2019-08-04 14:02:37'),(4451,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.182.45','2019-08-04 14:04:21'),(4452,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.182.45','2019-08-04 14:04:37'),(4453,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.182.45','2019-08-04 14:05:47'),(4454,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',3,'183.15.182.45','2019-08-04 14:11:16'),(4455,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'183.15.182.45','2019-08-04 15:39:42'),(4456,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',11,'183.15.182.45','2019-08-04 15:45:41'),(4457,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.182.45','2019-08-04 15:48:27'),(4458,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',2,'183.15.182.45','2019-08-04 15:48:52'),(4459,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'183.15.182.45','2019-08-04 15:58:41'),(4460,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'183.15.182.45','2019-08-04 16:02:18'),(4461,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'183.15.182.45','2019-08-04 16:45:29'),(4462,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',410,'183.15.182.45','2019-08-04 16:46:00'),(4463,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',8,'183.15.182.45','2019-08-04 16:46:54'),(4464,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'183.15.182.45','2019-08-04 16:51:24'),(4465,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',5,'183.15.182.37','2019-08-04 16:55:51'),(4466,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'203.208.60.68','2019-08-04 19:05:28'),(4467,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',2,'203.208.60.121','2019-08-04 19:06:33'),(4468,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',2,'203.208.60.49','2019-08-04 19:07:55'),(4469,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'203.208.60.81','2019-08-04 19:09:07'),(4470,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'121.236.145.199','2019-08-04 20:04:11'),(4471,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'121.236.145.199','2019-08-04 20:23:18'),(4472,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.182.49','2019-08-04 21:19:45'),(4473,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'183.15.182.45','2019-08-04 21:19:54'),(4474,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',2,'183.15.182.45','2019-08-04 21:19:59'),(4475,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',2,'183.15.182.45','2019-08-04 21:20:05'),(4476,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',2,'183.15.182.45','2019-08-04 21:20:09'),(4477,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.89.226.29','2019-08-04 21:43:04'),(4478,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.89.226.29','2019-08-04 21:43:13'),(4479,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.57.250.125','2019-08-04 21:54:52'),(4480,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.141.72.9','2019-08-04 22:13:41'),(4481,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'61.141.72.9','2019-08-04 22:14:21'),(4482,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.141.72.9','2019-08-04 22:14:42'),(4483,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',13,'61.141.72.9','2019-08-04 22:15:03'),(4484,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.141.72.9','2019-08-04 22:15:28'),(4485,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'117.89.226.29','2019-08-04 22:16:40'),(4486,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'43.227.136.86','2019-08-04 22:17:17'),(4487,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'43.227.136.86','2019-08-04 22:17:41'),(4488,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.182.45','2019-08-04 23:13:30'),(4489,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',2,'203.208.60.116','2019-08-04 23:38:15'),(4490,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'203.208.60.125','2019-08-04 23:38:40'),(4491,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'203.208.60.91','2019-08-04 23:39:05'),(4492,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',4,'203.208.60.41','2019-08-04 23:39:35'),(4493,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'114.242.250.178','2019-08-05 02:01:47'),(4494,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',56,'183.15.182.45','2019-08-05 07:54:49'),(4495,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.182.37','2019-08-05 07:55:22'),(4496,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.182.45','2019-08-05 07:55:30'),(4497,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',52,'223.104.63.187','2019-08-05 08:21:41'),(4498,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',2,'223.104.63.187','2019-08-05 08:22:12'),(4499,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',21,'223.104.63.187','2019-08-05 09:02:30'),(4500,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.106.85.123','2019-08-05 09:17:08'),(4501,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.106.85.123','2019-08-05 09:17:16'),(4502,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'27.154.242.50','2019-08-05 09:31:30'),(4503,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'27.154.242.50','2019-08-05 09:31:41'),(4504,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'27.154.242.50','2019-08-05 09:32:10'),(4505,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',3,'27.154.242.50','2019-08-05 09:32:32'),(4506,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',2,'27.154.242.50','2019-08-05 09:32:37'),(4507,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',3,'27.154.242.50','2019-08-05 09:32:44'),(4508,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'36.152.32.170','2019-08-05 11:25:50'),(4509,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-05 11:56:25'),(4510,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-05 12:20:42'),(4511,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-05 12:40:57'),(4512,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',51,'101.230.234.6','2019-08-05 12:42:39'),(4513,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'101.230.234.6','2019-08-05 12:42:47'),(4514,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'120.236.193.178','2019-08-05 14:56:49'),(4515,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-05 16:18:31'),(4516,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'219.239.227.201','2019-08-05 21:24:53'),(4517,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.201','2019-08-05 21:25:35'),(4518,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',208,'42.236.10.117','2019-08-05 21:40:55'),(4519,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'101.85.25.195','2019-08-05 21:53:23'),(4520,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.92.128.154','2019-08-05 23:00:09'),(4521,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'49.77.175.100','2019-08-06 02:14:07'),(4522,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',205,'111.225.148.153','2019-08-06 06:22:09'),(4523,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',4,'110.249.201.243','2019-08-06 06:30:55'),(4524,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'111.225.149.104','2019-08-06 06:34:17'),(4525,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'111.225.148.138','2019-08-06 06:48:51'),(4526,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.182.49','2019-08-06 07:42:31'),(4527,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.182.49','2019-08-06 07:42:42'),(4528,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',4,'113.116.141.47','2019-08-06 07:42:49'),(4529,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',2,'183.15.182.49','2019-08-06 07:43:06'),(4530,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.182.49','2019-08-06 07:47:29'),(4531,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.24.110.236','2019-08-06 08:17:59'),(4532,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.190','2019-08-06 08:24:11'),(4533,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.233.188.157','2019-08-06 10:22:02'),(4534,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'116.233.188.157','2019-08-06 10:22:19'),(4535,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'116.233.188.157','2019-08-06 10:22:21'),(4536,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.203.12.97','2019-08-06 10:30:59'),(4537,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'111.203.12.97','2019-08-06 10:31:30'),(4538,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',4,'36.152.32.170','2019-08-06 10:40:11'),(4539,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'111.36.13.48','2019-08-06 11:42:07'),(4540,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-06 13:33:41'),(4541,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'183.63.51.77','2019-08-06 13:33:51'),(4542,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',1488,'183.63.51.77','2019-08-06 13:34:05'),(4543,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'183.63.51.77','2019-08-06 13:34:15'),(4544,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'183.63.51.77','2019-08-06 13:34:26'),(4545,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',12,'103.30.99.219','2019-08-06 14:49:55'),(4546,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.98.200.113','2019-08-06 16:31:48'),(4547,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-06 17:08:50'),(4548,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-06 18:01:25'),(4549,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',4,'117.136.40.240','2019-08-06 18:11:50'),(4550,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'117.136.40.240','2019-08-06 18:12:08'),(4551,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',34,'113.116.141.52','2019-08-06 20:53:14'),(4552,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.141.52','2019-08-07 00:54:08'),(4553,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'113.116.141.52','2019-08-07 00:54:27'),(4554,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'113.116.141.52','2019-08-07 00:54:33'),(4555,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',3,'113.116.141.52','2019-08-07 00:54:39'),(4556,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'113.116.141.52','2019-08-07 00:54:43'),(4557,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'113.116.141.52','2019-08-07 00:54:46'),(4558,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',318,'110.249.201.112','2019-08-07 05:23:07'),(4559,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'111.225.149.47','2019-08-07 05:23:13'),(4560,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',3,'110.249.201.234','2019-08-07 05:23:19'),(4561,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',47,'223.104.63.7','2019-08-07 08:19:25'),(4562,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',426,'180.169.136.242','2019-08-07 09:15:07'),(4563,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.94.95.62','2019-08-07 10:05:16'),(4564,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-08-07 11:32:34'),(4565,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',81,'103.40.221.96','2019-08-07 12:57:29'),(4566,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'103.40.221.96','2019-08-07 12:57:30'),(4567,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',2,'103.40.221.96','2019-08-07 12:57:35'),(4568,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',55,'14.127.250.239','2019-08-07 12:58:05'),(4569,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'103.40.221.96','2019-08-07 12:58:50'),(4570,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.130.112.30','2019-08-07 13:18:32'),(4571,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'124.200.109.178','2019-08-07 13:22:23'),(4572,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.200.109.178','2019-08-07 13:22:55'),(4573,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'124.200.109.178','2019-08-07 13:24:46'),(4574,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.250.68.54','2019-08-07 14:30:38'),(4575,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'45.255.152.32','2019-08-07 14:57:35'),(4576,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.14.29.169','2019-08-07 15:19:16'),(4577,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.14.29.169','2019-08-07 15:30:17'),(4578,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-07 15:34:56'),(4579,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',2,'119.98.200.113','2019-08-07 15:41:59'),(4580,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',209,'119.98.200.113','2019-08-07 15:42:16'),(4581,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.240.236.76','2019-08-07 15:42:23'),(4582,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'58.240.236.76','2019-08-07 15:42:45'),(4583,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'119.98.200.113','2019-08-07 15:46:41'),(4584,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-07 15:49:23'),(4585,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-07 16:06:00'),(4586,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'113.91.140.32','2019-08-07 17:49:08'),(4587,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'49.94.160.55','2019-08-07 17:53:14'),(4588,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'49.94.160.55','2019-08-07 17:57:52'),(4589,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.29','2019-08-07 18:27:44'),(4590,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.29','2019-08-07 18:44:35'),(4591,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'180.163.220.5','2019-08-07 20:41:30'),(4592,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.140.24','2019-08-07 21:10:12'),(4593,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.140.24','2019-08-07 21:45:29'),(4594,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.236.10.93','2019-08-07 22:29:04'),(4595,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'180.163.220.67','2019-08-07 23:03:52'),(4596,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'118.114.15.104','2019-08-07 23:19:38'),(4597,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'110.249.202.52','2019-08-08 00:49:30'),(4598,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'111.225.149.106','2019-08-08 00:49:34'),(4599,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.140.24','2019-08-08 08:02:02'),(4600,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'113.88.98.216','2019-08-08 08:02:46'),(4601,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'113.116.140.24','2019-08-08 08:02:51'),(4602,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'113.116.140.24','2019-08-08 08:03:03'),(4603,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'113.116.140.24','2019-08-08 08:03:11'),(4604,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'113.116.140.24','2019-08-08 08:03:19'),(4605,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'101.230.234.6','2019-08-08 09:42:18'),(4606,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'101.230.234.6','2019-08-08 09:42:29'),(4607,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',2,'101.230.234.6','2019-08-08 10:32:20'),(4608,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',10,'101.230.234.6','2019-08-08 10:32:31'),(4609,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-08 11:16:51'),(4610,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'101.230.234.6','2019-08-08 11:18:37'),(4611,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'101.230.234.6','2019-08-08 11:18:51'),(4612,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-08-08 11:20:45'),(4613,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.230.234.6','2019-08-08 11:21:19'),(4614,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.31.247','2019-08-08 11:52:38'),(4615,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'117.136.31.247','2019-08-08 11:52:46'),(4616,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'117.136.31.247','2019-08-08 11:52:49'),(4617,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',2,'117.136.31.247','2019-08-08 11:52:52'),(4618,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-08 14:03:05'),(4619,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',2,'101.230.234.6','2019-08-08 14:13:11'),(4620,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'49.94.74.227','2019-08-08 14:45:01'),(4621,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'49.94.74.227','2019-08-08 14:45:05'),(4622,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.70.216.72','2019-08-08 15:17:57'),(4623,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.0.184.108','2019-08-08 15:43:28'),(4624,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'222.139.156.58','2019-08-08 16:05:23'),(4625,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.139.156.58','2019-08-08 16:05:35'),(4626,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.158.17.227','2019-08-08 16:18:53'),(4627,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',4,'113.68.185.191','2019-08-08 16:21:01'),(4628,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.91.142.32','2019-08-08 16:27:34'),(4629,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.91.142.32','2019-08-08 16:28:28'),(4630,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-08 16:49:50'),(4631,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-08 17:32:52'),(4632,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.32','2019-08-08 19:41:20'),(4633,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'110.249.201.190','2019-08-09 01:30:31'),(4634,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'110.249.201.28','2019-08-09 01:30:35'),(4635,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',32,'113.116.143.50','2019-08-09 07:46:55'),(4636,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'39.149.14.195','2019-08-09 10:07:03'),(4637,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.149.14.195','2019-08-09 10:07:19'),(4638,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'39.149.14.195','2019-08-09 10:07:43'),(4639,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.149.14.195','2019-08-09 10:07:52'),(4640,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'39.149.14.195','2019-08-09 10:08:28'),(4641,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.149.14.195','2019-08-09 10:08:29'),(4642,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-09 10:29:35'),(4643,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',24,'58.49.166.66','2019-08-09 10:33:52'),(4644,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.49.166.66','2019-08-09 10:34:08'),(4645,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'45.255.152.32','2019-08-09 10:59:42'),(4646,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-09 11:40:50'),(4647,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.143.148.73','2019-08-09 11:55:29'),(4648,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.143.148.73','2019-08-09 11:55:58'),(4649,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-09 12:28:01'),(4650,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-09 16:12:58'),(4651,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'183.63.51.77','2019-08-09 16:13:07'),(4652,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.63.51.77','2019-08-09 16:13:16'),(4653,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'116.30.219.203','2019-08-09 17:53:20'),(4654,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'116.30.219.203','2019-08-09 17:54:40'),(4655,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.4','2019-08-09 18:41:56'),(4656,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.181.235','2019-08-09 21:54:43'),(4657,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'111.225.149.117','2019-08-10 00:26:58'),(4658,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.181.235','2019-08-10 00:27:58'),(4659,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'183.15.181.235','2019-08-10 00:28:03'),(4660,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'183.15.181.235','2019-08-10 00:28:12'),(4661,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'183.15.181.235','2019-08-10 00:28:17'),(4662,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',41,'183.15.181.235','2019-08-10 11:42:39'),(4663,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.152.32.170','2019-08-10 13:52:03'),(4664,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',9,'125.122.3.84','2019-08-10 15:23:10'),(4665,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'111.0.184.246','2019-08-10 15:47:40'),(4666,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',127,'183.15.181.235','2019-08-10 16:05:43'),(4667,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',29,'180.163.220.4','2019-08-10 16:06:16'),(4668,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',14,'113.88.96.85','2019-08-10 16:06:25'),(4669,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',62,'183.15.181.235','2019-08-10 16:06:29'),(4670,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',18,'183.15.181.235','2019-08-10 16:06:34'),(4671,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',453,'183.15.181.235','2019-08-10 16:07:29'),(4672,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.15.181.235','2019-08-10 16:14:13'),(4673,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',19,'203.208.60.25','2019-08-10 18:32:07'),(4674,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',17,'117.136.40.191','2019-08-10 20:37:39'),(4675,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'117.136.40.191','2019-08-10 20:37:54'),(4676,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',32,'117.136.40.191','2019-08-10 20:38:38'),(4677,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',50,'111.200.185.182','2019-08-10 23:18:28'),(4678,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',82,'42.236.10.117','2019-08-10 23:18:36'),(4679,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',36,'111.225.149.79','2019-08-11 00:10:03'),(4680,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',5,'111.225.149.136','2019-08-11 02:25:17'),(4681,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',36,'203.208.60.97','2019-08-11 06:30:48'),(4682,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',4,'203.208.60.83','2019-08-11 06:30:48'),(4683,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',23,'218.57.140.130','2019-08-11 10:26:58'),(4684,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',37,'218.57.140.130','2019-08-11 10:27:10'),(4685,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',38,'218.57.140.130','2019-08-11 10:28:02'),(4686,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',38,'218.57.140.130','2019-08-11 10:28:33'),(4687,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',5,'218.57.140.130','2019-08-11 10:29:28'),(4688,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',31,'218.57.140.130','2019-08-11 10:29:55'),(4689,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',11,'218.57.140.130','2019-08-11 10:31:35'),(4690,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.57.140.130','2019-08-11 10:33:22'),(4691,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'183.15.181.235','2019-08-11 10:52:49'),(4692,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'39.155.191.7','2019-08-11 12:07:16'),(4693,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',25,'39.155.191.7','2019-08-11 12:08:13'),(4694,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'39.155.191.7','2019-08-11 12:08:32'),(4695,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',5,'117.136.41.81','2019-08-11 13:11:40'),(4696,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'111.0.184.246','2019-08-11 15:07:46'),(4697,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'111.0.184.246','2019-08-11 15:43:32'),(4698,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',30,'111.0.184.246','2019-08-11 16:08:02'),(4699,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.15.181.127','2019-08-11 16:10:08'),(4700,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'183.15.181.127','2019-08-11 16:10:54'),(4701,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',4,'183.15.181.127','2019-08-11 16:11:16'),(4702,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'116.238.242.55','2019-08-11 17:29:04'),(4703,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'42.236.10.75','2019-08-11 17:29:12'),(4704,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'183.15.181.127','2019-08-11 17:34:07'),(4705,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',8,'111.200.185.182','2019-08-11 20:09:34'),(4706,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',838,'42.236.10.106','2019-08-11 20:09:42'),(4707,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'111.200.185.182','2019-08-11 20:50:32'),(4708,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'180.163.220.66','2019-08-11 20:50:48'),(4709,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'117.136.0.216','2019-08-11 20:56:03'),(4710,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'117.136.0.216','2019-08-11 20:56:41'),(4711,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',8,'117.136.0.216','2019-08-11 20:56:57'),(4712,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'1.80.218.233','2019-08-11 21:50:36'),(4713,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',19,'219.137.141.205','2019-08-11 22:08:45'),(4714,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.227.22.61','2019-08-11 23:43:05'),(4715,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'120.227.22.61','2019-08-11 23:43:16'),(4716,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',36,'111.225.148.73','2019-08-12 04:56:27'),(4717,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',4,'110.249.202.47','2019-08-12 04:56:35'),(4718,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',429,'111.225.148.217','2019-08-12 04:56:36'),(4719,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.21','2019-08-12 08:13:30'),(4720,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',35,'111.182.142.1','2019-08-12 09:19:35'),(4721,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'180.163.220.3','2019-08-12 09:20:22'),(4722,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',36,'111.182.142.1','2019-08-12 09:20:46'),(4723,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.57.140.130','2019-08-12 09:51:13'),(4724,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'183.63.51.77','2019-08-12 09:53:10'),(4725,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',16,'183.63.51.77','2019-08-12 09:59:02'),(4726,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',8,'183.63.51.77','2019-08-12 09:59:05'),(4727,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',45,'221.238.132.118','2019-08-12 10:09:05'),(4728,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',7,'123.156.184.199','2019-08-12 10:43:47'),(4729,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',158,'123.156.184.199','2019-08-12 10:44:16'),(4730,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-12 11:47:07'),(4731,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-12 12:53:12'),(4732,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',4,'183.63.51.77','2019-08-12 13:03:18'),(4733,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'183.63.51.77','2019-08-12 13:03:22'),(4734,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',6,'183.63.51.77','2019-08-12 13:03:27'),(4735,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',17,'183.63.51.77','2019-08-12 13:03:30'),(4736,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',3,'58.247.66.114','2019-08-12 13:39:59'),(4737,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',11,'58.247.66.114','2019-08-12 13:40:06'),(4738,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.247.66.114','2019-08-12 13:40:20'),(4739,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',34,'58.247.66.114','2019-08-12 13:54:28'),(4740,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'58.247.66.114','2019-08-12 13:54:38'),(4741,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'58.247.66.114','2019-08-12 13:55:02'),(4742,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'58.247.66.114','2019-08-12 13:55:39'),(4743,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-12 14:49:27'),(4744,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'123.232.37.133','2019-08-12 14:59:34'),(4745,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',28,'123.232.37.133','2019-08-12 14:59:47'),(4746,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',19,'123.156.184.199','2019-08-12 15:02:17'),(4747,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'123.156.184.199','2019-08-12 15:02:53'),(4748,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'123.156.184.199','2019-08-12 15:03:24'),(4749,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.156.184.199','2019-08-12 15:03:38'),(4750,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',12,'123.232.37.133','2019-08-12 15:06:07'),(4751,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',13,'123.232.37.133','2019-08-12 15:06:07'),(4752,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'123.232.37.133','2019-08-12 15:06:08'),(4753,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.63.51.77','2019-08-12 15:22:23'),(4754,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',7,'183.63.51.77','2019-08-12 15:22:40'),(4755,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'183.63.51.77','2019-08-12 15:30:28'),(4756,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.238.132.118','2019-08-12 16:01:11'),(4757,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.105.250','2019-08-12 17:12:07'),(4758,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-12 17:49:55'),(4759,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-08-12 17:57:34'),(4760,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',4,'183.63.51.77','2019-08-12 17:57:36'),(4761,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'116.30.219.203','2019-08-12 18:06:29'),(4762,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-08-12 18:13:30'),(4763,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'58.247.66.114','2019-08-12 19:33:53'),(4764,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.148.44.247','2019-08-12 20:43:47'),(4765,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.15.181.127','2019-08-12 20:53:46'),(4766,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',8,'116.238.242.55','2019-08-12 21:39:46'),(4767,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'42.236.10.106','2019-08-12 21:40:00'),(4768,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'116.238.242.55','2019-08-12 21:40:12'),(4769,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'116.238.242.55','2019-08-12 21:40:40'),(4770,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',8,'116.238.242.55','2019-08-12 21:40:58'),(4771,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'180.163.220.4','2019-08-12 21:41:04'),(4772,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',211,'116.238.242.55','2019-08-12 21:41:10'),(4773,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',1033,'42.236.10.106','2019-08-12 21:41:13'),(4774,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',638,'116.238.242.55','2019-08-12 21:41:22'),(4775,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4974,'42.236.10.75','2019-08-12 21:41:37'),(4776,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',10,'180.163.220.66','2019-08-12 21:41:42'),(4777,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',271,'42.236.10.117','2019-08-12 21:41:44'),(4778,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.238.242.55','2019-08-12 21:42:10'),(4779,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'180.163.220.66','2019-08-12 21:42:13'),(4780,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',4,'124.16.140.20','2019-08-12 23:03:21'),(4781,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'124.16.140.20','2019-08-12 23:03:35'),(4782,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',8,'124.16.140.20','2019-08-12 23:03:43'),(4783,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'124.16.140.20','2019-08-12 23:03:59'),(4784,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'180.111.213.45','2019-08-13 00:27:17'),(4785,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'120.227.22.61','2019-08-13 00:41:04'),(4786,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'120.227.22.61','2019-08-13 00:51:39'),(4787,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'113.88.96.240','2019-08-13 01:07:00'),(4788,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',468,'120.227.22.61','2019-08-13 01:08:03'),(4789,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',17,'120.227.22.61','2019-08-13 01:39:24'),(4790,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2248,'111.225.148.212','2019-08-13 05:16:43'),(4791,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',831,'111.225.149.77','2019-08-13 05:16:52'),(4792,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2636,'110.249.201.205','2019-08-13 05:16:54'),(4793,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'183.15.181.127','2019-08-13 07:59:01'),(4794,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.181.127','2019-08-13 08:04:59'),(4795,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',8,'218.76.8.17','2019-08-13 08:25:32'),(4796,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'175.6.6.226','2019-08-13 08:26:21'),(4797,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.204.241.76','2019-08-13 09:15:31'),(4798,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-13 10:51:12'),(4799,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'183.63.51.77','2019-08-13 10:51:32'),(4800,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-08-13 12:18:38'),(4801,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'183.63.51.77','2019-08-13 12:48:31'),(4802,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',6,'49.95.113.42','2019-08-13 14:45:37'),(4803,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.137.141.202','2019-08-13 15:02:31'),(4804,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.137.141.202','2019-08-13 15:02:45'),(4805,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',4,'219.137.141.202','2019-08-13 15:02:56'),(4806,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',4,'219.230.172.49','2019-08-13 15:03:51'),(4807,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'219.230.172.49','2019-08-13 15:04:17'),(4808,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',11,'219.230.172.49','2019-08-13 15:04:20'),(4809,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'219.230.172.49','2019-08-13 15:15:02'),(4810,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'219.230.172.49','2019-08-13 15:15:21'),(4811,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'219.230.172.49','2019-08-13 15:15:37'),(4812,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',45,'219.230.172.49','2019-08-13 15:15:47'),(4813,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',16,'219.230.172.49','2019-08-13 15:15:56'),(4814,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.95.113.42','2019-08-13 16:03:06'),(4815,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'49.95.113.42','2019-08-13 16:03:14'),(4816,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',20,'222.95.117.152','2019-08-13 21:25:47'),(4817,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'113.104.183.32','2019-08-13 21:56:58'),(4818,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',5,'42.236.10.93','2019-08-13 22:46:54'),(4819,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',9,'117.89.226.29','2019-08-13 23:23:48'),(4820,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',5,'110.249.201.167','2019-08-14 01:47:19'),(4821,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',7,'110.249.202.210','2019-08-14 01:47:24'),(4822,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',4,'110.249.201.23','2019-08-14 01:47:29'),(4823,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'103.40.220.112','2019-08-14 09:53:43'),(4824,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',23,'103.40.220.112','2019-08-14 09:53:57'),(4825,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-08-14 10:20:01'),(4826,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.186.224.189','2019-08-14 11:12:54'),(4827,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'117.186.224.189','2019-08-14 11:13:16'),(4828,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'111.204.113.130','2019-08-14 13:22:14'),(4829,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'111.204.113.130','2019-08-14 13:22:14'),(4830,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'111.204.113.130','2019-08-14 13:23:06'),(4831,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'111.204.113.130','2019-08-14 13:23:06'),(4832,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',5,'111.0.184.246','2019-08-14 14:23:28'),(4833,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'117.186.224.189','2019-08-14 14:26:33'),(4834,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',4,'116.4.8.168','2019-08-14 15:42:06'),(4835,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'180.163.220.67','2019-08-14 17:53:18'),(4836,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',16,'42.100.3.131','2019-08-14 21:18:02'),(4837,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.20','2019-08-14 21:29:30'),(4838,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.63.20','2019-08-14 22:52:37'),(4839,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',4,'223.104.63.20','2019-08-14 22:54:21'),(4840,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',5,'223.104.63.20','2019-08-14 22:54:27'),(4841,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'223.104.63.20','2019-08-14 22:55:00'),(4842,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',456,'111.225.148.204','2019-08-15 05:57:02'),(4843,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',844,'111.225.148.147','2019-08-15 05:57:10'),(4844,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',641,'111.225.149.92','2019-08-15 05:57:11'),(4845,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.152.32.170','2019-08-15 08:45:55'),(4846,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'36.152.32.170','2019-08-15 08:48:54'),(4847,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.98.201.229','2019-08-15 09:36:36'),(4848,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',8,'119.98.201.229','2019-08-15 09:38:05'),(4849,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'119.98.201.229','2019-08-15 09:38:18'),(4850,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',5,'119.98.201.229','2019-08-15 09:38:25'),(4851,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'61.175.197.202','2019-08-15 13:17:17'),(4852,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'120.211.63.50','2019-08-15 13:40:55'),(4853,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'118.113.2.33','2019-08-15 14:24:23'),(4854,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'115.192.143.229','2019-08-15 14:35:24'),(4855,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-15 14:35:36'),(4856,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'183.63.51.77','2019-08-15 14:35:46'),(4857,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.192.143.229','2019-08-15 14:35:49'),(4858,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'183.63.51.77','2019-08-15 14:35:50'),(4859,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',225,'183.63.51.77','2019-08-15 14:35:55'),(4860,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',3,'183.63.51.77','2019-08-15 14:36:02'),(4861,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'183.63.51.77','2019-08-15 14:36:07'),(4862,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.192.143.229','2019-08-15 14:37:10'),(4863,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'115.192.143.229','2019-08-15 14:38:06'),(4864,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'115.192.143.229','2019-08-15 14:38:13'),(4865,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'115.192.143.229','2019-08-15 14:38:38'),(4866,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.192.143.229','2019-08-15 14:40:23'),(4867,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.192.143.229','2019-08-15 14:44:53'),(4868,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'115.192.143.229','2019-08-15 14:45:10'),(4869,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.190.11.106','2019-08-15 15:16:58'),(4870,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'60.190.11.106','2019-08-15 15:17:50'),(4871,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'60.190.11.106','2019-08-15 15:18:42'),(4872,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',45,'60.190.11.106','2019-08-15 15:19:21'),(4873,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.190.11.106','2019-08-15 15:19:24'),(4874,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.22.64.80','2019-08-15 15:49:01'),(4875,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.22.64.80','2019-08-15 15:53:28'),(4876,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.22.64.80','2019-08-15 15:53:45'),(4877,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-08-15 16:56:38'),(4878,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'101.230.234.6','2019-08-15 18:13:53'),(4879,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'113.104.200.134','2019-08-15 18:38:36'),(4880,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'175.8.228.46','2019-08-15 18:44:03'),(4881,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'175.8.228.46','2019-08-15 18:45:07'),(4882,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'175.8.228.46','2019-08-15 18:45:36'),(4883,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'175.8.228.46','2019-08-15 18:45:40'),(4884,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'175.8.228.46','2019-08-15 18:45:52'),(4885,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'175.8.228.46','2019-08-15 18:46:31'),(4886,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'175.8.228.46','2019-08-15 18:46:40'),(4887,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',17,'36.152.32.170','2019-08-15 20:32:35'),(4888,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.152.32.170','2019-08-15 20:32:39'),(4889,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',18,'114.248.48.208','2019-08-15 21:26:29'),(4890,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'221.239.246.80','2019-08-15 23:29:40'),(4891,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'221.239.246.80','2019-08-15 23:29:48'),(4892,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'221.239.246.80','2019-08-15 23:30:07'),(4893,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.40.195','2019-08-16 08:37:49'),(4894,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'36.152.32.170','2019-08-16 10:21:10'),(4895,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'218.57.140.130','2019-08-16 11:19:46'),(4896,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1025,'101.230.234.6','2019-08-16 12:15:36'),(4897,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',4928,'110.249.202.63','2019-08-16 12:37:16'),(4898,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',1306,'111.225.148.160','2019-08-16 12:37:24'),(4899,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',2447,'110.249.201.98','2019-08-16 12:37:26'),(4900,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.152.32.170','2019-08-16 14:24:43'),(4901,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',5,'113.87.118.47','2019-08-16 14:55:06'),(4902,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',8,'113.104.200.24','2019-08-16 15:12:03'),(4903,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'113.104.200.24','2019-08-16 15:12:06'),(4904,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'101.230.234.6','2019-08-16 15:56:16'),(4905,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'101.230.234.6','2019-08-16 15:56:23'),(4906,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'101.230.234.6','2019-08-16 15:56:44'),(4907,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'101.230.234.6','2019-08-16 15:57:01'),(4908,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'101.230.234.6','2019-08-16 15:57:18'),(4909,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',9,'101.230.234.6','2019-08-16 16:08:15'),(4910,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'101.230.234.6','2019-08-16 16:08:21'),(4911,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.116.217.73','2019-08-16 16:24:02'),(4912,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'183.63.51.77','2019-08-16 16:25:36'),(4913,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-16 16:25:48'),(4914,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'101.230.234.6','2019-08-16 17:48:28'),(4915,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.230.234.6','2019-08-16 17:48:35'),(4916,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-08-16 17:49:28'),(4917,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.230.234.6','2019-08-16 17:49:29'),(4918,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-08-16 17:49:30'),(4919,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'101.230.234.6','2019-08-16 17:49:31'),(4920,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'101.230.234.6','2019-08-16 17:49:31'),(4921,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-08-16 17:49:32'),(4922,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-08-16 17:49:32'),(4923,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-08-16 17:49:33'),(4924,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-08-16 17:49:33'),(4925,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-08-16 17:49:40'),(4926,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-08-16 17:49:41'),(4927,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.230.234.6','2019-08-16 17:49:50'),(4928,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.0.184.246','2019-08-16 17:52:28'),(4929,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',78,'221.239.246.80','2019-08-16 21:44:27'),(4930,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.39.87','2019-08-16 22:12:21'),(4931,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',3,'117.136.39.87','2019-08-16 22:12:36'),(4932,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',12,'103.40.220.112','2019-08-16 22:20:03'),(4933,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'103.40.220.112','2019-08-16 22:20:15'),(4934,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'221.239.246.80','2019-08-16 22:26:31'),(4935,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',8,'221.239.246.80','2019-08-16 22:26:43'),(4936,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',9,'111.225.148.12','2019-08-17 04:59:00'),(4937,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',42,'103.40.220.112','2019-08-17 08:03:26'),(4938,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',5,'103.40.220.112','2019-08-17 08:12:01'),(4939,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.40.192','2019-08-17 08:53:22'),(4940,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'27.18.162.127','2019-08-17 09:56:46'),(4941,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',26,'36.152.32.170','2019-08-17 11:26:04'),(4942,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',28,'218.18.229.179','2019-08-17 11:28:28'),(4943,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',34,'218.18.229.179','2019-08-17 11:28:31'),(4944,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'218.18.229.179','2019-08-17 11:30:24'),(4945,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',51,'103.40.220.112','2019-08-17 14:45:39'),(4946,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'122.96.73.39','2019-08-17 17:39:18'),(4947,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'122.96.73.39','2019-08-17 17:47:42'),(4948,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',18,'122.96.73.39','2019-08-17 17:47:54'),(4949,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'103.40.220.112','2019-08-17 20:58:03'),(4950,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',3,'103.40.220.112','2019-08-17 20:58:26'),(4951,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',9,'103.40.220.112','2019-08-17 20:58:40'),(4952,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',45,'103.40.220.112','2019-08-17 20:58:57'),(4953,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'103.40.220.112','2019-08-17 20:59:02'),(4954,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'103.40.220.112','2019-08-17 20:59:18'),(4955,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',2,'103.40.220.112','2019-08-17 20:59:34'),(4956,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'103.40.220.112','2019-08-17 20:59:49'),(4957,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'103.40.220.112','2019-08-17 20:59:59'),(4958,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'103.40.220.112','2019-08-17 21:00:01'),(4959,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'103.40.220.112','2019-08-17 21:00:03'),(4960,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'221.217.118.20','2019-08-17 22:08:09'),(4961,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'103.40.220.112','2019-08-17 22:45:31'),(4962,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.232.75.135','2019-08-18 00:26:05'),(4963,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.236.10.125','2019-08-18 00:26:22'),(4964,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',263,'110.249.202.224','2019-08-18 07:20:34'),(4965,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',72,'1.203.116.111','2019-08-18 07:53:49'),(4966,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'103.40.220.112','2019-08-18 07:57:14'),(4967,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'1.203.116.111','2019-08-18 08:22:50'),(4968,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.203.116.111','2019-08-18 08:29:31'),(4969,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'221.129.251.88','2019-08-18 12:23:56'),(4970,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',666,'180.163.220.68','2019-08-18 12:24:05'),(4971,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'1.203.116.111','2019-08-18 12:27:05'),(4972,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',3,'1.203.116.111','2019-08-18 12:34:46'),(4973,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',6,'221.129.251.88','2019-08-18 13:09:51'),(4974,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'180.163.220.4','2019-08-18 13:10:02'),(4975,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.129.251.88','2019-08-18 13:13:35'),(4976,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.203.116.111','2019-08-18 14:34:53'),(4977,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.203.116.111','2019-08-18 14:42:46'),(4978,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'1.203.116.111','2019-08-18 14:43:34'),(4979,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',12,'1.203.116.111','2019-08-18 14:43:57'),(4980,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.203.116.111','2019-08-18 14:44:21'),(4981,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',5,'113.116.143.132','2019-08-18 15:04:15'),(4982,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',77,'113.116.143.132','2019-08-18 15:12:27'),(4983,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',20,'59.77.42.98','2019-08-18 17:55:59'),(4984,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'59.77.42.98','2019-08-18 18:36:01'),(4985,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',6,'113.116.143.69','2019-08-18 19:08:47'),(4986,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',7,'113.116.143.69','2019-08-18 23:09:33'),(4987,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',5,'113.116.143.69','2019-08-18 23:11:56'),(4988,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',3,'113.116.143.69','2019-08-18 23:12:44'),(4989,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',623,'111.225.148.243','2019-08-19 05:48:16'),(4990,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.64.153','2019-08-19 08:39:06'),(4991,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',8,'180.160.136.171','2019-08-19 08:39:20'),(4992,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',425,'223.104.64.153','2019-08-19 08:39:25'),(4993,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',5,'223.104.64.153','2019-08-19 08:40:05'),(4994,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',56,'223.104.64.153','2019-08-19 08:42:02'),(4995,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'117.186.224.189','2019-08-19 11:05:11'),(4996,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'183.63.51.77','2019-08-19 11:10:33'),(4997,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',21,'183.63.51.77','2019-08-19 11:10:41'),(4998,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',4,'183.63.51.77','2019-08-19 11:40:22'),(4999,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',6,'183.63.51.77','2019-08-19 12:48:03'),(5000,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',6,'59.77.42.98','2019-08-19 13:13:09'),(5001,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',637,'110.87.47.213','2019-08-19 14:26:05'),(5002,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-19 15:02:41'),(5003,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',5,'183.63.51.77','2019-08-19 15:09:06'),(5004,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',5,'183.63.51.77','2019-08-19 15:09:10'),(5005,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.164.81.13','2019-08-19 15:21:12'),(5006,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',4,'103.40.220.112','2019-08-19 15:36:58'),(5007,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'218.28.165.90','2019-08-19 15:41:19'),(5008,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'36.152.32.170','2019-08-19 16:22:43'),(5009,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'36.152.32.170','2019-08-19 16:42:15'),(5010,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'221.213.47.10','2019-08-19 17:24:26'),(5011,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.52.170','2019-08-19 18:30:01'),(5012,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'42.236.10.84','2019-08-19 18:39:48'),(5013,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.152.32.170','2019-08-19 18:56:43'),(5014,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',4,'117.136.31.240','2019-08-19 18:59:29'),(5015,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',13,'117.136.31.240','2019-08-19 19:11:16'),(5016,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'36.152.32.170','2019-08-19 20:08:44'),(5017,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.0.160','2019-08-19 21:15:45'),(5018,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'60.25.12.2','2019-08-19 21:24:10'),(5019,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'60.25.12.2','2019-08-19 21:24:13'),(5020,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',4,'103.40.220.112','2019-08-19 21:40:39'),(5021,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',4,'103.40.220.112','2019-08-19 21:40:45'),(5022,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',3,'103.40.220.112','2019-08-19 21:40:52'),(5023,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',2,'103.40.220.112','2019-08-19 21:41:11'),(5024,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'103.40.220.112','2019-08-19 21:41:44'),(5025,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',3,'103.40.220.112','2019-08-19 21:42:24'),(5026,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',24,'103.40.220.112','2019-08-19 21:42:28'),(5027,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'103.40.220.112','2019-08-19 21:42:38'),(5028,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',2,'103.40.220.112','2019-08-19 21:42:46'),(5029,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'59.77.42.98','2019-08-19 21:53:28'),(5030,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',3,'113.116.140.122','2019-08-19 22:43:45'),(5031,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'113.116.140.122','2019-08-19 23:21:24'),(5032,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',25,'113.116.140.122','2019-08-19 23:22:44'),(5033,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'103.40.220.112','2019-08-19 23:37:47'),(5034,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'103.40.220.112','2019-08-19 23:48:53'),(5035,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.40.220.112','2019-08-19 23:49:56'),(5036,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',237,'111.225.148.92','2019-08-20 06:41:33'),(5037,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'103.40.220.112','2019-08-20 07:37:58'),(5038,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',5,'66.249.79.205','2019-08-20 07:38:54'),(5039,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',4,'66.249.79.209','2019-08-20 07:39:12'),(5040,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',3,'66.249.79.205','2019-08-20 07:39:29'),(5041,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.213.47.10','2019-08-20 10:07:00'),(5042,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'183.63.51.77','2019-08-20 10:14:48'),(5043,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',4,'183.63.51.77','2019-08-20 10:14:59'),(5044,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',5,'183.63.51.77','2019-08-20 10:15:04'),(5045,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.152.32.170','2019-08-20 10:31:21'),(5046,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'183.63.51.77','2019-08-20 10:34:37'),(5047,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',11,'27.17.2.165','2019-08-20 11:06:16'),(5048,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',3,'27.17.2.165','2019-08-20 11:06:30'),(5049,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',56,'27.17.2.165','2019-08-20 11:06:45'),(5050,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'61.151.178.236','2019-08-20 11:18:42'),(5051,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',3,'101.89.239.120','2019-08-20 11:18:43'),(5052,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'183.63.51.77','2019-08-20 12:17:14'),(5053,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',222,'183.63.51.77','2019-08-20 12:49:40'),(5054,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',16,'183.63.51.77','2019-08-20 12:49:52'),(5055,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',3,'183.63.51.77','2019-08-20 12:50:05'),(5056,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',4,'183.63.51.77','2019-08-20 12:50:22'),(5057,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',448,'117.136.40.220','2019-08-20 13:04:14'),(5058,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'117.136.40.220','2019-08-20 13:04:47'),(5059,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'36.152.32.170','2019-08-20 13:28:27'),(5060,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',5,'36.152.32.170','2019-08-20 14:15:02'),(5061,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.142.102.162','2019-08-20 14:20:34'),(5062,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'219.142.102.162','2019-08-20 14:24:28'),(5063,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.142.102.162','2019-08-20 14:25:31'),(5064,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.142.102.162','2019-08-20 14:30:41'),(5065,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',3,'219.142.102.162','2019-08-20 14:30:53'),(5066,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.143.152.163','2019-08-20 14:38:38'),(5067,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'219.143.152.163','2019-08-20 14:38:46'),(5068,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.17.2.165','2019-08-20 15:32:36'),(5069,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.227.139.161','2019-08-20 15:46:42'),(5070,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'39.129.12.140','2019-08-20 15:48:54'),(5071,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'39.129.12.140','2019-08-20 16:02:43'),(5072,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'39.129.12.140','2019-08-20 16:02:57'),(5073,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.129.12.140','2019-08-20 16:02:58'),(5074,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'110.249.202.185','2019-08-20 16:13:17'),(5075,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',660,'59.77.43.1','2019-08-20 17:30:23'),(5076,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',4,'66.249.79.205','2019-08-20 18:09:04'),(5077,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.128.102.129','2019-08-20 19:27:02'),(5078,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',3,'113.128.102.129','2019-08-20 19:27:07'),(5079,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.128.102.129','2019-08-20 19:37:24'),(5080,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',4,'183.63.51.77','2019-08-20 19:43:51'),(5081,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'36.152.32.170','2019-08-20 20:03:10'),(5082,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'59.77.42.98','2019-08-20 21:32:35'),(5083,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'59.77.42.98','2019-08-20 21:49:40'),(5084,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'182.240.87.139','2019-08-20 22:30:08'),(5085,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'182.240.87.139','2019-08-20 22:30:24'),(5086,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',9,'113.116.140.183','2019-08-20 22:49:24'),(5087,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'192.168.9.232','2019-08-20 22:55:04'),(5088,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.30.205.38','2019-08-20 22:59:53'),(5089,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.30.205.38','2019-08-20 23:00:05'),(5090,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'117.30.205.38','2019-08-20 23:10:20'),(5091,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.30.205.38','2019-08-20 23:13:27'),(5092,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.211.185','2019-08-20 23:35:12'),(5093,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.211.185','2019-08-20 23:39:10'),(5094,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.243.25.20','2019-08-21 00:19:29'),(5095,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',23,'116.243.25.20','2019-08-21 00:19:51'),(5096,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',3,'116.243.25.20','2019-08-21 00:19:59'),(5097,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.243.25.20','2019-08-21 00:20:24'),(5098,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.243.25.20','2019-08-21 00:21:14'),(5099,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',50,'66.249.79.205','2019-08-21 04:48:23'),(5100,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',3,'111.225.149.225','2019-08-21 05:01:09'),(5101,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.152.32.170','2019-08-21 09:13:54'),(5102,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.244.39.242','2019-08-21 09:15:14'),(5103,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'114.244.39.242','2019-08-21 09:15:57'),(5104,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'117.136.39.100','2019-08-21 09:17:40'),(5105,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',25,'117.136.39.100','2019-08-21 09:17:43'),(5106,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',3,'117.136.39.100','2019-08-21 09:17:56'),(5107,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',4,'117.136.39.100','2019-08-21 09:17:59'),(5108,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.246.221.61','2019-08-21 09:18:12'),(5109,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',24,'61.144.97.117','2019-08-21 09:36:33'),(5110,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.39.100','2019-08-21 09:43:15'),(5111,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',3,'117.136.39.100','2019-08-21 09:43:19'),(5112,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.39.100','2019-08-21 09:57:42'),(5113,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.207.190.10','2019-08-21 10:08:35'),(5114,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.207.190.10','2019-08-21 10:09:42'),(5115,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.207.190.10','2019-08-21 10:10:08'),(5116,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.207.190.10','2019-08-21 10:10:15'),(5117,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'27.17.2.165','2019-08-21 10:25:34'),(5118,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'27.17.2.165','2019-08-21 10:25:41'),(5119,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'180.97.118.223','2019-08-21 10:38:02'),(5120,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'61.151.207.141','2019-08-21 10:38:11'),(5121,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'1.119.40.66','2019-08-21 10:46:08'),(5122,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',204,'1.119.40.66','2019-08-21 10:46:10'),(5123,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'1.119.40.66','2019-08-21 10:46:54'),(5124,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'1.119.40.66','2019-08-21 10:47:12'),(5125,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.119.40.66','2019-08-21 10:47:49'),(5126,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',10,'1.119.40.66','2019-08-21 10:48:12'),(5127,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',9,'1.119.40.66','2019-08-21 10:48:43'),(5128,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'1.119.40.66','2019-08-21 10:49:37'),(5129,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',4,'1.119.40.66','2019-08-21 10:49:48'),(5130,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.119.40.66','2019-08-21 10:49:58'),(5131,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.152.32.170','2019-08-21 10:59:04'),(5132,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.230.76.187','2019-08-21 11:42:54'),(5133,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'27.17.2.165','2019-08-21 11:50:32'),(5134,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'101.227.139.178','2019-08-21 12:02:42'),(5135,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.236.10.114','2019-08-21 12:27:14'),(5136,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'36.152.32.170','2019-08-21 13:23:19'),(5137,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'36.152.32.170','2019-08-21 13:23:56'),(5138,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',27,'36.152.32.170','2019-08-21 13:26:58'),(5139,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.152.32.170','2019-08-21 13:33:04'),(5140,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.152.32.170','2019-08-21 14:10:09'),(5141,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.152.32.170','2019-08-21 14:10:14'),(5142,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.152.32.170','2019-08-21 14:26:51'),(5143,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'27.17.2.165','2019-08-21 14:39:21'),(5144,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'101.89.239.120','2019-08-21 14:46:31'),(5145,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'124.42.103.101','2019-08-21 14:51:23'),(5146,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.42.103.101','2019-08-21 14:52:00'),(5147,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.129.116.30','2019-08-21 15:38:33'),(5148,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',209,'183.63.51.77','2019-08-21 16:25:49'),(5149,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'59.77.42.98','2019-08-21 16:26:47'),(5150,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',3,'183.63.51.77','2019-08-21 16:27:38'),(5151,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-21 16:27:43'),(5152,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'183.63.51.77','2019-08-21 16:27:53'),(5153,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',3,'183.63.51.77','2019-08-21 16:27:58'),(5154,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'183.63.51.77','2019-08-21 16:28:03'),(5155,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',214,'183.63.51.77','2019-08-21 16:31:06'),(5156,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',4,'221.213.47.10','2019-08-21 16:49:38'),(5157,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.186.224.189','2019-08-21 17:13:39'),(5158,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'36.152.32.170','2019-08-21 17:14:27'),(5159,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.186.224.189','2019-08-21 17:16:50'),(5160,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.186.224.189','2019-08-21 17:17:12'),(5161,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.67.156.18','2019-08-21 17:19:22'),(5162,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.186.224.189','2019-08-21 17:21:23'),(5163,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'119.129.129.124','2019-08-21 17:42:09'),(5164,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'113.67.156.18','2019-08-21 17:42:53'),(5165,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'113.67.156.177','2019-08-21 17:43:06'),(5166,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'113.67.156.177','2019-08-21 17:43:36'),(5167,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'117.136.39.99','2019-08-21 19:16:59'),(5168,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.39.99','2019-08-21 19:35:30'),(5169,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.140.128','2019-08-21 21:48:08'),(5170,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.221.127.83','2019-08-21 22:47:55'),(5171,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',7,'113.116.140.128','2019-08-21 23:32:39'),(5172,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',1348,'113.116.140.128','2019-08-21 23:33:22'),(5173,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',1513,'113.116.140.128','2019-08-21 23:34:32'),(5174,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'112.80.208.15','2019-08-22 00:00:34'),(5175,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.80.208.15','2019-08-22 00:00:43'),(5176,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'112.80.208.15','2019-08-22 00:01:02'),(5177,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'112.80.208.15','2019-08-22 00:01:23'),(5178,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'112.80.208.15','2019-08-22 00:01:43'),(5179,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.80.208.15','2019-08-22 00:01:48'),(5180,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.80.208.15','2019-08-22 00:01:49'),(5181,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.80.208.15','2019-08-22 00:01:51'),(5182,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'112.80.208.15','2019-08-22 00:01:52'),(5183,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'112.80.208.15','2019-08-22 00:02:18'),(5184,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'112.80.208.15','2019-08-22 00:02:58'),(5185,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'112.80.208.15','2019-08-22 00:03:50'),(5186,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'144.123.93.64','2019-08-22 00:05:18'),(5187,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'144.123.93.64','2019-08-22 00:05:21'),(5188,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'144.123.93.64','2019-08-22 00:05:23'),(5189,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'144.123.93.64','2019-08-22 00:05:33'),(5190,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.236.10.75','2019-08-22 02:32:45'),(5191,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',4,'110.249.202.248','2019-08-22 06:58:38'),(5192,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.140.128','2019-08-22 07:55:57'),(5193,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.87.226.171','2019-08-22 09:59:17'),(5194,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'45.255.152.91','2019-08-22 10:34:51'),(5195,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'45.255.152.91','2019-08-22 10:34:54'),(5196,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'45.255.152.91','2019-08-22 10:38:43'),(5197,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.247','2019-08-22 10:39:35'),(5198,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',3,'27.17.2.165','2019-08-22 11:00:45'),(5199,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'27.17.2.165','2019-08-22 11:07:15'),(5200,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'27.17.2.165','2019-08-22 11:07:25'),(5201,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'61.151.207.186','2019-08-22 11:19:24'),(5202,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',2,'61.129.6.251','2019-08-22 11:19:27'),(5203,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'36.152.32.170','2019-08-22 13:20:34'),(5204,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'27.17.2.165','2019-08-22 15:39:21'),(5205,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',3,'27.17.2.165','2019-08-22 15:39:29'),(5206,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',22,'61.151.207.141','2019-08-22 15:48:09'),(5207,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',4,'61.151.178.175','2019-08-22 15:52:08'),(5208,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',220,'135.245.48.86','2019-08-22 16:15:02'),(5209,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',1073,'183.63.51.77','2019-08-22 17:27:19'),(5210,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-22 17:27:30'),(5211,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.239.227.247','2019-08-22 17:55:31'),(5212,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.239.227.228','2019-08-22 18:15:44'),(5213,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',16,'223.20.159.23','2019-08-22 18:46:24'),(5214,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'223.20.159.23','2019-08-22 18:46:34'),(5215,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.20.159.23','2019-08-22 18:46:51'),(5216,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.20.159.23','2019-08-22 19:03:46'),(5217,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.20.159.23','2019-08-22 19:03:54'),(5218,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-22 19:05:07'),(5219,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.20.159.23','2019-08-22 19:05:27'),(5220,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.97.30.27','2019-08-22 19:05:56'),(5221,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',4,'183.63.51.77','2019-08-22 19:28:07'),(5222,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'113.116.140.183','2019-08-22 23:42:33'),(5223,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.163.220.4','2019-08-23 02:53:50'),(5224,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',4,'113.104.249.122','2019-08-23 03:54:35'),(5225,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',1500,'220.243.136.193','2019-08-23 08:13:00'),(5226,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',9,'117.136.79.128','2019-08-23 09:03:24'),(5227,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',3,'117.136.79.128','2019-08-23 09:03:39'),(5228,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'117.136.79.128','2019-08-23 09:03:46'),(5229,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',5,'117.136.79.128','2019-08-23 09:03:52'),(5230,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'36.152.32.170','2019-08-23 09:22:02'),(5231,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-23 10:13:41'),(5232,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'219.217.246.140','2019-08-23 10:20:48'),(5233,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',13,'219.217.246.140','2019-08-23 10:21:28'),(5234,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.217.246.140','2019-08-23 10:21:38'),(5235,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'219.217.246.140','2019-08-23 10:21:50'),(5236,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'116.233.207.97','2019-08-23 10:39:25'),(5237,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.229.218.244','2019-08-23 10:56:13'),(5238,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.229.218.244','2019-08-23 10:56:33'),(5239,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'101.229.218.244','2019-08-23 10:57:34'),(5240,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'101.229.218.244','2019-08-23 10:57:54'),(5241,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.233.207.97','2019-08-23 11:02:38'),(5242,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'66.249.79.205','2019-08-23 11:25:14'),(5243,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'178.154.171.28','2019-08-23 12:41:43'),(5244,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-23 13:01:48'),(5245,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'183.63.51.77','2019-08-23 13:02:22'),(5246,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'183.63.51.77','2019-08-23 13:02:28'),(5247,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',6,'183.63.51.77','2019-08-23 13:02:31'),(5248,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.233.207.97','2019-08-23 13:47:13'),(5249,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.233.207.97','2019-08-23 13:55:17'),(5250,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-23 13:55:47'),(5251,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.233.207.97','2019-08-23 13:55:49'),(5252,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'183.63.51.77','2019-08-23 14:18:02'),(5253,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'58.247.117.114','2019-08-23 14:25:23'),(5254,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'58.247.117.114','2019-08-23 14:25:33'),(5255,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.247.117.114','2019-08-23 14:25:55'),(5256,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'58.247.117.114','2019-08-23 14:26:07'),(5257,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.247.117.114','2019-08-23 14:26:55'),(5258,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'183.63.51.77','2019-08-23 14:27:30'),(5259,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'1.119.48.42','2019-08-23 14:38:30'),(5260,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.231','2019-08-23 14:39:11'),(5261,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.231','2019-08-23 14:41:22'),(5262,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'219.239.227.231','2019-08-23 14:41:26'),(5263,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.239.227.231','2019-08-23 14:41:39'),(5264,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',457,'123.232.24.234','2019-08-23 14:42:57'),(5265,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'123.232.24.234','2019-08-23 14:43:09'),(5266,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.119.40.66','2019-08-23 14:44:06'),(5267,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'1.119.40.66','2019-08-23 14:44:43'),(5268,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.239.227.231','2019-08-23 14:56:52'),(5269,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',20,'219.239.227.231','2019-08-23 14:57:35'),(5270,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.239.227.231','2019-08-23 14:59:31'),(5271,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.239.227.231','2019-08-23 14:59:32'),(5272,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.231','2019-08-23 14:59:34'),(5273,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.231','2019-08-23 14:59:35'),(5274,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.239.227.231','2019-08-23 14:59:37'),(5275,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-23 15:00:11'),(5276,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',6,'183.63.51.77','2019-08-23 15:00:18'),(5277,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.119.40.66','2019-08-23 15:11:57'),(5278,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'1.119.40.66','2019-08-23 15:12:10'),(5279,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'1.119.40.66','2019-08-23 15:13:18'),(5280,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'1.119.40.66','2019-08-23 15:13:31'),(5281,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.119.40.66','2019-08-23 15:13:58'),(5282,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',34,'1.119.40.66','2019-08-23 15:14:22'),(5283,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'1.119.40.66','2019-08-23 15:15:00'),(5284,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'1.119.40.66','2019-08-23 15:15:52'),(5285,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'1.119.40.66','2019-08-23 15:16:25'),(5286,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'58.247.117.114','2019-08-23 15:17:24'),(5287,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'58.247.117.114','2019-08-23 15:17:36'),(5288,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',1,'58.247.117.114','2019-08-23 15:17:57'),(5289,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'58.247.117.114','2019-08-23 15:19:40'),(5290,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'58.247.117.114','2019-08-23 15:19:55'),(5291,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'58.247.117.114','2019-08-23 15:20:11'),(5292,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.119.40.66','2019-08-23 15:23:37'),(5293,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.247.117.114','2019-08-23 15:27:05'),(5294,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-23 16:13:23'),(5295,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.228','2019-08-23 16:18:54'),(5296,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.239.227.228','2019-08-23 16:19:13'),(5297,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.228','2019-08-23 16:23:55'),(5298,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.228','2019-08-23 16:24:14'),(5299,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.239.227.228','2019-08-23 16:25:12'),(5300,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.228','2019-08-23 16:27:34'),(5301,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.247.117.114','2019-08-23 16:29:15'),(5302,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',7,'58.247.117.114','2019-08-23 16:42:50'),(5303,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',5,'183.63.51.77','2019-08-23 17:03:27'),(5304,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',5,'58.247.117.114','2019-08-23 17:26:58'),(5305,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-08-23 17:28:05'),(5306,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.247.117.114','2019-08-23 17:34:07'),(5307,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.39.91','2019-08-23 19:31:09'),(5308,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'117.136.39.91','2019-08-23 19:31:28'),(5309,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'117.136.39.91','2019-08-23 19:32:02'),(5310,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',434,'111.225.149.89','2019-08-24 07:17:47'),(5311,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.231','2019-08-24 09:24:18'),(5312,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.182.102','2019-08-24 09:52:49'),(5313,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.231','2019-08-24 10:04:41'),(5314,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'219.239.227.231','2019-08-24 10:15:25'),(5315,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'183.15.182.102','2019-08-24 10:30:22'),(5316,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',1,'183.15.182.146','2019-08-24 10:30:28'),(5317,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',5,'219.239.227.231','2019-08-24 10:34:11'),(5318,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'219.239.227.231','2019-08-24 10:34:50'),(5319,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'219.239.227.231','2019-08-24 10:35:52'),(5320,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'219.239.227.231','2019-08-24 10:35:56'),(5321,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',11,'219.239.227.231','2019-08-24 10:37:36'),(5322,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'219.239.227.231','2019-08-24 10:37:44'),(5323,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'219.239.227.231','2019-08-24 10:38:20'),(5324,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'219.239.227.231','2019-08-24 10:39:18'),(5325,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'219.239.227.231','2019-08-24 10:39:28'),(5326,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'219.239.227.231','2019-08-24 10:40:31'),(5327,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',44,'219.239.227.231','2019-08-24 10:41:31'),(5328,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'219.239.227.231','2019-08-24 10:41:36'),(5329,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',1260,'219.239.227.231','2019-08-24 10:42:47'),(5330,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.236.100.13','2019-08-24 10:59:13'),(5331,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'119.236.100.13','2019-08-24 11:27:48'),(5332,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'113.88.97.231','2019-08-24 12:39:55'),(5333,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',6,'113.88.97.231','2019-08-24 13:05:06'),(5334,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',4,'113.88.97.231','2019-08-24 13:07:15'),(5335,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.97.231','2019-08-24 13:16:06'),(5336,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.230.76.40','2019-08-24 13:27:56'),(5337,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.68','2019-08-24 13:29:04'),(5338,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'113.88.97.231','2019-08-24 13:49:17'),(5339,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',4,'113.88.97.231','2019-08-24 14:38:52'),(5340,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',2,'113.88.97.231','2019-08-24 14:41:11'),(5341,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'113.88.97.231','2019-08-24 14:41:27'),(5342,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'113.88.97.231','2019-08-24 14:41:35'),(5343,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',5,'113.88.97.231','2019-08-24 14:41:42'),(5344,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',5,'113.88.97.231','2019-08-24 14:49:52'),(5345,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'113.88.97.231','2019-08-24 14:50:22'),(5346,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',6,'113.88.97.231','2019-08-24 16:01:11'),(5347,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',672,'113.88.97.231','2019-08-24 16:03:07'),(5348,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'113.88.97.231','2019-08-24 16:35:28'),(5349,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',4,'113.88.97.231','2019-08-24 16:36:02'),(5350,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'175.188.46.66','2019-08-24 16:38:52'),(5351,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',12,'113.88.97.231','2019-08-24 16:38:59'),(5352,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'175.188.46.66','2019-08-24 16:41:29'),(5353,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'175.188.46.66','2019-08-24 16:41:46'),(5354,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'175.188.46.66','2019-08-24 16:41:54'),(5355,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'180.163.220.68','2019-08-24 17:28:31'),(5356,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',424,'180.163.220.67','2019-08-24 17:52:07'),(5357,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',9,'42.236.10.125','2019-08-24 17:52:36'),(5358,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'211.161.241.14','2019-08-24 21:14:06'),(5359,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'211.161.241.14','2019-08-24 21:23:35'),(5360,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'211.161.241.14','2019-08-24 21:24:06'),(5361,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'211.161.241.14','2019-08-24 21:24:09'),(5362,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.244.31.36','2019-08-24 23:31:07'),(5363,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'120.244.31.36','2019-08-24 23:31:19'),(5364,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.181.134','2019-08-25 01:12:59'),(5365,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',419,'183.15.181.134','2019-08-25 01:13:08'),(5366,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',4,'183.15.181.134','2019-08-25 01:13:17'),(5367,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',668,'220.243.135.115','2019-08-25 05:35:22'),(5368,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',64,'123.113.9.129','2019-08-25 07:52:32'),(5369,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.233.207.97','2019-08-25 10:53:34'),(5370,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.233.207.97','2019-08-25 10:53:42'),(5371,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.233.207.97','2019-08-25 10:53:52'),(5372,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'116.233.207.97','2019-08-25 11:40:20'),(5373,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.233.207.97','2019-08-25 11:46:05'),(5374,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'116.233.207.97','2019-08-25 11:46:14'),(5375,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'116.233.207.97','2019-08-25 11:46:25'),(5376,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'116.233.207.97','2019-08-25 11:46:44'),(5377,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'116.233.207.97','2019-08-25 11:56:03'),(5378,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'113.116.142.227','2019-08-25 13:07:34'),(5379,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',5,'113.116.142.227','2019-08-25 13:15:46'),(5380,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'113.116.142.227','2019-08-25 13:29:53'),(5381,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',4,'113.116.142.227','2019-08-25 13:30:06'),(5382,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'219.239.227.206','2019-08-25 14:31:43'),(5383,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'219.239.227.206','2019-08-25 14:31:44'),(5384,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3113,'42.236.10.78','2019-08-25 14:32:01'),(5385,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',853,'42.236.10.78','2019-08-25 14:32:06'),(5386,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.196.129.30','2019-08-25 17:55:14'),(5387,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.171.181.16','2019-08-25 19:08:57'),(5388,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.171.181.16','2019-08-25 19:09:27'),(5389,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.30.205.38','2019-08-25 21:15:30'),(5390,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',16,'180.111.95.67','2019-08-25 22:38:51'),(5391,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.30.205.38','2019-08-25 22:49:16'),(5392,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.30.205.38','2019-08-25 22:49:29'),(5393,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.186.39.141','2019-08-25 23:08:51'),(5394,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.186.39.141','2019-08-25 23:09:27'),(5395,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'39.186.39.141','2019-08-25 23:09:46'),(5396,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.186.39.141','2019-08-25 23:11:22'),(5397,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'39.186.39.141','2019-08-25 23:12:26'),(5398,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'39.186.39.141','2019-08-25 23:12:44'),(5399,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'39.186.39.141','2019-08-25 23:12:56'),(5400,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'117.30.205.38','2019-08-25 23:34:35'),(5401,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'117.30.205.38','2019-08-26 00:02:14'),(5402,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'117.30.205.38','2019-08-26 00:02:23'),(5403,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',7,'117.30.205.38','2019-08-26 00:02:28'),(5404,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'117.30.205.38','2019-08-26 00:02:32'),(5405,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'117.30.205.38','2019-08-26 00:02:35'),(5406,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'117.30.205.38','2019-08-26 00:02:38'),(5407,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',15,'117.30.205.38','2019-08-26 00:02:41'),(5408,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'117.30.205.38','2019-08-26 00:02:43'),(5409,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'117.30.205.38','2019-08-26 00:02:46'),(5410,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'117.30.205.38','2019-08-26 00:02:48'),(5411,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',69,'115.171.132.168','2019-08-26 08:12:49'),(5412,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'39.75.129.29','2019-08-26 09:22:55'),(5413,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.128.128.79','2019-08-26 09:29:08'),(5414,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-26 10:17:12'),(5415,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'183.63.51.77','2019-08-26 10:17:21'),(5416,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'183.63.51.77','2019-08-26 10:17:37'),(5417,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',205,'183.63.51.77','2019-08-26 10:17:43'),(5418,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'183.63.51.77','2019-08-26 10:34:41'),(5419,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.150.28.190','2019-08-26 10:53:33'),(5420,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',5,'219.239.227.243','2019-08-26 11:13:48'),(5421,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.239.227.243','2019-08-26 11:14:02'),(5422,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'1.119.40.66','2019-08-26 11:28:20'),(5423,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'1.119.40.66','2019-08-26 11:28:35'),(5424,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'180.157.192.106','2019-08-26 11:34:08'),(5425,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.64.137','2019-08-26 11:55:02'),(5426,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',426,'110.249.202.180','2019-08-26 12:53:27'),(5427,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-08-26 13:40:33'),(5428,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'183.63.51.77','2019-08-26 13:40:41'),(5429,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'115.171.135.237','2019-08-26 14:04:02'),(5430,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'183.63.51.77','2019-08-26 14:07:28'),(5431,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-26 14:07:43'),(5432,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.187.202','2019-08-26 14:46:00'),(5433,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'183.63.187.202','2019-08-26 14:46:34'),(5434,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.187.202','2019-08-26 14:47:27'),(5435,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.187.202','2019-08-26 14:47:30'),(5436,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'183.63.51.77','2019-08-26 14:56:14'),(5437,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'183.63.51.77','2019-08-26 14:56:18'),(5438,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'114.141.190.70','2019-08-26 15:00:43'),(5439,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'119.127.17.65','2019-08-26 15:20:55'),(5440,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.4.226.238','2019-08-26 15:42:50'),(5441,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'218.4.226.238','2019-08-26 15:43:07'),(5442,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'218.4.226.238','2019-08-26 15:43:27'),(5443,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'218.4.226.238','2019-08-26 15:43:47'),(5444,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.4.226.238','2019-08-26 15:44:08'),(5445,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.26','2019-08-26 19:30:43'),(5446,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',410,'42.236.10.117','2019-08-26 22:39:36'),(5447,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'47.103.118.92','2019-08-26 23:14:08'),(5448,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'59.77.42.98','2019-08-26 23:14:26'),(5449,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'59.77.42.98','2019-08-26 23:42:06'),(5450,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'59.77.42.98','2019-08-26 23:57:50'),(5451,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',5,'220.243.136.137','2019-08-27 01:49:01'),(5452,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'119.137.54.204','2019-08-27 09:03:30'),(5453,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.137.54.204','2019-08-27 09:04:52'),(5454,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.8.190.110','2019-08-27 09:13:31'),(5455,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.8.190.110','2019-08-27 09:14:07'),(5456,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',204,'117.131.97.35','2019-08-27 11:14:17'),(5457,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-27 12:51:32'),(5458,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'183.63.51.77','2019-08-27 12:51:51'),(5459,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'183.63.51.77','2019-08-27 12:51:55'),(5460,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'183.63.51.77','2019-08-27 12:52:00'),(5461,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',21,'112.86.199.252','2019-08-27 14:10:09'),(5462,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',13,'223.73.111.99','2019-08-27 15:42:38'),(5463,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-27 16:11:40'),(5464,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'183.63.51.77','2019-08-27 16:14:22'),(5465,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'183.63.51.77','2019-08-27 16:14:27'),(5466,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'183.63.51.77','2019-08-27 16:15:33'),(5467,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.17.2.165','2019-08-27 16:44:03'),(5468,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.17.2.165','2019-08-27 16:44:14'),(5469,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.89.239.120','2019-08-27 16:58:25'),(5470,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'183.63.51.77','2019-08-27 17:13:40'),(5471,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-27 19:03:21'),(5472,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'183.63.51.77','2019-08-27 19:03:27'),(5473,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',2,'183.63.51.77','2019-08-27 19:03:30'),(5474,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'103.40.221.100','2019-08-27 22:41:48'),(5475,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.20.159.23','2019-08-27 23:00:27'),(5476,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.20.159.23','2019-08-27 23:00:27'),(5477,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'223.20.159.23','2019-08-27 23:00:53'),(5478,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',223,'223.20.159.23','2019-08-28 00:27:41'),(5479,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'223.20.159.23','2019-08-28 00:28:05'),(5480,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.20.159.23','2019-08-28 00:28:13'),(5481,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'223.20.159.23','2019-08-28 00:29:12'),(5482,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'223.20.159.23','2019-08-28 00:37:38'),(5483,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'223.20.159.23','2019-08-28 00:39:20'),(5484,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'223.20.159.23','2019-08-28 00:39:33'),(5485,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.20.159.23','2019-08-28 00:44:08'),(5486,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'223.20.159.23','2019-08-28 00:47:05'),(5487,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'103.125.250.141','2019-08-28 01:49:31'),(5488,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'111.225.149.238','2019-08-28 02:46:38'),(5489,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.40.199','2019-08-28 08:14:40'),(5490,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'117.136.40.199','2019-08-28 08:51:55'),(5491,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'14.106.125.85','2019-08-28 09:16:02'),(5492,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'117.136.31.248','2019-08-28 09:43:59'),(5493,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-28 13:33:03'),(5494,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',52,'144.123.43.198','2019-08-28 15:41:50'),(5495,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.128.2.82','2019-08-28 16:01:01'),(5496,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',16,'222.128.2.82','2019-08-28 16:01:05'),(5497,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',2,'222.128.2.82','2019-08-28 16:01:13'),(5498,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.128.2.82','2019-08-28 17:25:17'),(5499,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',3,'42.236.10.75','2019-08-28 18:39:08'),(5500,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.163.220.5','2019-08-28 18:48:43'),(5501,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',3,'183.63.51.77','2019-08-28 19:26:51'),(5502,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'222.209.63.252','2019-08-28 20:37:00'),(5503,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'222.209.63.252','2019-08-28 20:37:14'),(5504,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'222.209.63.252','2019-08-28 20:37:34'),(5505,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'222.209.63.252','2019-08-28 20:37:37'),(5506,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',2,'120.216.210.81','2019-08-28 21:46:56'),(5507,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'120.216.210.81','2019-08-28 21:51:02'),(5508,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'120.216.210.81','2019-08-28 21:51:22'),(5509,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.216.210.81','2019-08-28 21:52:25'),(5510,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'120.216.210.81','2019-08-28 21:54:56'),(5511,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.216.210.81','2019-08-28 21:55:10'),(5512,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'123.147.248.113','2019-08-28 23:02:29'),(5513,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.64.243','2019-08-29 02:56:19'),(5514,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'110.249.201.38','2019-08-29 03:26:10'),(5515,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.230.234.6','2019-08-29 09:39:01'),(5516,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.230.234.6','2019-08-29 09:40:58'),(5517,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.230.234.6','2019-08-29 09:43:21'),(5518,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.230.234.6','2019-08-29 09:53:10'),(5519,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.230.234.6','2019-08-29 11:03:01'),(5520,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'49.77.188.16','2019-08-29 11:15:47'),(5521,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.255.71.181','2019-08-29 11:47:23'),(5522,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',621,'114.255.71.181','2019-08-29 11:47:42'),(5523,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-29 11:48:33'),(5524,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',4,'114.255.71.181','2019-08-29 11:48:49'),(5525,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'66.249.75.111','2019-08-29 12:16:33'),(5526,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-29 14:10:30'),(5527,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'183.63.51.77','2019-08-29 14:10:43'),(5528,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'60.177.205.230','2019-08-29 15:21:31'),(5529,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-29 16:58:10'),(5530,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'101.230.234.6','2019-08-29 17:15:58'),(5531,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',818,'111.225.148.42','2019-08-29 18:22:08'),(5532,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-29 18:56:04'),(5533,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'120.216.210.81','2019-08-29 19:14:54'),(5534,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-29 20:01:28'),(5535,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'183.63.51.77','2019-08-29 20:01:31'),(5536,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'183.63.51.77','2019-08-29 20:01:35'),(5537,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',2,'183.63.51.77','2019-08-29 20:15:02'),(5538,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'117.62.37.164','2019-08-29 20:36:15'),(5539,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'114.249.201.17','2019-08-29 22:37:26'),(5540,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'114.249.201.17','2019-08-29 22:37:58'),(5541,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'114.249.201.17','2019-08-29 22:38:12'),(5542,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'114.249.201.17','2019-08-29 22:38:34'),(5543,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.249.201.17','2019-08-29 23:11:16'),(5544,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.249.201.17','2019-08-29 23:11:47'),(5545,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'114.249.201.17','2019-08-29 23:11:51'),(5546,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',5,'114.249.201.17','2019-08-29 23:12:33'),(5547,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'183.227.182.29','2019-08-30 00:30:59'),(5548,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.227.182.29','2019-08-30 00:31:29'),(5549,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'183.227.182.29','2019-08-30 00:32:33'),(5550,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'42.236.10.78','2019-08-30 03:54:38'),(5551,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'42.236.10.114','2019-08-30 04:11:44'),(5552,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'110.249.201.66','2019-08-30 04:19:36'),(5553,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',612,'42.236.10.93','2019-08-30 05:09:11'),(5554,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',430,'180.163.220.66','2019-08-30 05:47:19'),(5555,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.236.10.75','2019-08-30 06:02:30'),(5556,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.99.32','2019-08-30 07:53:00'),(5557,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.68.237.111','2019-08-30 10:22:05'),(5558,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.68.237.111','2019-08-30 10:22:31'),(5559,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.174.146.43','2019-08-30 10:40:23'),(5560,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'39.174.146.43','2019-08-30 10:41:06'),(5561,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'39.174.146.43','2019-08-30 10:41:21'),(5562,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.195','2019-08-30 11:35:27'),(5563,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.195','2019-08-30 11:35:33'),(5564,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'66.249.66.205','2019-08-30 13:09:23'),(5565,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-08-30 13:11:00'),(5566,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-30 14:09:46'),(5567,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'119.139.198.109','2019-08-30 14:14:03'),(5568,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'218.97.8.243','2019-08-30 14:40:19'),(5569,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.97.8.246','2019-08-30 14:42:25'),(5570,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.97.8.246','2019-08-30 14:43:24'),(5571,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',6,'218.97.8.246','2019-08-30 15:16:32'),(5572,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'101.230.234.6','2019-08-30 15:41:56'),(5573,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'113.68.237.111','2019-08-30 15:50:47'),(5574,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'222.210.59.130','2019-08-30 15:57:28'),(5575,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.97.8.246','2019-08-30 16:42:08'),(5576,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'61.153.7.60','2019-08-30 17:14:19'),(5577,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.153.7.60','2019-08-30 17:14:53'),(5578,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.153.7.60','2019-08-30 17:15:12'),(5579,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'61.153.7.60','2019-08-30 17:15:16'),(5580,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'101.230.234.6','2019-08-30 17:24:06'),(5581,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.64.19.72','2019-08-30 17:25:40'),(5582,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'180.97.118.223','2019-08-30 17:26:18'),(5583,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.151.178.197','2019-08-30 17:26:35'),(5584,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'101.89.29.94','2019-08-30 17:27:16'),(5585,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'183.158.86.249','2019-08-30 17:44:17'),(5586,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.198.163.226','2019-08-30 17:46:56'),(5587,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'180.169.109.129','2019-08-30 17:47:08'),(5588,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'61.129.7.235','2019-08-30 17:53:08'),(5589,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'183.63.51.77','2019-08-30 18:01:14'),(5590,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.158.86.249','2019-08-30 18:01:17'),(5591,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.61.13.140','2019-08-30 18:56:54'),(5592,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-08-30 19:23:40'),(5593,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',24,'222.209.63.252','2019-08-30 20:00:03'),(5594,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'59.77.42.98','2019-08-30 20:43:53'),(5595,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.239.10.139','2019-08-30 21:20:09'),(5596,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'120.239.10.139','2019-08-30 21:52:44'),(5597,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',2,'219.239.227.195','2019-08-30 22:17:02'),(5598,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'61.154.228.107','2019-08-30 22:54:59'),(5599,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'111.225.148.221','2019-08-31 03:08:44'),(5600,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'110.249.201.201','2019-08-31 03:08:49'),(5601,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'124.134.79.90','2019-08-31 09:30:23'),(5602,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.63.39','2019-08-31 10:05:57'),(5603,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.120.209.233','2019-08-31 11:50:08'),(5604,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'171.120.209.233','2019-08-31 11:51:02'),(5605,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.68.65.106','2019-08-31 11:53:20'),(5606,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'222.68.65.106','2019-08-31 11:54:00'),(5607,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'118.117.115.171','2019-08-31 12:19:17'),(5608,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'118.117.115.171','2019-08-31 12:19:48'),(5609,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'118.117.115.171','2019-08-31 12:20:15'),(5610,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'118.117.115.171','2019-08-31 12:25:12'),(5611,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'118.117.115.171','2019-08-31 12:25:23'),(5612,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'223.104.240.175','2019-08-31 12:58:31'),(5613,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',12,'223.104.240.175','2019-08-31 12:58:48'),(5614,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'183.213.60.35','2019-08-31 12:59:14'),(5615,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'183.213.60.35','2019-08-31 13:00:13'),(5616,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',1,'183.213.60.35','2019-08-31 13:01:12'),(5617,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'123.152.142.238','2019-08-31 13:10:50'),(5618,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.152.142.238','2019-08-31 13:11:24'),(5619,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'123.152.142.238','2019-08-31 13:13:34'),(5620,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'123.161.181.117','2019-08-31 13:16:38'),(5621,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'123.161.181.117','2019-08-31 13:16:57'),(5622,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.161.181.117','2019-08-31 13:17:15'),(5623,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'123.161.181.117','2019-08-31 13:17:48'),(5624,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'119.96.107.247','2019-08-31 13:46:23'),(5625,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'36.48.42.161','2019-08-31 13:52:02'),(5626,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.241.196.239','2019-08-31 14:10:22'),(5627,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',7,'180.163.220.4','2019-08-31 14:22:38'),(5628,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.222.28.212','2019-08-31 14:33:04'),(5629,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',1171,'222.222.28.212','2019-08-31 14:33:10'),(5630,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'111.197.78.131','2019-08-31 14:34:14'),(5631,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'113.110.155.238','2019-08-31 14:43:46'),(5632,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.25.154.149','2019-08-31 15:06:40'),(5633,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'222.67.168.167','2019-08-31 15:32:08'),(5634,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'222.67.168.167','2019-08-31 15:33:40'),(5635,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.67.168.167','2019-08-31 15:34:48'),(5636,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'222.67.168.167','2019-08-31 15:35:41'),(5637,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'106.57.252.42','2019-08-31 15:44:54'),(5638,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'106.57.252.42','2019-08-31 15:45:11'),(5639,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'106.57.252.42','2019-08-31 15:48:48'),(5640,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'106.57.252.42','2019-08-31 15:48:56'),(5641,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'106.57.252.42','2019-08-31 15:48:57'),(5642,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'106.57.252.42','2019-08-31 15:49:00'),(5643,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'106.57.252.42','2019-08-31 15:49:03'),(5644,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'106.57.252.42','2019-08-31 15:50:32'),(5645,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.57.252.42','2019-08-31 15:50:37'),(5646,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.57.252.42','2019-08-31 15:50:39'),(5647,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'106.57.252.42','2019-08-31 15:50:56'),(5648,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.65.129.74','2019-08-31 15:51:53'),(5649,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'124.65.129.74','2019-08-31 15:52:07'),(5650,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',2,'124.65.129.74','2019-08-31 15:52:26'),(5651,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'124.65.129.74','2019-08-31 15:53:01'),(5652,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'106.57.252.42','2019-08-31 15:53:39'),(5653,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'106.57.252.42','2019-08-31 15:53:53'),(5654,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.243.82.210','2019-08-31 16:05:13'),(5655,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'119.86.122.97','2019-08-31 16:05:44'),(5656,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',5,'42.243.82.210','2019-08-31 16:06:38'),(5657,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'119.86.122.97','2019-08-31 16:06:46'),(5658,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'222.128.2.82','2019-08-31 16:17:31'),(5659,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'123.185.76.18','2019-08-31 16:17:49'),(5660,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'123.185.76.18','2019-08-31 16:17:51'),(5661,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'123.185.76.18','2019-08-31 16:18:19'),(5662,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.128.2.82','2019-08-31 16:18:20'),(5663,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.212.124.69','2019-08-31 16:34:10'),(5664,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'171.212.124.69','2019-08-31 16:34:18'),(5665,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'171.212.124.69','2019-08-31 16:34:27'),(5666,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'171.212.124.69','2019-08-31 16:34:52'),(5667,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'171.212.124.69','2019-08-31 16:34:58'),(5668,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'171.212.124.69','2019-08-31 16:35:09'),(5669,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.212.124.69','2019-08-31 16:39:32'),(5670,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',3,'61.241.203.131','2019-08-31 16:58:59'),(5671,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.163.220.5','2019-08-31 16:59:10'),(5672,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'61.241.203.131','2019-08-31 16:59:52'),(5673,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'180.163.220.67','2019-08-31 17:00:44'),(5674,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'180.163.220.68','2019-08-31 17:15:21'),(5675,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'42.243.82.210','2019-08-31 17:24:32'),(5676,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'42.243.82.210','2019-08-31 17:24:42'),(5677,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.232.56.5','2019-08-31 17:27:10'),(5678,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'119.164.180.193','2019-08-31 17:28:45'),(5679,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'42.236.10.125','2019-08-31 17:56:38'),(5680,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',219,'42.236.10.93','2019-08-31 18:02:39'),(5681,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',5,'113.69.25.30','2019-08-31 18:19:04'),(5682,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.69.25.30','2019-08-31 18:19:52'),(5683,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',44,'113.69.25.30','2019-08-31 18:20:15'),(5684,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'113.69.25.30','2019-08-31 18:20:21'),(5685,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'113.69.25.30','2019-08-31 18:20:53'),(5686,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'119.103.35.207','2019-08-31 18:35:30'),(5687,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'223.87.35.132','2019-08-31 18:46:56'),(5688,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',4,'223.87.35.132','2019-08-31 18:47:20'),(5689,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'124.200.144.178','2019-08-31 19:17:17'),(5690,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'124.200.144.178','2019-08-31 19:17:54'),(5691,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'42.236.10.117','2019-08-31 19:55:24'),(5692,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'61.241.203.131','2019-08-31 20:36:40'),(5693,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'61.241.203.131','2019-08-31 20:37:15'),(5694,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'61.241.203.131','2019-08-31 20:37:50'),(5695,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'101.64.156.45','2019-08-31 21:00:47'),(5696,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',622,'42.236.10.75','2019-08-31 21:02:35'),(5697,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.92.249.150','2019-08-31 21:04:34'),(5698,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'183.92.249.150','2019-08-31 21:04:51'),(5699,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.92.249.150','2019-08-31 21:05:31'),(5700,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'223.104.185.176','2019-08-31 21:14:13'),(5701,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'101.64.156.45','2019-08-31 21:18:01'),(5702,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'61.241.203.131','2019-08-31 22:24:00'),(5703,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'61.241.203.131','2019-08-31 22:24:07'),(5704,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.241.203.131','2019-08-31 22:24:19'),(5705,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.118.108.76','2019-08-31 22:28:09'),(5706,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'113.91.33.112','2019-08-31 22:29:30'),(5707,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'175.188.46.66','2019-08-31 23:14:11'),(5708,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'175.188.46.66','2019-08-31 23:15:00'),(5709,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.201.145.40','2019-08-31 23:15:32'),(5710,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'111.201.145.40','2019-08-31 23:15:47'),(5711,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'111.201.145.40','2019-08-31 23:16:37'),(5712,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'175.188.46.66','2019-08-31 23:42:12'),(5713,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',2,'175.188.46.66','2019-08-31 23:46:23'),(5714,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',2,'66.249.79.207','2019-08-31 23:46:28'),(5715,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',11,'66.249.79.205','2019-08-31 23:46:53'),(5716,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'66.249.79.205','2019-08-31 23:47:48'),(5717,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'66.249.79.205','2019-08-31 23:59:47'),(5718,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'219.143.129.191','2019-09-01 00:25:19'),(5719,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.143.129.191','2019-09-01 00:25:29'),(5720,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'223.199.146.7','2019-09-01 00:38:45'),(5721,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'223.199.146.7','2019-09-01 00:39:00'),(5722,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',1,'220.243.136.72','2019-09-01 01:48:28'),(5723,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'110.249.201.217','2019-09-01 02:49:43'),(5724,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',199,'111.225.148.22','2019-09-01 06:10:43'),(5725,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'66.249.79.205','2019-09-01 09:17:36'),(5726,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'182.141.50.68','2019-09-01 10:20:00'),(5727,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'123.116.43.194','2019-09-01 11:06:26'),(5728,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'175.6.23.60','2019-09-01 12:58:12'),(5729,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'175.6.6.226','2019-09-01 12:58:22'),(5730,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'175.6.23.60','2019-09-01 12:58:52'),(5731,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'113.88.136.203','2019-09-01 13:41:46'),(5732,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',2,'66.249.79.205','2019-09-01 14:49:51'),(5733,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'66.249.79.205','2019-09-01 14:53:04'),(5734,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'222.35.169.112','2019-09-01 15:07:08'),(5735,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.97.98.166','2019-09-01 15:42:01'),(5736,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'182.97.98.166','2019-09-01 15:42:09'),(5737,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.249.107.193','2019-09-01 16:18:23'),(5738,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'117.136.106.169','2019-09-01 16:35:20'),(5739,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'111.224.252.58','2019-09-01 18:58:48'),(5740,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.224.252.58','2019-09-01 19:00:58'),(5741,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'111.224.252.58','2019-09-01 19:01:25'),(5742,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.224.252.58','2019-09-01 19:02:05'),(5743,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'111.224.252.58','2019-09-01 19:02:16'),(5744,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'111.224.252.58','2019-09-01 19:11:41'),(5745,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'111.224.252.58','2019-09-01 19:13:16'),(5746,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.122.191.187','2019-09-01 20:27:36'),(5747,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',59,'123.132.239.138','2019-09-01 20:28:23'),(5748,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',439,'180.163.220.66','2019-09-01 20:28:34'),(5749,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.132.239.138','2019-09-01 20:28:48'),(5750,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',240,'42.236.10.117','2019-09-01 20:28:58'),(5751,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'106.122.191.187','2019-09-01 20:30:17'),(5752,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',4,'218.254.147.190','2019-09-01 20:42:17'),(5753,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'119.103.35.207','2019-09-01 21:00:29'),(5754,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',5,'66.249.79.205','2019-09-01 23:30:05'),(5755,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'66.249.79.207','2019-09-02 00:14:39'),(5756,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'58.35.22.102','2019-09-02 00:19:21'),(5757,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'66.249.79.209','2019-09-02 00:29:15'),(5758,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',1425,'110.249.201.15','2019-09-02 00:51:47'),(5759,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'111.225.149.230','2019-09-02 05:02:36'),(5760,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',628,'111.225.149.154','2019-09-02 05:02:37'),(5761,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'220.166.220.60','2019-09-02 07:50:29'),(5762,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'180.163.220.68','2019-09-02 07:50:41'),(5763,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'111.27.197.219','2019-09-02 08:11:56'),(5764,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'106.114.23.105','2019-09-02 08:13:50'),(5765,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',14,'111.27.197.219','2019-09-02 08:14:32'),(5766,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'106.114.23.105','2019-09-02 08:16:44'),(5767,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.114.23.105','2019-09-02 08:17:16'),(5768,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.114.23.105','2019-09-02 08:18:05'),(5769,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'223.72.45.81','2019-09-02 08:26:13'),(5770,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.39.82','2019-09-02 08:32:24'),(5771,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'153.37.210.254','2019-09-02 08:47:26'),(5772,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'153.37.210.254','2019-09-02 08:47:54'),(5773,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'153.37.210.254','2019-09-02 08:48:23'),(5774,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.95.51.47','2019-09-02 09:05:17'),(5775,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'101.230.234.6','2019-09-02 09:10:07'),(5776,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'101.230.234.6','2019-09-02 09:10:17'),(5777,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',2,'60.190.99.3','2019-09-02 09:14:58'),(5778,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',2,'58.213.108.147','2019-09-02 09:18:46'),(5779,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'124.93.222.80','2019-09-02 09:32:31'),(5780,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.108.197.170','2019-09-02 09:34:26'),(5781,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.93.222.80','2019-09-02 09:37:30'),(5782,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',6,'124.93.222.80','2019-09-02 09:43:50'),(5783,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'125.69.46.52','2019-09-02 09:55:08'),(5784,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'125.69.46.52','2019-09-02 09:55:53'),(5785,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',6,'113.108.197.170','2019-09-02 09:56:45'),(5786,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',632,'113.108.197.170','2019-09-02 09:57:05'),(5787,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'113.108.197.170','2019-09-02 09:57:33'),(5788,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'125.69.46.52','2019-09-02 09:57:36'),(5789,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'113.108.197.170','2019-09-02 10:00:51'),(5790,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'111.27.197.136','2019-09-02 10:23:47'),(5791,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'114.255.71.181','2019-09-02 10:26:59'),(5792,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.57.79.194','2019-09-02 10:28:11'),(5793,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.57.79.194','2019-09-02 10:28:14'),(5794,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'114.255.71.181','2019-09-02 10:28:41'),(5795,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.57.79.194','2019-09-02 10:28:57'),(5796,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'114.255.71.181','2019-09-02 10:29:33'),(5797,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'218.57.79.194','2019-09-02 10:29:51'),(5798,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.211.88.242','2019-09-02 10:39:49'),(5799,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.255.71.181','2019-09-02 10:59:02'),(5800,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'101.230.234.6','2019-09-02 11:08:31'),(5801,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'180.163.220.66','2019-09-02 11:24:50'),(5802,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.200.220.202','2019-09-02 11:28:14'),(5803,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'111.200.220.202','2019-09-02 11:28:23'),(5804,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.214.84.237','2019-09-02 11:54:12'),(5805,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'103.214.84.237','2019-09-02 11:54:34'),(5806,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'103.214.84.237','2019-09-02 11:54:57'),(5807,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'39.82.36.44','2019-09-02 11:58:55'),(5808,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'58.247.212.141','2019-09-02 12:10:13'),(5809,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'103.214.84.237','2019-09-02 13:03:42'),(5810,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.40.184','2019-09-02 13:40:28'),(5811,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.211.88.242','2019-09-02 14:15:21'),(5812,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.211.88.242','2019-09-02 14:16:59'),(5813,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'110.52.194.22','2019-09-02 14:20:16'),(5814,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'110.52.194.22','2019-09-02 14:28:49'),(5815,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'114.255.239.101','2019-09-02 14:30:51'),(5816,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.255.239.101','2019-09-02 14:31:32'),(5817,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'117.186.242.42','2019-09-02 14:31:43'),(5818,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'114.255.239.101','2019-09-02 14:31:54'),(5819,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'117.186.242.42','2019-09-02 14:32:27'),(5820,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.186.242.42','2019-09-02 14:32:48'),(5821,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',2,'114.255.239.101','2019-09-02 14:35:36'),(5822,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'114.255.239.101','2019-09-02 14:36:45'),(5823,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',3,'110.52.194.22','2019-09-02 14:36:51'),(5824,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'114.255.239.101','2019-09-02 14:39:15'),(5825,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'114.255.239.101','2019-09-02 14:41:23'),(5826,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.89.59.159','2019-09-02 14:54:20'),(5827,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.197.100.84','2019-09-02 14:58:26'),(5828,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.197.100.84','2019-09-02 14:58:46'),(5829,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.197.100.84','2019-09-02 14:58:47'),(5830,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.197.100.84','2019-09-02 14:58:48'),(5831,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.197.100.84','2019-09-02 14:58:49'),(5832,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.197.100.84','2019-09-02 14:58:50'),(5833,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.197.100.84','2019-09-02 14:58:51'),(5834,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.197.100.84','2019-09-02 14:58:51'),(5835,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'202.197.100.84','2019-09-02 14:58:52'),(5836,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.197.100.84','2019-09-02 14:58:52'),(5837,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.197.100.84','2019-09-02 14:58:53'),(5838,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.197.100.84','2019-09-02 14:58:53'),(5839,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.197.100.84','2019-09-02 14:58:53'),(5840,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.197.100.84','2019-09-02 14:58:53'),(5841,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.197.100.84','2019-09-02 14:58:54'),(5842,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.40.184','2019-09-02 15:49:27'),(5843,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'117.136.40.184','2019-09-02 15:50:57'),(5844,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.254.252.188','2019-09-02 15:55:17'),(5845,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.144.130.35','2019-09-02 16:24:01'),(5846,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.144.130.35','2019-09-02 16:24:31'),(5847,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.144.130.35','2019-09-02 16:24:50'),(5848,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.144.130.35','2019-09-02 16:26:04'),(5849,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.144.130.35','2019-09-02 16:28:19'),(5850,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'58.213.215.98','2019-09-02 16:44:54'),(5851,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.247.117.114','2019-09-02 16:51:30'),(5852,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.247.117.114','2019-09-02 16:52:57'),(5853,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'58.247.117.114','2019-09-02 16:53:10'),(5854,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.247.117.114','2019-09-02 16:53:13'),(5855,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-02 17:17:21'),(5856,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'183.63.51.77','2019-09-02 17:23:07'),(5857,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'183.63.51.77','2019-09-02 17:23:11'),(5858,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-02 17:23:18'),(5859,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.60.132.111','2019-09-02 17:45:51'),(5860,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.71.216.71','2019-09-02 18:04:54'),(5861,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'125.42.146.216','2019-09-02 18:15:37'),(5862,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'124.126.144.69','2019-09-02 18:23:38'),(5863,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'124.126.144.69','2019-09-02 18:35:01'),(5864,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.148.243.166','2019-09-02 19:12:20'),(5865,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'124.126.144.69','2019-09-02 19:31:02'),(5866,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'124.126.144.69','2019-09-02 19:34:38'),(5867,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.126.144.69','2019-09-02 19:58:36'),(5868,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',491,'114.251.216.157','2019-09-02 21:32:48'),(5869,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',3,'180.163.220.5','2019-09-02 21:32:53'),(5870,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.251.216.157','2019-09-02 21:33:21'),(5871,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',217,'180.163.220.4','2019-09-02 21:52:12'),(5872,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',833,'180.163.220.66','2019-09-02 22:00:22'),(5873,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'117.175.131.196','2019-09-02 22:09:11'),(5874,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'117.175.131.196','2019-09-02 22:09:40'),(5875,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.175.131.196','2019-09-02 22:10:53'),(5876,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',1,'117.175.131.196','2019-09-02 22:15:48'),(5877,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'117.175.131.196','2019-09-02 22:16:59'),(5878,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.110.199.136','2019-09-02 22:26:08'),(5879,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'42.236.10.78','2019-09-02 22:42:33'),(5880,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.163.220.67','2019-09-02 22:46:14'),(5881,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',90,'42.236.10.114','2019-09-02 23:19:39'),(5882,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',24,'113.116.141.102','2019-09-02 23:21:35'),(5883,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',249,'42.236.10.78','2019-09-02 23:22:04'),(5884,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',37,'113.116.141.102','2019-09-02 23:22:52'),(5885,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',37,'113.116.141.102','2019-09-02 23:23:07'),(5886,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',17,'113.116.141.102','2019-09-02 23:23:28'),(5887,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',19,'113.116.141.102','2019-09-02 23:23:40'),(5888,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',29,'113.116.141.102','2019-09-02 23:23:44'),(5889,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',9,'113.116.141.102','2019-09-02 23:24:25'),(5890,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',25,'113.116.141.102','2019-09-02 23:24:33'),(5891,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',19,'42.236.10.84','2019-09-02 23:49:17'),(5892,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',14,'58.35.22.102','2019-09-03 00:06:36'),(5893,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',9,'66.249.79.209','2019-09-03 04:03:16'),(5894,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',12,'66.249.79.209','2019-09-03 04:18:12'),(5895,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',33,'111.225.149.17','2019-09-03 05:34:30'),(5896,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',9,'110.249.202.142','2019-09-03 05:34:40'),(5897,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',22,'113.116.141.102','2019-09-03 07:56:54'),(5898,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',880,'113.116.141.95','2019-09-03 07:56:58'),(5899,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'113.116.141.102','2019-09-03 07:58:08'),(5900,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',87,'180.97.201.24','2019-09-03 08:40:02'),(5901,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'125.42.146.216','2019-09-03 08:50:14'),(5902,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',4,'101.230.237.228','2019-09-03 08:59:23'),(5903,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'115.238.91.157','2019-09-03 09:12:43'),(5904,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',8,'115.238.91.157','2019-09-03 09:15:00'),(5905,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'115.238.91.157','2019-09-03 09:15:34'),(5906,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'115.238.91.157','2019-09-03 09:20:30'),(5907,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'115.238.91.157','2019-09-03 09:20:40'),(5908,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'58.246.145.226','2019-09-03 09:35:35'),(5909,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',12,'115.238.91.157','2019-09-03 09:35:53'),(5910,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',19,'58.246.145.226','2019-09-03 09:36:18'),(5911,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',24,'58.246.145.226','2019-09-03 09:36:50'),(5912,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',38,'183.63.51.77','2019-09-03 09:43:53'),(5913,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',8,'183.63.51.77','2019-09-03 09:54:49'),(5914,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',65,'115.238.91.157','2019-09-03 09:59:26'),(5915,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',32,'59.173.217.30','2019-09-03 10:05:07'),(5916,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',10,'183.63.51.77','2019-09-03 10:34:55'),(5917,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'183.63.51.77','2019-09-03 10:35:07'),(5918,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',20,'183.63.51.77','2019-09-03 10:35:13'),(5919,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-03 11:04:42'),(5920,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',5,'183.63.51.77','2019-09-03 11:08:51'),(5921,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',7,'113.87.163.170','2019-09-03 11:47:50'),(5922,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.247.245.82','2019-09-03 11:59:20'),(5923,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'1.80.199.17','2019-09-03 12:04:06'),(5924,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'1.80.199.17','2019-09-03 12:04:09'),(5925,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'124.126.144.69','2019-09-03 12:23:57'),(5926,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.236.10.117','2019-09-03 13:05:00'),(5927,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'66.249.79.205','2019-09-03 13:33:20'),(5928,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.255.71.181','2019-09-03 14:52:33'),(5929,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.253.193.6','2019-09-03 15:02:47'),(5930,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'210.35.68.10','2019-09-03 15:03:11'),(5931,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'210.35.68.10','2019-09-03 15:04:08'),(5932,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.253.193.6','2019-09-03 15:04:56'),(5933,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.253.193.6','2019-09-03 15:04:59'),(5934,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',37,'183.63.51.77','2019-09-03 15:26:50'),(5935,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',28,'60.191.111.69','2019-09-03 16:01:23'),(5936,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'36.152.32.170','2019-09-03 16:13:04'),(5937,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'36.152.32.170','2019-09-03 16:13:11'),(5938,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',30,'219.136.75.22','2019-09-03 16:21:34'),(5939,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',14,'219.136.75.22','2019-09-03 16:22:47'),(5940,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'218.106.156.166','2019-09-03 16:29:46'),(5941,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',38,'218.106.156.166','2019-09-03 16:30:33'),(5942,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'219.136.75.22','2019-09-03 16:45:17'),(5943,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',22,'219.136.75.22','2019-09-03 16:45:22'),(5944,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'219.136.75.22','2019-09-03 16:46:03'),(5945,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'219.136.75.22','2019-09-03 16:46:21'),(5946,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',4,'219.136.75.22','2019-09-03 16:48:20'),(5947,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-03 16:52:47'),(5948,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',5,'183.63.51.77','2019-09-03 16:52:55'),(5949,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',16,'183.63.51.77','2019-09-03 16:56:42'),(5950,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'125.42.146.216','2019-09-03 16:58:47'),(5951,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',16,'125.42.146.216','2019-09-03 16:58:52'),(5952,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',45,'219.136.75.22','2019-09-03 17:00:06'),(5953,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.42.146.216','2019-09-03 17:02:58'),(5954,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',14,'221.181.101.37','2019-09-03 17:05:13'),(5955,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'221.181.101.37','2019-09-03 17:08:29'),(5956,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',23,'125.42.146.216','2019-09-03 17:08:38'),(5957,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'125.42.146.216','2019-09-03 17:10:44'),(5958,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.42.146.216','2019-09-03 17:17:03'),(5959,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',6,'183.63.51.77','2019-09-03 17:26:21'),(5960,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',9,'180.169.109.129','2019-09-03 17:30:24'),(5961,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'219.136.75.22','2019-09-03 17:33:08'),(5962,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',3,'219.136.75.22','2019-09-03 17:33:24'),(5963,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.81.140.20','2019-09-03 17:53:24'),(5964,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',44,'112.96.133.80','2019-09-03 19:00:45'),(5965,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'112.96.133.80','2019-09-03 19:01:56'),(5966,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'112.17.247.47','2019-09-03 19:21:09'),(5967,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',24,'123.139.82.178','2019-09-03 20:48:40'),(5968,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',6,'123.139.82.178','2019-09-03 20:51:29'),(5969,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'180.163.220.67','2019-09-03 20:51:56'),(5970,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',11,'210.35.68.10','2019-09-03 21:05:02'),(5971,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'210.35.68.10','2019-09-03 21:05:34'),(5972,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.12.104.44','2019-09-03 21:08:40'),(5973,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'119.121.25.121','2019-09-03 21:13:00'),(5974,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'117.136.39.80','2019-09-03 21:48:58'),(5975,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'42.236.10.125','2019-09-04 00:51:56'),(5976,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.5','2019-09-04 00:53:07'),(5977,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'110.249.201.7','2019-09-04 04:49:21'),(5978,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',4,'110.249.201.200','2019-09-04 04:49:26'),(5979,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',6,'203.208.60.14','2019-09-04 07:11:45'),(5980,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'61.158.152.239','2019-09-04 08:17:50'),(5981,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.12.167','2019-09-04 08:27:45'),(5982,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',24,'117.136.12.167','2019-09-04 08:27:54'),(5983,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'117.136.12.167','2019-09-04 08:27:58'),(5984,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.158.152.239','2019-09-04 09:27:39'),(5985,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.158.152.239','2019-09-04 09:27:47'),(5986,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.158.152.239','2019-09-04 09:27:57'),(5987,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.158.152.239','2019-09-04 09:28:15'),(5988,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.158.152.239','2019-09-04 09:28:18'),(5989,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'61.158.152.239','2019-09-04 09:28:20'),(5990,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.158.152.239','2019-09-04 09:28:22'),(5991,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.158.152.239','2019-09-04 09:28:25'),(5992,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.158.152.239','2019-09-04 09:28:26'),(5993,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.158.152.239','2019-09-04 09:28:29'),(5994,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-09-04 10:16:30'),(5995,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'182.106.212.136','2019-09-04 10:35:09'),(5996,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.106.212.136','2019-09-04 10:35:46'),(5997,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'117.136.40.222','2019-09-04 10:49:00'),(5998,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'58.247.117.114','2019-09-04 10:52:51'),(5999,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'58.247.117.114','2019-09-04 10:53:02'),(6000,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',4,'58.247.117.114','2019-09-04 10:53:08'),(6001,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'58.247.117.114','2019-09-04 10:53:18'),(6002,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'58.247.117.114','2019-09-04 10:53:42'),(6003,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.247.117.114','2019-09-04 10:58:20'),(6004,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.247.117.114','2019-09-04 11:04:30'),(6005,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'58.247.117.114','2019-09-04 11:04:39'),(6006,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.247.117.114','2019-09-04 11:04:54'),(6007,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.247.117.114','2019-09-04 11:04:57'),(6008,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'58.247.117.114','2019-09-04 11:05:09'),(6009,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',1,'58.247.117.114','2019-09-04 11:12:40'),(6010,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.54.105.56','2019-09-04 11:32:17'),(6011,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'59.173.170.136','2019-09-04 11:38:49'),(6012,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'150.203.66.254','2019-09-04 12:40:47'),(6013,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'150.203.66.254','2019-09-04 12:41:07'),(6014,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'150.203.66.254','2019-09-04 12:41:24'),(6015,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'183.63.51.77','2019-09-04 12:56:42'),(6016,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'117.159.38.149','2019-09-04 13:36:34'),(6017,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.159.38.149','2019-09-04 13:39:25'),(6018,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'60.26.180.58','2019-09-04 14:30:27'),(6019,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'183.63.51.77','2019-09-04 14:53:52'),(6020,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'58.247.117.114','2019-09-04 15:24:49'),(6021,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',4,'58.247.117.114','2019-09-04 15:25:53'),(6022,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'58.247.117.114','2019-09-04 16:42:29'),(6023,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'58.247.117.114','2019-09-04 16:42:58'),(6024,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'58.40.26.246','2019-09-04 17:16:02'),(6025,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'58.40.26.246','2019-09-04 17:18:40'),(6026,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-04 17:26:25'),(6027,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',4,'183.63.51.77','2019-09-04 17:29:48'),(6028,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'112.224.2.162','2019-09-04 18:15:52'),(6029,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.62.93.172','2019-09-04 18:31:49'),(6030,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.213.186.250','2019-09-04 19:19:37'),(6031,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'60.213.186.250','2019-09-04 19:21:13'),(6032,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.65.48.183','2019-09-04 19:22:10'),(6033,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.65.48.183','2019-09-04 19:22:37'),(6034,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'112.224.2.162','2019-09-04 19:23:28'),(6035,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.79.109','2019-09-04 19:34:43'),(6036,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',14,'119.129.116.187','2019-09-04 21:08:46'),(6037,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',70,'113.119.8.84','2019-09-04 21:09:07'),(6038,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'119.129.116.183','2019-09-04 21:09:20'),(6039,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',4,'119.129.119.9','2019-09-04 21:09:58'),(6040,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'113.119.8.67','2019-09-04 21:10:08'),(6041,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'119.129.116.183','2019-09-04 21:11:13'),(6042,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',14,'119.129.116.187','2019-09-04 21:13:06'),(6043,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'119.129.116.183','2019-09-04 21:13:44'),(6044,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'61.140.160.174','2019-09-04 21:13:55'),(6045,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'218.76.65.99','2019-09-04 21:28:49'),(6046,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'125.42.146.216','2019-09-04 21:58:14'),(6047,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',9,'61.158.152.239','2019-09-04 22:17:11'),(6048,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'61.158.152.239','2019-09-04 22:17:37'),(6049,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.139.42','2019-09-04 22:38:03'),(6050,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',24,'125.42.146.216','2019-09-04 22:50:22'),(6051,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'49.5.193.136','2019-09-04 23:11:36'),(6052,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.5.193.136','2019-09-04 23:12:02'),(6053,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.198.172.34','2019-09-05 02:53:52'),(6054,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'223.198.172.34','2019-09-05 02:54:34'),(6055,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.198.172.34','2019-09-05 02:55:11'),(6056,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2060,'110.249.202.8','2019-09-05 03:54:25'),(6057,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',218,'111.225.149.225','2019-09-05 03:54:30'),(6058,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'185.176.78.178','2019-09-05 05:26:54'),(6059,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',4,'185.176.78.178','2019-09-05 05:27:20'),(6060,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'185.176.78.178','2019-09-05 05:45:35'),(6061,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'27.151.123.121','2019-09-05 08:29:51'),(6062,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-05 09:09:39'),(6063,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'58.246.184.98','2019-09-05 09:30:08'),(6064,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.246.184.98','2019-09-05 09:30:28'),(6065,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.238.91.157','2019-09-05 10:36:03'),(6066,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.238.91.157','2019-09-05 10:37:27'),(6067,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.23.118.114','2019-09-05 10:42:57'),(6068,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.238.91.157','2019-09-05 10:48:00'),(6069,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',5,'115.238.91.157','2019-09-05 10:49:53'),(6070,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'222.76.49.153','2019-09-05 10:54:35'),(6071,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.76.49.153','2019-09-05 10:56:20'),(6072,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',6,'27.151.123.121','2019-09-05 10:59:58'),(6073,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'222.76.49.153','2019-09-05 11:15:52'),(6074,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.238.91.157','2019-09-05 11:18:36'),(6075,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',4,'59.173.168.107','2019-09-05 11:58:28'),(6076,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'222.76.49.153','2019-09-05 12:02:06'),(6077,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',4,'222.76.49.153','2019-09-05 12:02:13'),(6078,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'85.119.150.191','2019-09-05 12:02:26'),(6079,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'183.63.51.77','2019-09-05 12:26:36'),(6080,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',6,'183.63.51.77','2019-09-05 12:26:38'),(6081,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',6,'183.63.51.77','2019-09-05 12:31:01'),(6082,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',7,'183.63.51.77','2019-09-05 12:46:37'),(6083,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',5,'183.63.51.77','2019-09-05 12:46:52'),(6084,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'183.63.51.77','2019-09-05 12:47:03'),(6085,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',222,'117.136.79.105','2019-09-05 12:52:56'),(6086,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',694,'117.136.79.105','2019-09-05 12:53:19'),(6087,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',838,'125.42.146.216','2019-09-05 13:03:50'),(6088,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'2a02:ab88:82:6400:5ce2:405b:66ae:c5d7','2019-09-05 13:53:35'),(6089,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-05 14:09:42'),(6090,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',5,'183.63.51.77','2019-09-05 14:09:54'),(6091,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'183.63.51.77','2019-09-05 14:09:56'),(6092,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',36,'163.177.136.33','2019-09-05 14:19:27'),(6093,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'115.238.91.157','2019-09-05 15:04:26'),(6094,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.238.91.157','2019-09-05 15:20:58'),(6095,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'115.238.91.157','2019-09-05 15:47:30'),(6096,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'115.238.91.157','2019-09-05 15:47:46'),(6097,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'115.238.91.157','2019-09-05 15:51:34'),(6098,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'115.238.91.157','2019-09-05 15:51:41'),(6099,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',5,'183.63.51.77','2019-09-05 17:09:01'),(6100,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'59.173.168.107','2019-09-05 17:23:30'),(6101,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'140.206.150.122','2019-09-05 17:28:22'),(6102,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'140.206.150.122','2019-09-05 17:28:33'),(6103,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'220.249.111.90','2019-09-05 17:37:13'),(6104,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'220.249.111.90','2019-09-05 17:40:08'),(6105,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'220.249.111.90','2019-09-05 17:40:15'),(6106,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-09-05 17:57:52'),(6107,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'140.206.150.122','2019-09-05 18:21:08'),(6108,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'140.206.150.122','2019-09-05 18:23:21'),(6109,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',9,'140.206.150.122','2019-09-05 18:23:58'),(6110,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'159.226.5.169','2019-09-05 19:39:27'),(6111,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'113.88.139.39','2019-09-05 21:54:52'),(6112,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'113.88.139.39','2019-09-05 21:55:16'),(6113,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'113.88.139.39','2019-09-05 22:08:29'),(6114,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',12,'113.88.139.39','2019-09-05 22:09:03'),(6115,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'113.88.139.39','2019-09-05 22:09:24'),(6116,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'113.88.139.39','2019-09-05 22:09:41'),(6117,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',52,'113.88.139.39','2019-09-05 22:10:16'),(6118,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',10,'113.88.139.39','2019-09-05 22:10:32'),(6119,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'113.88.139.39','2019-09-05 22:11:02'),(6120,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'113.88.139.39','2019-09-05 22:11:49'),(6121,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'113.88.139.39','2019-09-05 22:12:51'),(6122,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',8,'116.226.19.187','2019-09-05 23:10:23'),(6123,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',225,'110.249.201.105','2019-09-06 06:49:12'),(6124,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',4,'111.225.149.7','2019-09-06 06:49:15'),(6125,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.162.125.9','2019-09-06 08:57:34'),(6126,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'222.92.60.178','2019-09-06 09:32:34'),(6127,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'222.92.60.178','2019-09-06 09:32:54'),(6128,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'222.92.60.178','2019-09-06 09:33:30'),(6129,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'114.141.190.70','2019-09-06 11:10:11'),(6130,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'125.71.0.49','2019-09-06 11:28:39'),(6131,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.71.0.49','2019-09-06 11:31:43'),(6132,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.71.0.49','2019-09-06 11:33:01'),(6133,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'125.71.0.49','2019-09-06 11:33:57'),(6134,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'117.136.40.211','2019-09-06 12:28:50'),(6135,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'110.87.47.44','2019-09-06 13:08:04'),(6136,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',35,'110.87.47.44','2019-09-06 13:09:03'),(6137,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'110.87.47.44','2019-09-06 13:09:35'),(6138,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'110.87.47.44','2019-09-06 13:10:37'),(6139,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',229,'101.4.0.2','2019-09-06 14:25:21'),(6140,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'101.4.0.2','2019-09-06 14:26:09'),(6141,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',101,'101.4.0.2','2019-09-06 14:26:45'),(6142,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.131.242.207','2019-09-06 15:11:20'),(6143,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',23,'221.205.154.32','2019-09-06 15:30:54'),(6144,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'49.7.59.122','2019-09-06 16:02:32'),(6145,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'14.23.86.178','2019-09-06 17:29:36'),(6146,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'14.23.86.178','2019-09-06 17:31:10'),(6147,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.3','2019-09-06 18:29:54'),(6148,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.3','2019-09-06 18:31:14'),(6149,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-06 20:37:49'),(6150,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'223.104.63.192','2019-09-06 21:31:28'),(6151,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'223.104.63.192','2019-09-06 21:32:13'),(6152,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'223.104.63.192','2019-09-06 21:32:16'),(6153,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.192','2019-09-06 21:32:20'),(6154,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.198.6.194','2019-09-06 21:33:31'),(6155,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'203.208.60.70','2019-09-06 22:40:28'),(6156,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',3,'110.249.201.34','2019-09-07 00:40:23'),(6157,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'120.244.31.235','2019-09-07 01:06:42'),(6158,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',2,'111.225.148.147','2019-09-07 01:08:12'),(6159,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'42.236.10.114','2019-09-07 02:33:51'),(6160,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'183.63.51.77','2019-09-07 09:50:08'),(6161,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'175.188.39.20','2019-09-07 11:52:00'),(6162,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'175.188.39.20','2019-09-07 11:52:31'),(6163,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'120.244.60.243','2019-09-07 12:15:13'),(6164,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'120.244.60.243','2019-09-07 12:15:38'),(6165,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'120.244.60.243','2019-09-07 12:15:43'),(6166,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.244.60.243','2019-09-07 12:19:09'),(6167,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'182.100.18.43','2019-09-07 12:20:09'),(6168,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',4,'172.104.126.211','2019-09-07 12:53:42'),(6169,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'218.81.19.165','2019-09-07 13:23:45'),(6170,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.67','2019-09-07 14:21:18'),(6171,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.198.6.194','2019-09-07 18:32:19'),(6172,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',5,'1.198.6.194','2019-09-07 18:36:13'),(6173,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'103.192.225.142','2019-09-07 23:34:29'),(6174,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',5,'49.95.221.225','2019-09-08 02:29:47'),(6175,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'49.95.221.225','2019-09-08 02:29:54'),(6176,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',3,'49.95.221.225','2019-09-08 02:30:06'),(6177,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'49.95.221.225','2019-09-08 02:30:52'),(6178,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',6,'49.95.221.225','2019-09-08 02:31:03'),(6179,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','21',2,'111.225.149.52','2019-09-08 02:38:26'),(6180,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',208,'111.225.149.235','2019-09-08 03:02:50'),(6181,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'111.225.148.232','2019-09-08 03:20:38'),(6182,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'203.208.60.59','2019-09-08 04:01:51'),(6183,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'203.208.60.43','2019-09-08 04:31:51'),(6184,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'103.192.225.142','2019-09-08 09:21:19'),(6185,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'103.192.225.142','2019-09-08 09:58:40'),(6186,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'103.192.225.142','2019-09-08 09:58:59'),(6187,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',30,'103.192.225.142','2019-09-08 10:00:07'),(6188,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'117.23.83.123','2019-09-08 21:03:50'),(6189,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',14,'183.36.228.142','2019-09-08 22:21:47'),(6190,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'58.59.210.93','2019-09-08 23:01:29'),(6191,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'58.59.210.93','2019-09-08 23:01:33'),(6192,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'58.59.210.93','2019-09-08 23:01:34'),(6193,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',9,'58.59.210.93','2019-09-08 23:01:34'),(6194,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'58.59.210.93','2019-09-08 23:01:35'),(6195,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'58.59.210.93','2019-09-08 23:01:35'),(6196,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'58.59.210.93','2019-09-08 23:01:35'),(6197,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',2,'58.59.210.93','2019-09-08 23:01:36'),(6198,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',220,'58.59.210.93','2019-09-08 23:01:36'),(6199,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',252,'58.59.210.93','2019-09-08 23:01:37'),(6200,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',268,'58.59.210.93','2019-09-08 23:01:37'),(6201,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'58.59.210.93','2019-09-08 23:01:38'),(6202,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'58.59.210.93','2019-09-08 23:01:39'),(6203,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'58.59.210.93','2019-09-08 23:01:39'),(6204,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',41,'58.59.210.93','2019-09-08 23:01:44'),(6205,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.139.248.63','2019-09-08 23:38:24'),(6206,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'117.139.248.63','2019-09-08 23:38:44'),(6207,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',21,'117.139.248.63','2019-09-08 23:39:47'),(6208,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',1434,'220.243.135.182','2019-09-09 01:16:25'),(6209,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'45.32.12.111','2019-09-09 09:07:33'),(6210,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'49.5.11.34','2019-09-09 10:46:10'),(6211,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',2,'113.116.245.212','2019-09-09 10:48:22'),(6212,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.91.98.176','2019-09-09 13:29:25'),(6213,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'114.91.98.176','2019-09-09 13:33:21'),(6214,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'183.63.51.77','2019-09-09 14:04:27'),(6215,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'113.116.245.212','2019-09-09 14:10:02'),(6216,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.245.212','2019-09-09 14:46:02'),(6217,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.116.245.212','2019-09-09 14:46:07'),(6218,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'183.14.133.129','2019-09-09 15:14:13'),(6219,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'183.14.133.129','2019-09-09 15:14:48'),(6220,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.116.245.212','2019-09-09 15:19:48'),(6221,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.91.98.176','2019-09-09 15:27:47'),(6222,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'114.91.98.176','2019-09-09 15:28:24'),(6223,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'114.91.98.176','2019-09-09 15:28:46'),(6224,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',6,'221.0.200.194','2019-09-09 15:31:59'),(6225,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.0.200.194','2019-09-09 15:32:24'),(6226,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'59.64.129.116','2019-09-09 16:27:14'),(6227,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'59.64.129.116','2019-09-09 16:27:22'),(6228,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'59.64.129.116','2019-09-09 16:27:27'),(6229,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'183.223.216.129','2019-09-09 17:25:49'),(6230,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',23,'183.223.216.129','2019-09-09 17:46:47'),(6231,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'110.249.202.20','2019-09-10 04:41:51'),(6232,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'117.136.12.165','2019-09-10 08:42:03'),(6233,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'101.232.231.127','2019-09-10 08:57:52'),(6234,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'101.232.231.127','2019-09-10 08:58:19'),(6235,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'101.232.231.127','2019-09-10 08:58:29'),(6236,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',14,'124.207.190.10','2019-09-10 10:00:59'),(6237,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',44,'124.207.190.10','2019-09-10 10:01:44'),(6238,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'183.63.51.77','2019-09-10 10:39:47'),(6239,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'183.63.51.77','2019-09-10 10:39:55'),(6240,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',25,'183.63.51.77','2019-09-10 10:39:59'),(6241,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',5,'124.207.190.10','2019-09-10 11:54:30'),(6242,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'219.156.92.192','2019-09-10 13:04:29'),(6243,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.156.92.192','2019-09-10 13:04:43'),(6244,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',5,'110.249.202.171','2019-09-10 13:34:57'),(6245,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'117.186.242.42','2019-09-10 14:07:44'),(6246,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'172.58.23.204','2019-09-10 14:18:15'),(6247,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.148.123.214','2019-09-10 14:51:12'),(6248,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'219.131.241.162','2019-09-10 14:54:15'),(6249,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.131.241.162','2019-09-10 14:55:21'),(6250,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'219.131.241.162','2019-09-10 14:55:49'),(6251,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'219.131.241.162','2019-09-10 14:59:06'),(6252,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'219.131.241.162','2019-09-10 15:00:22'),(6253,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.137.55.152','2019-09-10 15:24:31'),(6254,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',11,'119.137.55.152','2019-09-10 15:24:48'),(6255,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'119.137.55.152','2019-09-10 15:25:11'),(6256,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',9,'119.137.55.152','2019-09-10 15:26:02'),(6257,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'119.137.55.152','2019-09-10 15:27:48'),(6258,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',9,'119.137.55.152','2019-09-10 15:28:05'),(6259,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'119.137.55.152','2019-09-10 15:28:14'),(6260,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'119.137.55.152','2019-09-10 15:29:11'),(6261,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'119.137.55.152','2019-09-10 15:31:23'),(6262,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'119.137.55.152','2019-09-10 15:32:08'),(6263,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',6,'180.153.219.15','2019-09-10 15:53:56'),(6264,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',3,'101.89.29.97','2019-09-10 15:55:23'),(6265,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',4,'183.12.236.27','2019-09-10 15:58:51'),(6266,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.12.236.27','2019-09-10 15:59:36'),(6267,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.239.133.170','2019-09-10 16:05:40'),(6268,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.82.250.52','2019-09-10 16:29:11'),(6269,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'180.153.219.15','2019-09-10 17:11:54'),(6270,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'61.151.207.205','2019-09-10 17:13:23'),(6271,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'183.63.51.77','2019-09-10 17:19:53'),(6272,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'183.63.51.77','2019-09-10 17:19:56'),(6273,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-10 17:20:00'),(6274,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'42.92.156.171','2019-09-10 19:27:02'),(6275,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.17.240.208','2019-09-10 20:17:13'),(6276,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.17.240.208','2019-09-10 20:58:02'),(6277,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'218.81.19.165','2019-09-10 22:53:12'),(6278,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'42.236.10.117','2019-09-11 02:45:08'),(6279,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'59.173.29.81','2019-09-11 09:19:33'),(6280,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'59.173.29.81','2019-09-11 09:20:04'),(6281,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.64.18.239','2019-09-11 10:19:01'),(6282,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',4,'218.76.51.18','2019-09-11 11:46:30'),(6283,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'124.127.109.66','2019-09-11 14:24:56'),(6284,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'124.127.109.66','2019-09-11 14:25:14'),(6285,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.255.71.181','2019-09-11 14:56:01'),(6286,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'114.255.71.181','2019-09-11 14:56:37'),(6287,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'203.208.60.85','2019-09-11 15:53:47'),(6288,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'171.209.127.207','2019-09-11 16:15:30'),(6289,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',5,'1.80.232.228','2019-09-11 16:53:05'),(6290,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.80.232.228','2019-09-11 16:54:01'),(6291,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.80.232.228','2019-09-11 17:08:35'),(6292,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'203.208.60.88','2019-09-11 19:44:50'),(6293,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'203.208.60.97','2019-09-11 20:56:19'),(6294,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',813,'110.249.202.161','2019-09-12 05:48:35'),(6295,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'123.127.54.36','2019-09-12 09:12:26'),(6296,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'1.80.234.135','2019-09-12 09:14:28'),(6297,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.127.54.36','2019-09-12 09:14:50'),(6298,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.12.59.211','2019-09-12 11:01:49'),(6299,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'221.12.104.44','2019-09-12 13:09:20'),(6300,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'114.251.186.21','2019-09-12 13:15:45'),(6301,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.251.186.21','2019-09-12 13:15:54'),(6302,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'122.234.105.64','2019-09-12 13:39:59'),(6303,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'111.160.205.10','2019-09-12 14:42:18'),(6304,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',205,'180.167.219.100','2019-09-12 14:49:02'),(6305,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-12 14:49:04'),(6306,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',20,'180.167.219.100','2019-09-12 14:49:18'),(6307,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'59.173.168.107','2019-09-12 14:51:28'),(6308,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'180.167.219.100','2019-09-12 14:53:20'),(6309,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'1.119.163.219','2019-09-12 14:53:34'),(6310,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.160.205.10','2019-09-12 14:53:53'),(6311,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.160.205.10','2019-09-12 14:54:44'),(6312,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'111.160.205.10','2019-09-12 15:24:10'),(6313,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.160.205.10','2019-09-12 15:28:04'),(6314,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'111.160.205.10','2019-09-12 15:28:15'),(6315,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'111.160.205.10','2019-09-12 15:28:39'),(6316,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.160.205.10','2019-09-12 15:37:52'),(6317,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.160.205.10','2019-09-12 15:38:16'),(6318,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',13,'111.160.205.10','2019-09-12 15:38:41'),(6319,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'59.56.176.120','2019-09-12 15:42:44'),(6320,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'110.249.201.14','2019-09-12 16:05:37'),(6321,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'142.93.147.201','2019-09-12 16:55:35'),(6322,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.38.48.226','2019-09-12 17:19:07'),(6323,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.129.6.251','2019-09-12 17:20:08'),(6324,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'203.208.60.110','2019-09-12 17:28:19'),(6325,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'203.208.60.76','2019-09-12 22:10:24'),(6326,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'203.208.60.87','2019-09-12 22:15:37'),(6327,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'203.208.60.67','2019-09-12 22:30:12'),(6328,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',239,'111.225.149.12','2019-09-13 10:18:21'),(6329,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'1.203.100.189','2019-09-13 12:07:08'),(6330,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',640,'42.236.10.117','2019-09-13 12:07:17'),(6331,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.203.100.189','2019-09-13 12:07:24'),(6332,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',468,'42.236.10.84','2019-09-13 12:07:45'),(6333,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'117.176.219.194','2019-09-13 21:04:45'),(6334,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',440,'220.243.135.179','2019-09-14 06:25:52'),(6335,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',7,'110.249.201.2','2019-09-14 06:25:57'),(6336,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.176','2019-09-14 11:50:44'),(6337,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.176','2019-09-14 12:38:14'),(6338,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',8,'223.104.63.176','2019-09-14 12:38:27'),(6339,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',219,'223.104.63.176','2019-09-14 12:38:38'),(6340,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'223.104.63.176','2019-09-14 12:38:48'),(6341,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'211.161.241.78','2019-09-14 13:41:23'),(6342,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'211.161.241.78','2019-09-14 13:48:25'),(6343,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',3,'211.161.241.78','2019-09-14 13:48:32'),(6344,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'211.161.241.78','2019-09-14 13:49:02'),(6345,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',38,'115.225.254.197','2019-09-14 14:36:55'),(6346,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.225.254.197','2019-09-14 14:48:43'),(6347,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',14,'115.225.254.197','2019-09-14 15:29:13'),(6348,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.15.220.169','2019-09-14 16:02:26'),(6349,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',4,'112.96.139.29','2019-09-14 18:41:48'),(6350,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'112.96.139.29','2019-09-14 18:42:33'),(6351,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',4,'3.85.83.57','2019-09-14 18:43:05'),(6352,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'3.81.105.138','2019-09-14 18:43:25'),(6353,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',4,'111.225.148.83','2019-09-15 05:25:24'),(6354,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'111.225.149.50','2019-09-15 05:25:28'),(6355,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'163.125.58.66','2019-09-15 20:25:59'),(6356,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',225,'180.163.220.3','2019-09-15 20:26:18'),(6357,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',1057,'163.125.58.66','2019-09-15 20:27:28'),(6358,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'180.163.220.66','2019-09-15 20:27:39'),(6359,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.249.133.67','2019-09-15 21:23:49'),(6360,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'203.208.60.8','2019-09-15 22:02:05'),(6361,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.64.62.46','2019-09-15 22:30:35'),(6362,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.137.12','2019-09-15 23:24:25'),(6363,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'113.88.137.12','2019-09-15 23:24:49'),(6364,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'203.208.60.25','2019-09-16 00:32:13'),(6365,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6697,'220.243.135.139','2019-09-16 06:08:23'),(6366,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',3,'111.225.148.210','2019-09-16 06:08:26'),(6367,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'162.242.48.69','2019-09-16 08:13:44'),(6368,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',5,'203.208.60.99','2019-09-16 08:45:18'),(6369,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-16 09:35:27'),(6370,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.190.99.3','2019-09-16 09:45:49'),(6371,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-16 10:33:43'),(6372,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'183.63.51.77','2019-09-16 10:34:12'),(6373,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.38.48.226','2019-09-16 10:43:33'),(6374,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',31,'101.89.239.232','2019-09-16 10:55:38'),(6375,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',4,'203.208.60.78','2019-09-16 11:06:15'),(6376,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'183.63.51.77','2019-09-16 11:21:03'),(6377,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'58.247.117.114','2019-09-16 11:33:51'),(6378,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-16 12:31:57'),(6379,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'101.230.199.161','2019-09-16 13:30:23'),(6380,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.230.199.161','2019-09-16 13:30:33'),(6381,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.38.48.226','2019-09-16 13:40:09'),(6382,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.38.48.226','2019-09-16 13:40:10'),(6383,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.38.48.226','2019-09-16 13:40:38'),(6384,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',13,'106.38.48.226','2019-09-16 13:40:42'),(6385,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'106.38.48.226','2019-09-16 13:41:29'),(6386,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.38.48.226','2019-09-16 13:41:59'),(6387,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'36.112.85.179','2019-09-16 14:28:06'),(6388,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'36.112.85.179','2019-09-16 14:28:21'),(6389,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',44,'36.112.85.179','2019-09-16 14:28:44'),(6390,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',2,'114.244.46.30','2019-09-16 15:27:35'),(6391,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'43.250.200.24','2019-09-16 16:07:24'),(6392,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'43.250.200.24','2019-09-16 16:08:36'),(6393,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'221.224.33.66','2019-09-16 16:50:26'),(6394,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.38.48.226','2019-09-16 17:05:12'),(6395,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'106.38.48.226','2019-09-16 17:06:12'),(6396,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'61.129.7.235','2019-09-16 17:07:20'),(6397,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'114.100.70.202','2019-09-16 17:20:42'),(6398,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'114.100.70.202','2019-09-16 17:21:07'),(6399,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',1,'114.100.70.202','2019-09-16 17:21:23'),(6400,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.38.48.226','2019-09-16 17:27:28'),(6401,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'106.38.48.226','2019-09-16 17:31:50'),(6402,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'61.129.6.227','2019-09-16 17:32:50'),(6403,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'112.65.48.187','2019-09-16 18:00:50'),(6404,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'112.65.48.187','2019-09-16 18:01:22'),(6405,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.65.48.187','2019-09-16 18:01:25'),(6406,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.65.48.187','2019-09-16 18:04:11'),(6407,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'112.65.48.187','2019-09-16 18:04:38'),(6408,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',1,'112.65.48.187','2019-09-16 18:04:48'),(6409,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.65.48.187','2019-09-16 18:05:41'),(6410,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.65.48.187','2019-09-16 18:05:48'),(6411,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.65.48.187','2019-09-16 18:06:15'),(6412,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',12,'112.65.48.187','2019-09-16 18:06:30'),(6413,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.65.48.187','2019-09-16 18:08:35'),(6414,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'117.136.40.243','2019-09-16 20:09:50'),(6415,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.65.109.239','2019-09-16 20:24:19'),(6416,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',222,'113.116.142.61','2019-09-16 21:09:30'),(6417,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',1465,'113.116.142.61','2019-09-16 21:10:53'),(6418,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',6,'113.116.142.61','2019-09-16 21:11:20'),(6419,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',8,'113.116.142.61','2019-09-16 21:12:06'),(6420,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',13,'113.116.142.61','2019-09-16 21:12:17'),(6421,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',11,'113.116.142.61','2019-09-16 21:13:03'),(6422,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',4,'113.116.142.61','2019-09-16 21:22:54'),(6423,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'113.116.142.61','2019-09-16 22:11:25'),(6424,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',4,'113.116.142.61','2019-09-16 22:25:01'),(6425,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','28',264,'113.116.142.63','2019-09-16 22:31:17'),(6426,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'203.208.60.60','2019-09-16 22:59:26'),(6427,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.142.61','2019-09-16 23:06:12'),(6428,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'203.208.60.40','2019-09-16 23:29:31'),(6429,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',4,'113.116.142.61','2019-09-16 23:30:12'),(6430,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'113.116.142.61','2019-09-16 23:30:35'),(6431,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'113.116.142.61','2019-09-16 23:31:23'),(6432,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'113.116.142.61','2019-09-16 23:31:38'),(6433,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',4,'113.116.142.61','2019-09-16 23:32:09'),(6434,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'180.163.220.68','2019-09-16 23:59:22'),(6435,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'110.249.201.228','2019-09-17 05:24:40'),(6436,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',330,'223.104.63.2','2019-09-17 08:16:20'),(6437,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',4,'223.104.63.2','2019-09-17 08:17:18'),(6438,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'223.104.63.2','2019-09-17 08:17:25'),(6439,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.2','2019-09-17 08:17:33'),(6440,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'223.104.63.2','2019-09-17 08:18:05'),(6441,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'223.104.63.2','2019-09-17 08:32:06'),(6442,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'223.104.63.2','2019-09-17 08:32:40'),(6443,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'223.104.63.2','2019-09-17 08:35:26'),(6444,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'223.104.63.2','2019-09-17 08:37:32'),(6445,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.17.197.195','2019-09-17 09:48:41'),(6446,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',2,'183.63.51.77','2019-09-17 10:46:14'),(6447,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',7,'183.63.51.77','2019-09-17 10:46:17'),(6448,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',2,'183.63.51.77','2019-09-17 10:46:24'),(6449,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',33,'183.63.51.77','2019-09-17 10:46:26'),(6450,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.38.48.226','2019-09-17 11:00:39'),(6451,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'106.38.48.226','2019-09-17 11:01:54'),(6452,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'106.38.48.226','2019-09-17 11:02:22'),(6453,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'203.208.60.25','2019-09-17 11:02:51'),(6454,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'101.227.139.178','2019-09-17 11:07:25'),(6455,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'180.97.118.223','2019-09-17 11:07:42'),(6456,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'61.129.6.227','2019-09-17 11:11:24'),(6457,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-17 11:12:02'),(6458,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'183.63.51.77','2019-09-17 11:12:07'),(6459,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-17 11:13:20'),(6460,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'183.63.51.77','2019-09-17 11:20:00'),(6461,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-17 11:20:04'),(6462,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',8,'183.63.51.77','2019-09-17 11:20:40'),(6463,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.200.25.214','2019-09-17 11:22:20'),(6464,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.200.25.214','2019-09-17 11:22:56'),(6465,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.200.25.214','2019-09-17 11:23:33'),(6466,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-17 11:23:57'),(6467,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',2,'183.63.51.77','2019-09-17 11:27:46'),(6468,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-17 11:28:10'),(6469,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-17 11:35:22'),(6470,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',38,'183.63.51.77','2019-09-17 11:40:11'),(6471,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'117.136.12.160','2019-09-17 12:16:06'),(6472,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-17 12:19:11'),(6473,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'183.63.51.77','2019-09-17 12:38:58'),(6474,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',5,'117.136.12.160','2019-09-17 12:49:48'),(6475,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'117.136.12.160','2019-09-17 12:49:51'),(6476,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.12.160','2019-09-17 13:32:53'),(6477,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.12.160','2019-09-17 13:49:32'),(6478,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'117.136.12.160','2019-09-17 13:49:36'),(6479,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'218.77.105.101','2019-09-17 14:23:46'),(6480,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',2,'114.242.122.146','2019-09-17 14:33:18'),(6481,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-17 14:43:39'),(6482,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'112.65.48.153','2019-09-17 14:45:28'),(6483,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'112.65.48.153','2019-09-17 14:45:42'),(6484,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'183.63.51.77','2019-09-17 15:03:34'),(6485,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'183.63.51.77','2019-09-17 15:03:39'),(6486,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'220.115.174.103','2019-09-17 15:13:42'),(6487,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',208,'112.65.48.98','2019-09-17 15:28:12'),(6488,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'117.136.12.160','2019-09-17 15:41:01'),(6489,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'223.255.14.206','2019-09-17 16:11:29'),(6490,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',17,'27.17.2.165','2019-09-17 16:13:11'),(6491,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'61.151.207.186','2019-09-17 16:14:16'),(6492,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',13,'58.247.206.142','2019-09-17 16:15:44'),(6493,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.12.160','2019-09-17 17:04:02'),(6494,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',5,'111.225.148.163','2019-09-17 17:13:41'),(6495,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.12.59.211','2019-09-17 17:15:55'),(6496,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-17 17:17:42'),(6497,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'183.63.51.77','2019-09-17 17:17:52'),(6498,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'183.63.51.77','2019-09-17 17:44:24'),(6499,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'117.136.12.160','2019-09-17 20:16:20'),(6500,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'117.136.12.160','2019-09-17 20:16:27'),(6501,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',5,'117.136.12.160','2019-09-17 20:16:34'),(6502,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'117.136.12.160','2019-09-17 20:16:39'),(6503,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'117.136.12.160','2019-09-17 20:16:56'),(6504,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',2,'113.116.142.68','2019-09-17 21:23:35'),(6505,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.142.68','2019-09-17 21:30:43'),(6506,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',2,'113.116.142.68','2019-09-17 21:30:46'),(6507,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',4,'113.116.142.68','2019-09-17 21:30:50'),(6508,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'113.116.142.68','2019-09-17 22:28:56'),(6509,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',7,'113.116.142.68','2019-09-17 22:38:09'),(6510,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.116.142.68','2019-09-17 22:40:58'),(6511,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'113.116.142.68','2019-09-17 22:53:24'),(6512,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'113.116.142.68','2019-09-17 22:56:35'),(6513,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'113.116.142.68','2019-09-17 23:05:50'),(6514,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'113.116.142.68','2019-09-17 23:21:30'),(6515,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',1,'171.223.93.61','2019-09-17 23:37:29'),(6516,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.116.142.68','2019-09-18 00:06:22'),(6517,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',4,'203.208.60.81','2019-09-18 02:37:27'),(6518,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'203.208.60.65','2019-09-18 02:38:57'),(6519,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'203.208.60.126','2019-09-18 02:41:16'),(6520,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',1,'180.163.220.66','2019-09-18 04:12:05'),(6521,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',1,'42.236.10.78','2019-09-18 04:53:31'),(6522,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'203.208.60.45','2019-09-18 07:39:29'),(6523,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.142.68','2019-09-18 07:50:19'),(6524,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'113.116.142.68','2019-09-18 07:50:27'),(6525,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'113.116.142.68','2019-09-18 07:54:48'),(6526,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'113.116.142.68','2019-09-18 07:54:51'),(6527,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.142.68','2019-09-18 07:55:04'),(6528,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'117.136.40.253','2019-09-18 08:24:04'),(6529,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'223.104.63.33','2019-09-18 08:29:56'),(6530,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',6,'223.104.63.33','2019-09-18 08:38:19'),(6531,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'223.104.63.33','2019-09-18 08:41:07'),(6532,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',4,'223.104.63.33','2019-09-18 08:47:38'),(6533,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',5,'223.104.63.33','2019-09-18 08:47:55'),(6534,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',2,'223.104.63.33','2019-09-18 08:50:26'),(6535,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',5,'223.104.63.33','2019-09-18 08:50:38'),(6536,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',3,'223.104.63.33','2019-09-18 08:50:45'),(6537,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'223.104.63.33','2019-09-18 08:51:12'),(6538,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'223.104.63.33','2019-09-18 08:51:27'),(6539,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'223.104.63.33','2019-09-18 08:52:41'),(6540,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',2,'223.104.63.33','2019-09-18 08:52:50'),(6541,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','23',3,'223.104.63.33','2019-09-18 08:53:15'),(6542,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',3,'223.104.63.33','2019-09-18 08:54:21'),(6543,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'223.104.63.33','2019-09-18 08:55:27'),(6544,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'223.104.63.33','2019-09-18 08:56:08'),(6545,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',2,'223.104.63.33','2019-09-18 08:56:19'),(6546,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',2,'223.104.63.33','2019-09-18 08:56:21'),(6547,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',4,'223.104.63.33','2019-09-18 09:00:57'),(6548,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',5,'223.104.63.33','2019-09-18 09:01:03'),(6549,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-18 13:02:51'),(6550,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'112.64.119.33','2019-09-18 13:46:30'),(6551,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'112.64.119.33','2019-09-18 13:47:05'),(6552,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',2,'183.63.51.77','2019-09-18 14:09:46'),(6553,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',5,'183.63.51.77','2019-09-18 14:09:52'),(6554,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-18 14:10:22'),(6555,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'183.63.51.77','2019-09-18 14:38:08'),(6556,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-18 14:40:28'),(6557,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'183.63.51.77','2019-09-18 14:45:13'),(6558,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'59.173.169.58','2019-09-18 15:21:42'),(6559,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',9,'59.173.169.58','2019-09-18 15:22:11'),(6560,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'59.173.169.58','2019-09-18 15:22:26'),(6561,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',2,'183.63.51.77','2019-09-18 15:31:28'),(6562,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'210.22.53.237','2019-09-18 15:39:11'),(6563,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'112.65.61.23','2019-09-18 15:50:19'),(6564,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'112.65.61.23','2019-09-18 15:50:32'),(6565,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'49.5.11.34','2019-09-18 16:03:53'),(6566,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'203.208.60.109','2019-09-18 16:12:11'),(6567,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'183.63.51.77','2019-09-18 16:13:45'),(6568,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'183.63.51.77','2019-09-18 16:21:09'),(6569,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'183.63.51.77','2019-09-18 16:21:14'),(6570,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'117.35.204.252','2019-09-18 16:27:45'),(6571,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'183.63.51.77','2019-09-18 16:44:29'),(6572,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'183.63.51.77','2019-09-18 16:46:47'),(6573,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','29',2,'183.63.51.77','2019-09-18 16:48:00'),(6574,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'183.63.51.77','2019-09-18 16:48:43'),(6575,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'183.63.51.77','2019-09-18 17:35:46'),(6576,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',7,'183.63.51.77','2019-09-18 17:38:05'),(6577,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',3,'183.63.51.77','2019-09-18 17:38:45'),(6578,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',2,'183.63.51.77','2019-09-18 17:40:23'),(6579,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',1293,'183.63.51.77','2019-09-18 17:41:20'),(6580,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'183.63.51.77','2019-09-18 17:52:49'),(6581,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'183.63.51.77','2019-09-18 17:53:27'),(6582,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'223.104.63.3','2019-09-18 18:22:14'),(6583,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',4,'223.104.63.3','2019-09-18 18:22:21'),(6584,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.3','2019-09-18 19:20:54'),(6585,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',4,'223.104.63.3','2019-09-18 19:21:06'),(6586,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'223.104.63.3','2019-09-18 19:21:15'),(6587,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',2,'39.178.46.157','2019-09-18 21:41:19'),(6588,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.96.98','2019-09-18 22:05:25'),(6589,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',2,'110.249.201.9','2019-09-18 22:45:35'),(6590,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'113.88.96.98','2019-09-18 22:49:06'),(6591,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'113.88.96.98','2019-09-18 22:49:19'),(6592,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.96.98','2019-09-18 22:56:49'),(6593,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',4,'110.249.201.182','2019-09-19 03:05:14'),(6594,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'223.104.66.106','2019-09-19 08:33:24'),(6595,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.66.106','2019-09-19 08:33:41'),(6596,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.23.86.178','2019-09-19 09:48:03'),(6597,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'61.142.233.128','2019-09-19 11:58:55'),(6598,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'61.142.233.128','2019-09-19 11:59:54'),(6599,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.142.233.128','2019-09-19 13:38:10'),(6600,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'61.142.233.128','2019-09-19 13:42:51'),(6601,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',2,'61.142.233.128','2019-09-19 13:44:33'),(6602,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.142.233.128','2019-09-19 13:45:56'),(6603,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.142.233.128','2019-09-19 13:47:55'),(6604,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',23,'58.38.132.152','2019-09-19 14:56:36'),(6605,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',439,'58.38.132.152','2019-09-19 14:57:25'),(6606,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','30',1033,'110.249.201.140','2019-09-19 15:22:22'),(6607,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'13.113.106.158','2019-09-19 16:02:55'),(6608,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'103.246.38.196','2019-09-19 16:02:55'),(6609,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'192.55.46.46','2019-09-19 16:02:56'),(6610,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',6,'183.63.51.77','2019-09-19 16:25:29'),(6611,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',5,'120.37.179.26','2019-09-19 16:55:39'),(6612,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'120.37.179.26','2019-09-19 16:56:07'),(6613,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'27.17.2.165','2019-09-19 17:00:40'),(6614,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'61.129.6.159','2019-09-19 17:01:40'),(6615,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-19 17:04:36'),(6616,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'183.63.51.77','2019-09-19 17:04:53'),(6617,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-19 17:05:06'),(6618,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'113.88.96.101','2019-09-19 20:50:00'),(6619,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'113.88.96.101','2019-09-19 20:50:05'),(6620,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'111.197.20.195','2019-09-19 21:05:53'),(6621,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'113.88.96.101','2019-09-19 21:21:44'),(6622,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.54.222.192','2019-09-19 21:35:51'),(6623,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.38.4.81','2019-09-19 22:13:00'),(6624,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'120.229.64.103','2019-09-19 23:09:20'),(6625,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',8,'113.88.96.101','2019-09-19 23:16:41'),(6626,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',2231,'113.88.96.101','2019-09-19 23:18:07'),(6627,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',2125,'113.88.96.101','2019-09-19 23:18:40'),(6628,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',494,'113.88.96.104','2019-09-20 00:02:00'),(6629,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'113.88.96.101','2019-09-20 00:02:34'),(6630,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'106.16.143.141','2019-09-20 01:07:33'),(6631,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.96.101','2019-09-20 08:01:52'),(6632,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',47,'183.63.51.77','2019-09-20 09:10:08'),(6633,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'183.63.51.77','2019-09-20 09:10:12'),(6634,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'183.63.51.77','2019-09-20 09:10:22'),(6635,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',5,'183.63.51.77','2019-09-20 09:10:36'),(6636,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',3,'183.63.51.77','2019-09-20 09:10:43'),(6637,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'183.63.51.77','2019-09-20 09:10:59'),(6638,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',5,'183.63.51.77','2019-09-20 09:35:59'),(6639,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.69.196.133','2019-09-20 09:45:18'),(6640,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'113.69.196.133','2019-09-20 09:48:23'),(6641,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'113.69.196.133','2019-09-20 09:49:17'),(6642,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',22,'113.240.245.242','2019-09-20 10:13:22'),(6643,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-20 10:27:52'),(6644,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.199.198.253','2019-09-20 10:46:40'),(6645,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',625,'110.249.202.86','2019-09-20 10:47:06'),(6646,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',4,'183.63.51.77','2019-09-20 10:56:18'),(6647,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',6,'183.63.51.77','2019-09-20 10:56:46'),(6648,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'183.63.51.77','2019-09-20 11:01:57'),(6649,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.47.86.128','2019-09-20 11:05:24'),(6650,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.4.116.58','2019-09-20 11:44:38'),(6651,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.4.116.58','2019-09-20 11:55:03'),(6652,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'180.163.220.5','2019-09-20 12:13:54'),(6653,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.92.163.11','2019-09-20 13:22:16'),(6654,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'183.63.51.77','2019-09-20 13:39:17'),(6655,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'106.122.7.170','2019-09-20 14:22:12'),(6656,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'106.122.7.170','2019-09-20 14:22:29'),(6657,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'183.63.51.77','2019-09-20 14:59:16'),(6658,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-20 15:03:13'),(6659,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'117.139.233.229','2019-09-20 16:26:44'),(6660,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'117.139.233.229','2019-09-20 16:26:56'),(6661,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.139.233.229','2019-09-20 16:27:23'),(6662,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.204.17.71','2019-09-20 16:28:24'),(6663,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-20 16:29:34'),(6664,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'123.177.21.179','2019-09-20 17:36:47'),(6665,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'183.63.51.77','2019-09-20 18:13:51'),(6666,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-20 18:44:24'),(6667,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',6,'183.63.51.77','2019-09-20 18:44:27'),(6668,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'183.63.51.77','2019-09-20 18:44:31'),(6669,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',4,'183.63.51.77','2019-09-20 18:44:34'),(6670,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.40.187','2019-09-20 19:15:28'),(6671,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','27',3,'110.249.201.145','2019-09-20 19:22:12'),(6672,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'121.32.196.160','2019-09-20 22:47:19'),(6673,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'218.81.19.165','2019-09-20 23:20:33'),(6674,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.81.19.165','2019-09-20 23:21:05'),(6675,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'111.225.148.198','2019-09-21 05:32:40'),(6676,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.178.40.231','2019-09-21 09:45:39'),(6677,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'61.159.206.29','2019-09-21 09:48:11'),(6678,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'61.159.206.29','2019-09-21 09:48:21'),(6679,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'113.88.99.64','2019-09-21 09:50:41'),(6680,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'61.159.206.29','2019-09-21 09:51:20'),(6681,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.99.64','2019-09-21 09:51:23'),(6682,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'42.236.10.75','2019-09-21 09:52:28'),(6683,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'42.236.10.84','2019-09-21 09:52:49'),(6684,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'61.159.206.29','2019-09-21 09:54:23'),(6685,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.159.206.29','2019-09-21 09:55:06'),(6686,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'61.159.206.29','2019-09-21 09:55:37'),(6687,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',650,'42.236.10.84','2019-09-21 09:55:55'),(6688,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'42.236.10.114','2019-09-21 10:00:43'),(6689,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'219.136.130.28','2019-09-21 10:26:15'),(6690,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',823,'180.163.220.4','2019-09-21 10:33:46'),(6691,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1079,'113.16.66.15','2019-09-21 10:47:29'),(6692,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',231,'1.60.165.136','2019-09-21 11:19:50'),(6693,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.60.165.136','2019-09-21 11:20:22'),(6694,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'113.88.99.64','2019-09-21 11:48:23'),(6695,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',1071,'113.88.99.64','2019-09-21 11:48:59'),(6696,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',1698,'113.88.99.64','2019-09-21 11:50:03'),(6697,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',1451,'113.88.99.64','2019-09-21 11:50:32'),(6698,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',20,'113.88.99.64','2019-09-21 11:50:47'),(6699,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'43.224.44.158','2019-09-21 11:51:22'),(6700,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'113.88.99.64','2019-09-21 11:51:31'),(6701,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',9,'113.88.99.64','2019-09-21 14:10:55'),(6702,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.101.32.2','2019-09-21 14:54:11'),(6703,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.227.39.100','2019-09-21 15:03:03'),(6704,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',882,'112.81.73.111','2019-09-21 15:24:21'),(6705,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.236.10.125','2019-09-21 15:29:01'),(6706,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'124.239.33.36','2019-09-21 16:45:10'),(6707,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'221.12.59.211','2019-09-21 16:55:16'),(6708,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'221.12.59.211','2019-09-21 16:55:29'),(6709,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',12,'221.12.59.211','2019-09-21 16:55:42'),(6710,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',6,'183.16.230.31','2019-09-21 17:12:07'),(6711,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'183.16.230.31','2019-09-21 17:12:12'),(6712,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3284,'183.16.230.31','2019-09-21 17:12:57'),(6713,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',8,'119.248.90.156','2019-09-21 17:50:15'),(6714,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',673,'124.239.33.36','2019-09-21 18:04:14'),(6715,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'223.72.38.184','2019-09-21 18:21:11'),(6716,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'223.72.38.184','2019-09-21 18:21:46'),(6717,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'223.72.38.184','2019-09-21 18:21:52'),(6718,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'223.72.38.184','2019-09-21 18:22:00'),(6719,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'223.72.38.184','2019-09-21 18:22:23'),(6720,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.72.38.184','2019-09-21 18:22:55'),(6721,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'223.72.38.184','2019-09-21 18:23:45'),(6722,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',7,'223.72.38.184','2019-09-21 18:27:57'),(6723,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',4,'223.72.38.184','2019-09-21 18:28:08'),(6724,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'223.72.38.184','2019-09-21 18:28:45'),(6725,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'223.72.38.184','2019-09-21 18:29:19'),(6726,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'223.72.38.184','2019-09-21 18:29:31'),(6727,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.72.38.184','2019-09-21 18:30:10'),(6728,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'42.86.96.81','2019-09-21 19:12:45'),(6729,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',206,'112.38.163.59','2019-09-21 20:06:55'),(6730,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.38.163.59','2019-09-21 20:18:25'),(6731,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'110.152.54.172','2019-09-21 20:19:50'),(6732,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',408,'171.88.190.116','2019-09-21 21:55:45'),(6733,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1871,'112.10.9.7','2019-09-21 22:04:23'),(6734,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'220.200.12.165','2019-09-21 22:06:51'),(6735,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',6,'180.156.55.119','2019-09-21 22:30:15'),(6736,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.40.217','2019-09-21 23:00:43'),(6737,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',623,'113.128.76.201','2019-09-21 23:46:57'),(6738,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'117.136.0.239','2019-09-22 00:13:56'),(6739,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',462,'119.121.8.46','2019-09-22 01:46:37'),(6740,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1313,'202.104.177.114','2019-09-22 08:25:10'),(6741,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',258,'113.12.35.206','2019-09-22 09:16:44'),(6742,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',5,'113.88.97.186','2019-09-22 10:04:47'),(6743,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',639,'120.230.205.183','2019-09-22 10:17:00'),(6744,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'180.163.220.5','2019-09-22 10:17:09'),(6745,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1261,'119.131.77.134','2019-09-22 10:24:05'),(6746,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.131.77.134','2019-09-22 10:24:56'),(6747,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'1.197.45.70','2019-09-22 11:05:25'),(6748,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.197.45.70','2019-09-22 11:06:28'),(6749,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1084,'36.63.68.43','2019-09-22 13:00:15'),(6750,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',10,'113.88.97.186','2019-09-22 13:02:11'),(6751,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'113.88.97.186','2019-09-22 13:02:15'),(6752,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',1790,'113.88.97.186','2019-09-22 13:16:06'),(6753,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',6,'113.88.97.186','2019-09-22 13:26:46'),(6754,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'113.88.97.186','2019-09-22 13:31:00'),(6755,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.97.186','2019-09-22 13:31:58'),(6756,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'113.88.97.186','2019-09-22 14:49:23'),(6757,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',614,'182.138.167.125','2019-09-22 15:12:39'),(6758,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',247,'60.233.0.241','2019-09-22 15:24:05'),(6759,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'101.227.139.178','2019-09-22 15:25:06'),(6760,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'101.207.121.41','2019-09-22 15:39:34'),(6761,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.207.121.41','2019-09-22 15:39:58'),(6762,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'101.207.121.41','2019-09-22 15:40:42'),(6763,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',425,'117.136.12.161','2019-09-22 15:46:24'),(6764,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'117.136.12.161','2019-09-22 16:23:48'),(6765,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'117.136.12.161','2019-09-22 16:23:55'),(6766,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'125.104.70.147','2019-09-22 16:58:03'),(6767,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',661,'119.86.37.213','2019-09-22 17:46:34'),(6768,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.86.37.213','2019-09-22 17:46:49'),(6769,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'119.86.37.213','2019-09-22 17:46:55'),(6770,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.86.37.213','2019-09-22 17:46:59'),(6771,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'115.190.247.16','2019-09-22 19:29:51'),(6772,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',861,'222.172.58.11','2019-09-22 19:51:24'),(6773,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'222.172.58.11','2019-09-22 19:56:02'),(6774,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'120.41.145.173','2019-09-22 20:11:00'),(6775,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'59.57.152.98','2019-09-22 21:22:11'),(6776,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'59.57.152.98','2019-09-22 21:22:15'),(6777,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'59.57.152.98','2019-09-22 21:22:44'),(6778,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'120.36.145.46','2019-09-22 21:23:40'),(6779,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'110.87.110.9','2019-09-22 21:25:26'),(6780,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',218,'59.57.152.98','2019-09-22 21:27:20'),(6781,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1049,'119.167.28.11','2019-09-22 21:37:12'),(6782,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'59.57.152.98','2019-09-22 21:40:15'),(6783,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1024,'115.200.18.101','2019-09-22 21:48:55'),(6784,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1857,'39.70.28.170','2019-09-22 22:00:03'),(6785,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',7,'171.223.98.131','2019-09-22 22:10:32'),(6786,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1444,'111.85.183.11','2019-09-22 22:10:43'),(6787,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.199.191.112','2019-09-22 22:10:59'),(6788,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.199.191.112','2019-09-22 22:11:23'),(6789,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',465,'123.180.248.88','2019-09-22 22:13:10'),(6790,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',408,'218.74.225.87','2019-09-22 22:43:29'),(6791,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',6,'113.88.97.175','2019-09-22 23:49:52'),(6792,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',5,'113.88.97.175','2019-09-22 23:50:02'),(6793,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.97.175','2019-09-22 23:50:18'),(6794,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'79.58.204.134','2019-09-23 00:03:55'),(6795,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1230,'61.158.148.96','2019-09-23 00:29:12'),(6796,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'185.176.78.178','2019-09-23 03:38:02'),(6797,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'185.176.78.178','2019-09-23 03:38:30'),(6798,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',642,'111.225.149.107','2019-09-23 04:48:24'),(6799,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',868,'123.158.169.233','2019-09-23 06:09:01'),(6800,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'123.158.169.233','2019-09-23 06:09:56'),(6801,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',222,'180.163.220.67','2019-09-23 06:10:05'),(6802,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'123.158.169.233','2019-09-23 06:10:12'),(6803,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',4,'42.236.10.125','2019-09-23 06:10:52'),(6804,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',6,'117.136.40.194','2019-09-23 07:45:39'),(6805,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'117.136.40.194','2019-09-23 07:45:51'),(6806,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',935,'124.200.179.97','2019-09-23 08:27:03'),(6807,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'124.200.179.97','2019-09-23 08:27:08'),(6808,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'101.230.199.161','2019-09-23 09:27:38'),(6809,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',621,'182.91.9.242','2019-09-23 09:53:35'),(6810,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',8,'182.91.9.242','2019-09-23 09:54:53'),(6811,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'221.0.245.27','2019-09-23 10:17:02'),(6812,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'221.0.245.27','2019-09-23 10:17:06'),(6813,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.0.245.27','2019-09-23 10:17:12'),(6814,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1448,'1.197.45.70','2019-09-23 10:39:54'),(6815,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1459,'171.105.66.228','2019-09-23 10:59:09'),(6816,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.139.233.229','2019-09-23 11:12:25'),(6817,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',7,'117.136.40.194','2019-09-23 11:25:12'),(6818,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.40.194','2019-09-23 11:25:16'),(6819,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'111.25.38.100','2019-09-23 11:34:00'),(6820,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'106.38.48.226','2019-09-23 13:15:59'),(6821,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.38.48.226','2019-09-23 13:16:15'),(6822,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'113.88.97.175','2019-09-23 13:39:49'),(6823,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'113.88.97.175','2019-09-23 14:42:54'),(6824,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'42.48.77.34','2019-09-23 14:45:18'),(6825,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'42.48.77.34','2019-09-23 14:46:12'),(6826,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.48.77.34','2019-09-23 14:46:15'),(6827,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'42.48.77.34','2019-09-23 14:46:17'),(6828,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1240,'125.90.120.71','2019-09-23 14:48:55'),(6829,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',207,'113.96.22.99','2019-09-23 15:03:57'),(6830,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'223.104.63.4','2019-09-23 15:15:56'),(6831,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'223.104.63.4','2019-09-23 15:16:03'),(6832,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'223.104.63.4','2019-09-23 15:16:07'),(6833,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.64.140.85','2019-09-23 15:38:15'),(6834,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.96.182.97','2019-09-23 15:57:20'),(6835,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'223.104.63.4','2019-09-23 16:09:15'),(6836,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'223.104.63.4','2019-09-23 16:15:44'),(6837,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.4','2019-09-23 16:31:34'),(6838,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'223.104.63.4','2019-09-23 16:34:24'),(6839,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',5,'223.104.63.4','2019-09-23 16:39:32'),(6840,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',6,'157.245.233.71','2019-09-23 17:06:26'),(6841,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',3,'111.225.148.219','2019-09-23 17:20:24'),(6842,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.4','2019-09-23 17:51:16'),(6843,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',207,'180.163.220.5','2019-09-23 18:30:04'),(6844,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.13.218.230','2019-09-23 20:55:45'),(6845,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',429,'183.47.45.26','2019-09-23 21:06:49'),(6846,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',421,'120.229.17.22','2019-09-23 21:48:11'),(6847,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'111.59.124.150','2019-09-23 22:59:44'),(6848,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.59.124.150','2019-09-23 23:00:47'),(6849,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'111.59.124.150','2019-09-23 23:01:37'),(6850,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.59.124.150','2019-09-23 23:01:57'),(6851,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',464,'113.116.244.152','2019-09-23 23:21:10'),(6852,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'144.0.32.57','2019-09-23 23:42:41'),(6853,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'144.0.32.57','2019-09-23 23:42:59'),(6854,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'119.145.83.244','2019-09-23 23:49:23'),(6855,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'119.145.83.244','2019-09-24 00:01:00'),(6856,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'119.145.83.244','2019-09-24 00:02:59'),(6857,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',828,'42.236.10.114','2019-09-24 04:18:19'),(6858,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',1301,'42.236.10.114','2019-09-24 04:19:03'),(6859,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.163.220.4','2019-09-24 04:24:14'),(6860,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1709,'115.197.190.145','2019-09-24 09:13:01'),(6861,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.53.148.3','2019-09-24 09:14:26'),(6862,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'39.178.44.248','2019-09-24 09:53:26'),(6863,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'39.178.44.248','2019-09-24 09:56:38'),(6864,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'39.178.44.248','2019-09-24 09:57:12'),(6865,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'39.178.44.248','2019-09-24 09:58:14'),(6866,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',1,'39.178.44.248','2019-09-24 09:58:26'),(6867,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',5,'39.178.44.248','2019-09-24 09:59:46'),(6868,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'39.178.44.248','2019-09-24 10:00:49'),(6869,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',3,'39.178.44.248','2019-09-24 10:02:20'),(6870,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'118.242.35.162','2019-09-24 10:38:28'),(6871,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.62.169.108','2019-09-24 11:08:52'),(6872,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.62.169.108','2019-09-24 11:09:10'),(6873,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',656,'180.103.247.11','2019-09-24 11:30:55'),(6874,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'203.208.60.82','2019-09-24 11:40:47'),(6875,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-24 11:53:21'),(6876,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',690,'157.61.249.25','2019-09-24 12:32:27'),(6877,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'157.61.249.25','2019-09-24 12:32:34'),(6878,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'157.61.249.25','2019-09-24 12:32:57'),(6879,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-24 12:40:53'),(6880,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.17.240.25','2019-09-24 14:16:37'),(6881,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'111.225.148.245','2019-09-24 14:28:55'),(6882,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-24 15:13:40'),(6883,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.58.160.153','2019-09-24 15:31:26'),(6884,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'113.81.197.175','2019-09-24 15:41:37'),(6885,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'113.81.197.175','2019-09-24 15:44:29'),(6886,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'123.58.160.153','2019-09-24 16:02:39'),(6887,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'123.58.160.153','2019-09-24 16:05:54'),(6888,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'123.58.160.153','2019-09-24 16:07:27'),(6889,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'123.58.160.153','2019-09-24 16:07:31'),(6890,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'123.58.160.153','2019-09-24 16:07:39'),(6891,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.58.160.153','2019-09-24 16:07:43'),(6892,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'123.58.160.153','2019-09-24 16:07:52'),(6893,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'123.58.160.153','2019-09-24 16:08:32'),(6894,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.58.160.153','2019-09-24 16:11:52'),(6895,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.130.8.4','2019-09-24 16:14:08'),(6896,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',1486,'61.148.123.214','2019-09-24 16:15:08'),(6897,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',454,'106.11.34.13','2019-09-24 16:35:34'),(6898,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',7,'106.11.34.13','2019-09-24 16:36:11'),(6899,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'106.11.34.13','2019-09-24 16:36:24'),(6900,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'42.236.10.117','2019-09-24 17:01:36'),(6901,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'121.35.100.199','2019-09-24 17:13:21'),(6902,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',4,'121.35.100.199','2019-09-24 17:13:39'),(6903,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'14.213.153.34','2019-09-24 17:15:59'),(6904,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.213.153.34','2019-09-24 17:16:24'),(6905,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.58.160.153','2019-09-24 19:10:18'),(6906,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',5,'203.208.60.60','2019-09-24 19:36:50'),(6907,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'203.208.60.64','2019-09-24 19:38:40'),(6908,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'36.152.32.170','2019-09-24 20:28:27'),(6909,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'223.104.63.4','2019-09-24 20:31:51'),(6910,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.4','2019-09-24 21:43:30'),(6911,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'223.104.63.4','2019-09-24 21:43:42'),(6912,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.4','2019-09-24 21:45:43'),(6913,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'118.199.38.254','2019-09-24 22:15:41'),(6914,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.16.152.31','2019-09-24 22:43:19'),(6915,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',219,'42.236.10.78','2019-09-24 22:51:59'),(6916,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'221.216.136.100','2019-09-24 22:52:38'),(6917,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.93','2019-09-25 00:54:12'),(6918,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'110.249.201.248','2019-09-25 04:51:58'),(6919,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'183.15.183.93','2019-09-25 07:58:30'),(6920,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.93','2019-09-25 07:58:34'),(6921,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'14.127.189.248','2019-09-25 08:17:11'),(6922,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-25 09:06:57'),(6923,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',623,'113.118.7.51','2019-09-25 09:37:40'),(6924,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1039,'1.197.44.249','2019-09-25 10:49:57'),(6925,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.197.44.249','2019-09-25 10:50:42'),(6926,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'1.197.44.249','2019-09-25 10:51:02'),(6927,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'123.58.160.153','2019-09-25 11:14:53'),(6928,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.58.160.153','2019-09-25 11:33:13'),(6929,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'220.178.58.115','2019-09-25 15:25:36'),(6930,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'120.36.250.186','2019-09-25 17:37:12'),(6931,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'120.36.250.186','2019-09-25 17:38:46'),(6932,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'120.36.250.186','2019-09-25 17:41:39'),(6933,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1051,'123.196.14.101','2019-09-25 17:42:14'),(6934,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',6,'120.36.250.186','2019-09-25 17:42:18'),(6935,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-25 19:51:14'),(6936,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-25 21:08:47'),(6937,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'183.63.51.77','2019-09-25 21:08:53'),(6938,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'183.63.51.77','2019-09-25 21:08:58'),(6939,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',218,'183.63.51.77','2019-09-25 21:09:26'),(6940,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'59.57.170.229','2019-09-25 22:47:51'),(6941,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'59.57.170.229','2019-09-25 22:47:53'),(6942,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.41.139.185','2019-09-25 22:51:42'),(6943,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.15.183.84','2019-09-25 23:15:54'),(6944,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'111.201.246.167','2019-09-25 23:30:54'),(6945,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'117.166.104.174','2019-09-25 23:54:48'),(6946,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',833,'223.74.175.47','2019-09-26 01:24:12'),(6947,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',5,'123.158.169.190','2019-09-26 04:34:41'),(6948,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'123.158.169.190','2019-09-26 04:35:25'),(6949,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.84','2019-09-26 07:55:07'),(6950,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'149.248.55.174','2019-09-26 08:01:31'),(6951,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'183.15.183.84','2019-09-26 08:02:33'),(6952,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'183.63.51.77','2019-09-26 09:26:07'),(6953,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-26 09:26:11'),(6954,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.166.104.174','2019-09-26 09:27:20'),(6955,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'117.166.104.174','2019-09-26 09:27:51'),(6956,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.166.104.174','2019-09-26 09:29:24'),(6957,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.83.30.22','2019-09-26 09:34:39'),(6958,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'101.83.30.22','2019-09-26 09:35:26'),(6959,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.83.30.22','2019-09-26 09:36:48'),(6960,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.85.216.201','2019-09-26 09:51:01'),(6961,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-26 09:57:11'),(6962,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.166.104.174','2019-09-26 12:18:50'),(6963,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'124.202.219.62','2019-09-26 13:43:22'),(6964,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.202.219.62','2019-09-26 13:45:02'),(6965,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'124.202.219.62','2019-09-26 13:46:01'),(6966,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'124.202.219.62','2019-09-26 13:46:25'),(6967,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'124.202.219.62','2019-09-26 13:46:27'),(6968,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'124.202.219.62','2019-09-26 13:46:29'),(6969,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.202.219.62','2019-09-26 13:46:31'),(6970,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'124.202.219.62','2019-09-26 13:46:34'),(6971,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'124.202.219.62','2019-09-26 13:46:35'),(6972,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'124.202.219.62','2019-09-26 13:46:39'),(6973,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.202.219.62','2019-09-26 13:46:43'),(6974,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'222.168.65.166','2019-09-26 14:09:33'),(6975,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.168.65.166','2019-09-26 14:09:42'),(6976,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'61.159.136.205','2019-09-26 14:20:02'),(6977,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'183.63.51.77','2019-09-26 16:01:08'),(6978,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',1074,'101.64.140.85','2019-09-26 16:06:59'),(6979,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'101.64.140.85','2019-09-26 16:07:59'),(6980,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'219.137.141.44','2019-09-26 16:58:16'),(6981,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.202.214.202','2019-09-26 16:59:10'),(6982,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.202.214.202','2019-09-26 16:59:24'),(6983,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.202.214.202','2019-09-26 17:01:51'),(6984,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-26 17:29:08'),(6985,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'183.63.51.77','2019-09-26 17:29:12'),(6986,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'117.136.40.194','2019-09-26 18:26:46'),(6987,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',3,'117.136.40.194','2019-09-26 18:27:03'),(6988,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'117.136.40.194','2019-09-26 18:29:09'),(6989,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'117.136.40.194','2019-09-26 18:39:03'),(6990,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'117.136.40.194','2019-09-26 18:42:27'),(6991,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',1,'117.136.40.194','2019-09-26 18:46:23'),(6992,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'117.136.40.194','2019-09-26 18:46:39'),(6993,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',463,'117.136.40.179','2019-09-26 20:26:28'),(6994,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'117.136.40.179','2019-09-26 20:26:44'),(6995,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',6,'114.229.226.162','2019-09-26 21:25:13'),(6996,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',5,'58.38.50.154','2019-09-26 21:56:16'),(6997,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.140.75','2019-09-26 22:57:19'),(6998,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'211.161.245.248','2019-09-26 23:28:18'),(6999,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'211.161.245.248','2019-09-26 23:29:51'),(7000,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'211.161.245.248','2019-09-26 23:37:44'),(7001,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'211.161.245.248','2019-09-26 23:54:00'),(7002,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.199.123.158','2019-09-27 00:17:49'),(7003,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'111.225.149.247','2019-09-27 04:55:04'),(7004,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',181,'113.116.140.75','2019-09-27 08:02:20'),(7005,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'113.116.140.75','2019-09-27 08:02:38'),(7006,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'113.116.140.75','2019-09-27 08:02:41'),(7007,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',2,'223.104.66.118','2019-09-27 08:53:17'),(7008,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'223.104.66.118','2019-09-27 10:39:11'),(7009,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'124.127.132.138','2019-09-27 11:13:17'),(7010,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'124.127.132.138','2019-09-27 11:13:21'),(7011,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'124.127.132.138','2019-09-27 11:13:23'),(7012,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.66.118','2019-09-27 11:14:12'),(7013,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.65.97.110','2019-09-27 12:58:53'),(7014,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.64.140.85','2019-09-27 13:45:17'),(7015,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',5,'101.64.140.85','2019-09-27 13:45:40'),(7016,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'211.5.141.233','2019-09-27 15:40:11'),(7017,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'211.5.141.233','2019-09-27 15:40:55'),(7018,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',3,'211.5.141.233','2019-09-27 15:41:01'),(7019,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'211.5.141.233','2019-09-27 15:41:15'),(7020,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.5.141.233','2019-09-27 15:41:19'),(7021,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'211.5.141.233','2019-09-27 15:42:48'),(7022,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.104.189.89','2019-09-27 15:43:47'),(7023,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.152.32.170','2019-09-27 15:50:44'),(7024,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'36.152.32.170','2019-09-27 15:52:55'),(7025,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'36.152.32.170','2019-09-27 16:35:52'),(7026,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'222.211.213.106','2019-09-27 17:36:07'),(7027,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1891,'36.157.1.185','2019-09-27 18:32:19'),(7028,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',1062,'124.200.179.97','2019-09-27 18:36:09'),(7029,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.233.159.161','2019-09-27 19:17:23'),(7030,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'122.233.159.161','2019-09-27 19:18:02'),(7031,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'42.236.10.117','2019-09-27 23:05:16'),(7032,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'220.243.136.214','2019-09-28 00:13:39'),(7033,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'111.225.149.52','2019-09-28 02:41:13'),(7034,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',3,'110.249.201.111','2019-09-28 05:23:20'),(7035,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'110.249.201.98','2019-09-28 05:23:25'),(7036,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.230','2019-09-28 08:55:39'),(7037,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'183.15.183.240','2019-09-28 08:55:41'),(7038,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.240','2019-09-28 08:55:46'),(7039,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',3,'123.139.73.5','2019-09-28 10:40:13'),(7040,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'211.161.245.248','2019-09-28 10:46:40'),(7041,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.230.88.5','2019-09-28 11:02:23'),(7042,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.240','2019-09-28 16:25:57'),(7043,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2046,'36.25.105.192','2019-09-28 18:12:07'),(7044,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.25.105.192','2019-09-28 18:12:16'),(7045,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'211.161.245.248','2019-09-28 22:37:23'),(7046,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'211.161.245.248','2019-09-28 22:39:13'),(7047,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'211.161.245.248','2019-09-28 22:43:28'),(7048,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'202.104.17.195','2019-09-29 10:09:35'),(7049,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-09-29 10:17:06'),(7050,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'183.63.51.77','2019-09-29 10:17:15'),(7051,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'211.5.141.233','2019-09-29 11:36:56'),(7052,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'112.10.180.116','2019-09-29 12:34:32'),(7053,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.10.180.116','2019-09-29 12:36:30'),(7054,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.97.54.114','2019-09-29 13:14:36'),(7055,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'112.97.54.114','2019-09-29 13:15:38'),(7056,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.97.54.114','2019-09-29 13:16:05'),(7057,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.77','2019-09-29 14:56:52'),(7058,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.91.141.198','2019-09-29 15:50:51'),(7059,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',30,'183.62.192.182','2019-09-29 16:02:18'),(7060,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'183.63.51.77','2019-09-29 16:43:49'),(7061,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',5,'183.63.51.77','2019-09-29 16:44:10'),(7062,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'119.137.52.145','2019-09-29 19:04:04'),(7063,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'119.86.231.129','2019-09-29 22:00:32'),(7064,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'119.86.231.129','2019-09-29 22:01:42'),(7065,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'42.91.141.198','2019-09-29 22:54:19'),(7066,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.91.141.198','2019-09-29 22:54:38'),(7067,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.91.141.198','2019-09-29 22:54:39'),(7068,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',3,'42.91.141.198','2019-09-29 22:54:50'),(7069,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.91.141.198','2019-09-29 22:54:58'),(7070,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.91.141.198','2019-09-29 22:55:01'),(7071,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.91.141.198','2019-09-29 22:55:04'),(7072,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.91.141.198','2019-09-29 22:55:07'),(7073,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'42.91.141.198','2019-09-29 22:55:09'),(7074,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.91.141.198','2019-09-29 22:55:12'),(7075,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'42.91.141.198','2019-09-29 22:55:13'),(7076,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.91.141.198','2019-09-29 22:55:19'),(7077,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.91.141.198','2019-09-29 22:55:19'),(7078,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'117.136.32.97','2019-09-30 00:30:00'),(7079,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',631,'183.15.183.237','2019-09-30 00:42:53'),(7080,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',7,'183.15.183.237','2019-09-30 00:43:08'),(7081,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',2537,'183.15.183.237','2019-09-30 00:43:53'),(7082,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'183.15.183.237','2019-09-30 00:44:41'),(7083,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',451,'183.15.183.227','2019-09-30 01:16:42'),(7084,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',6,'183.15.183.237','2019-09-30 01:17:02'),(7085,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'183.15.183.237','2019-09-30 01:17:05'),(7086,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'113.116.141.85','2019-09-30 07:54:31'),(7087,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.141.85','2019-09-30 07:54:42'),(7088,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.81.146.175','2019-09-30 10:05:06'),(7089,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.81.146.175','2019-09-30 10:05:10'),(7090,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.81.146.175','2019-09-30 10:05:48'),(7091,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'101.81.146.175','2019-09-30 10:05:50'),(7092,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.81.146.175','2019-09-30 10:11:07'),(7093,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',882,'183.63.51.77','2019-09-30 10:15:38'),(7094,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-09-30 10:15:47'),(7095,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',12,'183.63.51.77','2019-09-30 10:16:00'),(7096,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'183.63.51.77','2019-09-30 10:16:05'),(7097,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'183.63.51.77','2019-09-30 10:16:18'),(7098,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.64.140','2019-09-30 11:54:03'),(7099,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.6.40.70','2019-09-30 12:44:34'),(7100,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.6.40.70','2019-09-30 12:46:07'),(7101,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'183.63.51.77','2019-09-30 14:32:41'),(7102,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',6,'183.63.51.77','2019-09-30 14:49:24'),(7103,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'183.63.51.77','2019-09-30 15:21:01'),(7104,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'183.63.51.77','2019-09-30 15:31:09'),(7105,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'222.64.19.15','2019-09-30 15:59:01'),(7106,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'120.229.28.242','2019-09-30 16:51:01'),(7107,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'117.136.79.121','2019-09-30 18:18:54'),(7108,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'117.136.79.121','2019-09-30 18:19:40'),(7109,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'117.136.79.121','2019-09-30 18:23:30'),(7110,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'117.136.79.121','2019-09-30 18:24:32'),(7111,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'120.36.254.139','2019-09-30 19:03:58'),(7112,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.36.254.139','2019-09-30 19:04:24'),(7113,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.36.254.139','2019-09-30 19:05:40'),(7114,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.36.254.139','2019-09-30 19:05:51'),(7115,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.36.254.139','2019-09-30 19:10:07'),(7116,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.140.11.124','2019-09-30 19:57:12'),(7117,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'117.136.79.121','2019-09-30 20:00:20'),(7118,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'113.116.141.85','2019-10-01 01:52:51'),(7119,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1630,'113.87.44.60','2019-10-01 02:39:41'),(7120,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2682,'113.87.44.60','2019-10-01 02:39:47'),(7121,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1461,'180.163.220.68','2019-10-01 02:39:57'),(7122,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',640,'42.236.10.93','2019-10-01 02:39:58'),(7123,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',208,'113.87.44.60','2019-10-01 02:40:00'),(7124,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'180.163.220.3','2019-10-01 02:40:08'),(7125,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.210.73.92','2019-10-01 06:53:09'),(7126,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'125.210.73.92','2019-10-01 06:53:31'),(7127,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'125.210.73.92','2019-10-01 07:08:51'),(7128,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'203.208.60.71','2019-10-01 08:25:47'),(7129,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-10-01 11:05:54'),(7130,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'125.210.73.92','2019-10-01 16:12:24'),(7131,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.210.73.92','2019-10-01 16:12:52'),(7132,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',655,'110.249.201.160','2019-10-02 05:18:49'),(7133,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.136.39','2019-10-02 08:22:27'),(7134,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.188.234.242','2019-10-02 10:55:43'),(7135,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.188.234.242','2019-10-02 10:56:00'),(7136,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.86.35','2019-10-02 11:08:00'),(7137,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.193.194.0','2019-10-02 14:31:59'),(7138,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.5','2019-10-02 14:32:11'),(7139,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'111.193.194.0','2019-10-02 14:32:31'),(7140,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',611,'180.163.220.68','2019-10-02 14:32:41'),(7141,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',9,'203.208.60.63','2019-10-02 22:00:48'),(7142,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',5,'203.208.60.64','2019-10-02 22:01:33'),(7143,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'203.208.60.78','2019-10-02 22:01:59'),(7144,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',6,'203.208.60.71','2019-10-03 02:04:04'),(7145,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',8,'183.208.201.237','2019-10-03 11:18:42'),(7146,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',5,'183.208.201.237','2019-10-03 11:19:42'),(7147,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',5,'183.208.201.237','2019-10-03 11:24:22'),(7148,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'183.208.201.237','2019-10-03 11:24:59'),(7149,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.208.201.237','2019-10-03 11:44:55'),(7150,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.208.201.237','2019-10-03 11:46:02'),(7151,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',35,'183.208.201.237','2019-10-03 11:46:06'),(7152,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'183.208.201.237','2019-10-03 11:50:57'),(7153,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'183.208.201.237','2019-10-03 11:51:01'),(7154,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'183.208.201.237','2019-10-03 11:51:02'),(7155,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.208.201.237','2019-10-03 11:51:04'),(7156,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.208.201.237','2019-10-03 11:51:15'),(7157,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'183.208.201.237','2019-10-03 11:51:28'),(7158,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'183.208.201.237','2019-10-03 11:51:59'),(7159,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',7,'183.208.201.237','2019-10-03 11:53:46'),(7160,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'183.208.201.237','2019-10-03 12:16:08'),(7161,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.26.54.167','2019-10-03 13:35:24'),(7162,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',32,'103.27.26.170','2019-10-03 17:35:59'),(7163,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'113.88.136.21','2019-10-03 21:38:21'),(7164,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'120.229.75.11','2019-10-03 23:25:55'),(7165,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'220.166.10.204','2019-10-04 11:48:19'),(7166,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.236.10.93','2019-10-04 11:48:29'),(7167,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'220.166.10.204','2019-10-04 11:50:12'),(7168,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',635,'180.163.220.4','2019-10-04 11:51:20'),(7169,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.199.21.2','2019-10-04 13:35:18'),(7170,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'203.208.60.44','2019-10-04 16:29:25'),(7171,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'108.170.142.96','2019-10-04 17:52:16'),(7172,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'111.196.22.16','2019-10-04 22:43:45'),(7173,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'223.104.66.107','2019-10-05 00:18:28'),(7174,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',641,'117.89.18.59','2019-10-05 15:09:53'),(7175,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.166.107.151','2019-10-05 18:22:56'),(7176,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.206.98.71','2019-10-05 18:43:46'),(7177,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.4','2019-10-05 18:43:58'),(7178,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'117.166.107.151','2019-10-05 18:44:22'),(7179,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.88.65.129','2019-10-05 19:54:43'),(7180,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'111.0.239.66','2019-10-05 20:48:13'),(7181,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'111.0.239.66','2019-10-05 20:49:50'),(7182,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',57,'115.75.181.197','2019-10-06 15:31:03'),(7183,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'115.75.181.197','2019-10-06 15:31:09'),(7184,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'115.75.181.197','2019-10-06 15:31:20'),(7185,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.243.250.12','2019-10-07 01:17:14'),(7186,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.71.132','2019-10-07 07:54:45'),(7187,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',6,'117.136.71.132','2019-10-07 07:54:54'),(7188,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.32.89','2019-10-07 15:14:19'),(7189,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.236.10.125','2019-10-07 15:14:39'),(7190,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'1.203.64.60','2019-10-07 20:08:50'),(7191,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.203.64.60','2019-10-07 20:09:32'),(7192,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.71.132','2019-10-07 20:42:11'),(7193,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'118.247.162.44','2019-10-07 20:47:23'),(7194,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'118.247.162.44','2019-10-07 21:02:05'),(7195,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',102,'117.175.132.141','2019-10-08 09:49:43'),(7196,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'117.175.132.141','2019-10-08 09:49:56'),(7197,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'14.223.177.28','2019-10-08 10:05:42'),(7198,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.95.175.62','2019-10-08 10:34:07'),(7199,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'101.95.175.62','2019-10-08 10:34:40'),(7200,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.235.253.212','2019-10-08 10:51:22'),(7201,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.235.253.212','2019-10-08 10:51:55'),(7202,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'14.18.254.70','2019-10-08 11:09:36'),(7203,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'203.208.60.92','2019-10-08 12:04:08'),(7204,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'106.120.100.78','2019-10-08 12:38:05'),(7205,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',7,'106.120.100.78','2019-10-08 12:39:20'),(7206,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'106.120.100.78','2019-10-08 12:40:18'),(7207,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.71.160','2019-10-08 12:47:09'),(7208,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'117.136.71.160','2019-10-08 12:47:17'),(7209,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.235.215.129','2019-10-08 13:16:29'),(7210,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.235.215.129','2019-10-08 13:16:33'),(7211,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'124.235.215.129','2019-10-08 13:17:07'),(7212,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'218.242.6.50','2019-10-08 13:20:30'),(7213,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.242.6.50','2019-10-08 13:20:40'),(7214,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'218.242.6.50','2019-10-08 13:20:50'),(7215,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'218.242.6.50','2019-10-08 13:25:14'),(7216,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'115.236.119.140','2019-10-08 14:30:40'),(7217,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'115.236.119.140','2019-10-08 14:38:57'),(7218,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.236.119.140','2019-10-08 14:47:28'),(7219,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.150.11.79','2019-10-08 17:07:41'),(7220,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'117.136.80.69','2019-10-08 17:54:35'),(7221,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'117.136.80.69','2019-10-08 17:54:39'),(7222,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',9,'117.136.80.172','2019-10-08 20:23:17'),(7223,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.80.172','2019-10-08 20:27:31'),(7224,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'117.136.80.172','2019-10-08 20:27:40'),(7225,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'117.136.80.172','2019-10-08 20:35:27'),(7226,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',6,'39.149.17.52','2019-10-08 21:13:33'),(7227,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',257,'39.149.17.52','2019-10-08 21:14:17'),(7228,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'39.149.17.52','2019-10-08 21:14:27'),(7229,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'203.208.60.84','2019-10-08 21:34:01'),(7230,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'114.220.214.93','2019-10-08 22:02:22'),(7231,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.220.214.93','2019-10-08 22:03:21'),(7232,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'114.220.214.93','2019-10-08 22:20:07'),(7233,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'111.165.55.152','2019-10-08 22:30:09'),(7234,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'111.165.55.152','2019-10-08 22:30:25'),(7235,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',9,'118.247.162.44','2019-10-08 22:56:59'),(7236,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'203.208.60.80','2019-10-09 00:00:38'),(7237,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',2,'203.208.60.39','2019-10-09 00:15:11'),(7238,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'203.208.60.109','2019-10-09 00:55:19'),(7239,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.163.220.3','2019-10-09 02:52:13'),(7240,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',52,'182.241.60.121','2019-10-09 08:33:42'),(7241,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'182.241.60.121','2019-10-09 08:34:25'),(7242,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.83.3.139','2019-10-09 10:50:53'),(7243,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.186.242.42','2019-10-09 14:32:16'),(7244,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'117.186.242.42','2019-10-09 14:33:20'),(7245,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'117.186.242.42','2019-10-09 14:37:06'),(7246,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'117.186.242.42','2019-10-09 14:38:29'),(7247,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',424,'117.186.242.42','2019-10-09 14:39:06'),(7248,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'123.152.77.205','2019-10-09 15:05:24'),(7249,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.36.251.153','2019-10-09 15:10:51'),(7250,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'117.186.242.42','2019-10-09 16:15:34'),(7251,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',8,'14.114.232.44','2019-10-09 17:50:14'),(7252,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'14.114.232.44','2019-10-09 17:50:16'),(7253,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','22',4,'218.26.55.184','2019-10-09 19:40:06'),(7254,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'117.136.80.172','2019-10-09 20:29:00'),(7255,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'203.208.60.95','2019-10-09 20:31:01'),(7256,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'140.207.23.61','2019-10-09 21:58:05'),(7257,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'140.207.23.61','2019-10-09 21:59:49'),(7258,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'120.229.32.72','2019-10-10 00:45:08'),(7259,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'123.233.155.88','2019-10-10 04:43:32'),(7260,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'123.233.155.88','2019-10-10 04:44:17'),(7261,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',34,'123.53.37.192','2019-10-10 08:58:36'),(7262,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.235.215.129','2019-10-10 09:34:32'),(7263,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.235.215.129','2019-10-10 09:34:36'),(7264,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'113.250.156.184','2019-10-10 10:15:01'),(7265,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'115.236.119.140','2019-10-10 11:01:19'),(7266,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'115.236.119.140','2019-10-10 11:02:16'),(7267,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'115.236.119.140','2019-10-10 11:11:17'),(7268,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.236.119.140','2019-10-10 11:12:20'),(7269,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'167.71.161.97','2019-10-10 11:35:37'),(7270,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.236.119.140','2019-10-10 11:35:49'),(7271,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.172.203','2019-10-10 11:57:05'),(7272,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.25','2019-10-10 12:51:21'),(7273,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.250.89.85','2019-10-10 14:45:05'),(7274,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.250.89.85','2019-10-10 14:45:52'),(7275,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'183.250.89.85','2019-10-10 14:47:26'),(7276,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'183.250.89.85','2019-10-10 14:47:45'),(7277,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'183.250.89.85','2019-10-10 14:49:04'),(7278,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'183.250.89.85','2019-10-10 14:50:36'),(7279,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'1.193.58.93','2019-10-10 14:54:48'),(7280,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.193.58.93','2019-10-10 14:55:17'),(7281,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.193.58.93','2019-10-10 14:56:50'),(7282,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'1.193.58.93','2019-10-10 14:57:30'),(7283,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'1.193.58.93','2019-10-10 14:57:33'),(7284,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',5,'1.193.58.93','2019-10-10 14:58:00'),(7285,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'124.202.214.202','2019-10-10 15:09:35'),(7286,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'124.202.214.202','2019-10-10 15:09:50'),(7287,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',9,'124.202.214.202','2019-10-10 15:10:09'),(7288,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.202.214.202','2019-10-10 15:10:25'),(7289,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'124.202.214.202','2019-10-10 15:10:32'),(7290,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'124.202.214.202','2019-10-10 15:10:52'),(7291,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'124.202.214.202','2019-10-10 15:11:06'),(7292,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'211.139.95.71','2019-10-10 15:12:17'),(7293,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',3,'114.255.71.177','2019-10-10 16:38:08'),(7294,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'114.255.71.177','2019-10-10 16:39:39'),(7295,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'114.255.71.177','2019-10-10 16:39:50'),(7296,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'114.255.71.177','2019-10-10 16:42:32'),(7297,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'114.255.71.177','2019-10-10 16:43:16'),(7298,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'114.255.71.177','2019-10-10 16:44:31'),(7299,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'114.255.71.177','2019-10-10 16:45:40'),(7300,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',4,'114.255.71.177','2019-10-10 16:46:28'),(7301,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'1.193.58.93','2019-10-10 16:50:32'),(7302,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.193.58.93','2019-10-10 16:51:38'),(7303,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'211.139.95.71','2019-10-10 16:59:00'),(7304,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'211.139.95.71','2019-10-10 17:03:15'),(7305,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'113.88.139.219','2019-10-10 17:42:01'),(7306,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'113.88.139.219','2019-10-10 17:42:09'),(7307,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'113.88.139.219','2019-10-10 17:42:18'),(7308,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'113.88.139.242','2019-10-10 17:42:31'),(7309,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'113.88.139.219','2019-10-10 21:19:19'),(7310,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.139.219','2019-10-10 21:19:28'),(7311,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'27.154.78.148','2019-10-10 21:19:35'),(7312,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.163.220.66','2019-10-10 22:14:19'),(7313,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',40,'117.136.40.240','2019-10-11 08:14:51'),(7314,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.40.240','2019-10-11 08:52:19'),(7315,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'1.193.58.93','2019-10-11 08:54:40'),(7316,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.24.170.219','2019-10-11 09:13:32'),(7317,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.193.58.93','2019-10-11 09:25:42'),(7318,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'1.193.58.93','2019-10-11 09:26:09'),(7319,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'1.193.58.93','2019-10-11 09:26:12'),(7320,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'1.193.58.93','2019-10-11 09:27:19'),(7321,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.193.58.93','2019-10-11 09:28:03'),(7322,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.136.182.141','2019-10-11 09:51:16'),(7323,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'183.136.182.141','2019-10-11 09:51:24'),(7324,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.136.182.141','2019-10-11 09:51:41'),(7325,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'121.35.187.203','2019-10-11 10:09:34'),(7326,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',15,'121.35.187.129','2019-10-11 11:06:37'),(7327,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',22,'121.35.187.129','2019-10-11 11:09:22'),(7328,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'121.35.187.129','2019-10-11 11:09:44'),(7329,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'183.39.153.214','2019-10-11 12:53:48'),(7330,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'117.136.32.50','2019-10-11 14:24:48'),(7331,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'117.136.32.50','2019-10-11 14:25:22'),(7332,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'117.136.32.50','2019-10-11 14:26:08'),(7333,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'117.136.32.50','2019-10-11 14:26:13'),(7334,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'117.136.32.50','2019-10-11 14:30:53'),(7335,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'117.136.32.50','2019-10-11 14:33:47'),(7336,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.32.50','2019-10-11 14:34:19'),(7337,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','33',3,'117.136.32.50','2019-10-11 14:35:00'),(7338,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'117.136.32.50','2019-10-11 14:36:03'),(7339,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.32.50','2019-10-11 14:36:09'),(7340,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'117.136.32.50','2019-10-11 14:42:45'),(7341,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'117.136.32.50','2019-10-11 14:42:59'),(7342,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-10-11 14:56:08'),(7343,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'183.63.51.77','2019-10-11 14:56:11'),(7344,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-10-11 14:56:22'),(7345,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.38.48.226','2019-10-11 17:17:50'),(7346,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'119.129.115.201','2019-10-11 17:53:07'),(7347,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-10-11 17:57:16'),(7348,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'183.63.51.77','2019-10-11 17:57:22'),(7349,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'183.63.51.77','2019-10-11 17:57:26'),(7350,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.129.115.201','2019-10-11 18:00:54'),(7351,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'183.63.51.77','2019-10-11 18:12:43'),(7352,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'223.104.63.23','2019-10-11 18:55:56'),(7353,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'223.104.63.23','2019-10-11 19:06:14'),(7354,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',3,'223.104.63.23','2019-10-11 19:06:49'),(7355,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'223.104.63.23','2019-10-11 19:07:12'),(7356,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'223.104.63.23','2019-10-11 19:07:28'),(7357,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'223.104.63.23','2019-10-11 19:27:12'),(7358,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',2,'223.104.63.23','2019-10-11 20:01:48'),(7359,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','37',2,'223.104.63.23','2019-10-11 20:04:03'),(7360,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.40.75.227','2019-10-11 20:48:58'),(7361,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'27.154.78.148','2019-10-11 20:52:08'),(7362,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.154.78.148','2019-10-11 21:06:26'),(7363,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.154.78.148','2019-10-11 21:06:56'),(7364,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'211.161.245.248','2019-10-11 21:17:15'),(7365,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'211.161.245.248','2019-10-11 21:18:15'),(7366,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'59.56.89.7','2019-10-11 21:18:33'),(7367,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'125.77.105.58','2019-10-11 21:18:53'),(7368,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'211.161.245.248','2019-10-11 21:19:06'),(7369,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'211.161.245.248','2019-10-11 22:06:58'),(7370,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.38.44.15','2019-10-11 22:32:40'),(7371,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.38.44.15','2019-10-11 23:27:18'),(7372,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'115.46.74.193','2019-10-11 23:59:50'),(7373,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.46.74.193','2019-10-12 00:00:23'),(7374,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.77','2019-10-12 09:30:56'),(7375,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'183.63.51.77','2019-10-12 09:31:02'),(7376,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',6,'183.63.51.77','2019-10-12 09:31:05'),(7377,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',3,'183.63.51.77','2019-10-12 09:31:08'),(7378,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',3,'58.247.212.239','2019-10-12 10:16:20'),(7379,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'58.247.212.239','2019-10-12 10:16:35'),(7380,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'183.192.179.16','2019-10-12 10:24:49'),(7381,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'116.128.128.41','2019-10-12 10:24:49'),(7382,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'59.36.132.240','2019-10-12 12:36:32'),(7383,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'183.192.179.16','2019-10-12 12:36:32'),(7384,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',32,'183.192.179.16','2019-10-12 12:36:32'),(7385,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'116.128.128.41','2019-10-12 12:48:08'),(7386,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'58.247.212.239','2019-10-12 12:48:08'),(7387,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'59.36.132.240','2019-10-12 13:10:39'),(7388,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'116.128.128.41','2019-10-12 13:10:39'),(7389,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'59.36.132.240','2019-10-12 13:22:30'),(7390,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'116.128.128.41','2019-10-12 13:22:39'),(7391,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'121.35.102.175','2019-10-12 13:59:43'),(7392,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.199.196.67','2019-10-12 15:12:36'),(7393,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.199.196.67','2019-10-12 15:17:11'),(7394,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'123.232.37.133','2019-10-12 16:46:10'),(7395,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.187.59.41','2019-10-12 17:03:22'),(7396,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.66','2019-10-12 17:03:35'),(7397,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'119.187.59.41','2019-10-12 17:03:49'),(7398,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'42.236.10.114','2019-10-12 17:04:12'),(7399,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.77','2019-10-12 17:39:16'),(7400,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'223.104.3.146','2019-10-12 17:58:32'),(7401,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'58.250.17.184','2019-10-12 18:15:22'),(7402,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'58.250.17.184','2019-10-12 18:18:47'),(7403,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.66.106','2019-10-12 21:47:43'),(7404,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',7,'59.36.132.240','2019-10-13 02:42:14'),(7405,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',16,'59.36.132.240','2019-10-13 02:42:14'),(7406,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',840,'183.192.179.16','2019-10-13 02:42:15'),(7407,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',1886,'183.192.179.16','2019-10-13 02:42:16'),(7408,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',2321,'116.128.128.41','2019-10-13 02:42:16'),(7409,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',2638,'182.254.52.17','2019-10-13 02:42:17'),(7410,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',7,'59.36.132.240','2019-10-13 02:42:19'),(7411,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'59.36.132.240','2019-10-13 02:42:23'),(7412,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',867,'58.247.212.239','2019-10-13 02:43:44'),(7413,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',7,'59.36.132.240','2019-10-13 03:19:25'),(7414,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',420,'182.254.52.17','2019-10-13 03:19:25'),(7415,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',1467,'116.128.128.41','2019-10-13 03:19:26'),(7416,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',2048,'182.254.52.17','2019-10-13 03:19:27'),(7417,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',5,'116.128.128.41','2019-10-13 03:19:35'),(7418,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1498,'58.247.212.239','2019-10-13 03:20:50'),(7419,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'59.36.132.240','2019-10-13 05:21:33'),(7420,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',4,'59.36.132.240','2019-10-13 05:21:33'),(7421,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','41',4,'59.36.132.240','2019-10-13 05:55:08'),(7422,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',2,'58.247.212.239','2019-10-13 06:08:52'),(7423,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',4,'182.254.52.17','2019-10-13 06:08:52'),(7424,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.39.98','2019-10-13 10:16:31'),(7425,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'119.147.80.168','2019-10-13 15:55:46'),(7426,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.147.80.168','2019-10-13 15:56:20'),(7427,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'211.161.245.248','2019-10-13 16:01:06'),(7428,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.182.29','2019-10-13 16:38:56'),(7429,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'211.161.245.248','2019-10-13 16:46:20'),(7430,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'211.161.245.248','2019-10-13 17:03:43'),(7431,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'211.161.245.248','2019-10-13 17:03:46'),(7432,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'211.161.245.248','2019-10-13 17:08:36'),(7433,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'183.15.182.29','2019-10-13 17:16:20'),(7434,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'183.15.182.29','2019-10-13 17:17:35'),(7435,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',5,'183.15.182.29','2019-10-13 17:28:03'),(7436,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'211.161.245.248','2019-10-13 17:32:27'),(7437,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.40.197','2019-10-14 08:05:27'),(7438,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.183.207.98','2019-10-14 09:07:45'),(7439,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'61.183.207.98','2019-10-14 09:08:12'),(7440,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'61.183.207.98','2019-10-14 09:09:28'),(7441,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'61.183.207.98','2019-10-14 09:12:51'),(7442,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.64.159','2019-10-14 12:47:50'),(7443,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',6,'223.104.64.159','2019-10-14 12:47:53'),(7444,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'58.56.96.29','2019-10-14 14:21:43'),(7445,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'58.56.96.29','2019-10-14 14:21:46'),(7446,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'180.163.220.4','2019-10-14 14:22:07'),(7447,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',3,'42.236.10.75','2019-10-14 14:22:16'),(7448,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',4,'182.150.142.229','2019-10-14 15:27:34'),(7449,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'123.177.44.169','2019-10-14 15:42:33'),(7450,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'180.163.220.68','2019-10-14 15:55:22'),(7451,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'183.230.42.68','2019-10-14 15:58:03'),(7452,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.230.42.68','2019-10-14 15:58:31'),(7453,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'183.230.42.68','2019-10-14 15:58:54'),(7454,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'117.136.81.15','2019-10-14 17:17:51'),(7455,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',463,'183.62.134.100','2019-10-14 17:18:45'),(7456,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'183.62.134.100','2019-10-14 17:19:04'),(7457,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-14 17:56:43'),(7458,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'125.84.181.233','2019-10-14 18:13:03'),(7459,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'117.136.79.163','2019-10-14 18:33:42'),(7460,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'117.136.79.163','2019-10-14 18:43:22'),(7461,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'117.136.79.163','2019-10-14 18:47:52'),(7462,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',666,'117.136.79.163','2019-10-14 18:48:16'),(7463,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',8,'58.250.17.184','2019-10-14 18:48:30'),(7464,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'117.136.79.163','2019-10-14 18:49:20'),(7465,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'117.136.79.163','2019-10-14 18:51:42'),(7466,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',4,'117.136.79.163','2019-10-14 19:12:54'),(7467,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'58.250.17.184','2019-10-14 19:31:50'),(7468,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'47.240.73.206','2019-10-14 21:46:59'),(7469,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'14.197.23.124','2019-10-14 22:44:01'),(7470,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'111.204.220.62','2019-10-15 11:29:20'),(7471,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-15 11:53:16'),(7472,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'183.136.182.141','2019-10-15 12:05:42'),(7473,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'183.136.182.141','2019-10-15 12:11:50'),(7474,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'114.85.110.82','2019-10-15 13:59:39'),(7475,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',3,'183.63.51.65','2019-10-15 14:32:42'),(7476,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'183.63.51.65','2019-10-15 14:33:16'),(7477,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'210.56.192.130','2019-10-15 14:36:27'),(7478,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'210.56.192.130','2019-10-15 14:37:11'),(7479,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'210.56.192.130','2019-10-15 14:38:12'),(7480,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'210.56.192.130','2019-10-15 14:38:16'),(7481,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.57.246.64','2019-10-15 15:23:04'),(7482,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'210.56.192.130','2019-10-15 15:24:01'),(7483,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'210.56.192.130','2019-10-15 15:24:44'),(7484,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'210.56.192.130','2019-10-15 15:35:19'),(7485,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'1.119.143.250','2019-10-15 18:55:11'),(7486,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'1.119.143.250','2019-10-15 18:55:25'),(7487,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.119.143.250','2019-10-15 18:55:37'),(7488,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'1.119.143.250','2019-10-15 18:55:42'),(7489,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'221.216.138.122','2019-10-15 23:34:23'),(7490,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.216.138.122','2019-10-15 23:34:58'),(7491,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',222,'113.88.99.214','2019-10-16 00:06:04'),(7492,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',49,'58.247.212.239','2019-10-16 03:51:21'),(7493,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.35','2019-10-16 08:17:35'),(7494,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'182.108.3.96','2019-10-16 09:44:43'),(7495,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'182.108.3.96','2019-10-16 09:52:21'),(7496,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.108.3.96','2019-10-16 10:30:29'),(7497,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',6,'182.108.3.96','2019-10-16 10:58:18'),(7498,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','20',3,'183.63.51.65','2019-10-16 11:02:13'),(7499,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','18',3,'183.63.51.65','2019-10-16 11:02:19'),(7500,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','19',3,'183.63.51.65','2019-10-16 11:02:30'),(7501,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'182.108.3.96','2019-10-16 11:38:30'),(7502,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','35',4,'42.120.74.102','2019-10-16 11:50:15'),(7503,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.2','2019-10-16 12:23:40'),(7504,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'223.104.63.2','2019-10-16 12:28:56'),(7505,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'110.185.11.161','2019-10-16 13:22:01'),(7506,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'42.120.74.104','2019-10-16 13:42:02'),(7507,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'42.120.74.104','2019-10-16 13:48:27'),(7508,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.64.140.235','2019-10-16 14:01:59'),(7509,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'183.63.51.65','2019-10-16 14:08:58'),(7510,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',3,'183.63.51.65','2019-10-16 14:11:46'),(7511,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'183.63.51.65','2019-10-16 14:12:24'),(7512,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',3,'183.63.51.65','2019-10-16 14:18:10'),(7513,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'183.63.51.65','2019-10-16 14:18:38'),(7514,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.249.50.132','2019-10-16 14:20:23'),(7515,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'218.249.50.132','2019-10-16 14:21:07'),(7516,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'218.249.50.132','2019-10-16 14:21:25'),(7517,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'110.80.39.178','2019-10-16 14:44:18'),(7518,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'110.80.39.178','2019-10-16 14:45:23'),(7519,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'110.80.39.178','2019-10-16 14:45:41'),(7520,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'182.108.3.96','2019-10-16 15:08:07'),(7521,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'182.108.3.96','2019-10-16 15:10:58'),(7522,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'183.63.51.65','2019-10-16 16:07:47'),(7523,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'183.63.51.65','2019-10-16 16:08:00'),(7524,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'183.63.51.65','2019-10-16 16:22:54'),(7525,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'36.110.36.250','2019-10-16 17:07:42'),(7526,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'36.110.36.250','2019-10-16 17:07:52'),(7527,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'36.110.36.250','2019-10-16 17:08:02'),(7528,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.110.36.250','2019-10-16 17:08:22'),(7529,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',3,'183.63.51.65','2019-10-16 17:16:40'),(7530,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.108.3.96','2019-10-16 17:27:32'),(7531,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'182.108.3.96','2019-10-16 17:29:13'),(7532,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'182.108.3.96','2019-10-16 17:30:21'),(7533,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'36.110.36.250','2019-10-16 17:42:56'),(7534,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'36.110.36.250','2019-10-16 17:43:19'),(7535,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'36.110.36.250','2019-10-16 17:43:44'),(7536,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'36.110.36.250','2019-10-16 17:43:52'),(7537,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.110.36.250','2019-10-16 17:44:18'),(7538,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'36.110.36.250','2019-10-16 17:44:20'),(7539,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',256,'117.136.12.160','2019-10-16 18:37:16'),(7540,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.12.160','2019-10-16 18:50:46'),(7541,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.60.133.60','2019-10-16 19:42:50'),(7542,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.60.132.190','2019-10-16 19:43:13'),(7543,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'202.60.132.178','2019-10-16 19:43:25'),(7544,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.60.132.149','2019-10-16 19:43:40'),(7545,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'202.60.132.22','2019-10-16 19:46:25'),(7546,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.138.7','2019-10-16 21:53:36'),(7547,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',6,'113.88.138.7','2019-10-16 21:53:39'),(7548,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'101.45.198.9','2019-10-16 22:26:27'),(7549,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'221.222.251.37','2019-10-16 22:47:27'),(7550,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.10.154.81','2019-10-16 23:12:41'),(7551,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'117.10.154.81','2019-10-16 23:13:21'),(7552,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'117.10.154.81','2019-10-16 23:13:29'),(7553,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.10.154.81','2019-10-16 23:14:22'),(7554,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'117.10.154.81','2019-10-16 23:14:27'),(7555,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'117.10.154.81','2019-10-16 23:14:48'),(7556,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',3,'117.10.154.81','2019-10-16 23:14:59'),(7557,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',4,'221.222.251.37','2019-10-17 00:28:50'),(7558,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.222.251.37','2019-10-17 00:39:23'),(7559,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.222.251.37','2019-10-17 00:39:38'),(7560,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'36.4.148.78','2019-10-17 06:48:14'),(7561,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',38,'223.104.64.138','2019-10-17 08:42:29'),(7562,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'223.104.108.130','2019-10-17 08:49:36'),(7563,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.108.130','2019-10-17 08:50:04'),(7564,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'223.104.108.130','2019-10-17 08:50:34'),(7565,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',4,'223.104.108.130','2019-10-17 08:55:15'),(7566,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'59.36.132.240','2019-10-17 09:10:19'),(7567,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'183.63.51.65','2019-10-17 11:47:08'),(7568,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',5,'183.63.51.65','2019-10-17 11:47:30'),(7569,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',7,'183.63.51.65','2019-10-17 11:48:41'),(7570,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',78,'121.69.82.138','2019-10-17 13:12:26'),(7571,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',467,'218.4.202.146','2019-10-17 13:28:50'),(7572,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',18,'218.4.202.146','2019-10-17 13:28:58'),(7573,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',883,'180.163.220.67','2019-10-17 13:29:07'),(7574,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'121.69.82.138','2019-10-17 13:30:36'),(7575,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',10,'117.136.0.160','2019-10-17 14:52:22'),(7576,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',1883,'183.63.51.65','2019-10-17 15:20:22'),(7577,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'101.64.140.235','2019-10-17 17:11:00'),(7578,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','43',4,'182.254.52.17','2019-10-17 17:22:35'),(7579,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',7,'183.63.51.65','2019-10-17 17:50:03'),(7580,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'35.238.41.137','2019-10-17 18:07:56'),(7581,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.63.51.65','2019-10-17 18:57:05'),(7582,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'183.63.51.65','2019-10-17 18:59:10'),(7583,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',9,'183.63.51.65','2019-10-17 19:06:28'),(7584,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'116.128.128.41','2019-10-17 20:21:43'),(7585,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',7,'113.88.138.7','2019-10-17 20:37:43'),(7586,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',4,'116.128.128.41','2019-10-17 21:55:25'),(7587,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.118.113.90','2019-10-17 22:54:41'),(7588,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.118.113.90','2019-10-17 22:58:19'),(7589,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.118.113.90','2019-10-17 23:00:21'),(7590,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'182.254.52.17','2019-10-17 23:24:55'),(7591,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'59.36.132.240','2019-10-17 23:51:37'),(7592,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.155.169.152','2019-10-18 00:04:07'),(7593,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',2,'182.254.52.17','2019-10-18 00:04:54'),(7594,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'116.128.128.41','2019-10-18 01:02:41'),(7595,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'183.192.179.16','2019-10-18 01:02:41'),(7596,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',5,'116.128.128.41','2019-10-18 02:06:04'),(7597,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'203.208.60.70','2019-10-18 06:15:22'),(7598,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',2,'116.128.128.41','2019-10-18 07:09:12'),(7599,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'59.36.132.240','2019-10-18 07:40:52'),(7600,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.63.5','2019-10-18 08:32:42'),(7601,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',1052,'223.104.63.5','2019-10-18 09:02:40'),(7602,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',7,'183.63.51.65','2019-10-18 09:15:10'),(7603,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'113.116.192.90','2019-10-18 09:36:57'),(7604,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.192.90','2019-10-18 09:37:30'),(7605,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'183.63.51.65','2019-10-18 09:53:03'),(7606,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.192.90','2019-10-18 10:29:08'),(7607,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.63.51.65','2019-10-18 11:39:09'),(7608,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',419,'183.6.50.229','2019-10-18 11:55:12'),(7609,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',1344,'183.6.50.229','2019-10-18 11:55:36'),(7610,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',5,'58.247.212.239','2019-10-18 13:11:40'),(7611,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',275,'183.63.51.65','2019-10-18 14:44:06'),(7612,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'183.63.51.65','2019-10-18 14:44:10'),(7613,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'183.63.51.65','2019-10-18 14:49:01'),(7614,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.63.51.65','2019-10-18 15:45:47'),(7615,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'183.63.51.65','2019-10-18 16:13:53'),(7616,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.152.77.167','2019-10-18 16:16:56'),(7617,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'183.63.51.65','2019-10-18 16:21:34'),(7618,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',5,'183.63.51.65','2019-10-18 16:28:22'),(7619,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',3,'183.63.51.65','2019-10-18 16:31:27'),(7620,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',1,'123.152.77.167','2019-10-18 17:00:08'),(7621,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'123.152.77.167','2019-10-18 17:06:39'),(7622,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'182.254.52.17','2019-10-18 17:23:13'),(7623,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.55.234.56','2019-10-18 17:51:39'),(7624,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.55.234.56','2019-10-18 17:51:46'),(7625,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'222.55.234.77','2019-10-18 17:54:32'),(7626,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'222.55.234.77','2019-10-18 17:54:45'),(7627,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'222.55.234.77','2019-10-18 17:55:46'),(7628,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'183.63.51.65','2019-10-18 17:59:47'),(7629,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'183.63.51.65','2019-10-18 18:07:51'),(7630,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'183.63.51.65','2019-10-18 18:48:44'),(7631,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',3,'183.63.51.65','2019-10-18 19:04:26'),(7632,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.63.51.65','2019-10-18 19:18:01'),(7633,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'183.63.51.65','2019-10-18 19:18:12'),(7634,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.199.34.103','2019-10-18 20:11:16'),(7635,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'101.227.139.178','2019-10-18 20:12:16'),(7636,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'59.36.132.240','2019-10-19 00:21:07'),(7637,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'203.208.60.113','2019-10-19 01:33:54'),(7638,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.220.77.190','2019-10-19 08:19:21'),(7639,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'183.220.77.190','2019-10-19 08:19:36'),(7640,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',2,'59.36.132.240','2019-10-19 09:13:27'),(7641,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',3,'58.247.212.239','2019-10-19 11:12:25'),(7642,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'66.249.79.205','2019-10-19 11:17:26'),(7643,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.15.182.201','2019-10-19 11:37:05'),(7644,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',10,'203.208.60.126','2019-10-19 14:50:13'),(7645,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.41.163.101','2019-10-19 14:50:47'),(7646,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'183.15.182.201','2019-10-19 15:06:58'),(7647,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.20.57.245','2019-10-19 16:32:13'),(7648,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'59.36.132.240','2019-10-19 16:49:04'),(7649,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'219.239.227.240','2019-10-19 17:29:42'),(7650,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'180.163.220.66','2019-10-19 17:30:11'),(7651,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',1025,'219.239.227.240','2019-10-19 17:34:59'),(7652,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.156.140.67','2019-10-19 21:12:54'),(7653,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','25',3,'182.254.52.17','2019-10-20 01:08:00'),(7654,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'116.128.128.41','2019-10-20 03:02:08'),(7655,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',9,'59.36.132.240','2019-10-20 06:04:23'),(7656,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'59.36.132.240','2019-10-20 06:33:09');
INSERT INTO `log_view` VALUES (7657,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',216,'182.254.52.17','2019-10-20 06:33:09'),(7658,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'58.247.212.239','2019-10-20 06:52:07'),(7659,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',6,'116.128.128.41','2019-10-20 06:52:07'),(7660,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'183.15.182.201','2019-10-20 09:43:51'),(7661,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.239.227.240','2019-10-20 10:14:09'),(7662,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.67','2019-10-20 10:15:17'),(7663,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.174.30.244','2019-10-20 10:51:26'),(7664,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',847,'59.35.84.236','2019-10-20 14:19:30'),(7665,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',4,'42.236.10.78','2019-10-20 14:19:50'),(7666,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.220.95.70','2019-10-20 16:12:06'),(7667,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'183.220.95.70','2019-10-20 16:12:35'),(7668,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.220.95.70','2019-10-20 16:13:12'),(7669,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.120.100.78','2019-10-20 17:02:01'),(7670,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'210.35.68.10','2019-10-20 17:35:42'),(7671,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'23.225.223.5','2019-10-20 19:15:09'),(7672,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'221.12.59.213','2019-10-20 20:16:27'),(7673,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.12.59.213','2019-10-20 20:16:58'),(7674,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'221.12.59.213','2019-10-20 20:17:14'),(7675,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'221.12.59.213','2019-10-20 20:17:29'),(7676,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'221.12.59.213','2019-10-20 20:17:43'),(7677,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'221.12.59.213','2019-10-20 21:22:34'),(7678,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'221.12.59.213','2019-10-20 21:22:39'),(7679,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',5,'221.12.59.213','2019-10-20 21:24:11'),(7680,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.134.23.206','2019-10-20 21:27:31'),(7681,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.134.23.206','2019-10-20 21:27:45'),(7682,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'61.134.23.206','2019-10-20 21:28:09'),(7683,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'61.134.23.206','2019-10-20 21:28:22'),(7684,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.134.23.206','2019-10-20 21:44:48'),(7685,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.230.64.23','2019-10-20 22:34:44'),(7686,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'222.55.234.56','2019-10-21 08:24:55'),(7687,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.55.234.56','2019-10-21 08:26:32'),(7688,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.55.234.56','2019-10-21 08:26:49'),(7689,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.55.234.56','2019-10-21 08:26:51'),(7690,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'222.55.234.56','2019-10-21 08:26:59'),(7691,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'222.55.234.56','2019-10-21 08:32:11'),(7692,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'139.207.178.254','2019-10-21 08:44:00'),(7693,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'139.207.178.254','2019-10-21 08:44:36'),(7694,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'183.63.51.65','2019-10-21 10:28:48'),(7695,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'221.12.59.212','2019-10-21 10:41:04'),(7696,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'101.89.19.140','2019-10-21 10:52:17'),(7697,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'218.26.54.214','2019-10-21 13:05:20'),(7698,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.26.54.214','2019-10-21 13:05:30'),(7699,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'218.26.54.214','2019-10-21 13:05:59'),(7700,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',2,'60.28.142.26','2019-10-21 13:31:59'),(7701,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.128.208.90','2019-10-21 16:36:38'),(7702,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.85.102.173','2019-10-21 16:55:06'),(7703,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'210.56.192.130','2019-10-21 16:59:30'),(7704,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.241.50.63','2019-10-21 17:41:13'),(7705,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.18.182.223','2019-10-21 17:41:13'),(7706,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'121.51.112.49','2019-10-21 17:41:13'),(7707,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'182.254.52.17','2019-10-21 19:54:39'),(7708,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.79.127','2019-10-21 21:21:04'),(7709,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',7,'117.136.79.127','2019-10-21 21:21:13'),(7710,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',3,'42.236.10.78','2019-10-21 21:52:48'),(7711,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'112.44.106.86','2019-10-21 22:16:43'),(7712,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'112.44.106.86','2019-10-21 22:17:00'),(7713,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.44.106.86','2019-10-21 22:22:12'),(7714,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.44.106.86','2019-10-21 22:22:42'),(7715,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'112.44.106.86','2019-10-21 22:23:22'),(7716,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'112.44.106.86','2019-10-21 22:33:57'),(7717,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'112.44.106.86','2019-10-21 22:35:26'),(7718,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'121.51.112.49','2019-10-22 00:29:25'),(7719,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',27,'223.104.63.26','2019-10-22 08:51:11'),(7720,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'223.104.63.26','2019-10-22 08:51:25'),(7721,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',32,'101.89.19.140','2019-10-22 09:41:47'),(7722,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.65','2019-10-22 10:45:31'),(7723,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',50,'117.139.233.229','2019-10-22 11:25:41'),(7724,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'117.139.233.229','2019-10-22 11:26:52'),(7725,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',4,'117.139.233.229','2019-10-22 11:27:52'),(7726,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',6,'117.139.233.229','2019-10-22 11:28:07'),(7727,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',22,'117.139.233.229','2019-10-22 11:32:09'),(7728,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'117.139.233.229','2019-10-22 11:32:20'),(7729,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'117.139.233.229','2019-10-22 11:33:06'),(7730,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'117.139.233.229','2019-10-22 11:33:25'),(7731,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',2,'117.139.233.229','2019-10-22 11:33:28'),(7732,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.139.233.229','2019-10-22 11:33:59'),(7733,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.12.59.213','2019-10-22 11:34:52'),(7734,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'219.239.227.230','2019-10-22 12:44:59'),(7735,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',4,'182.138.91.125','2019-10-22 13:02:41'),(7736,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'182.138.91.125','2019-10-22 13:04:09'),(7737,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'182.138.91.125','2019-10-22 13:04:38'),(7738,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'101.89.19.140','2019-10-22 13:04:59'),(7739,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.138.91.125','2019-10-22 13:05:10'),(7740,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.91.36.196','2019-10-22 13:48:21'),(7741,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.91.36.196','2019-10-22 13:49:54'),(7742,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.63.51.65','2019-10-22 13:50:21'),(7743,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-22 13:50:34'),(7744,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'113.91.36.196','2019-10-22 13:50:53'),(7745,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.91.36.196','2019-10-22 13:52:27'),(7746,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'114.242.219.251','2019-10-22 14:07:05'),(7747,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'114.242.219.251','2019-10-22 14:07:23'),(7748,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.145.5.181','2019-10-22 15:24:54'),(7749,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'219.145.5.181','2019-10-22 15:25:05'),(7750,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-22 16:50:18'),(7751,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.63.51.65','2019-10-22 17:02:00'),(7752,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'183.63.51.65','2019-10-22 17:33:26'),(7753,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'14.155.220.34','2019-10-22 20:42:01'),(7754,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'14.155.220.34','2019-10-22 20:42:13'),(7755,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'14.155.220.34','2019-10-22 20:44:39'),(7756,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'120.229.40.52','2019-10-22 23:57:59'),(7757,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'120.229.40.52','2019-10-22 23:58:28'),(7758,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.229.40.52','2019-10-23 00:01:48'),(7759,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.192.179.16','2019-10-23 08:49:05'),(7760,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'113.251.222.85','2019-10-23 09:18:46'),(7761,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.63.51.65','2019-10-23 10:13:32'),(7762,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.193.211.126','2019-10-23 13:30:28'),(7763,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'124.193.211.126','2019-10-23 13:30:36'),(7764,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.193.211.126','2019-10-23 13:31:24'),(7765,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'124.193.211.126','2019-10-23 13:31:48'),(7766,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'124.193.211.126','2019-10-23 13:37:45'),(7767,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'124.193.211.126','2019-10-23 13:54:09'),(7768,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'124.193.211.126','2019-10-23 13:54:38'),(7769,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'183.63.51.65','2019-10-23 14:16:09'),(7770,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'183.63.51.65','2019-10-23 14:19:00'),(7771,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','17',2,'183.63.51.65','2019-10-23 14:19:54'),(7772,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','32',3,'183.63.51.65','2019-10-23 14:21:37'),(7773,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',23,'183.63.51.65','2019-10-23 14:23:16'),(7774,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'183.63.51.65','2019-10-23 14:23:54'),(7775,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'183.63.51.65','2019-10-23 14:24:16'),(7776,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'183.63.51.65','2019-10-23 14:25:45'),(7777,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.65','2019-10-23 14:26:25'),(7778,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'183.63.51.65','2019-10-23 14:31:28'),(7779,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'183.63.51.65','2019-10-23 14:33:13'),(7780,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',3,'183.63.51.65','2019-10-23 14:37:59'),(7781,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',5,'183.63.51.65','2019-10-23 14:38:49'),(7782,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'183.63.51.65','2019-10-23 14:48:12'),(7783,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.5.202.214','2019-10-23 14:55:25'),(7784,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.5.202.214','2019-10-23 14:56:56'),(7785,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',2,'183.63.51.65','2019-10-23 15:03:25'),(7786,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'114.112.74.239','2019-10-23 15:04:36'),(7787,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.112.74.239','2019-10-23 15:04:39'),(7788,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.219.132.190','2019-10-23 15:09:23'),(7789,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'114.219.132.190','2019-10-23 15:10:56'),(7790,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.219.132.190','2019-10-23 15:11:14'),(7791,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.155.247.113','2019-10-23 15:45:22'),(7792,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'27.155.247.113','2019-10-23 15:51:06'),(7793,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'27.155.247.113','2019-10-23 15:51:23'),(7794,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'27.155.247.113','2019-10-23 15:51:41'),(7795,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',1,'27.155.247.113','2019-10-23 15:52:18'),(7796,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.155.247.113','2019-10-23 15:52:57'),(7797,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'27.155.247.113','2019-10-23 16:02:10'),(7798,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'112.49.232.134','2019-10-23 16:04:31'),(7799,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',43,'112.49.232.134','2019-10-23 16:04:46'),(7800,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-23 17:12:36'),(7801,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',5,'183.63.51.65','2019-10-23 18:04:06'),(7802,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',10,'183.63.51.65','2019-10-23 18:05:22'),(7803,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',6,'183.63.51.65','2019-10-23 18:05:29'),(7804,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.65','2019-10-23 20:10:38'),(7805,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'183.63.51.65','2019-10-23 20:11:00'),(7806,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'183.63.51.65','2019-10-23 20:11:09'),(7807,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-23 20:11:29'),(7808,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'183.63.51.65','2019-10-23 20:11:41'),(7809,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'183.63.51.65','2019-10-23 20:12:06'),(7810,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',6,'183.63.51.65','2019-10-23 20:12:23'),(7811,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'183.63.51.65','2019-10-23 20:12:27'),(7812,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'183.63.51.65','2019-10-23 20:12:31'),(7813,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-23 20:16:11'),(7814,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'183.15.183.66','2019-10-23 21:53:58'),(7815,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'183.15.183.66','2019-10-23 22:12:18'),(7816,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.66','2019-10-23 22:12:35'),(7817,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'183.15.183.66','2019-10-23 22:22:25'),(7818,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',7,'183.15.183.66','2019-10-23 23:08:44'),(7819,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.66','2019-10-23 23:09:08'),(7820,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',5,'183.15.183.66','2019-10-23 23:15:15'),(7821,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.133.30','2019-10-23 23:21:45'),(7822,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'113.87.129.200','2019-10-23 23:23:47'),(7823,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.87.129.174','2019-10-23 23:24:26'),(7824,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.87.129.200','2019-10-23 23:31:47'),(7825,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'223.104.63.28','2019-10-24 08:31:22'),(7826,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',3,'223.104.63.28','2019-10-24 08:31:37'),(7827,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'223.104.63.28','2019-10-24 08:39:13'),(7828,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',3,'223.104.63.28','2019-10-24 08:40:24'),(7829,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'223.104.63.28','2019-10-24 08:40:40'),(7830,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'223.104.63.28','2019-10-24 08:40:44'),(7831,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.155.247.170','2019-10-24 08:49:53'),(7832,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'223.104.63.28','2019-10-24 09:02:23'),(7833,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'117.139.233.229','2019-10-24 09:46:26'),(7834,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'183.62.169.108','2019-10-24 11:21:07'),(7835,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',4,'183.63.51.65','2019-10-24 11:22:30'),(7836,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.65','2019-10-24 11:22:35'),(7837,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'27.155.247.170','2019-10-24 11:40:21'),(7838,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'27.155.247.170','2019-10-24 11:42:33'),(7839,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.155.247.170','2019-10-24 11:43:16'),(7840,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'66.183.66.222','2019-10-24 12:48:58'),(7841,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'66.183.66.222','2019-10-24 12:49:44'),(7842,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',10,'115.156.143.64','2019-10-24 14:35:25'),(7843,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.143.185.67','2019-10-24 14:39:14'),(7844,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'116.6.65.253','2019-10-24 14:44:41'),(7845,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'116.6.65.253','2019-10-24 14:45:05'),(7846,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.73.196.18','2019-10-24 14:52:21'),(7847,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',1,'183.192.179.16','2019-10-24 16:05:02'),(7848,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.155.247.170','2019-10-24 16:15:47'),(7849,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'183.63.51.65','2019-10-24 16:23:03'),(7850,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',9,'106.38.48.226','2019-10-24 16:56:22'),(7851,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.38.48.226','2019-10-24 16:56:46'),(7852,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-24 18:15:30'),(7853,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'183.63.51.65','2019-10-24 18:20:25'),(7854,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'61.158.149.127','2019-10-24 20:01:14'),(7855,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'223.104.64.141','2019-10-24 20:17:09'),(7856,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',7,'210.56.192.130','2019-10-24 20:39:37'),(7857,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.5','2019-10-24 21:01:43'),(7858,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'113.88.136.216','2019-10-24 22:12:05'),(7859,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'171.34.223.59','2019-10-24 22:34:42'),(7860,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'171.34.223.59','2019-10-24 22:36:14'),(7861,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.34.223.59','2019-10-24 22:36:49'),(7862,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',6,'171.34.223.59','2019-10-24 22:37:16'),(7863,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.34.223.59','2019-10-24 22:37:59'),(7864,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'171.34.223.59','2019-10-24 22:39:35'),(7865,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'171.34.223.59','2019-10-24 22:41:32'),(7866,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',4,'171.34.223.59','2019-10-24 22:41:36'),(7867,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'171.34.223.59','2019-10-24 22:42:33'),(7868,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',218,'113.88.136.216','2019-10-24 22:48:05'),(7869,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',5,'113.88.136.216','2019-10-24 22:49:22'),(7870,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.136.216','2019-10-24 22:52:46'),(7871,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'171.34.223.59','2019-10-24 23:09:01'),(7872,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.34.223.59','2019-10-24 23:09:08'),(7873,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'171.34.223.59','2019-10-24 23:09:40'),(7874,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',3,'171.34.223.59','2019-10-24 23:10:16'),(7875,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.34.223.59','2019-10-24 23:10:21'),(7876,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.34.223.59','2019-10-24 23:10:24'),(7877,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',10,'171.34.223.59','2019-10-24 23:10:35'),(7878,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'171.34.223.59','2019-10-24 23:10:42'),(7879,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'171.34.223.59','2019-10-24 23:10:51'),(7880,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'171.34.223.59','2019-10-24 23:11:11'),(7881,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'113.88.136.216','2019-10-24 23:17:27'),(7882,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.136.216','2019-10-24 23:26:07'),(7883,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'183.136.182.141','2019-10-25 09:42:16'),(7884,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.136.182.141','2019-10-25 09:42:38'),(7885,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'183.136.182.141','2019-10-25 09:43:32'),(7886,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.234.130.32','2019-10-25 09:56:11'),(7887,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.234.130.32','2019-10-25 09:56:16'),(7888,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'124.234.130.32','2019-10-25 09:56:31'),(7889,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.234.130.32','2019-10-25 09:56:32'),(7890,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'106.122.217.164','2019-10-25 10:10:49'),(7891,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'106.122.217.164','2019-10-25 10:16:57'),(7892,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'163.204.16.239','2019-10-25 10:28:35'),(7893,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'183.63.51.65','2019-10-25 10:28:51'),(7894,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',5,'183.63.51.65','2019-10-25 10:51:37'),(7895,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'183.6.185.250','2019-10-25 13:04:07'),(7896,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'183.6.185.250','2019-10-25 13:04:15'),(7897,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'124.236.128.4','2019-10-25 13:09:12'),(7898,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.236.128.4','2019-10-25 13:09:35'),(7899,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'111.75.192.2','2019-10-25 13:47:30'),(7900,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'111.75.192.2','2019-10-25 13:47:39'),(7901,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'111.75.192.2','2019-10-25 13:52:46'),(7902,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',2,'183.14.135.136','2019-10-25 14:09:41'),(7903,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'210.56.192.130','2019-10-25 18:01:10'),(7904,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'210.56.192.130','2019-10-25 18:26:15'),(7905,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'210.56.192.130','2019-10-25 18:26:43'),(7906,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.236.84.133','2019-10-25 18:55:12'),(7907,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'120.236.84.133','2019-10-25 18:55:40'),(7908,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'120.236.84.133','2019-10-25 18:55:56'),(7909,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'120.236.84.133','2019-10-25 18:56:00'),(7910,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'120.236.84.133','2019-10-25 18:56:04'),(7911,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',511,'183.63.51.65','2019-10-25 19:43:53'),(7912,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',5,'183.63.51.65','2019-10-25 19:44:05'),(7913,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'183.63.51.65','2019-10-25 20:00:35'),(7914,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',216,'223.104.63.25','2019-10-25 21:55:36'),(7915,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','10',2,'14.18.182.223','2019-10-25 22:02:43'),(7916,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',4,'101.89.19.140','2019-10-25 22:02:43'),(7917,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',207,'182.254.52.17','2019-10-25 22:02:43'),(7918,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',4,'223.104.63.25','2019-10-25 22:39:42'),(7919,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'125.69.41.29','2019-10-25 23:36:10'),(7920,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.69.41.29','2019-10-25 23:36:59'),(7921,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'125.69.41.29','2019-10-25 23:40:34'),(7922,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'125.69.41.29','2019-10-25 23:41:00'),(7923,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',2,'125.69.41.29','2019-10-25 23:41:41'),(7924,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'125.69.41.29','2019-10-25 23:42:17'),(7925,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'125.69.41.29','2019-10-25 23:42:30'),(7926,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',4,'125.69.41.29','2019-10-25 23:42:42'),(7927,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'125.69.41.29','2019-10-25 23:42:56'),(7928,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',2,'125.69.41.29','2019-10-25 23:43:29'),(7929,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'101.89.19.140','2019-10-26 00:01:49'),(7930,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'125.69.41.29','2019-10-26 00:58:00'),(7931,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'125.69.41.29','2019-10-26 00:58:04'),(7932,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'125.69.41.29','2019-10-26 01:00:42'),(7933,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.69.41.29','2019-10-26 01:00:51'),(7934,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',7,'101.89.19.140','2019-10-26 05:53:43'),(7935,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'61.241.50.63','2019-10-26 08:06:25'),(7936,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',48,'61.241.50.63','2019-10-26 08:06:25'),(7937,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'101.89.19.140','2019-10-26 08:53:29'),(7938,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'183.16.234.125','2019-10-26 09:35:17'),(7939,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.16.234.125','2019-10-26 09:35:37'),(7940,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',6,'183.16.234.125','2019-10-26 13:16:44'),(7941,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',5,'183.16.234.125','2019-10-26 13:53:08'),(7942,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'220.194.106.61','2019-10-26 14:17:44'),(7943,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'60.28.142.26','2019-10-26 14:39:32'),(7944,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'60.28.142.26','2019-10-26 14:44:05'),(7945,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'60.28.142.26','2019-10-26 14:52:31'),(7946,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.163.220.68','2019-10-26 14:57:23'),(7947,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.16.234.125','2019-10-26 15:37:32'),(7948,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.16.234.125','2019-10-26 15:38:11'),(7949,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'110.82.27.159','2019-10-26 15:58:46'),(7950,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'110.82.27.159','2019-10-26 15:59:03'),(7951,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',2311,'183.16.234.125','2019-10-26 17:08:50'),(7952,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'175.169.153.210','2019-10-26 18:48:52'),(7953,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'175.169.153.210','2019-10-26 18:49:04'),(7954,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',6,'175.169.153.210','2019-10-26 18:52:39'),(7955,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',6,'182.254.52.17','2019-10-26 19:54:45'),(7956,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'223.104.66.62','2019-10-26 22:17:50'),(7957,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'223.104.66.62','2019-10-26 22:17:58'),(7958,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'223.104.66.62','2019-10-26 22:18:04'),(7959,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'223.104.66.62','2019-10-26 22:18:08'),(7960,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'223.104.66.62','2019-10-26 22:18:44'),(7961,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.192.179.16','2019-10-26 23:15:30'),(7962,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','24',2,'101.89.19.140','2019-10-26 23:23:43'),(7963,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',3,'113.88.96.152','2019-10-27 00:15:12'),(7964,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',3,'101.89.19.140','2019-10-27 08:14:55'),(7965,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'61.241.50.63','2019-10-27 08:57:13'),(7966,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'113.81.206.37','2019-10-27 11:07:25'),(7967,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.203.64.45','2019-10-27 11:39:57'),(7968,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'101.89.19.140','2019-10-27 11:43:14'),(7969,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','34',2,'101.89.19.140','2019-10-27 11:55:29'),(7970,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',1287,'171.34.223.59','2019-10-27 13:29:06'),(7971,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.111.129.57','2019-10-27 13:50:11'),(7972,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.111.129.57','2019-10-27 13:50:44'),(7973,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'202.111.129.57','2019-10-27 13:50:52'),(7974,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'202.111.129.57','2019-10-27 13:51:23'),(7975,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'113.81.206.37','2019-10-27 14:59:36'),(7976,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'113.81.206.37','2019-10-27 15:00:20'),(7977,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'113.81.206.37','2019-10-27 15:40:59'),(7978,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',4,'113.81.206.37','2019-10-27 15:41:10'),(7979,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.81.206.37','2019-10-27 15:41:49'),(7980,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'113.81.206.37','2019-10-27 16:07:05'),(7981,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',609,'113.81.206.37','2019-10-27 16:27:01'),(7982,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',9,'113.81.206.37','2019-10-27 16:27:44'),(7983,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.122.217.164','2019-10-27 16:28:27'),(7984,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'113.81.206.37','2019-10-27 16:28:37'),(7985,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'106.122.217.164','2019-10-27 16:29:55'),(7986,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'113.88.139.14','2019-10-27 16:30:21'),(7987,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'113.88.139.14','2019-10-27 16:30:25'),(7988,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',14,'113.88.139.14','2019-10-27 16:31:43'),(7989,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'113.88.139.14','2019-10-27 16:34:24'),(7990,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'182.254.52.17','2019-10-27 21:00:00'),(7991,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'113.88.98.187','2019-10-27 21:50:44'),(7992,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'113.88.98.187','2019-10-27 22:19:32'),(7993,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',3,'14.18.182.223','2019-10-27 22:34:35'),(7994,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'113.88.98.187','2019-10-27 22:47:55'),(7995,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'113.88.98.187','2019-10-27 22:52:27'),(7996,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',4,'113.88.98.187','2019-10-27 23:14:06'),(7997,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',864,'113.88.98.187','2019-10-27 23:28:05'),(7998,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',7,'113.88.98.187','2019-10-27 23:30:40'),(7999,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',6,'113.88.98.187','2019-10-27 23:30:58'),(8000,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',4,'113.88.98.187','2019-10-27 23:31:05'),(8001,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.38.250.161','2019-10-27 23:36:59'),(8002,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'27.38.250.161','2019-10-27 23:37:12'),(8003,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'27.38.250.161','2019-10-27 23:37:49'),(8004,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'27.38.250.161','2019-10-27 23:38:17'),(8005,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.38.250.161','2019-10-27 23:39:52'),(8006,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'27.38.250.161','2019-10-27 23:56:43'),(8007,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'101.89.19.140','2019-10-28 07:07:08'),(8008,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',46,'182.254.52.17','2019-10-28 07:07:08'),(8009,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',38,'182.254.52.17','2019-10-28 07:07:08'),(8010,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',73,'223.104.66.101','2019-10-28 09:06:17'),(8011,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',5,'183.63.51.65','2019-10-28 09:14:59'),(8012,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.63.51.65','2019-10-28 09:35:18'),(8013,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'182.139.86.238','2019-10-28 09:42:05'),(8014,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.139.86.238','2019-10-28 09:43:02'),(8015,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'222.64.176.32','2019-10-28 10:02:29'),(8016,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.64.176.32','2019-10-28 10:03:00'),(8017,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',6,'222.64.176.32','2019-10-28 10:04:08'),(8018,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.64.176.32','2019-10-28 10:04:17'),(8019,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'183.63.51.65','2019-10-28 10:13:18'),(8020,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',3,'183.63.51.65','2019-10-28 10:17:30'),(8021,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.63.51.65','2019-10-28 10:54:18'),(8022,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'183.63.51.65','2019-10-28 10:57:38'),(8023,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'183.63.51.65','2019-10-28 10:59:15'),(8024,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',9,'183.63.51.65','2019-10-28 10:59:58'),(8025,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.63.51.65','2019-10-28 11:03:07'),(8026,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'61.241.50.63','2019-10-28 11:32:29'),(8027,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'183.63.51.65','2019-10-28 11:50:47'),(8028,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-28 13:36:41'),(8029,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'183.63.51.65','2019-10-28 13:37:07'),(8030,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'183.63.51.65','2019-10-28 13:57:20'),(8031,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'183.63.51.65','2019-10-28 13:59:13'),(8032,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'183.63.51.65','2019-10-28 14:01:33'),(8033,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.146.68.15','2019-10-28 14:02:19'),(8034,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',1443,'205.210.164.79','2019-10-28 14:25:42'),(8035,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',7,'183.63.51.65','2019-10-28 14:25:43'),(8036,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'205.210.164.79','2019-10-28 14:26:07'),(8037,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'36.152.32.170','2019-10-28 14:32:29'),(8038,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'205.210.164.79','2019-10-28 14:53:08'),(8039,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'183.136.182.141','2019-10-28 15:05:39'),(8040,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'205.210.164.79','2019-10-28 15:13:38'),(8041,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'183.63.51.65','2019-10-28 16:13:15'),(8042,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'113.116.194.172','2019-10-28 16:13:37'),(8043,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.194.172','2019-10-28 16:13:47'),(8044,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'113.116.194.172','2019-10-28 16:41:19'),(8045,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',11,'113.116.194.172','2019-10-28 16:42:28'),(8046,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'113.116.194.172','2019-10-28 16:42:33'),(8047,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'113.116.194.172','2019-10-28 16:42:36'),(8048,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'113.116.194.172','2019-10-28 16:42:55'),(8049,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'113.116.194.172','2019-10-28 16:43:05'),(8050,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.63.51.65','2019-10-28 16:46:36'),(8051,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'183.63.51.65','2019-10-28 16:49:49'),(8052,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.194.172','2019-10-28 16:49:55'),(8053,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'205.210.164.79','2019-10-28 18:29:33'),(8054,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',421,'219.134.117.97','2019-10-28 18:49:42'),(8055,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'219.134.117.97','2019-10-28 18:49:49'),(8056,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',219,'219.134.117.97','2019-10-28 20:26:13'),(8057,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'117.136.40.245','2019-10-28 21:09:46'),(8058,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'117.136.40.245','2019-10-28 21:09:54'),(8059,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',463,'117.136.40.245','2019-10-28 21:10:11'),(8060,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'117.136.40.245','2019-10-28 21:24:22'),(8061,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.40.245','2019-10-28 21:24:37'),(8062,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'61.241.50.63','2019-10-28 22:24:19'),(8063,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',16,'183.15.182.68','2019-10-29 02:59:14'),(8064,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',96,'183.192.179.16','2019-10-29 06:48:59'),(8065,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',2,'61.241.50.63','2019-10-29 10:37:45'),(8066,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.54.213.185','2019-10-29 11:03:02'),(8067,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'101.89.19.140','2019-10-29 11:07:05'),(8068,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',1,'61.241.50.63','2019-10-29 12:22:26'),(8069,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',664,'113.87.14.163','2019-10-29 12:25:34'),(8070,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',3,'113.87.14.163','2019-10-29 12:25:40'),(8071,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',2,'113.87.14.163','2019-10-29 12:25:42'),(8072,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'113.87.14.163','2019-10-29 12:25:45'),(8073,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',5,'113.87.14.163','2019-10-29 12:25:48'),(8074,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'223.104.63.31','2019-10-29 12:53:21'),(8075,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.63.31','2019-10-29 12:53:38'),(8076,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'101.89.19.140','2019-10-29 13:37:38'),(8077,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'101.89.19.140','2019-10-29 14:51:29'),(8078,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'43.243.12.43','2019-10-29 15:50:54'),(8079,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',465,'43.243.12.43','2019-10-29 15:51:02'),(8080,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'14.18.182.223','2019-10-29 15:56:35'),(8081,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'43.243.12.43','2019-10-29 16:18:32'),(8082,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'43.243.12.43','2019-10-29 16:33:30'),(8083,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'113.88.96.243','2019-10-29 18:48:23'),(8084,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',5,'113.88.96.243','2019-10-29 18:48:28'),(8085,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.37.26.77','2019-10-29 19:33:18'),(8086,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'58.37.26.77','2019-10-29 19:33:23'),(8087,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.37.26.77','2019-10-29 19:50:24'),(8088,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'58.37.26.77','2019-10-29 19:50:36'),(8089,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'58.37.26.77','2019-10-29 19:51:13'),(8090,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'58.37.26.77','2019-10-29 19:51:38'),(8091,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.96.243','2019-10-29 20:13:34'),(8092,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'113.88.96.243','2019-10-29 20:13:38'),(8093,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',3,'113.88.96.243','2019-10-29 20:13:42'),(8094,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.10.68.231','2019-10-29 20:15:00'),(8095,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'61.241.50.63','2019-10-29 21:02:03'),(8096,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'183.192.179.16','2019-10-29 21:02:03'),(8097,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',1019,'115.193.26.117','2019-10-29 23:37:26'),(8098,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',6,'180.79.145.223','2019-10-29 23:46:31'),(8099,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'218.19.98.117','2019-10-30 09:55:46'),(8100,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',634,'218.19.98.117','2019-10-30 10:05:45'),(8101,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'218.19.98.117','2019-10-30 10:06:04'),(8102,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'218.19.98.117','2019-10-30 10:08:35'),(8103,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.19.98.117','2019-10-30 10:11:17'),(8104,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'60.28.142.26','2019-10-30 11:09:43'),(8105,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'60.28.142.26','2019-10-30 11:09:48'),(8106,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'27.155.247.200','2019-10-30 11:47:27'),(8107,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.34','2019-10-30 12:23:31'),(8108,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'183.15.183.34','2019-10-30 13:21:45'),(8109,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.183.34','2019-10-30 13:21:49'),(8110,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.183.34','2019-10-30 13:22:00'),(8111,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',5,'125.119.69.59','2019-10-30 13:33:51'),(8112,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'125.119.69.59','2019-10-30 13:34:41'),(8113,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'125.119.69.59','2019-10-30 13:35:10'),(8114,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.163.220.66','2019-10-30 16:16:44'),(8115,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'42.236.10.117','2019-10-30 16:28:45'),(8116,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',478,'119.123.135.225','2019-10-30 22:33:00'),(8117,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'119.123.135.225','2019-10-30 22:33:08'),(8118,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',10,'119.123.135.225','2019-10-30 22:38:45'),(8119,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'119.123.135.225','2019-10-30 23:01:56'),(8120,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'113.88.134.198','2019-10-30 23:03:07'),(8121,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',75,'183.192.179.16','2019-10-31 03:51:54'),(8122,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',16,'59.36.132.240','2019-10-31 04:51:51'),(8123,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.244.39.242','2019-10-31 10:35:35'),(8124,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'183.136.182.141','2019-10-31 10:49:30'),(8125,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.136.182.141','2019-10-31 10:50:08'),(8126,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.136.182.141','2019-10-31 10:50:09'),(8127,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4,'183.136.182.141','2019-10-31 10:50:10'),(8128,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',2258,'183.136.182.141','2019-10-31 10:50:14'),(8129,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',3526,'183.136.182.141','2019-10-31 10:50:15'),(8130,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5138,'183.136.182.141','2019-10-31 10:50:16'),(8131,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4665,'183.136.182.141','2019-10-31 10:50:19'),(8132,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',4609,'183.136.182.141','2019-10-31 10:50:20'),(8133,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5717,'183.136.182.141','2019-10-31 10:50:21'),(8134,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5493,'183.136.182.141','2019-10-31 10:50:22'),(8135,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',8370,'183.136.182.141','2019-10-31 10:50:22'),(8136,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',9389,'183.136.182.141','2019-10-31 10:50:23'),(8137,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5469,'183.136.182.141','2019-10-31 10:50:23'),(8138,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5785,'183.136.182.141','2019-10-31 10:50:24'),(8139,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',7043,'183.136.182.141','2019-10-31 10:50:24'),(8140,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',8010,'183.136.182.141','2019-10-31 10:50:24'),(8141,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',7486,'183.136.182.141','2019-10-31 10:50:25'),(8142,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',3416,'183.136.182.141','2019-10-31 10:50:25'),(8143,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',10754,'183.136.182.141','2019-10-31 10:50:26'),(8144,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',13015,'183.136.182.141','2019-10-31 10:50:26'),(8145,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',8,'183.136.182.141','2019-10-31 10:50:29'),(8146,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',15849,'183.136.182.141','2019-10-31 10:50:32'),(8147,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',7,'183.136.182.141','2019-10-31 10:55:48'),(8148,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'183.136.182.141','2019-10-31 11:15:58'),(8149,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',6,'183.136.182.141','2019-10-31 11:16:03'),(8150,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',4,'183.136.182.141','2019-10-31 11:37:26'),(8151,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'183.136.182.141','2019-10-31 11:40:26'),(8152,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'183.136.182.141','2019-10-31 11:46:20'),(8153,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'183.136.182.141','2019-10-31 11:46:42'),(8154,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.136.182.141','2019-10-31 11:54:05'),(8155,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'58.37.26.77','2019-10-31 12:55:13'),(8156,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',1,'58.37.26.77','2019-10-31 12:55:24'),(8157,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',633,'223.104.63.16','2019-10-31 13:11:45'),(8158,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',3,'223.104.63.16','2019-10-31 13:12:18'),(8159,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'223.104.63.16','2019-10-31 13:12:21'),(8160,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'223.104.63.16','2019-10-31 13:12:24'),(8161,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',4,'223.104.63.16','2019-10-31 13:12:27'),(8162,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'223.104.63.16','2019-10-31 13:12:39'),(8163,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'223.104.63.16','2019-10-31 13:12:45'),(8164,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'223.104.63.16','2019-10-31 13:13:10'),(8165,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.37.26.77','2019-10-31 13:51:16'),(8166,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',4,'58.37.26.77','2019-10-31 13:52:14'),(8167,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',5,'66.249.64.109','2019-10-31 15:21:23'),(8168,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'112.51.7.220','2019-10-31 15:29:21'),(8169,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','31',4,'112.51.7.220','2019-10-31 15:30:05'),(8170,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.51.7.220','2019-10-31 15:31:11'),(8171,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'117.186.251.6','2019-10-31 16:29:55'),(8172,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'117.186.251.6','2019-10-31 17:03:34'),(8173,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'124.89.145.249','2019-10-31 17:12:02'),(8174,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-31 17:14:27'),(8175,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.63.51.65','2019-10-31 17:26:00'),(8176,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'113.104.191.168','2019-10-31 17:31:36'),(8177,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'27.155.247.192','2019-10-31 17:31:42'),(8178,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'27.155.247.192','2019-10-31 17:33:47'),(8179,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'27.155.247.192','2019-10-31 17:35:34'),(8180,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.155.247.192','2019-10-31 17:37:07'),(8181,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'58.37.26.77','2019-10-31 17:42:08'),(8182,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.218.99.79','2019-10-31 21:08:59'),(8183,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.218.99.79','2019-10-31 21:10:25'),(8184,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',5,'14.18.182.223','2019-10-31 21:33:20'),(8185,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'1.195.108.132','2019-10-31 23:21:32'),(8186,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',4,'61.241.50.63','2019-11-01 06:06:45'),(8187,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'61.241.50.63','2019-11-01 07:38:24'),(8188,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.166.3.163','2019-11-01 08:58:04'),(8189,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','42',4,'183.192.179.16','2019-11-01 09:19:06'),(8190,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',9,'61.153.150.115','2019-11-01 10:14:10'),(8191,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.153.150.115','2019-11-01 10:15:13'),(8192,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',3,'183.136.182.141','2019-11-01 11:02:21'),(8193,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'183.136.182.141','2019-11-01 11:02:35'),(8194,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'210.56.192.130','2019-11-01 11:37:50'),(8195,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'183.63.51.65','2019-11-01 13:03:39'),(8196,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.63.51.65','2019-11-01 13:44:16'),(8197,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'59.46.181.226','2019-11-01 14:07:20'),(8198,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'59.46.181.226','2019-11-01 14:07:32'),(8199,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.138.91.23','2019-11-01 15:42:48'),(8200,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'182.138.91.23','2019-11-01 15:44:53'),(8201,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'182.138.91.23','2019-11-01 15:48:44'),(8202,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','44',4,'101.89.19.140','2019-11-01 19:11:02'),(8203,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.32.31.39','2019-11-01 19:31:18'),(8204,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'112.32.31.39','2019-11-01 19:32:20'),(8205,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.32.31.39','2019-11-01 19:33:42'),(8206,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'61.162.196.10','2019-11-01 21:16:22'),(8207,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.162.196.10','2019-11-01 21:17:15'),(8208,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.162.196.5','2019-11-01 21:19:52'),(8209,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.162.196.5','2019-11-01 21:24:57'),(8210,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'59.36.132.240','2019-11-02 00:03:59'),(8211,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'180.163.220.68','2019-11-02 02:08:35'),(8212,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'42.236.10.78','2019-11-02 02:16:18'),(8213,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'59.36.132.240','2019-11-02 02:45:08'),(8214,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'183.192.179.16','2019-11-02 02:45:09'),(8215,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'14.18.182.223','2019-11-02 02:55:46'),(8216,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'61.241.50.63','2019-11-02 03:44:44'),(8217,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'183.15.180.164','2019-11-02 03:47:46'),(8218,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',3,'113.88.139.83','2019-11-02 03:47:50'),(8219,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.139.83','2019-11-02 03:53:48'),(8220,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'183.192.179.16','2019-11-02 04:06:13'),(8221,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'42.120.160.47','2019-11-02 06:21:59'),(8222,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',66,'66.249.64.123','2019-11-02 07:36:13'),(8223,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.203.252.160','2019-11-02 10:04:07'),(8224,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.203.252.160','2019-11-02 10:04:19'),(8225,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'115.203.252.160','2019-11-02 10:04:22'),(8226,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'112.32.38.108','2019-11-02 10:05:11'),(8227,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'115.203.252.160','2019-11-02 10:08:44'),(8228,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.203.252.160','2019-11-02 10:09:04'),(8229,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'115.203.252.160','2019-11-02 10:13:31'),(8230,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.203.252.160','2019-11-02 10:31:03'),(8231,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',2,'115.203.252.160','2019-11-02 13:51:55'),(8232,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'115.203.240.14','2019-11-02 15:31:30'),(8233,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'106.121.179.229','2019-11-02 16:20:17'),(8234,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'106.121.179.229','2019-11-02 16:20:50'),(8235,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'106.121.179.229','2019-11-02 16:21:06'),(8236,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'180.163.220.5','2019-11-02 16:34:38'),(8237,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'180.163.220.67','2019-11-02 16:35:11'),(8238,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',3,'180.163.220.67','2019-11-02 16:35:40'),(8239,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'182.254.52.17','2019-11-02 16:42:07'),(8240,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',3,'66.249.64.113','2019-11-02 19:37:06'),(8241,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',2,'66.249.64.109','2019-11-02 19:37:25'),(8242,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',5,'66.249.64.109','2019-11-02 19:38:08'),(8243,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'59.36.132.240','2019-11-02 19:45:33'),(8244,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',3,'113.88.139.83','2019-11-02 19:55:09'),(8245,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.139.83','2019-11-02 19:55:19'),(8246,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.88.139.83','2019-11-02 22:29:15'),(8247,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.111.126.147','2019-11-02 22:55:07'),(8248,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.111.126.147','2019-11-02 22:55:13'),(8249,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'180.111.126.147','2019-11-02 22:55:42'),(8250,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.111.126.147','2019-11-02 22:59:02'),(8251,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'180.111.126.147','2019-11-02 22:59:08'),(8252,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'27.44.24.123','2019-11-03 08:58:40'),(8253,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.44.24.123','2019-11-03 08:59:49'),(8254,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'27.38.29.19','2019-11-03 11:44:01'),(8255,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'27.38.29.19','2019-11-03 11:45:38'),(8256,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'180.163.220.68','2019-11-03 11:45:46'),(8257,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',9,'59.36.132.240','2019-11-03 13:04:17'),(8258,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',4,'59.36.132.240','2019-11-03 13:04:17'),(8259,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.181.190','2019-11-03 13:29:54'),(8260,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'183.15.181.190','2019-11-03 13:30:04'),(8261,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.181.190','2019-11-03 13:30:15'),(8262,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',462,'183.15.181.190','2019-11-03 13:38:18'),(8263,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'183.15.181.190','2019-11-03 14:07:24'),(8264,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',5,'183.15.181.190','2019-11-03 14:07:43'),(8265,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'183.15.181.190','2019-11-03 14:07:57'),(8266,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'112.97.56.107','2019-11-03 14:25:55'),(8267,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'112.97.56.107','2019-11-03 14:26:43'),(8268,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'14.18.182.223','2019-11-03 15:19:18'),(8269,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'66.249.64.109','2019-11-03 15:30:16'),(8270,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'66.249.64.109','2019-11-03 15:32:38'),(8271,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',5,'66.249.64.109','2019-11-03 15:33:14'),(8272,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'66.249.64.109','2019-11-03 15:33:16'),(8273,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'66.249.64.111','2019-11-03 15:38:08'),(8274,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'211.162.238.104','2019-11-03 16:25:28'),(8275,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'59.36.132.240','2019-11-03 17:07:08'),(8276,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'59.36.132.240','2019-11-03 17:24:13'),(8277,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'101.89.19.140','2019-11-03 17:24:13'),(8278,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',5,'112.32.38.32','2019-11-03 19:10:26'),(8279,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'219.133.100.50','2019-11-03 21:20:19'),(8280,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',251,'219.133.100.50','2019-11-03 21:20:23'),(8281,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',433,'219.133.100.134','2019-11-03 21:20:25'),(8282,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'219.133.100.134','2019-11-03 21:26:24'),(8283,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'183.15.181.190','2019-11-03 21:29:31'),(8284,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',5,'113.88.99.71','2019-11-03 21:29:34'),(8285,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',4,'183.15.181.190','2019-11-03 21:29:38'),(8286,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'183.15.181.190','2019-11-03 21:29:41'),(8287,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.15.181.190','2019-11-03 21:51:52'),(8288,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'223.104.25.252','2019-11-03 21:55:31'),(8289,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.25.252','2019-11-03 21:56:16'),(8290,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'223.104.25.252','2019-11-03 21:56:19'),(8291,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',656,'223.104.25.252','2019-11-03 22:20:44'),(8292,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',4,'223.104.25.252','2019-11-03 22:20:58'),(8293,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',453,'223.104.25.252','2019-11-03 22:21:24'),(8294,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'223.104.25.252','2019-11-03 22:22:17'),(8295,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'219.133.100.134','2019-11-03 22:28:21'),(8296,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',458,'219.133.100.134','2019-11-03 22:28:59'),(8297,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',7,'182.254.52.17','2019-11-03 22:46:16'),(8298,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',4,'66.249.64.109','2019-11-03 23:48:48'),(8299,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',3,'61.241.50.63','2019-11-04 01:01:21'),(8300,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'61.241.50.63','2019-11-04 01:01:21'),(8301,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',42,'101.89.19.140','2019-11-04 04:51:04'),(8302,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',3,'66.249.64.109','2019-11-04 07:58:47'),(8303,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'61.241.50.63','2019-11-04 08:11:48'),(8304,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'14.18.182.223','2019-11-04 08:50:06'),(8305,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'61.241.50.63','2019-11-04 08:55:59'),(8306,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'182.254.52.17','2019-11-04 08:55:59'),(8307,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'115.203.240.14','2019-11-04 10:41:01'),(8308,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',219,'123.182.95.27','2019-11-04 13:20:34'),(8309,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'123.182.95.27','2019-11-04 13:20:37'),(8310,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.241.50.63','2019-11-04 13:58:24'),(8311,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',10,'223.104.64.188','2019-11-04 14:11:45'),(8312,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'222.212.12.203','2019-11-04 14:51:59'),(8313,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',8,'222.212.12.203','2019-11-04 14:53:01'),(8314,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'222.212.12.203','2019-11-04 14:53:13'),(8315,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',10,'115.203.240.14','2019-11-04 15:27:29'),(8316,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'210.35.68.10','2019-11-04 16:34:08'),(8317,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'210.35.68.10','2019-11-04 16:34:47'),(8318,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.136.182.141','2019-11-04 17:23:56'),(8319,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.136.182.141','2019-11-04 17:23:57'),(8320,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.136.182.141','2019-11-04 17:23:58'),(8321,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'183.136.182.141','2019-11-04 17:24:01'),(8322,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',3,'183.136.182.141','2019-11-04 17:24:50'),(8323,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'183.136.182.141','2019-11-04 17:24:56'),(8324,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'115.196.190.26','2019-11-04 17:30:04'),(8325,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'115.196.190.26','2019-11-04 17:33:41'),(8326,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'113.118.102.123','2019-11-04 18:52:19'),(8327,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'113.118.102.123','2019-11-04 18:56:14'),(8328,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.118.102.123','2019-11-04 19:00:13'),(8329,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.118.102.123','2019-11-04 19:00:23'),(8330,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','16',2,'113.118.102.123','2019-11-04 19:04:50'),(8331,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.118.102.123','2019-11-04 19:07:46'),(8332,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'219.133.100.134','2019-11-04 20:26:14'),(8333,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'171.113.232.106','2019-11-05 06:50:45'),(8334,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',3,'59.36.132.240','2019-11-05 09:39:10'),(8335,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'59.60.10.172','2019-11-05 09:44:59'),(8336,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.119.250.37','2019-11-05 10:43:58'),(8337,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'61.146.150.214','2019-11-05 15:52:19'),(8338,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'61.146.150.214','2019-11-05 15:52:26'),(8339,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'61.146.150.214','2019-11-05 15:52:54'),(8340,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',4,'61.146.150.214','2019-11-05 15:53:23'),(8341,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'61.146.150.214','2019-11-05 15:53:49'),(8342,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'61.146.150.214','2019-11-05 15:54:20'),(8343,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'180.169.183.166','2019-11-05 15:55:13'),(8344,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',3,'61.146.150.214','2019-11-05 15:55:35'),(8345,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'61.241.50.63','2019-11-05 16:13:55'),(8346,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'58.250.100.14','2019-11-05 16:21:00'),(8347,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.38.144','2019-11-05 16:58:12'),(8348,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'117.136.38.144','2019-11-05 16:58:52'),(8349,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'117.136.38.144','2019-11-05 17:00:36'),(8350,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'117.136.38.144','2019-11-05 17:00:42'),(8351,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'117.136.38.144','2019-11-05 17:01:06'),(8352,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.38.144','2019-11-05 17:01:33'),(8353,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',3,'117.136.38.144','2019-11-05 17:02:28'),(8354,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.38.144','2019-11-05 17:05:14'),(8355,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.38.144','2019-11-05 17:06:04'),(8356,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'117.136.38.144','2019-11-05 17:12:45'),(8357,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',2,'117.136.38.144','2019-11-05 18:22:33'),(8358,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',217,'117.136.38.144','2019-11-05 18:23:48'),(8359,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'163.142.39.189','2019-11-05 19:38:16'),(8360,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',2,'163.142.39.189','2019-11-05 19:40:19'),(8361,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'163.142.39.189','2019-11-05 19:46:18'),(8362,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'113.88.136.126','2019-11-05 20:02:01'),(8363,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',662,'111.75.192.2','2019-11-05 20:17:57'),(8364,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',4,'59.36.132.240','2019-11-05 21:52:51'),(8365,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'49.77.235.135','2019-11-05 23:53:25'),(8366,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',5,'42.236.10.125','2019-11-06 01:14:32'),(8367,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.163.220.66','2019-11-06 01:21:22'),(8368,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'42.236.10.114','2019-11-06 01:21:58'),(8369,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',4,'42.236.10.93','2019-11-06 01:23:00'),(8370,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'180.163.220.68','2019-11-06 01:24:11'),(8371,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'114.236.137.208','2019-11-06 02:54:09'),(8372,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',3,'114.236.137.208','2019-11-06 02:54:18'),(8373,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'114.236.137.208','2019-11-06 02:54:45'),(8374,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'114.105.47.18','2019-11-06 05:33:58'),(8375,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.105.47.18','2019-11-06 05:34:18'),(8376,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.38.144','2019-11-06 09:17:06'),(8377,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',4,'111.160.205.10','2019-11-06 09:28:12'),(8378,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',9,'183.237.4.66','2019-11-06 09:46:49'),(8379,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',21,'183.237.4.66','2019-11-06 09:47:38'),(8380,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.237.4.66','2019-11-06 10:00:15'),(8381,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'117.136.38.144','2019-11-06 10:28:32'),(8382,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'117.136.38.144','2019-11-06 10:41:41'),(8383,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.136.182.141','2019-11-06 10:47:30'),(8384,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.141.0','2019-11-06 11:00:17'),(8385,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'124.89.86.18','2019-11-06 11:43:43'),(8386,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.89.86.18','2019-11-06 11:43:47'),(8387,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.89.86.18','2019-11-06 11:43:47'),(8388,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'124.89.86.18','2019-11-06 11:43:49'),(8389,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',4,'124.89.86.18','2019-11-06 11:43:50'),(8390,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'113.116.141.15','2019-11-06 12:06:56'),(8391,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'106.38.48.226','2019-11-06 13:07:15'),(8392,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.193.56.121','2019-11-06 15:59:06'),(8393,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',5,'182.148.156.200','2019-11-06 16:09:12'),(8394,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',4,'182.148.156.200','2019-11-06 16:10:20'),(8395,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.38.144','2019-11-06 16:15:56'),(8396,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'117.136.38.144','2019-11-06 16:16:16'),(8397,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'117.136.38.144','2019-11-06 16:16:39'),(8398,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.38.144','2019-11-06 16:16:41'),(8399,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.38.144','2019-11-06 16:16:42'),(8400,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'218.201.113.252','2019-11-06 16:25:39'),(8401,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'218.201.113.252','2019-11-06 16:30:09'),(8402,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','38',5,'218.201.113.252','2019-11-06 16:31:21'),(8403,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',3,'218.201.113.252','2019-11-06 16:31:38'),(8404,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'116.247.106.162','2019-11-06 16:31:46'),(8405,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'116.247.106.162','2019-11-06 16:32:28'),(8406,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'117.136.38.144','2019-11-06 16:53:38'),(8407,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'218.69.11.110','2019-11-06 17:29:38'),(8408,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','46',3,'180.169.241.134','2019-11-06 17:30:34'),(8409,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.169.241.134','2019-11-06 17:30:47'),(8410,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.38.144','2019-11-06 17:39:27'),(8411,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.38.144','2019-11-06 17:39:47'),(8412,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'117.136.38.144','2019-11-06 17:40:33'),(8413,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'117.136.38.144','2019-11-06 17:40:57'),(8414,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'1.193.56.121','2019-11-06 18:39:17'),(8415,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'218.69.11.110','2019-11-06 18:50:15'),(8416,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'113.118.202.103','2019-11-06 20:42:45'),(8417,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'113.118.202.103','2019-11-06 20:43:36'),(8418,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'113.118.202.103','2019-11-06 20:44:00'),(8419,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',6,'113.118.202.103','2019-11-06 20:44:02'),(8420,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:06'),(8421,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:11'),(8422,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:12'),(8423,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:13'),(8424,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'113.118.202.103','2019-11-06 20:44:13'),(8425,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:14'),(8426,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:14'),(8427,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:15'),(8428,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:15'),(8429,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:15'),(8430,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:16'),(8431,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:16'),(8432,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:16'),(8433,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:17'),(8434,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:17'),(8435,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:17'),(8436,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:17'),(8437,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:18'),(8438,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:18'),(8439,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:18'),(8440,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:19'),(8441,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:19'),(8442,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:20'),(8443,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:21'),(8444,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:21'),(8445,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:21'),(8446,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:21'),(8447,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:21'),(8448,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'113.118.202.103','2019-11-06 20:44:22'),(8449,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'113.118.202.103','2019-11-06 20:44:22'),(8450,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',220,'113.118.202.103','2019-11-06 20:44:22'),(8451,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',426,'113.118.202.103','2019-11-06 20:44:23'),(8452,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',423,'113.118.202.103','2019-11-06 20:44:23'),(8453,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',1040,'113.118.202.103','2019-11-06 20:44:23'),(8454,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'113.118.202.103','2019-11-06 20:44:23'),(8455,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'14.18.182.223','2019-11-07 00:39:15'),(8456,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',3,'182.254.52.17','2019-11-07 01:03:38'),(8457,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'182.254.52.17','2019-11-07 01:28:29'),(8458,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'182.254.52.17','2019-11-07 02:49:11'),(8459,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'182.254.52.17','2019-11-07 03:45:43'),(8460,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'61.183.69.18','2019-11-07 03:56:36'),(8461,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'61.183.69.18','2019-11-07 03:57:48'),(8462,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'61.183.69.18','2019-11-07 03:57:49'),(8463,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'61.183.69.18','2019-11-07 03:57:50'),(8464,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'61.183.69.18','2019-11-07 03:57:51'),(8465,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'61.183.69.18','2019-11-07 03:57:53'),(8466,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'113.116.141.15','2019-11-07 11:01:33'),(8467,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',206,'121.22.26.98','2019-11-07 11:17:52'),(8468,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.141.15','2019-11-07 11:23:45'),(8469,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.141.15','2019-11-07 11:29:43'),(8470,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',7,'171.89.75.237','2019-11-07 12:45:46'),(8471,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'171.89.75.237','2019-11-07 12:45:57'),(8472,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','40',2,'180.154.45.66','2019-11-07 13:44:37'),(8473,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'183.237.4.66','2019-11-07 13:47:38'),(8474,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','36',3,'183.237.4.66','2019-11-07 13:48:09'),(8475,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',10,'183.237.4.66','2019-11-07 13:48:49'),(8476,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'221.4.55.68','2019-11-07 14:39:29'),(8477,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.4.55.68','2019-11-07 14:39:41'),(8478,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.141.15','2019-11-07 14:39:52'),(8479,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'120.236.176.138','2019-11-07 14:42:35'),(8480,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'113.116.141.15','2019-11-07 14:43:13'),(8481,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.141.15','2019-11-07 14:46:35'),(8482,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'120.236.176.138','2019-11-07 14:46:59'),(8483,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'121.22.26.98','2019-11-07 14:49:00'),(8484,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'125.215.45.69','2019-11-07 15:37:01'),(8485,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','15',2,'120.236.176.138','2019-11-07 16:25:27'),(8486,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'120.236.176.138','2019-11-07 16:27:25'),(8487,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',9,'120.236.176.138','2019-11-07 16:28:10'),(8488,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',1225,'218.17.197.195','2019-11-07 16:48:10'),(8489,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',1523,'218.17.197.195','2019-11-07 16:48:13'),(8490,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','3',4,'120.236.176.138','2019-11-07 16:50:18'),(8491,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'120.236.176.138','2019-11-07 16:53:37'),(8492,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'14.18.182.223','2019-11-07 16:59:24'),(8493,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'182.254.52.17','2019-11-07 16:59:24'),(8494,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'124.237.87.46','2019-11-07 17:50:19'),(8495,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'171.116.251.151','2019-11-07 17:55:35'),(8496,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',6,'121.22.26.98','2019-11-07 17:55:51'),(8497,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'124.237.87.46','2019-11-07 17:59:44'),(8498,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',6,'110.53.52.48','2019-11-07 19:50:37'),(8499,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',1676,'218.17.197.195','2019-11-07 20:04:47'),(8500,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',3897,'218.17.197.195','2019-11-07 20:04:48'),(8501,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'59.41.92.245','2019-11-07 20:05:24'),(8502,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',3,'59.41.92.245','2019-11-07 20:07:11'),(8503,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'59.41.92.245','2019-11-07 20:16:30'),(8504,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'59.41.92.245','2019-11-07 20:16:33'),(8505,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',3,'59.41.92.245','2019-11-07 20:16:34'),(8506,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'59.41.92.245','2019-11-07 20:16:36'),(8507,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'59.41.92.245','2019-11-07 20:16:37'),(8508,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'59.41.92.245','2019-11-07 20:16:38'),(8509,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'59.41.92.245','2019-11-07 20:16:40'),(8510,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',2,'59.41.92.245','2019-11-07 20:16:41'),(8511,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',874,'218.17.197.195','2019-11-07 20:37:10'),(8512,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',5,'183.192.179.16','2019-11-07 21:01:20'),(8513,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','7',3,'42.236.10.114','2019-11-07 21:39:52'),(8514,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'180.79.145.223','2019-11-07 23:10:46'),(8515,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'182.254.52.17','2019-11-08 00:02:47'),(8516,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',8,'59.41.93.75','2019-11-08 07:01:39'),(8517,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'59.41.93.75','2019-11-08 07:01:41'),(8518,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',1,'59.41.93.75','2019-11-08 07:01:45'),(8519,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',3,'59.41.93.75','2019-11-08 07:01:46'),(8520,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'59.41.93.75','2019-11-08 07:01:47'),(8521,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',3,'59.41.93.75','2019-11-08 07:01:49'),(8522,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'59.41.93.75','2019-11-08 07:01:50'),(8523,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',3,'59.41.93.75','2019-11-08 07:01:51'),(8524,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'59.41.93.75','2019-11-08 07:01:52'),(8525,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'59.41.93.75','2019-11-08 08:20:02'),(8526,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',5,'59.41.93.75','2019-11-08 08:20:05'),(8527,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'59.41.93.75','2019-11-08 08:43:46'),(8528,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','12',2,'59.41.93.75','2019-11-08 08:43:50'),(8529,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','26',3,'59.41.93.75','2019-11-08 09:03:45'),(8530,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',3,'221.234.230.21','2019-11-08 11:01:31'),(8531,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',5,'221.234.230.21','2019-11-08 11:01:42'),(8532,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.88.139.7','2019-11-08 11:28:45'),(8533,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','1',58,'59.36.132.240','2019-11-08 13:37:34'),(8534,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'182.138.104.53','2019-11-08 14:14:26'),(8535,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.138.104.53','2019-11-08 14:15:09'),(8536,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'59.41.93.75','2019-11-08 14:16:42'),(8537,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',3,'59.41.93.75','2019-11-08 14:25:31'),(8538,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'113.88.139.7','2019-11-08 16:20:50'),(8539,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','2',2,'113.88.139.7','2019-11-08 16:21:22'),(8540,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','3',2,'113.88.139.7','2019-11-08 16:21:43'),(8541,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',1,'113.116.10.180','2019-11-08 17:17:14'),(8542,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'113.116.10.180','2019-11-08 17:17:15'),(8543,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'58.210.84.242','2019-11-08 17:29:04'),(8544,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',11,'114.220.241.33','2019-11-08 19:45:54'),(8545,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'101.89.19.140','2019-11-08 19:46:34'),(8546,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'182.254.52.17','2019-11-08 19:46:34'),(8547,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'101.89.19.140','2019-11-08 21:47:42'),(8548,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'183.192.179.16','2019-11-08 22:11:11'),(8549,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'219.133.101.205','2019-11-08 23:10:31'),(8550,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',3,'42.236.10.93','2019-11-09 01:27:19'),(8551,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','1',2,'101.89.19.140','2019-11-09 01:49:39'),(8552,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',4,'183.192.179.16','2019-11-09 02:20:10'),(8553,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','49',7,'61.241.50.63','2019-11-09 04:43:50'),(8554,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',4,'182.254.52.17','2019-11-09 08:35:40'),(8555,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'112.32.38.32','2019-11-09 08:44:01'),(8556,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'14.155.221.115','2019-11-09 10:18:46'),(8557,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'1.202.237.218','2019-11-09 11:05:03'),(8558,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',3,'61.241.50.63','2019-11-09 11:12:29'),(8559,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',44,'1.202.237.218','2019-11-09 11:40:16'),(8560,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.202.237.218','2019-11-09 11:41:39'),(8561,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'1.202.237.218','2019-11-09 11:42:04'),(8562,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'1.202.237.218','2019-11-09 11:50:53'),(8563,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'113.88.135.191','2019-11-09 14:06:37'),(8564,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',1446,'113.88.135.191','2019-11-09 14:09:32'),(8565,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',7,'113.88.135.191','2019-11-09 14:09:54'),(8566,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',1081,'219.133.101.204','2019-11-09 14:10:32'),(8567,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',847,'219.133.101.204','2019-11-09 14:10:41'),(8568,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',465,'219.133.101.204','2019-11-09 14:11:05'),(8569,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','53',1075,'219.133.101.204','2019-11-09 14:14:49'),(8570,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'221.224.72.58','2019-11-09 14:23:17'),(8571,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'66.249.73.27','2019-11-09 15:23:47'),(8572,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.84.197.224','2019-11-09 16:19:05'),(8573,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'120.36.215.252','2019-11-09 16:36:12'),(8574,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'120.36.215.252','2019-11-09 16:36:16'),(8575,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'120.36.215.252','2019-11-09 16:36:38'),(8576,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'120.36.215.252','2019-11-09 16:36:44'),(8577,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'66.249.73.27','2019-11-09 16:53:56'),(8578,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','7',2,'14.18.182.223','2019-11-09 17:28:43'),(8579,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','4',4,'61.241.50.63','2019-11-09 17:28:43'),(8580,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','5',2,'59.36.132.240','2019-11-09 17:28:43'),(8581,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','8',622,'183.192.179.16','2019-11-09 17:28:44'),(8582,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','6',827,'59.36.132.240','2019-11-09 17:28:44'),(8583,'bookNote','cn.dblearn.blog.portal.book.controller.BookNoteController.getBookNote()','9',1682,'59.36.132.240','2019-11-09 17:28:45'),(8584,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'114.84.197.224','2019-11-09 19:26:37'),(8585,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'114.84.197.224','2019-11-09 19:26:44'),(8586,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',4,'61.241.50.63','2019-11-09 20:40:19'),(8587,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','10',4,'61.241.50.63','2019-11-09 21:24:03'),(8588,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',5,'61.241.50.63','2019-11-09 21:53:36'),(8589,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','8',2,'61.241.50.63','2019-11-09 21:57:29'),(8590,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','13',3,'59.36.132.240','2019-11-09 23:11:31'),(8591,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',5,'59.36.132.240','2019-11-10 01:21:55'),(8592,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'66.249.73.27','2019-11-10 02:15:06'),(8593,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'182.254.52.17','2019-11-10 07:47:59'),(8594,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','50',5,'61.241.50.63','2019-11-10 08:10:22'),(8595,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','45',4,'113.104.202.179','2019-11-10 14:47:44'),(8596,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'113.116.141.6','2019-11-10 15:10:06'),(8597,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',6,'113.116.141.6','2019-11-10 15:18:10'),(8598,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',1248,'113.88.63.166','2019-11-10 15:47:41'),(8599,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'125.210.72.71','2019-11-10 15:48:57'),(8600,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','54',7,'113.88.63.166','2019-11-10 15:49:53'),(8601,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.111.129.57','2019-11-10 16:08:56'),(8602,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',6,'202.111.129.57','2019-11-10 16:09:37'),(8603,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',3,'202.111.129.57','2019-11-10 16:10:44'),(8604,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'202.111.129.57','2019-11-10 16:11:05'),(8605,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.111.129.57','2019-11-10 16:21:01'),(8606,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'202.111.129.57','2019-11-10 16:23:01'),(8607,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',3,'113.88.63.166','2019-11-10 16:31:43'),(8608,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',4,'113.88.63.166','2019-11-10 16:31:51'),(8609,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',2,'113.88.63.166','2019-11-10 16:44:20'),(8610,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',4,'113.88.63.166','2019-11-10 16:44:34'),(8611,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',4,'183.6.40.251','2019-11-10 16:54:25'),(8612,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'183.6.40.251','2019-11-10 16:55:05'),(8613,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','47',5,'59.36.132.240','2019-11-10 17:08:44'),(8614,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','51',4,'113.88.63.166','2019-11-10 17:10:12'),(8615,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',4,'113.88.63.166','2019-11-10 17:10:23'),(8616,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','52',2952,'113.88.63.166','2019-11-10 17:12:41'),(8617,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','55',1667,'113.88.63.166','2019-11-10 17:19:08'),(8618,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','55',2151,'113.88.63.166','2019-11-10 17:20:26'),(8619,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','55',2056,'113.88.63.166','2019-11-10 17:21:06'),(8620,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','55',6,'113.88.63.166','2019-11-10 17:21:19'),(8621,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','55',5,'113.88.63.166','2019-11-10 17:21:28'),(8622,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','55',435,'117.136.39.208','2019-11-10 17:36:53'),(8623,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','55',5,'117.136.39.208','2019-11-10 17:47:06'),(8624,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'120.86.126.213','2019-11-10 23:35:39'),(8625,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.86.126.213','2019-11-10 23:36:48'),(8626,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','5',4,'101.89.19.140','2019-11-11 00:23:35'),(8627,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','3',4,'101.89.19.140','2019-11-11 03:35:06'),(8628,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',4,'61.241.50.63','2019-11-11 05:30:13'),(8629,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'120.85.77.53','2019-11-11 09:18:34'),(8630,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'59.56.82.157','2019-11-11 09:58:59'),(8631,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'183.15.181.104','2019-11-11 11:46:37'),(8632,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','55',5,'183.15.181.104','2019-11-11 11:46:47'),(8633,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.122.114.95','2019-11-11 14:38:34'),(8634,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.122.114.95','2019-11-11 14:39:21'),(8635,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',2,'119.122.114.95','2019-11-11 14:39:25'),(8636,'book','cn.dblearn.blog.portal.book.controller.BookController.getBook()','2',30,'124.127.99.32','2019-11-11 14:55:08'),(8637,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','55',426,'171.88.46.126','2019-11-11 15:16:34'),(8638,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',2,'171.88.46.126','2019-11-11 15:38:47'),(8639,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','4',2,'171.88.46.126','2019-11-11 15:39:50'),(8640,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',3,'171.88.46.126','2019-11-11 15:40:32'),(8641,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',104,'183.15.181.104','2019-11-11 07:58:31'),(8642,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',41,'222.92.228.230','2019-11-11 08:57:04'),(8643,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',6,'171.8.223.6','2019-11-11 08:57:36'),(8644,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',14,'171.8.223.6','2019-11-11 08:57:39'),(8645,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',7,'171.8.223.6','2019-11-11 08:59:01'),(8646,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',4,'119.122.114.95','2019-11-11 09:01:53'),(8647,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',5,'171.8.223.6','2019-11-11 09:07:02'),(8648,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',12,'112.64.233.189','2019-11-11 09:24:33'),(8649,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',51,'112.64.233.189','2019-11-11 09:25:08'),(8650,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',9,'112.64.233.189','2019-11-11 09:25:09'),(8651,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',5,'112.64.233.189','2019-11-11 09:25:11'),(8652,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',278,'112.64.233.189','2019-11-11 09:25:22'),(8653,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',6,'112.64.233.189','2019-11-11 09:25:23'),(8654,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',5,'112.64.233.189','2019-11-11 09:25:24'),(8655,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',5,'112.64.233.189','2019-11-11 09:25:25'),(8656,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','11',15,'112.64.233.189','2019-11-11 09:25:26'),(8657,'article','cn.dblearn.blog.portal.article.controller.ArticleController.getArticle()','1',8,'112.64.233.189','2019-11-11 09:25:42');
/*!40000 ALTER TABLE `log_view` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `oss_resource`
--

DROP TABLE IF EXISTS `oss_resource`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `oss_resource` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(255) DEFAULT NULL COMMENT '名称',
  `url` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=208 DEFAULT CHARSET=utf8mb4 COMMENT='云存储资源表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `oss_resource`
--

LOCK TABLES `oss_resource` WRITE;
/*!40000 ALTER TABLE `oss_resource` DISABLE KEYS */;
INSERT INTO `oss_resource` VALUES (1,'名片.jpg','http://oss.dblearn.cn/dbblog/20190303/63ba034bf1e24e918aa53cccb3fb66dc.jpg'),(2,'仰望.jpg','http://oss.dblearn.cn/dbblog/20190303/18a6c1d2ed47494396462901ffe02f30.jpg'),(3,'jvm.jpg','http://oss.dblearn.cn/dbblog/20190303/01c91a28bf944010ade45fd876e94b8c.jpg'),(4,'timg.jpeg','http://oss.dblearn.cn/dbblog/20190304/b00399e2664b4c42a3e2b4b23fcf128b.jpeg'),(5,'1.jpg','http://oss.dblearn.cn/dbblog/20190305/c24e0ab174a048a09c9634431e1508df.jpg'),(6,'2.jpg','http://oss.dblearn.cn/dbblog/20190305/bf357593446143a4809c98a16ff5e088.jpg'),(7,'1.jpg','http://oss.dblearn.cn/dbblog/20190305/fb6809d46e7744e78c5a686bbd096506.jpg'),(8,'2.jpg','http://oss.dblearn.cn/dbblog/20190305/0271f31d280f49b68ae9e942f286a3e4.jpg'),(9,'3.jpg','http://oss.dblearn.cn/dbblog/20190305/567fa7ca43d34eab886a5b8dc4c83b4f.jpg'),(10,'20160728173151_aREdM.png','http://oss.dblearn.cn/dbblog/20190305/d991537084cf42b2889b41838b59df0f.png'),(11,'3.jpg','http://oss.dblearn.cn/dbblog/20190309/c8762af185ee449f8c0a6cb905ffce01.jpg'),(12,'1.jpg','http://oss.dblearn.cn/dbblog/20190309/247763f2f52d4f48b2d4057007df636a.jpg'),(13,'20160728173151_aREdM.png','http://oss.dblearn.cn/dbblog/20190309/0c81e4c5a59e456d8a471d3b05b99e08.png'),(14,'20160728173151_aREdM.png','http://oss.dblearn.cn/dbblog/20190309/4a06d4d044844cf49feebcbfcda2a1f1.png'),(15,'1.jpg','http://oss.dblearn.cn/dbblog/20190309/54f2a8bc89c149f39204df35cf845a52.jpg'),(16,'3.jpg','http://oss.dblearn.cn/dbblog/20190309/c4b9748cdd97451887c6196bc5d383fb.jpg'),(17,'20160728173151_aREdM.png','http://oss.dblearn.cn/dbblog/20190309/736afbc2da4245d291725aa1c9175440.png'),(18,'20160728173151_aREdM.png','http://oss.dblearn.cn/dbblog/20190310/5b4b5848741248b29ae60a51be81460a.png'),(19,'u=13000603,3987865920&fm=175&s=9F01F90506727786F624D8C8030070B0&w=500&h=368&img.JPEG','http://oss.dblearn.cn/dbblog/20190310/141ad0ba83b94ebba87a7bc5d689e32a.JPEG'),(20,'支付.jpg','http://oss.dblearn.cn/dbblog/20190310/512ce42d4b514333a50391aa6c9544ee.jpg'),(21,'timg (1).jpeg','http://oss.dblearn.cn/dbblog/20190310/c1c97aca63244d7f92f1eeed023b6d28.jpeg'),(22,'支付.jpg','http://oss.dblearn.cn/dbblog/20190310/7517419c57e14d548ec13f4a550edbc0.jpg'),(23,'博文图片1.png','http://oss.dblearn.cn/dbblog/20190310/34c7f3a92bae478c882caaed586042dc.png'),(24,'博文图片.png','http://oss.dblearn.cn/dbblog/20190310/b861879d67b84f478878f1013be22fb6.png'),(25,'博文图片2.png','http://oss.dblearn.cn/dbblog/20190310/2403f9585bf64dd2a90b180314a93403.png'),(26,'博文图片3.png','http://oss.dblearn.cn/dbblog/20190310/c1af8818cbac486394eb083463c3c2d7.png'),(27,'博文图片6.png','http://oss.dblearn.cn/dbblog/20190310/558c14cbdee84be99f32c267033df276.png'),(28,'博文图片7.png','http://oss.dblearn.cn/dbblog/20190310/9289e11d4e2b489885246c6023924458.png'),(29,'1.png','http://oss.dblearn.cn/dbblog/20190310/61b8efb183144323b4138b2b9eecdfb7.png'),(30,'2.png','http://oss.dblearn.cn/dbblog/20190310/4e0874dc164e44028e500769f829d7e1.png'),(31,'3.png','http://oss.dblearn.cn/dbblog/20190310/7c641e6681ef468599dbe152bc0ea02a.png'),(32,'4.png','http://oss.dblearn.cn/dbblog/20190310/ee69937e2bd9494f882da788932123ca.png'),(33,'名片.jpg','http://oss.dblearn.cn/dbblog/20190310/e3f82f3c8d6f41c2b0e2acbee51f2373.jpg'),(34,'20190311-1.png','http://oss.dblearn.cn/dbblog/20190311/e5f53de93a444d879e75700535a31855.png'),(35,'20190311-2.png','http://oss.dblearn.cn/dbblog/20190311/fc002a1f7b91418b81502d58f29e574a.png'),(36,'20190311-3.png','http://oss.dblearn.cn/dbblog/20190311/31751d686ce04dcc8b6a5d088ad31899.png'),(37,'timg.jpeg','http://oss.dblearn.cn/dbblog/20190311/64096a8d1b6a44e7959ed69da0c5182d.jpeg'),(38,'1.jpg','http://oss.dblearn.cn/dbblog/20190319/95a32db5d5434c8c9158cec1394874fa.jpg'),(39,'2.jpg','http://oss.dblearn.cn/dbblog/20190319/b757bd2336f147ce95ab71d14d813341.jpg'),(40,'3.jpg','http://oss.dblearn.cn/dbblog/20190319/38ee480f33ec44c688f08f2d99105811.jpg'),(41,'4.jpg','http://oss.dblearn.cn/dbblog/20190319/7013adcf9bd1467e94139f5a0aba08df.jpg'),(42,'5.jpg','http://oss.dblearn.cn/dbblog/20190319/e870ab41cc7b46999aac3f66bea281c5.jpg'),(43,'6.jpg','http://oss.dblearn.cn/dbblog/20190319/78a27daf66054ffb98080cb28d230b43.jpg'),(44,'7.jpg','http://oss.dblearn.cn/dbblog/20190319/bca30874d819460eba01dffa1cbfc81d.jpg'),(45,'8.jpg','http://oss.dblearn.cn/dbblog/20190319/3351cf96dd204fb2a300f0ac8b5069d2.jpg'),(46,'9.jpg','http://oss.dblearn.cn/dbblog/20190319/b3fdd4016bc1442fbc8e1c3d1c41a321.jpg'),(47,'10.jpg','http://oss.dblearn.cn/dbblog/20190319/7ef98d7632ac4fa6a5db2cb801e5885f.jpg'),(48,'11.jpg','http://oss.dblearn.cn/dbblog/20190319/c3d23494a7ac42b3a52c75d8715762d5.jpg'),(49,'12.jpg','http://oss.dblearn.cn/dbblog/20190319/092f63e45b004c98b9866eff0c1e536a.jpg'),(50,'13.jpg','http://oss.dblearn.cn/dbblog/20190319/303f8ea595c64143beddba59c0d4203a.jpg'),(51,'u=811393573,3422301745&fm=26&gp=0.jpg','http://oss.dblearn.cn/dbblog/20190319/e99c7b64f2a148d1a593e41e9be41c26.jpg'),(52,'u=811393573,3422301745&fm=26&gp=0.jpg','http://oss.dblearn.cn/dbblog/20190319/69b03291246c4538a763de8c9dd146f8.jpg'),(53,'图片1.png','http://oss.dblearn.cn/dbblog/20190320/20073c8cf58a4a90a36e2739bdbea5cc.png'),(54,'图片2.png','http://oss.dblearn.cn/dbblog/20190320/a96da9b311ce4e31a235a7a6108f9e29.png'),(55,'图片3.png','http://oss.dblearn.cn/dbblog/20190320/39efd470c7b54f9aa549b2a17404d841.png'),(56,'图片4.png','http://oss.dblearn.cn/dbblog/20190320/43a70c6bd4504787bbdaff56f14745fa.png'),(57,'图片5.png','http://oss.dblearn.cn/dbblog/20190320/34383addb7054ac8accdf0c7dfbb9e8e.png'),(58,'图片6.png','http://oss.dblearn.cn/dbblog/20190320/358ec6b7239b4b4b91b10c63b7d3bca8.png'),(59,'图片1.png','http://oss.dblearn.cn/dbblog/20190320/0efc15b9071c41c582e0b91f3962d186.png'),(60,'image.png','http://oss.dblearn.cn/dbblog/20190322/de02fe475c2f4ccb81da034ae86395e1.png'),(61,'image.png','http://oss.dblearn.cn/dbblog/20190322/ce553a37832f42c9843bd5b3774d3601.png'),(62,'image.png','http://oss.dblearn.cn/dbblog/20190322/cab9ffb06aa14e55aca23a14db4e0f9c.png'),(63,'image.png','http://oss.dblearn.cn/dbblog/20190322/19930afba06f4accb8a32f5b9fd3041c.png'),(64,'image.png','http://oss.dblearn.cn/dbblog/20190322/bbafce804db4480ca6d5b9bcd5ac8b10.png'),(65,'image.png','http://oss.dblearn.cn/dbblog/20190322/38feb67793294a7b805e69c67bebef1b.png'),(66,'虚拟机运行时内存.jpg','http://oss.dblearn.cn/dbblog/20190329/0877647157a34997b9894f379be4acc0.jpg'),(67,'句柄.jpg','http://oss.dblearn.cn/dbblog/20190329/955750a568b244b5b1a7252c7b2c20b3.jpg'),(68,'直接地址.jpg','http://oss.dblearn.cn/dbblog/20190329/1ac920ffd6a44760b6674fb94da4c63c.jpg'),(69,'内存模型.jpeg','http://oss.dblearn.cn/dbblog/20190329/bb2cdd52191d44ada5a420afec9f6d98.jpeg'),(70,'内存模型.jpeg','http://oss.dblearn.cn/dbblog/20190330/5a37f0c04347402f96179b10c27094f1.jpeg'),(71,'image.png','http://oss.dblearn.cn/dbblog/20190330/d98c21f38f8c43d0893d72b9a500afbb.png'),(72,'image.png','http://oss.dblearn.cn/dbblog/20190330/3b120bc955f5436a93db3f834fcff948.png'),(73,'image.png','http://oss.dblearn.cn/dbblog/20190330/d1eed9ed7e494cb09ef3d90b32df4027.png'),(74,'image.png','http://oss.dblearn.cn/dbblog/20190330/2f1a17c6e68148dc9c101d7f4c74939b.png'),(75,'image.png','http://oss.dblearn.cn/dbblog/20190331/3598866d1c2f4516a55243bb041b24c1.png'),(76,'image.png','http://oss.dblearn.cn/dbblog/20190331/271f6ac25d974c168056469ac2204aea.png'),(77,'image.png','http://oss.dblearn.cn/dbblog/20190331/9b0aa7daa9204910a0f5a850054db75f.png'),(78,'image.png','http://oss.dblearn.cn/dbblog/20190331/2bd31358f33e445ab7b1e4d1d5362369.png'),(79,'image.png','http://oss.dblearn.cn/dbblog/20190331/05bd7126248f4721a127555e87436397.png'),(80,'image.png','http://oss.dblearn.cn/dbblog/20190331/6e5ec6ed6df744da8c3fd20075735035.png'),(81,'image.png','http://oss.dblearn.cn/dbblog/20190331/7bc723c38cea41158d2b5856d4b40480.png'),(82,'image.png','http://oss.dblearn.cn/dbblog/20190331/0ef4f757f6b64edd8d60f979ce2bdb80.png'),(83,'image.png','http://oss.dblearn.cn/dbblog/20190331/465b9dab275d452a8a2496abf75bb8f2.png'),(84,'image.png','http://oss.dblearn.cn/dbblog/20190331/999242519f8c42b8800ff626ea3a51c2.png'),(85,'image.png','http://oss.dblearn.cn/dbblog/20190401/81fd97a5c90a4a2c887cab367aca71e5.png'),(86,'image.png','http://oss.dblearn.cn/dbblog/20190401/04d90f98dc7f4fe6839ea4b5c4d15875.png'),(87,'image.png','http://oss.dblearn.cn/dbblog/20190401/fd6b3c05a775453b8a815cd8181b4d62.png'),(88,'image.png','http://oss.dblearn.cn/dbblog/20190402/0a2ce4a657674be799b2dbbaea258c3e.png'),(89,'image.png','http://oss.dblearn.cn/dbblog/20190402/25da9d1d50424256b588f6751428411e.png'),(90,'image.png','http://oss.dblearn.cn/dbblog/20190402/af4ec2e7f51d4c09ae54a008135bc332.png'),(91,'image.png','http://oss.dblearn.cn/dbblog/20190402/89ff0570d9e34b0f81111185080aea82.png'),(92,'image.png','http://oss.dblearn.cn/dbblog/20190403/6c50a389a02942638053bccf43ad95f1.png'),(93,'image.png','http://oss.dblearn.cn/dbblog/20190403/f0370a3126a44466ba5fc3c2a8547828.png'),(94,'image.png','http://oss.dblearn.cn/dbblog/20190403/ca7025df2548434cb5c8889bbb936e80.png'),(95,'image.png','http://oss.dblearn.cn/dbblog/20190403/59f68d4152104892821a01c2a8826b59.png'),(96,'image.png','http://oss.dblearn.cn/dbblog/20190403/bf16c7673f1c41449766e9f0dd356063.png'),(97,'image.png','http://oss.dblearn.cn/dbblog/20190403/ab27ade867ee4358baffe0f4f547bd57.png'),(98,'image.png','http://oss.dblearn.cn/dbblog/20190403/4335831927224ed5bb3ff9a560c4d71f.png'),(99,'image.png','http://oss.dblearn.cn/dbblog/20190403/de18361d03f24aedbf612d382e6826ce.png'),(100,'image.png','http://oss.dblearn.cn/dbblog/20190407/c45a5a69be564260bd7b93c0f42279ba.png'),(101,'image.png','http://oss.dblearn.cn/dbblog/20190407/17ec844670b8481cb4efc86869298211.png'),(102,'image.png','http://oss.dblearn.cn/dbblog/20190407/6243fe7ba7054dc385d9cb7fe908ed86.png'),(103,'image.png','http://oss.dblearn.cn/dbblog/20190407/e9b9d8dbc121434e80d66ba33c6883ee.png'),(104,'image.png','http://oss.dblearn.cn/dbblog/20190407/b896d91f310f471cb0c66f4f9196216d.png'),(105,'image.png','http://oss.dblearn.cn/dbblog/20190407/7d0458480c104d1b9935c1467c4b064d.png'),(106,'image.png','http://oss.dblearn.cn/dbblog/20190407/02dd5b80c40946a8990179ef1e939cdf.png'),(107,'image.png','http://oss.dblearn.cn/dbblog/20190407/520e095697bd4d16bf3b811ab0de29b6.png'),(108,'image.png','http://oss.dblearn.cn/dbblog/20190407/2769f32ee7284845b770da9b75a108b8.png'),(109,'image.png','http://oss.dblearn.cn/dbblog/20190408/04cf29c471cf4457bbc41b6d82d006f8.png'),(110,'image.png','http://oss.dblearn.cn/dbblog/20190408/30728978f0c4432a80606929c2f074a8.png'),(111,'image.png','http://oss.dblearn.cn/dbblog/20190409/f2df8d5c3c1943ed8bcc7adad70ed016.png'),(112,'image.png','http://oss.dblearn.cn/dbblog/20190409/e6ffc0b1d07c41338da377dd7b1e41e7.png'),(113,'image.png','http://oss.dblearn.cn/dbblog/20190409/7051cbbb74a44a80bb53d46f4507b3ee.png'),(114,'image.png','http://oss.dblearn.cn/dbblog/20190409/3223edc307c643bb8279f29b0459a9f2.png'),(115,'image.png','http://oss.dblearn.cn/dbblog/20190409/2820961a8d114cfebc480f2b39fbfaa9.png'),(116,'剑指Offer.png','http://oss.dblearn.cn/dbblog/20190410/1ef815dc6f1944c98b11db41f3c61cc2.png'),(117,'image.png','http://oss.dblearn.cn/dbblog/20190412/97b085d5324f463a89a7dc393df705ea.png'),(118,'image.png','http://oss.dblearn.cn/dbblog/20190412/f3db944cdc464f398fedb8423d98d54b.png'),(119,'image.png','http://oss.dblearn.cn/dbblog/20190415/31a0ff6b8e414b488172eb656001fc26.png'),(120,'image.png','http://oss.dblearn.cn/dbblog/20190415/4b6c60a67f7d4e738786ee446424fb66.png'),(121,'image.png','http://oss.dblearn.cn/dbblog/20190415/19e2e6ba750747cb88e748b85f064cc2.png'),(122,'image.png','http://oss.dblearn.cn/dbblog/20190417/43afb70db79b483ea2f53a18aba245cb.png'),(123,'image.png','http://oss.dblearn.cn/dbblog/20190417/90d288f4a3d64af3bc85201a9a89a384.png'),(124,'image.png','http://oss.dblearn.cn/dbblog/20190418/d32b21ddd2b642e3bcabd31e0fd28110.png'),(125,'image.png','http://oss.dblearn.cn/dbblog/20190418/95e1a3f961bb4e0b97e181bfa45e0db3.png'),(126,'image.png','http://oss.dblearn.cn/dbblog/20190420/9166ec7683314dbca26beec50f5aecb7.png'),(127,'Java多线程编程核心技术.png','http://oss.dblearn.cn/dbblog/20190424/a3e29c011e1b4a45a357e7f45783674b.png'),(128,'10197774.jpg','http://oss.dblearn.cn/dbblog/20190424/feb067d7c05b48aab5c3159894847bd7.jpg'),(129,'image.png','http://oss.dblearn.cn/dbblog/20190424/c2ce4c13b6c14d549f41a62a19cc1662.png'),(130,'image.png','http://oss.dblearn.cn/dbblog/20190424/ee57d08e515648fdb7c462d92db603f4.png'),(131,'image.png','http://oss.dblearn.cn/dbblog/20190425/fd1c17f5eefa4fd7abb1c3cb5bc3d19e.png'),(132,'image.png','http://oss.dblearn.cn/dbblog/20190425/0e55a5e787e14edabd779408cdba3ed2.png'),(133,'image.png','http://oss.dblearn.cn/dbblog/20190425/eaa8de0931094449bdbdbf44d8fb9c74.png'),(134,'image.png','http://oss.dblearn.cn/dbblog/20190425/3ad14ce3aeaf4df9a9e6cdcba50f136d.png'),(135,'image.png','http://oss.dblearn.cn/dbblog/20190425/c09be291c046411d94735ff7ad66ace4.png'),(136,'image.png','http://oss.dblearn.cn/dbblog/20190425/ca3ed04ceb624cafb0e4ee36aa17d1ee.png'),(137,'weixin.jpg','http://oss.dblearn.cn/dbblog/20190524/e499404f597843079fd6700b0b0c2814.jpg'),(138,'weixin.jpg','http://oss.dblearn.cn/dbblog/20190524/507c44753cb8437d8bb0cadb08d1c4fa.jpg'),(139,'image.png','http://oss.dblearn.cn/dbblog/20190714/461d517127104211aee31ba887474800.png'),(140,'image.png','http://oss.dblearn.cn/dbblog/20190720/0799661323f4470e94354bf90531e0ac.png'),(141,'image.png','http://oss.dblearn.cn/dbblog/20190720/a0f49334beaf4b55a18e935277ac9c7b.png'),(142,'image.png','http://oss.dblearn.cn/dbblog/20190722/0b3ca476bec8468096283f4834bd2cf1.png'),(143,'image.png','http://oss.dblearn.cn/dbblog/20190724/4f71fc94e47341e08fe34143dc709b8c.png'),(144,'image.png','http://oss.dblearn.cn/dbblog/20190817/4828e7f8d30d4fc28ba8ce3650bb230a.png'),(145,'image.png','http://oss.dblearn.cn/dbblog/20190817/dd0aa8b6174241a5af518534cadc3fac.png'),(146,'image.png','http://oss.dblearn.cn/dbblog/20190817/67b7445b1f9d437ca750a1b16d45d534.png'),(147,'image.png','http://oss.dblearn.cn/dbblog/20190818/b49eba600b154ecbbd97a8adb7c0afb9.png'),(148,'image.png','http://oss.dblearn.cn/dbblog/20190818/128e4c4980af4af0a6806afb53119199.png'),(149,'image.png','http://oss.dblearn.cn/dbblog/20190818/3791a4f576c64419b3c879d2c5f596f5.png'),(150,'image.png','http://oss.dblearn.cn/dbblog/20190818/185a555d36cd482da0bd3850739863f3.png'),(151,'image.png','http://oss.dblearn.cn/dbblog/20190818/7a58c75b879440a48e896fedbc12fb57.png'),(152,'image.png','http://oss.dblearn.cn/dbblog/20190818/270daa0de2f541c8af36fa337ba64fdb.png'),(153,'image.png','http://oss.dblearn.cn/dbblog/20190818/98942854eef24dfaafb5be8147a09344.png'),(154,'image.png','http://oss.dblearn.cn/dbblog/20190818/83ae38c8d23c4bdbb6b2155733383d3f.png'),(155,'image.png','http://oss.dblearn.cn/dbblog/20190902/6b3dfe2e02a3470993094e50a7773d09.png'),(156,'image.png','http://oss.dblearn.cn/dbblog/20190902/bdd499aab0be4cc28d6c10df577b9540.png'),(157,'image.png','http://oss.dblearn.cn/dbblog/20190902/2a2f0a9782654805b65d526f20aaf01c.png'),(158,'image.png','http://oss.dblearn.cn/dbblog/20190903/a8a003a1642a48368ddfa1286f5b6821.png'),(159,'image.png','http://oss.dblearn.cn/dbblog/20190916/a7edbb90c6284df5b8c94a32c5a55617.png'),(160,'image.png','http://oss.dblearn.cn/dbblog/20190919/281a3226878340a097e55489f1afd453.png'),(161,'image.png','http://oss.dblearn.cn/dbblog/20190919/8319505fb5434989bd5e0839caabbf50.png'),(162,'image.png','http://oss.dblearn.cn/dbblog/20190919/16675c469b6046b5a355774974c14ea5.png'),(163,'image.png','http://oss.dblearn.cn/dbblog/20190919/6dfc47b70017457cb86699f0c441bd52.png'),(164,'image.png','http://oss.dblearn.cn/dbblog/20190921/b4bddaf6d5974d728364a321fa68d191.png'),(165,'image.png','http://oss.dblearn.cn/dbblog/20190921/4febbfebff854dbf8bafc06f9dd0143c.png'),(166,'image.png','http://oss.dblearn.cn/dbblog/20190921/63e144ec2be4459d9fe94deed0b6400a.png'),(167,'image.png','http://oss.dblearn.cn/dbblog/20190921/8acea641f65e48de94390f2febe2c247.png'),(168,'image.png','http://oss.dblearn.cn/dbblog/20190921/edf677553d6b49da91ecd5f45f3d9e60.png'),(169,'image.png','http://oss.dblearn.cn/dbblog/20190921/0ef56d86bdc4433586078345856af8d1.png'),(170,'image.png','http://oss.dblearn.cn/dbblog/20190921/984394c09703448c9e1149da5f657643.png'),(171,'image.png','http://oss.dblearn.cn/dbblog/20190921/01daa67c18d448e7a721df85afa966de.png'),(172,'image.png','http://oss.dblearn.cn/dbblog/20190921/4a2bfbe5e9ac43aa8f21d626a897f100.png'),(173,'image.png','http://oss.dblearn.cn/dbblog/20190922/f4cc5d4aaebd49fd8556406674127d67.png'),(174,'image.png','http://oss.dblearn.cn/dbblog/20190922/b7434b0e5e2345dbbc1f404e76e239ef.png'),(175,'image.png','http://oss.dblearn.cn/dbblog/20190922/e79fd749b4d44acb9656e63b950db052.png'),(176,'image.png','http://oss.dblearn.cn/dbblog/20190922/a547991d1dc4406391f101579656824c.png'),(177,'image.png','http://oss.dblearn.cn/dbblog/20190929/7f16abcc2bb34f1291cdae07c68277c2.png'),(178,'image.png','http://oss.dblearn.cn/dbblog/20190929/ac3821f0d7d84db8b05d55e4ce55d134.png'),(179,'image.png','http://oss.dblearn.cn/dbblog/20191013/09759f59e444406a9276de6befcfd98f.png'),(180,'image.png','http://oss.dblearn.cn/dbblog/20191013/6753410a810148ef914ee62166eba540.png'),(181,'image.png','http://oss.dblearn.cn/dbblog/20191016/739793731fb5434794fea4d267b2468b.png'),(182,'image.png','http://oss.dblearn.cn/dbblog/20191017/af255666a01f4740935a3c1d986638b9.png'),(183,'image.png','http://oss.dblearn.cn/dbblog/20191023/3dd2fc1adcdb401a89457f7608bf7864.png'),(184,'image.png','http://oss.dblearn.cn/dbblog/20191023/9b7dc0a276604c8cbd28d6ce34be8041.png'),(185,'image.png','http://oss.dblearn.cn/dbblog/20191024/cf6cf270ad404bc3a3bb19f704ffeeee.png'),(186,'image.png','http://oss.dblearn.cn/dbblog/20191024/71b96d93296d45eab2fe37c8b776a056.png'),(187,'image.png','http://oss.dblearn.cn/dbblog/20191024/4feeb270c2824814bf729c0b227bf214.png'),(188,'image.png','http://oss.dblearn.cn/dbblog/20191025/696fc75a7bf24bcab274d01bb0dca4c3.png'),(189,'image.png','http://oss.dblearn.cn/dbblog/20191026/33c36d65cdc24e52afedaa7208377b56.png'),(190,'image.png','http://oss.dblearn.cn/dbblog/20191026/046d219e48c845d7b1d8e8a86e26c5cb.png'),(191,'image.png','http://oss.dblearn.cn/dbblog/20191026/8835006c468843e48cd8de308bb0b2ed.png'),(192,'image.png','http://oss.dblearn.cn/dbblog/20191026/811ddc0b15d54c8b8005235ae3b213d5.png'),(193,'image.png','http://oss.dblearn.cn/dbblog/20191027/084440416c9041e89bab5b57c5d2a18e.png'),(194,'image.png','http://oss.dblearn.cn/dbblog/20191027/1821929eea5344a19c62084c2ec5f79e.png'),(195,'image.png','http://oss.dblearn.cn/dbblog/20191027/c8196d7598744a69a8c6cb124bf61c4a.png'),(196,'image.png','http://oss.dblearn.cn/dbblog/20191027/b295bb49d3de48849dc296ba2d098e91.png'),(197,'image.png','http://oss.dblearn.cn/dbblog/20191027/f40cd28a53ae4bd2be4e59531c74ca0d.png'),(198,'image.png','http://oss.dblearn.cn/dbblog/20191027/f01a17a0b3c140e788bca8d3c22e2b51.png'),(199,'image.png','http://oss.dblearn.cn/dbblog/20191027/c86b8639952848fdb13958c123992832.png'),(200,'image.png','http://oss.dblearn.cn/dbblog/20191027/954be643d6c0458db8effd96f5bc51fe.png'),(201,'image.png','http://oss.dblearn.cn/dbblog/20191027/de49126733704863822881a5d29f63bc.png'),(202,'image.png','http://oss.dblearn.cn/dbblog/20191027/a2252306de0b49398cc773087eebcd62.png'),(203,'image.png','http://oss.dblearn.cn/dbblog/20191027/4c0653671aed4b0b8529cad93c366c21.png'),(204,'image.png','http://oss.dblearn.cn/dbblog/20191027/fbf8d0a04d274617b204c0b3d6fcee41.png'),(205,'image.png','http://oss.dblearn.cn/dbblog/20191027/09b48218d0de487fa0f459ae442fba8f.png'),(206,'image.png','http://oss.dblearn.cn/dbblog/20191027/21e18700207346b9807ecb37139c2315.png'),(207,'image.png','http://oss.dblearn.cn/dbblog/20191110/ad55547b28464583bb0458ed92b1c34e.png');
/*!40000 ALTER TABLE `oss_resource` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `recommend`
--

DROP TABLE IF EXISTS `recommend`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `recommend` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `link_id` int(11) DEFAULT NULL COMMENT '推荐的文章Id',
  `type` int(11) DEFAULT NULL COMMENT '推荐类型',
  `order_num` int(11) DEFAULT '0' COMMENT '顺序',
  `title` varchar(100) DEFAULT NULL COMMENT '标题',
  `top` tinyint(1) DEFAULT '0' COMMENT '置顶',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COMMENT='推荐';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `recommend`
--

LOCK TABLES `recommend` WRITE;
/*!40000 ALTER TABLE `recommend` DISABLE KEYS */;
INSERT INTO `recommend` VALUES (3,1,0,1,'关于本站和博主',1),(4,1,2,2,'Java虚拟机01——Java内存数据区域和内存溢出异常',0),(5,13,0,2,'学习SpringAOP前必知的三种代理模式',0),(6,5,0,3,'性能分析利器《Arthas》总结',0),(7,11,0,4,'别再用懒汉模式了——从JVM的角度看单例模式',0);
/*!40000 ALTER TABLE `recommend` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_menu`
--

DROP TABLE IF EXISTS `sys_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sys_menu` (
  `menu_id` bigint(20) DEFAULT NULL,
  `parent_id` bigint(20) DEFAULT NULL,
  `name` tinytext,
  `url` varchar(200) DEFAULT NULL,
  `perms` varchar(500) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `icon` tinytext,
  `order_num` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='菜单管理';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_menu`
--

LOCK TABLES `sys_menu` WRITE;
/*!40000 ALTER TABLE `sys_menu` DISABLE KEYS */;
INSERT INTO `sys_menu` VALUES (1,0,'系统管理',NULL,NULL,0,'config',3),(2,1,'管理员列表','sys/user',NULL,1,'admin',1),(3,1,'角色管理','sys/role',NULL,1,'role',2),(4,1,'菜单管理','sys/menu',NULL,1,'menu',3),(5,1,'SQL监控','http://localhost:8080/dbBlog/druid/sql.html',NULL,1,'config',5),(15,2,'查看',NULL,'sys:user:list,sys:user:info',2,NULL,0),(16,2,'新增',NULL,'sys:user:save,sys:role:select',2,NULL,0),(17,2,'修改',NULL,'sys:user:update,sys:role:select',2,NULL,0),(18,2,'删除',NULL,'sys:user:delete',2,NULL,0),(19,3,'查看',NULL,'sys:role:list,sys:role:info',2,NULL,0),(20,3,'新增',NULL,'sys:role:save,sys:menu:list',2,NULL,0),(21,3,'修改',NULL,'sys:role:update,sys:menu:list',2,NULL,0),(22,3,'删除',NULL,'sys:role:delete',2,NULL,0),(23,4,'查看',NULL,'sys:menu:list,sys:menu:info',2,NULL,0),(24,4,'新增',NULL,'sys:menu:save,sys:menu:select',2,NULL,0),(25,4,'修改',NULL,'sys:menu:update,sys:menu:select',2,NULL,0),(26,4,'删除',NULL,'sys:menu:delete',2,NULL,0),(30,0,'博文管理',NULL,NULL,0,'article',0),(31,30,'新增博文','article/article-add-or-update','article:save,article:update',1,'add',0),(32,30,'博文列表','article/article',NULL,1,'list',0),(33,32,'删除',NULL,'article:delete',2,NULL,0),(34,32,'查看',NULL,'article:list',2,NULL,0),(38,43,'分类管理','operation/category',NULL,1,'category',6),(39,38,'查看',NULL,'operation:category:list,operation:category:info',2,NULL,6),(40,38,'新增',NULL,'operation:category:save',2,NULL,6),(41,38,'修改',NULL,'operation:category:update',2,NULL,6),(42,38,'删除',NULL,'operation:category:delete',2,NULL,6),(43,0,'运营管理',NULL,NULL,0,'operation',2),(45,1,'系统参数','sys/param',NULL,1,'param',4),(46,45,'查看',NULL,'sys:param:list,sys:param:info',2,NULL,6),(47,45,'新增',NULL,'sys:param:save',2,NULL,6),(48,45,'修改',NULL,'sys:param:update',2,NULL,6),(49,45,'删除',NULL,'sys:param:delete',2,NULL,6),(50,43,'标签管理','operation/tag',NULL,1,'tag',6),(51,50,'查看',NULL,'operation:tag:list,operation:tag:info',2,NULL,6),(52,50,'新增',NULL,'operation:tag:save',2,NULL,6),(53,50,'修改',NULL,'operation:tag:update',2,NULL,6),(54,50,'删除',NULL,'operation:tag:delete',2,NULL,6),(61,66,'图书管理','book/book',NULL,1,'list',3),(62,61,'查看',NULL,'book:list,book:info',2,NULL,6),(63,61,'新增',NULL,'book:save',2,NULL,6),(64,61,'修改',NULL,'book:update',2,NULL,6),(65,61,'删除',NULL,'book:delete',2,NULL,6),(66,0,'阅读管理',NULL,NULL,0,'read',1),(67,66,'新增图书','book/book-add-or-update','',1,'add',1),(68,66,'笔记管理','book/note',NULL,1,'list',2),(69,68,'查看',NULL,'book:note:list,book:note:info',2,NULL,6),(70,68,'新增',NULL,'book:note:save',2,NULL,6),(71,68,'修改',NULL,'book:note:update',2,NULL,6),(72,68,'删除',NULL,'book:note:delete',2,NULL,6),(73,66,'新增笔记','book/note-add-or-update','',1,'add',0),(74,43,'友链管理','operation/link',NULL,1,'link',6),(75,74,'查看',NULL,'operation:link:list,operation:link:info',2,NULL,6),(76,74,'新增',NULL,'operation:link:save',2,NULL,6),(77,74,'修改',NULL,'operation:link:update',2,NULL,6),(78,74,'删除',NULL,'operation:link:delete',2,NULL,6),(79,43,'推荐管理','operation/recommend',NULL,1,'recommend',6),(80,79,'查看',NULL,'operation:recommend:list,operation:recommend:info',2,NULL,6),(81,79,'新增',NULL,'operation:recommend:save',2,NULL,6),(82,79,'修改',NULL,'operation:recommend:update',2,NULL,6),(83,79,'删除',NULL,'operation:recommend:delete',2,NULL,6);
/*!40000 ALTER TABLE `sys_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_param`
--

DROP TABLE IF EXISTS `sys_param`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sys_param` (
  `id` int(11) DEFAULT NULL,
  `par_key` int(11) DEFAULT NULL,
  `par_value` varchar(255) DEFAULT NULL,
  `menu_url` varchar(255) DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='系统参数';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_param`
--

LOCK TABLES `sys_param` WRITE;
/*!40000 ALTER TABLE `sys_param` DISABLE KEYS */;
INSERT INTO `sys_param` VALUES (2,0,'一级','/operation-category','CATEGORY_RANK'),(3,1,'二级','/operation-category','CATEGORY_RANK'),(4,2,'三级','/operation-category','CATEGORY_RANK'),(7,0,'小图片','/article-addOrUpdate','ARTICLE_COVER_TYPE'),(8,1,'大图片','/article-addOrUpdate','ARTICLE_COVER_TYPE'),(9,2,'无图片','/article-addOrUpdate','ARTICLE_COVER_TYPE'),(10,0,'文章',NULL,'MODULE_TYPE'),(11,1,'图书',NULL,'MODULE_TYPE'),(12,2,'笔记',NULL,'MODULE_TYPE');
/*!40000 ALTER TABLE `sys_param` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_role`
--

DROP TABLE IF EXISTS `sys_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sys_role` (
  `role_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `role_name` varchar(100) DEFAULT NULL COMMENT '角色名称',
  `remark` varchar(100) DEFAULT NULL COMMENT '备注',
  `create_user_id` bigint(20) DEFAULT NULL COMMENT '创建者ID',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='角色';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_role`
--

LOCK TABLES `sys_role` WRITE;
/*!40000 ALTER TABLE `sys_role` DISABLE KEYS */;
/*!40000 ALTER TABLE `sys_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_role_menu`
--

DROP TABLE IF EXISTS `sys_role_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sys_role_menu` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `role_id` bigint(20) DEFAULT NULL COMMENT '角色ID',
  `menu_id` bigint(20) DEFAULT NULL COMMENT '菜单ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='角色与菜单对应关系';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_role_menu`
--

LOCK TABLES `sys_role_menu` WRITE;
/*!40000 ALTER TABLE `sys_role_menu` DISABLE KEYS */;
/*!40000 ALTER TABLE `sys_role_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_user`
--

DROP TABLE IF EXISTS `sys_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sys_user` (
  `user_id` int(11) DEFAULT NULL,
  `username` tinytext,
  `password` varchar(255) DEFAULT NULL,
  `email` tinytext,
  `salt` tinytext,
  `create_user_id` tinytext,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `status` tinyint(4) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_user`
--

LOCK TABLES `sys_user` WRITE;
/*!40000 ALTER TABLE `sys_user` DISABLE KEYS */;
INSERT INTO `sys_user` VALUES (1,'admin','395670231056bfb65b9ee6fcb5748900c47113e6c036fb156f74250bc18ea0f0','571002217@qq.com','YzcmCZNvbXocrsz9dm8e','1','2019-04-24 11:37:19',1);
/*!40000 ALTER TABLE `sys_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_user_role`
--

DROP TABLE IF EXISTS `sys_user_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sys_user_role` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) DEFAULT NULL COMMENT '用户ID',
  `role_id` bigint(20) DEFAULT NULL COMMENT '角色ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户与角色对应关系';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_user_role`
--

LOCK TABLES `sys_user_role` WRITE;
/*!40000 ALTER TABLE `sys_user_role` DISABLE KEYS */;
/*!40000 ALTER TABLE `sys_user_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL COMMENT '标签名字',
  `type` int(11) DEFAULT NULL COMMENT '所属类别：0文章，1类别',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8mb4 COMMENT='标签';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
INSERT INTO `tag` VALUES (1,'本站相关',0),(2,'关于',0),(3,'Java',1),(4,'JVM',1),(5,'Java',2),(6,'JVM',2),(7,'Java',0),(8,'面试',0),(9,'ElasticSearch',0),(10,'Arthas',0),(11,'写作',0),(12,'leetcode',0),(13,'Spring',0),(14,'设计模式',0),(15,'JVM',0),(16,'算法',1),(17,'面试',1),(18,'多线程',1),(19,'多线程',2),(20,'部署相关',0),(21,'Gitalk',0),(22,'多线程基础',0),(23,'JUC原子类',0),(24,'JUC锁',0),(25,'JUC集合',0),(26,'Java集合',0),(27,'SpringBoot',0),(28,'JUC线程池',0);
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag_link`
--

DROP TABLE IF EXISTS `tag_link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag_link` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `tag_id` int(11) DEFAULT NULL COMMENT '标签Id',
  `link_id` int(11) DEFAULT NULL COMMENT '关联Id',
  `type` int(11) DEFAULT NULL COMMENT '所属类别：0文章，1阅读',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=613 DEFAULT CHARSET=utf8mb4 COMMENT='标签多对多维护表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag_link`
--

LOCK TABLES `tag_link` WRITE;
/*!40000 ALTER TABLE `tag_link` DISABLE KEYS */;
INSERT INTO `tag_link` VALUES (104,7,3,0),(105,8,3,0),(164,9,4,0),(165,7,4,0),(166,10,5,0),(167,11,7,0),(168,13,10,0),(169,14,11,0),(178,5,1,2),(179,6,1,2),(184,6,2,2),(185,5,2,2),(186,7,12,0),(187,15,12,0),(190,13,13,0),(195,6,3,2),(196,5,3,2),(197,12,8,0),(206,5,4,2),(207,6,4,2),(220,5,5,2),(221,6,5,2),(234,16,2,1),(235,17,2,1),(256,5,6,2),(257,6,6,2),(264,5,7,2),(265,6,7,2),(294,5,8,2),(295,6,8,2),(310,5,9,2),(311,6,9,2),(314,3,3,1),(315,18,3,1),(318,5,10,2),(319,19,10,2),(328,20,15,0),(336,21,16,0),(337,3,1,1),(338,4,1,1),(347,7,17,0),(348,22,17,0),(353,7,18,0),(354,22,18,0),(359,7,20,0),(360,22,20,0),(361,7,21,0),(362,22,21,0),(364,7,22,0),(365,22,22,0),(374,7,23,0),(375,22,23,0),(376,7,24,0),(377,22,24,0),(380,7,25,0),(381,22,25,0),(382,7,19,0),(383,22,19,0),(388,7,26,0),(389,23,26,0),(392,7,27,0),(393,23,27,0),(396,7,28,0),(397,23,28,0),(398,1,1,0),(399,2,1,0),(400,7,29,0),(401,23,29,0),(430,7,30,0),(431,23,30,0),(452,7,37,0),(453,24,37,0),(454,7,36,0),(455,24,36,0),(456,7,35,0),(457,24,35,0),(458,7,34,0),(459,24,34,0),(460,7,33,0),(461,24,33,0),(462,7,32,0),(463,24,32,0),(464,7,31,0),(465,24,31,0),(466,7,39,0),(467,25,39,0),(470,7,40,0),(471,26,40,0),(480,7,41,0),(481,26,41,0),(492,7,42,0),(493,26,42,0),(494,7,43,0),(495,26,43,0),(496,7,38,0),(497,24,38,0),(506,26,44,0),(507,7,44,0),(516,7,45,0),(517,26,45,0),(535,26,46,0),(536,7,46,0),(541,7,47,0),(542,27,47,0),(545,7,48,0),(546,26,48,0),(557,7,49,0),(558,24,49,0),(559,7,50,0),(560,28,50,0),(569,7,51,0),(570,28,51,0),(583,7,53,0),(584,28,53,0),(597,7,54,0),(598,28,54,0),(605,7,52,0),(606,28,52,0),(611,7,55,0),(612,28,55,0);
/*!40000 ALTER TABLE `tag_link` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-11-11 18:35:01
